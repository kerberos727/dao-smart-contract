{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "BeneficiaryAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "BeneficiaryClaim",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "BeneficiaryJoined",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "BeneficiaryLocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldOriginalClaimAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMaxTotalClaim",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldDecreaseStep",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldBaseInterval",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldIncrementInterval",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newOriginalClaimAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMaxTotalClaim",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDecreaseStep",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBaseInterval",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newIncrementInterval",
						"type": "uint256"
					}
				],
				"name": "BeneficiaryParamsUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "BeneficiaryRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "BeneficiaryUnlocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldClaimAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newClaimAmount",
						"type": "uint256"
					}
				],
				"name": "ClaimAmountUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldCommunityAdmin",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newCommunityAdmin",
						"type": "address"
					}
				],
				"name": "CommunityAdminUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					}
				],
				"name": "CommunityLocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMinTranche",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMaxTranche",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMinTranche",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMaxTranche",
						"type": "uint256"
					}
				],
				"name": "CommunityParamsUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					}
				],
				"name": "CommunityUnlocked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "donor",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Donate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					}
				],
				"name": "FundsRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "ManagerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "ManagerRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMaxBeneficiaries",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMaxBeneficiaries",
						"type": "uint256"
					}
				],
				"name": "MaxBeneficiariesUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldPreviousCommunity",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newPreviousCommunity",
						"type": "address"
					}
				],
				"name": "PreviousCommunityUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldTokenAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newTokenAddress",
						"type": "address"
					}
				],
				"name": "TokenUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TransferERC20",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_token",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					}
				],
				"name": "addBeneficiaries",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_expirationTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "addBeneficiariesUsingSignature",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "addBeneficiary",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "addManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "addTreasuryFunds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "baseInterval",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "beneficiaries",
				"outputs": [
					{
						"internalType": "enum ICommunity.BeneficiaryState",
						"name": "state",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "claims",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "claimedAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastClaim",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "beneficiaryClaimedAmounts",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "claimedAmounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "beneficiaryJoinFromMigrated",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index_",
						"type": "uint256"
					}
				],
				"name": "beneficiaryListAt",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "beneficiaryListLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cUSD",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "claimCooldown",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "communityAdmin",
				"outputs": [
					{
						"internalType": "contract ICommunityAdmin",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decreaseStep",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "donate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getInitialMaxClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getInitialMaxTotalClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVersion",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "incrementInterval",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_managers",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_originalClaimAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxTotalClaim",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_decreaseStep",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_baseInterval",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_incrementInterval",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_minTranche",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxTranche",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxBeneficiaries",
						"type": "uint256"
					},
					{
						"internalType": "contract ICommunity",
						"name": "_previousCommunity",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isSelfFunding",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastFundRequest",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "lastInterval",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					}
				],
				"name": "lockBeneficiaries",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_expirationTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "lockBeneficiariesUsingSignature",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "lockBeneficiary",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "locked",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxBeneficiaries",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxTotalClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxTranche",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minTranche",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "originalClaimAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "previousCommunity",
				"outputs": [
					{
						"internalType": "contract ICommunity",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "privateFunds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					}
				],
				"name": "removeBeneficiaries",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_expirationTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "removeBeneficiariesUsingSignature",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "removeBeneficiary",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "removeManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requestFunds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "tokens",
				"outputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "ratio",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startBlock",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokensLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "treasuryFunds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					}
				],
				"name": "unlockBeneficiaries",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_beneficiaryAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_expirationTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "unlockBeneficiariesUsingSignature",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiaryAddress",
						"type": "address"
					}
				],
				"name": "unlockBeneficiary",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_originalClaimAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxTotalClaim",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_decreaseStep",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_baseInterval",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_incrementInterval",
						"type": "uint256"
					}
				],
				"name": "updateBeneficiaryParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ICommunityAdmin",
						"name": "_newCommunityAdmin",
						"type": "address"
					}
				],
				"name": "updateCommunityAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_minTranche",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxTranche",
						"type": "uint256"
					}
				],
				"name": "updateCommunityParams",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newMaxBeneficiaries",
						"type": "uint256"
					}
				],
				"name": "updateMaxBeneficiaries",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ICommunity",
						"name": "_newPreviousCommunity",
						"type": "address"
					}
				],
				"name": "updatePreviousCommunity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_newToken",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "_exchangePath",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_originalClaimAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxTotalClaim",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_decreaseStep",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_baseInterval",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_incrementInterval",
						"type": "uint256"
					}
				],
				"name": "updateToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "validBeneficiaryCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"BeneficiaryAdded(address,address)": {
					"params": {
						"beneficiary": "Address of the beneficiary that has been added",
						"manager": "Address of the manager that triggered the event"
					}
				},
				"BeneficiaryClaim(address,uint256)": {
					"params": {
						"amount": "Amount of the claim",
						"beneficiary": "Address of the beneficiary that has claimed"
					}
				},
				"BeneficiaryJoined(address)": {
					"params": {
						"beneficiary": "Address of the beneficiary"
					}
				},
				"BeneficiaryLocked(address,address)": {
					"params": {
						"beneficiary": "Address of the beneficiary that has been locked",
						"manager": "Address of the manager that triggered the event"
					}
				},
				"BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
					"params": {
						"newBaseInterval": "New baseInterval value",
						"newDecreaseStep": "New decreaseStep value",
						"newIncrementInterval": "New incrementInterval value For further information regarding each parameter, see *Community* smart contract initialize method.",
						"newMaxTotalClaim": "New maxTotalClaim value",
						"newOriginalClaimAmount": "New originalClaimAmount value",
						"oldBaseInterval": "Old baseInterval value",
						"oldDecreaseStep": "Old decreaseStep value",
						"oldIncrementInterval": "Old incrementInterval value",
						"oldMaxTotalClaim": "Old maxTotalClaim value",
						"oldOriginalClaimAmount": "Old originalClaimAmount value"
					}
				},
				"BeneficiaryRemoved(address,address)": {
					"params": {
						"beneficiary": "Address of the beneficiary that has been removed",
						"manager": "Address of the manager that triggered the event"
					}
				},
				"BeneficiaryUnlocked(address,address)": {
					"params": {
						"beneficiary": "Address of the beneficiary that has been unlocked",
						"manager": "Address of the manager that triggered the event"
					}
				},
				"ClaimAmountUpdated(uint256,uint256)": {
					"params": {
						"newClaimAmount": "New claimAmount value",
						"oldClaimAmount": "Old claimAmount value"
					}
				},
				"CommunityAdminUpdated(address,address)": {
					"params": {
						"newCommunityAdmin": "New communityAdmin address",
						"oldCommunityAdmin": "Old communityAdmin address"
					}
				},
				"CommunityLocked(address)": {
					"params": {
						"manager": "Address of the manager that triggered the event"
					}
				},
				"CommunityParamsUpdated(uint256,uint256,uint256,uint256)": {
					"params": {
						"newMaxTranche": "New maxTranche value For further information regarding each parameter, see *Community* smart contract initialize method.",
						"newMinTranche": "New minTranche value",
						"oldMaxTranche": "Old maxTranche value",
						"oldMinTranche": "Old minTranche value"
					}
				},
				"CommunityUnlocked(address)": {
					"params": {
						"manager": "Address of the manager that triggered the event"
					}
				},
				"Donate(address,uint256)": {
					"params": {
						"amount": "Amount of the donation",
						"donor": "Address of the donor"
					}
				},
				"FundsRequested(address)": {
					"params": {
						"manager": "Address of the manager that triggered the event"
					}
				},
				"ManagerAdded(address,address)": {
					"params": {
						"account": "Address of the manager that has been added",
						"manager": "Address of the manager that triggered the event                          or address of the CommunityAdmin if it's first manager"
					}
				},
				"ManagerRemoved(address,address)": {
					"params": {
						"account": "Address of the manager that has been removed",
						"manager": "Address of the manager that triggered the event"
					}
				},
				"MaxBeneficiariesUpdated(uint256,uint256)": {
					"params": {
						"newMaxBeneficiaries": "New maxBeneficiaries value",
						"oldMaxBeneficiaries": "Old maxBeneficiaries value"
					}
				},
				"PreviousCommunityUpdated(address,address)": {
					"params": {
						"newPreviousCommunity": "New previousCommunity address",
						"oldPreviousCommunity": "Old previousCommunity address"
					}
				},
				"TokenUpdated(address,address)": {
					"params": {
						"newTokenAddress": "New token address",
						"oldTokenAddress": "Old token address"
					}
				},
				"TransferERC20(address,address,uint256)": {
					"params": {
						"amount": "Amount of the transaction",
						"to": "Address of the receiver",
						"token": "ERC20 token address"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addBeneficiaries(address[])": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be added"
					}
				},
				"addBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be added",
						"_expirationTimestamp": "timestamp when the signature will expire/expired",
						"_signature": "the signature of a manager"
					}
				},
				"addBeneficiary(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary to be added"
					}
				},
				"addManager(address)": {
					"params": {
						"_account": "address of the manager to be added"
					}
				},
				"addTreasuryFunds(uint256)": {
					"params": {
						"_amount": "amount to be added to treasuryFunds"
					}
				},
				"beneficiaries(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary"
					},
					"returns": {
						"claimedAmount": "        the amount he has claimed",
						"claims": "               how many times the beneficiary has claimed",
						"lastClaim": "            block number of the last claim",
						"state": "                the status of the beneficiary"
					}
				},
				"beneficiaryClaimedAmounts(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary"
					},
					"returns": {
						"claimedAmounts": "       a uint256 array with all claimed amounts in the same order as tokenList array"
					}
				},
				"beneficiaryListAt(uint256)": {
					"params": {
						"index_": "index value"
					},
					"returns": {
						"_0": "address of the beneficiary"
					}
				},
				"claim()": {
					"details": "Transfers tokens to a valid beneficiary"
				},
				"claimCooldown(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary"
					},
					"returns": {
						"_0": "uint256 number of block when the beneficiary can claim"
					}
				},
				"donate(address,uint256)": {
					"params": {
						"_amount": "amount to be donated",
						"_sender": "address of the sender"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"initialize(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": {
					"params": {
						"_baseInterval": "Base interval to start claiming",
						"_decreaseStep": "Value decreased from maxTotalClaim each time a beneficiary is added",
						"_incrementInterval": "Increment interval used in each claim",
						"_managers": "Community's initial managers                             Will be able to add others",
						"_maxBeneficiaries": "Maximum valid beneficiaries number",
						"_maxTotalClaim": "Limit that a beneficiary can claim in total",
						"_maxTranche": "Maximum amount that the community will receive when requesting funds",
						"_minTranche": "Minimum amount that the community will receive when requesting funds",
						"_originalClaimAmount": "Maximum base amount to be claim by the beneficiary",
						"_previousCommunity": "Previous smart contract address of community",
						"_tokenAddress": "Address of the token used by the community"
					}
				},
				"lastInterval(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary"
					},
					"returns": {
						"_0": "uint256 number of blocks for the lastInterval"
					}
				},
				"lockBeneficiaries(address[])": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be locked"
					}
				},
				"lockBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be locked",
						"_expirationTimestamp": "timestamp when the signature will expire/expired",
						"_signature": "the signature of a manager"
					}
				},
				"lockBeneficiary(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary to be locked"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeBeneficiaries(address[])": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be removed"
					}
				},
				"removeBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be removed",
						"_expirationTimestamp": "timestamp when the signature will expire/expired",
						"_signature": "the signature of a manager"
					}
				},
				"removeBeneficiary(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary to be removed"
					}
				},
				"removeManager(address)": {
					"params": {
						"_account": "address of the manager to be removed"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"transfer(address,address,uint256)": {
					"params": {
						"_amount": "amount of the transaction",
						"_to": "address of the receiver",
						"_token": "address of the ERC20 token"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unlockBeneficiaries(address[])": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be unlocked"
					}
				},
				"unlockBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"params": {
						"_beneficiaryAddresses": "addresses of the beneficiaries to be unlocked",
						"_expirationTimestamp": "timestamp when the signature will expire/expired",
						"_signature": "the signature of a manager"
					}
				},
				"unlockBeneficiary(address)": {
					"params": {
						"_beneficiaryAddress": "address of the beneficiary to be unlocked"
					}
				},
				"updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)": {
					"params": {
						"_baseInterval": "base interval to start claiming",
						"_decreaseStep": "value decreased from maxTotalClaim each time a is beneficiary added",
						"_incrementInterval": "increment interval used in each claim",
						"_maxTotalClaim": "limit that a beneficiary can claim  in total",
						"_originalClaimAmount": "maximum base amount to be claim by the beneficiary"
					}
				},
				"updateCommunityAdmin(address)": {
					"params": {
						"_newCommunityAdmin": "address of the new communityAdmin"
					}
				},
				"updateCommunityParams(uint256,uint256)": {
					"params": {
						"_maxTranche": "maximum amount that the community will receive when requesting funds",
						"_minTranche": "minimum amount that the community will receive when requesting funds"
					}
				},
				"updateMaxBeneficiaries(uint256)": {
					"params": {
						"_newMaxBeneficiaries": "new _maxBeneficiaries value"
					}
				},
				"updatePreviousCommunity(address)": {
					"params": {
						"_newPreviousCommunity": "address of the new previousCommunity"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"BeneficiaryAdded(address,address)": {
					"notice": "Triggered when a beneficiary has been added"
				},
				"BeneficiaryClaim(address,uint256)": {
					"notice": "Triggered when a beneficiary has claimed"
				},
				"BeneficiaryJoined(address)": {
					"notice": "Triggered when a beneficiary from previous community has joined in the current community"
				},
				"BeneficiaryLocked(address,address)": {
					"notice": "Triggered when a beneficiary has been locked"
				},
				"BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
					"notice": "Triggered when beneficiary params has been updated"
				},
				"BeneficiaryRemoved(address,address)": {
					"notice": "Triggered when a beneficiary has been removed"
				},
				"BeneficiaryUnlocked(address,address)": {
					"notice": "Triggered when a beneficiary has been unlocked"
				},
				"ClaimAmountUpdated(uint256,uint256)": {
					"notice": "Triggered when claimAmount has been changed"
				},
				"CommunityAdminUpdated(address,address)": {
					"notice": "Triggered when communityAdmin has been updated"
				},
				"CommunityLocked(address)": {
					"notice": "Triggered when a community has been locked"
				},
				"CommunityParamsUpdated(uint256,uint256,uint256,uint256)": {
					"notice": "Triggered when community params has been updated"
				},
				"CommunityUnlocked(address)": {
					"notice": "Triggered when a community has been unlocked"
				},
				"Donate(address,uint256)": {
					"notice": "Triggered when someone has donated token"
				},
				"FundsRequested(address)": {
					"notice": "Triggered when a manager has requested funds for community"
				},
				"ManagerAdded(address,address)": {
					"notice": "Triggered when a manager has been added"
				},
				"ManagerRemoved(address,address)": {
					"notice": "Triggered when a manager has been removed"
				},
				"MaxBeneficiariesUpdated(uint256,uint256)": {
					"notice": "Triggered when maxBeneficiaries has been updated"
				},
				"PreviousCommunityUpdated(address,address)": {
					"notice": "Triggered when previousCommunity has been updated"
				},
				"TokenUpdated(address,address)": {
					"notice": "Triggered when token address has been updated"
				},
				"TransferERC20(address,address,uint256)": {
					"notice": "Triggered when an amount of an ERC20 has been transferred from this contract to an address"
				}
			},
			"kind": "user",
			"methods": {
				"addBeneficiaries(address[])": {
					"notice": "Adds new beneficiaries"
				},
				"addBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"notice": "Adds new beneficiaries using a manager signature"
				},
				"addBeneficiary(address)": {
					"notice": "Adds a new beneficiary"
				},
				"addManager(address)": {
					"notice": "Adds a new manager"
				},
				"addTreasuryFunds(uint256)": {
					"notice": "Increases the treasuryFunds value Used by communityAdmin after an amount of tokens are sent from the treasury"
				},
				"beneficiaries(address)": {
					"notice": "Returns the data of a beneficiary"
				},
				"beneficiaryClaimedAmounts(address)": {
					"notice": "Returns the beneficiary's claimed amounts for each token"
				},
				"beneficiaryJoinFromMigrated(address)": {
					"notice": "Allows a beneficiary from the previousCommunity to join in this community"
				},
				"beneficiaryListAt(uint256)": {
					"notice": "Returns an address from the beneficiaryList"
				},
				"beneficiaryListLength()": {
					"notice": "Returns the length of the beneficiaryList"
				},
				"cUSD()": {
					"notice": "Returns the cUSD contract address todo: to be removed, use token() instead"
				},
				"claimCooldown(address)": {
					"notice": "Returns the block number when a beneficiary can claim again"
				},
				"donate(address,uint256)": {
					"notice": "Transfers tokens from donor to this community Used by donationToCommunity method from DonationMiner contract"
				},
				"getInitialMaxClaim()": {
					"notice": "Returns the initial maxTotalClaim todo: do be deleted after updating all communities to v3"
				},
				"getInitialMaxTotalClaim()": {
					"notice": "Returns the initial maxTotalClaim"
				},
				"getVersion()": {
					"notice": "Returns the current implementation version"
				},
				"grantRole(bytes32,address)": {
					"notice": "Enforces managers to use addManager method"
				},
				"initialize(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": {
					"notice": "Used to initialize a new Community contract"
				},
				"lastInterval(address)": {
					"notice": "Returns the number of blocks that a beneficiary have to wait between claims"
				},
				"lock()": {
					"notice": "Locks the community"
				},
				"lockBeneficiaries(address[])": {
					"notice": "Locks a list of beneficiaries"
				},
				"lockBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"notice": "Locks a list of beneficiaries using a manager signature"
				},
				"lockBeneficiary(address)": {
					"notice": "Locks a valid beneficiary"
				},
				"maxClaim()": {
					"notice": "Returns the amount that can be claimed by a beneficiary in total todo: remove it after the frontend is updated to the new function: maxTotalClaim()"
				},
				"removeBeneficiaries(address[])": {
					"notice": "Removes a list of beneficiaries"
				},
				"removeBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"notice": "Removes a list of beneficiaries using a manager signature"
				},
				"removeBeneficiary(address)": {
					"notice": "Remove an existing beneficiary"
				},
				"removeManager(address)": {
					"notice": "Remove an existing manager"
				},
				"requestFunds()": {
					"notice": "Requests treasury funds from the communityAdmin"
				},
				"revokeRole(bytes32,address)": {
					"notice": "Enforces managers to use removeManager method"
				},
				"token()": {
					"notice": "Returns the address of the token used by this community"
				},
				"tokensLength()": {
					"notice": "Returns the length of the tokenList"
				},
				"transfer(address,address,uint256)": {
					"notice": "Transfers an amount of an ERC20 from this contract to an address"
				},
				"unlock()": {
					"notice": "Unlocks the community"
				},
				"unlockBeneficiaries(address[])": {
					"notice": "Unlocks a list of beneficiaries"
				},
				"unlockBeneficiariesUsingSignature(address[],uint256,bytes)": {
					"notice": "Unlocks a list of beneficiaries using a manager signature"
				},
				"unlockBeneficiary(address)": {
					"notice": "Unlocks a locked beneficiary"
				},
				"updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)": {
					"notice": "Updates beneficiary paramsbe aware that max claim will not be the same with the value you've provided             maxTotalClaim = _maxTotalClaim - validBeneficiaryCount * _decreaseStep"
				},
				"updateCommunityAdmin(address)": {
					"notice": "Updates the address of the communityAdmin"
				},
				"updateCommunityParams(uint256,uint256)": {
					"notice": "Updates params of a community"
				},
				"updateMaxBeneficiaries(uint256)": {
					"notice": "Updates maxBeneficiaries"
				},
				"updatePreviousCommunity(address)": {
					"notice": "Updates the address of the previousCommunity"
				},
				"updateToken(address,address[],uint256,uint256,uint256,uint256,uint256)": {
					"notice": "Updates token address   !!!!!! you must be careful about _maxTotalClaim value. This value determines all beneficiaries claimedAmounts"
				}
			},
			"notice": "Welcome to the Community contract. For each community there will be one proxy contract deployed by CommunityAdmin. The implementation of the proxy is this contract. This enable us to save tokens on the contract itself, and avoid the problems of having everything in one single contract. Each community has it's own members and and managers.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/community/CommunityImplementation.sol": "CommunityImplementation"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
			"keccak256": "0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c",
			"license": "MIT",
			"urls": [
				"bzz-raw://5283b4ea94e317e38f9bae371b2c269e7d9748c460973602c2a6845d5f35c7c3",
				"dweb:/ipfs/QmSGz3goZddFLH2HqUD81o2L5ZVrpwTchidGtFdLkwQqTE"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
			"keccak256": "0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa",
			"license": "MIT",
			"urls": [
				"bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c",
				"dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b",
			"license": "MIT",
			"urls": [
				"bzz-raw://a4d3a7c2729f266c54345044baf1080fb4a85208059cacea28c95622af4371db",
				"dweb:/ipfs/QmcHCX8reksSoQWjjYRcVoEHckz8AQ7CHKiKfzocpQq3Lg"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097",
			"license": "MIT",
			"urls": [
				"bzz-raw://5beb2713aca05976562500789329e8c41320d00bd68ea9247856ec73894c3e3f",
				"dweb:/ipfs/QmQKwkpofsZYAzMZs7uNL7Qq58zVBuhoZCGpD6bJdUwyqy"
			]
		},
		"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://2be836e0695ca8a93f81a4bb6a7f74469ba97fb6e33948739c7f65a5f4110e4f",
				"dweb:/ipfs/QmTcsEpD8XJHtA5vjJ2mbrgYyDYQoMF3zuAEMTu6KFSXjX"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb",
			"license": "MIT",
			"urls": [
				"bzz-raw://439a76e6c35f75a7253f1ff68c99f399094233b0ddecac6bd19093f0d18980c4",
				"dweb:/ipfs/QmYGY3jR6A4k8KWzHjGG249EWR6KtoENzdPGv6MZRFhdEW"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
			"keccak256": "0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca7bd5deecc4abd97f0218708c6e004953971cc62de68557fe0c6c8607f85a65",
				"dweb:/ipfs/QmRw3dGdS6ksHZiqcPRknYvWXfYP2hTj21PhkLjXyEVEf6"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://69bf7d357ce97852f4fb71045919b1bb2c0ad0c820e3f06b9dd4451b2dc5a343",
				"dweb:/ipfs/QmWt96ZviufDu2qqS7Ln6UCJjfLyoFKbo6YKn54ao3o94z"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7",
			"license": "MIT",
			"urls": [
				"bzz-raw://d8a3d42f1333d4224b7e6b7914e7ef5ee6d86586a3529bd1da15cbeece0d25b3",
				"dweb:/ipfs/QmXmFqePuCWzBcz9KyBepE7joHMg8jSjcmd5iayyG7jm3y"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
			"keccak256": "0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b268304e03daf22c349abe3c318bc6a6badd6542d62311716ab401eec745f78",
				"dweb:/ipfs/QmNYy2sc2RoTjDhyT6HAibmeDGqfhDiDpsWRbHFHoGVHLr"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a",
			"license": "MIT",
			"urls": [
				"bzz-raw://16a9a1816c3dd4130b7836c42482d455075a9a49c7895bfb788ca3d345c82b32",
				"dweb:/ipfs/QmRxf3UetfDEF8NPuMQ1U8f9cddQpdarhCBhaCXEbe7Kw6"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981",
				"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
			"keccak256": "0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://4f5abfc32db1d44fd3d38d902879eaeaad827781bb9f954d3ccb8639c55db3c0",
				"dweb:/ipfs/QmVSkxFgWphaUx6w9XdvgwJJuxABdpuVQEbABbRmzd3XFc"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
			"keccak256": "0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79",
			"license": "MIT",
			"urls": [
				"bzz-raw://833509a221a8d8dace9e028ac40e95c941b4c91b5dcbe921988578c48dc72e81",
				"dweb:/ipfs/QmX3V2Uk7VU9ARiKHLFGQW5RL6sZS74TrjpSuSPkyRgK2D"
			]
		},
		"@openzeppelin/contracts/proxy/Proxy.sol": {
			"keccak256": "0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd",
			"license": "MIT",
			"urls": [
				"bzz-raw://5823895b53df825121a25dd11a73eb4595c24d20a11c5013e6dda6fd0cd53463",
				"dweb:/ipfs/QmbD8ozmp9DHQ8Es4ZRUKYz8KZSGnwBnVyHmJ9Yf7rYSoZ"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61",
			"license": "MIT",
			"urls": [
				"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354",
				"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"
			]
		},
		"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
			"keccak256": "0x33b8603bfbef7f33d9308b79c79aa3db7eb19525fd1addd764285e834ca275d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ada1f59ac012751561c8fa066bddf1a8fb518fcb0ea2d64920797c1711aad0c",
				"dweb:/ipfs/QmTrY13qevgKDUAyQhFvMNLvbLuWaQprvDzvLdXWQwnoxA"
			]
		},
		"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
			"keccak256": "0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253",
			"license": "MIT",
			"urls": [
				"bzz-raw://a3110d13fd267ac03d3cf9611198971db0d12ed2bc0538cddef286090987461f",
				"dweb:/ipfs/QmWPynjSTgd72fRxeX3huVN9GLNLWijFvoVpJMKNESkPb3"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b",
				"dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4",
			"license": "MIT",
			"urls": [
				"bzz-raw://997ca03557985b3c6f9143a18b6c3a710b3bc1c7f189ee956d305a966ecfb922",
				"dweb:/ipfs/QmQaD3Wb62F88SHqmpLttvF6wKuPDQep2LLUcKPekeRzvz"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://dbaba7fe0fe556cc5ed291e03d271fd27d395250141ecfb57a4b30d528958ff9",
				"dweb:/ipfs/QmWT653X2DyZo8nqEcmFe3yTkrCJv3ptbZLhbgLU3y6abe"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45",
			"license": "MIT",
			"urls": [
				"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30",
				"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c1e25b64dd48a67832ea99b2f5b3cb18ed8ada44e0391ed896d7a293200df3b",
				"dweb:/ipfs/Qmd4nwBHmB7An2MmebcagkTx2m5mRGZPR32u1xCHqEKerh"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad2f29a9c17a4f746416c9e254e17671f43c409dbfa6e4d7d76c3e4a83212d31",
				"dweb:/ipfs/QmTqU65L6iu6yqmXKzcNLPioR8etzKPWycpDJCm17ifVdS"
			]
		},
		"contracts/ambassadors/interfaces/IAmbassadors.sol": {
			"keccak256": "0x18994047358b59b9925a303741d094f0543574874ff716b740a8165172c6ebf5",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://ecb4e501e99d6d81e1e830822371367e578ce31d75db49031386cdaa370081b6",
				"dweb:/ipfs/QmeQm6CaMCodJDqBNFjcg4fFug9cxmB68F1egwSkqqUmsF"
			]
		},
		"contracts/community/CommunityImplementation.sol": {
			"keccak256": "0xb7202779b5dfef4078898f86b11f56bd31b1270c17d1f33df43de4505ccf7897",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f3e6a36965c7e9e6d2831377773ec0de8e6453b741a9bc03c60bd1c9e1d15d05",
				"dweb:/ipfs/QmTtSGgQaYHUhS1ZVYupLKZXR2vaUBnxhbzFFB7ecEsFhR"
			]
		},
		"contracts/community/interfaces/CommunityStorageV1.sol": {
			"keccak256": "0x0d1cc6bb60bd5881963694ea0f916beac6cbfbfb33c18f36934aaf799593c8d4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://ae2826f7a1f339832689dbf2bb6ceacee4e09ec2e14928ea568f8f2c78b4cb33",
				"dweb:/ipfs/QmY8Bm14sWjryRGwiLMo3AZeDgM3Ni1Q6QCjmSXdA7Aqb3"
			]
		},
		"contracts/community/interfaces/CommunityStorageV2.sol": {
			"keccak256": "0x197ffd4338d95850cf9d40063e00468bacb8068c3506a47d41a3aac93738e6d9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://2b49f45f54380ba6af9ff53048fc6c267117dfd70ff041487e6530eca305bc92",
				"dweb:/ipfs/Qmcs7H3XsJUM6tVgwgrvGJUViXkiRD1D32UKA9hseMepWZ"
			]
		},
		"contracts/community/interfaces/CommunityStorageV3.sol": {
			"keccak256": "0xf361bef3875f1ee9671558ca87997e671262dab1dc0456459b1521349d202ce4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://79615e1659cba2300430a7aae080b2091e1cf5be08d16abbbd4feb3328e8504e",
				"dweb:/ipfs/QmQ3frhjX1EW52rjXDbR94RqzeUAJNpLz4LRoshe8sbYGq"
			]
		},
		"contracts/community/interfaces/ICommunity.sol": {
			"keccak256": "0x3639fe60b522c5fa60ae4ac1732fb71c9a0e6bc5ed90303fa7d09be153ad5747",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://161c90b4ec7912bb257c7af0887ecc29e83e0b23b1771c2fcb9b28622e2ee572",
				"dweb:/ipfs/QmfNE26WYWPXDy5VJ7zGCJ1c6bao7UT1pKKgheYRGYKUUp"
			]
		},
		"contracts/community/interfaces/ICommunityAdmin.sol": {
			"keccak256": "0xe855bde26fcfc27ec6d84866c7da0ba8368190b69190a4586f557ad239e5793b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c00d343a0d7ee0c03e344e11721adb45f3ece01bd219c4157c2f0b59a77f5834",
				"dweb:/ipfs/QmVnZL13GnZXyXqW7jz441joLPapa4N6U5N6Ueh8pH5UTc"
			]
		},
		"contracts/governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol": {
			"keccak256": "0xf882b16cf7612ec887ab2a513d05b318deed39e3dfa0ea7875980ff49921f874",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a55cdc463f83ed01f2abc47bdfe8d50ca1e37fa4bda2d54fc8be51f4e1c99502",
				"dweb:/ipfs/QmNu9HEF1rt9q8A49DtmT4SQnFUmJabynrSb51AcNmtukg"
			]
		},
		"contracts/treasury/interfaces/ITreasury.sol": {
			"keccak256": "0xcf75887afcbea0d2116e2f8f374506989d3d7d0f2417a2d6914a67b7c83ab682",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://4b8d5eb35893eada1ba1f21dc61881017be9c62a422afbaad9d17b53b83c38ef",
				"dweb:/ipfs/Qmf3L3p6K6eCuUP9QSh7ss9LQj9pZdfuvE41LaeJUwSUtW"
			]
		},
		"contracts/treasury/interfaces/IUniswapV2Router.sol": {
			"keccak256": "0x5a12eebf4cf3741e1b1a30a4315096ae6d545af2e07a92e544d05739ceb811e9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://28bbed43e0a2b3fdee31bfec78d7e1d065b06192ddd2cd6a1248c3a769cf5248",
				"dweb:/ipfs/QmX68P9mnJGcyGd6ZYygXB7X1moVincEkUn6Df9KmUKWz3"
			]
		},
		"hardhat/console.sol": {
			"keccak256": "0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://a8cb8681076e765c214e0d51cac989325f6b98e315eaae06ee0cbd5a9f084763",
				"dweb:/ipfs/QmNWGHi4zmjxQTYN3NMGnJd49jBT5dE4bxTdWEaDuJrC6N"
			]
		}
	},
	"version": 1
}