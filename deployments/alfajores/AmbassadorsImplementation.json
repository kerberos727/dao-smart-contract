{
  "address": "0x8cb73d779DBfEb3f6D05655b1C8855fF47edB110",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ambassadorIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "entityAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAccount",
          "type": "address"
        }
      ],
      "name": "AmbassadorAccountReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ambassador",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "AmbassadorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ambassador",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "AmbassadorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ambassadorIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "entityAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAmbassador",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAmbassador",
          "type": "address"
        }
      ],
      "name": "AmbassadorReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAmbassador",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAmbassador",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "community",
          "type": "address"
        }
      ],
      "name": "AmbassadorToCommunityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ambassador",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldEntity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEntity",
          "type": "address"
        }
      ],
      "name": "AmbassadorTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ambassador",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "community",
          "type": "address"
        }
      ],
      "name": "CommunityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entityIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAccount",
          "type": "address"
        }
      ],
      "name": "EntityAccountReplaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "EntityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "entity",
          "type": "address"
        }
      ],
      "name": "EntityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        }
      ],
      "name": "addAmbassador",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entity",
          "type": "address"
        }
      ],
      "name": "addEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ambassadorByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ambassadorByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ambassadorIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ambassadorToEntity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityAdmin",
      "outputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "communityToAmbassador",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "entityAmbassadors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entityByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "entityByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "_communityAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        }
      ],
      "name": "isAmbassador",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_entityAddress",
          "type": "address"
        }
      ],
      "name": "isAmbassadorAt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_community",
          "type": "address"
        }
      ],
      "name": "isAmbassadorOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_community",
          "type": "address"
        }
      ],
      "name": "isEntityOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        }
      ],
      "name": "removeAmbassador",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_community",
          "type": "address"
        }
      ],
      "name": "removeCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entity",
          "type": "address"
        }
      ],
      "name": "removeEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldAmbassador",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAmbassador",
          "type": "address"
        }
      ],
      "name": "replaceAmbassador",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAmbassador",
          "type": "address"
        }
      ],
      "name": "replaceAmbassadorAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newEntity",
          "type": "address"
        }
      ],
      "name": "replaceEntityAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_community",
          "type": "address"
        }
      ],
      "name": "setCommunityToAmbassador",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ambassador",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toEntity",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_keepCommunities",
          "type": "bool"
        }
      ],
      "name": "transferAmbassador",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_community",
          "type": "address"
        }
      ],
      "name": "transferCommunityToAmbassador",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "_newCommunityAdmin",
          "type": "address"
        }
      ],
      "name": "updateCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfcddd3f2c0facfd62eb5eefcf83518aeff5867839d1b8cb23c5c6b69c4a4ab10",
  "receipt": {
    "to": null,
    "from": "0xa34737409091eBD0726A3Ab5863Fc7Ee9243Edab",
    "contractAddress": "0x8cb73d779DBfEb3f6D05655b1C8855fF47edB110",
    "transactionIndex": 0,
    "gasUsed": "1577808",
    "logsBloom": "0x
    "blockHash": "0x27cb374ae7a0e608a782c30eddfa2807e8b2b8801733bc317e4a9382aec5fa0e",
    "transactionHash": "0xfcddd3f2c0facfd62eb5eefcf83518aeff5867839d1b8cb23c5c6b69c4a4ab10",
    "logs": [],
    "blockNumber": 11016082,
    "cumulativeGasUsed": "1577808",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9eb897b604538ee3c093b3f66f713a0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ambassadorIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entityAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"AmbassadorAccountReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"AmbassadorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"AmbassadorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ambassadorIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entityAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAmbassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAmbassador\",\"type\":\"address\"}],\"name\":\"AmbassadorReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAmbassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAmbassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"}],\"name\":\"AmbassadorToCommunityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldEntity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEntity\",\"type\":\"address\"}],\"name\":\"AmbassadorTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ambassador\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"}],\"name\":\"CommunityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entityIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"EntityAccountReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"EntityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"}],\"name\":\"EntityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"}],\"name\":\"addAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"addEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ambassadorByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ambassadorByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ambassadorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ambassadorToEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAdmin\",\"outputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communityToAmbassador\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entityAmbassadors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entityByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entityByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"_communityAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"}],\"name\":\"isAmbassador\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_entityAddress\",\"type\":\"address\"}],\"name\":\"isAmbassadorAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"isAmbassadorOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"isEntityOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"}],\"name\":\"removeAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"removeCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"removeEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAmbassador\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAmbassador\",\"type\":\"address\"}],\"name\":\"replaceAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAmbassador\",\"type\":\"address\"}],\"name\":\"replaceAmbassadorAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newEntity\",\"type\":\"address\"}],\"name\":\"replaceEntityAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"setCommunityToAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toEntity\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_keepCommunities\",\"type\":\"bool\"}],\"name\":\"transferAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"transferCommunityToAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"_newCommunityAdmin\",\"type\":\"address\"}],\"name\":\"updateCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AmbassadorAccountReplaced(uint256,address,address,address)\":{\"params\":{\"ambassadorIndex\":\"Index of the ambassador being replaced\",\"entityAccount\":\"Address of the entity where ambassador is being replaced\",\"newAccount\":\"Ambassador's new account address\",\"oldAccount\":\"Ambassador's old account address\"}},\"AmbassadorAdded(address,address)\":{\"params\":{\"ambassador\":\"Address of the ambassador added\",\"entity\":\"Address of the entity where the ambassador is added\"}},\"AmbassadorRemoved(address,address)\":{\"params\":{\"ambassador\":\"Address of the ambassador removed\",\"entity\":\"Address of the entity where the ambassador is removed\"}},\"AmbassadorReplaced(uint256,address,address,address)\":{\"params\":{\"ambassadorIndex\":\"Index of the ambassador being replaced\",\"entityAccount\":\"Address of the entity where ambassador is being replaced\",\"newAmbassador\":\"Ambassador's new account address\",\"oldAmbassador\":\"Ambassador's old account address\"}},\"AmbassadorToCommunityUpdated(address,address,address)\":{\"params\":{\"community\":\"Community address being transfered\",\"fromAmbassador\":\"Ambassador address from which the community is being transfered from\",\"toAmbassador\":\"Ambassador address to which the community is being transfered to\"}},\"AmbassadorTransfered(address,address,address)\":{\"params\":{\"ambassador\":\"Ambassador address being replaced\",\"newEntity\":\"Entity's new account address\",\"oldEntity\":\"Entity's old account address\"}},\"CommunityRemoved(address,address)\":{\"params\":{\"ambassador\":\"Ambassador of the community being removed\",\"community\":\"Community address being removed\"}},\"EntityAccountReplaced(uint256,address,address)\":{\"params\":{\"entityIndex\":\"Entity index replacing account address\",\"newAccount\":\"New account address\",\"oldAccount\":\"Old account address\"}},\"EntityAdded(address)\":{\"params\":{\"entity\":\"Address of the entity added\"}},\"EntityRemoved(address)\":{\"params\":{\"entity\":\"Address of the entity removed\"}}},\"kind\":\"dev\",\"methods\":{\"addAmbassador(address)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\"}},\"addEntity(address)\":{\"params\":{\"_entity\":\"Address of the entity\"}},\"initialize(address)\":{\"params\":{\"_communityAdmin\":\"Address of the community admin contract\"}},\"isAmbassador(address)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\"},\"returns\":{\"_0\":\"Boolean whether an address is ambassador or not\"}},\"isAmbassadorAt(address,address)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\",\"_entityAddress\":\"Address of the entity\"},\"returns\":{\"_0\":\"Boolean whether an address is ambassador at a given entity or not\"}},\"isAmbassadorOf(address,address)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\",\"_community\":\"Address of the community\"},\"returns\":{\"_0\":\"Boolean whether an address is ambassador of a given community or not\"}},\"isEntityOf(address,address)\":{\"params\":{\"_community\":\"Address of the community\",\"_entity\":\"Address of the entity\"},\"returns\":{\"_0\":\"Boolean whether an address is entity reponsible for ambassador of a given community or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAmbassador(address)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\"}},\"removeCommunity(address)\":{\"params\":{\"_community\":\"Community address\"}},\"removeEntity(address)\":{\"params\":{\"_entity\":\"Address of the entity\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"replaceAmbassador(address,address)\":{\"params\":{\"_newAmbassador\":\"New ambassador address\",\"_oldAmbassador\":\"Address of the ambassador\"}},\"replaceAmbassadorAccount(address,address)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\",\"_newAmbassador\":\"New ambassador address\"}},\"replaceEntityAccount(address,address)\":{\"params\":{\"_entity\":\"Address of the entity\",\"_newEntity\":\"New entity address\"}},\"setCommunityToAmbassador(address,address)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\",\"_community\":\"Community address\"}},\"transferAmbassador(address,address,bool)\":{\"params\":{\"_ambassador\":\"Address of the ambassador\",\"_keepCommunities\":\"Boolean whether to keep the ambassador's communities or not\",\"_toEntity\":\"Address of the entity\"}},\"transferCommunityToAmbassador(address,address)\":{\"params\":{\"_community\":\"Community address\",\"_to\":\"Address of the ambassador to transfer the community to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCommunityAdmin(address)\":{\"details\":\"used only for testing the new community upgrade flow\",\"params\":{\"_newCommunityAdmin\":\"address of the new communityAdmin\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AmbassadorAccountReplaced(uint256,address,address,address)\":{\"notice\":\"Triggered when an ambassador replaces it's own account.\"},\"AmbassadorAdded(address,address)\":{\"notice\":\"Triggered when an ambassador is added to an entity.\"},\"AmbassadorRemoved(address,address)\":{\"notice\":\"Triggered when an ambassador is removed.\"},\"AmbassadorReplaced(uint256,address,address,address)\":{\"notice\":\"Triggered when an ambassador is replaced by the entity.\"},\"AmbassadorToCommunityUpdated(address,address,address)\":{\"notice\":\"Triggered when a community is transfered from one ambassador to another.\"},\"AmbassadorTransfered(address,address,address)\":{\"notice\":\"Triggered when an ambassador is transfered to a new entity.\"},\"CommunityRemoved(address,address)\":{\"notice\":\"Triggered when a community is removed.\"},\"EntityAccountReplaced(uint256,address,address)\":{\"notice\":\"Triggered when an entity replaced account address.\"},\"EntityAdded(address)\":{\"notice\":\"Triggered when an entity is added.\"},\"EntityRemoved(address)\":{\"notice\":\"Triggered when an entity is removed.\"}},\"kind\":\"user\",\"methods\":{\"addAmbassador(address)\":{\"notice\":\"Registers an ambassador.\"},\"addEntity(address)\":{\"notice\":\"Registers an entity.\"},\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"initialize(address)\":{\"notice\":\"Used to initialize a new Ambassadors contract\"},\"isAmbassador(address)\":{\"notice\":\"Returns boolean whether an address is ambassador or not.\"},\"isAmbassadorAt(address,address)\":{\"notice\":\"Returns boolean whether an address is ambassador at a given entity.\"},\"isAmbassadorOf(address,address)\":{\"notice\":\"Returns boolean whether an address is ambassador of a given community.\"},\"isEntityOf(address,address)\":{\"notice\":\"Returns boolean whether an address is entity reponsible for ambassador of a given community.\"},\"removeAmbassador(address)\":{\"notice\":\"Removes an ambassador.\"},\"removeCommunity(address)\":{\"notice\":\"Removes community.\"},\"removeEntity(address)\":{\"notice\":\"Removes an entity.\"},\"replaceAmbassador(address,address)\":{\"notice\":\"Replaces an ambassador. Called by entity.\"},\"replaceAmbassadorAccount(address,address)\":{\"notice\":\"Replace ambassador account. Called by ambassador.\"},\"replaceEntityAccount(address,address)\":{\"notice\":\"Replace entity account.\"},\"setCommunityToAmbassador(address,address)\":{\"notice\":\"Sets community to ambassador.\"},\"transferAmbassador(address,address,bool)\":{\"notice\":\"Transfers an ambassador to another entity.\"},\"transferCommunityToAmbassador(address,address)\":{\"notice\":\"Transfers community from ambassador to another ambassador.\"},\"updateCommunityAdmin(address)\":{\"notice\":\"Updates the address of the communityAdmin\"}},\"notice\":\"Welcome to Ambassadors contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ambassadors/AmbassadorsImplementation.sol\":\"AmbassadorsImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x33b8603bfbef7f33d9308b79c79aa3db7eb19525fd1addd764285e834ca275d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ambassadors/AmbassadorsImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/AmbassadorsStorageV1.sol\\\";\\nimport \\\"../community/interfaces/ICommunityAdmin.sol\\\";\\n\\n/**\\n * @notice Welcome to Ambassadors contract.\\n */\\ncontract AmbassadorsImplementation is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    AmbassadorsStorageV1\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Triggered when an entity is added.\\n     *\\n     * @param entity Address of the entity added\\n     *\\n     */\\n    event EntityAdded(address indexed entity);\\n\\n    /**\\n     * @notice Triggered when an entity is removed.\\n     *\\n     * @param entity Address of the entity removed\\n     *\\n     */\\n    event EntityRemoved(address indexed entity);\\n\\n    /**\\n     * @notice Triggered when an entity replaced account address.\\n     *\\n     * @param entityIndex Entity index replacing account address\\n     * @param oldAccount Old account address\\n     * @param newAccount New account address\\n     *\\n     */\\n    event EntityAccountReplaced(\\n        uint256 entityIndex,\\n        address indexed oldAccount,\\n        address indexed newAccount\\n    );\\n\\n    /**\\n     * @notice Triggered when an ambassador is added to an entity.\\n     *\\n     * @param ambassador Address of the ambassador added\\n     * @param entity Address of the entity where the ambassador is added\\n     *\\n     */\\n    event AmbassadorAdded(address indexed ambassador, address indexed entity);\\n\\n    /**\\n     * @notice Triggered when an ambassador is removed.\\n     *\\n     * @param ambassador Address of the ambassador removed\\n     * @param entity Address of the entity where the ambassador is removed\\n     *\\n     */\\n    event AmbassadorRemoved(address indexed ambassador, address indexed entity);\\n\\n    /**\\n     * @notice Triggered when an ambassador is replaced by the entity.\\n     *\\n     * @param ambassadorIndex Index of the ambassador being replaced\\n     * @param entityAccount Address of the entity where ambassador is being replaced\\n     * @param oldAmbassador Ambassador's old account address\\n     * @param newAmbassador Ambassador's new account address\\n     *\\n     */\\n    event AmbassadorReplaced(\\n        uint256 ambassadorIndex,\\n        address indexed entityAccount,\\n        address indexed oldAmbassador,\\n        address indexed newAmbassador\\n    );\\n\\n    /**\\n     * @notice Triggered when an ambassador replaces it's own account.\\n     *\\n     * @param ambassadorIndex Index of the ambassador being replaced\\n     * @param entityAccount Address of the entity where ambassador is being replaced\\n     * @param oldAccount Ambassador's old account address\\n     * @param newAccount Ambassador's new account address\\n     *\\n     */\\n    event AmbassadorAccountReplaced(\\n        uint256 ambassadorIndex,\\n        address indexed entityAccount,\\n        address indexed oldAccount,\\n        address indexed newAccount\\n    );\\n\\n    /**\\n     * @notice Triggered when an ambassador is transfered to a new entity.\\n     *\\n     * @param ambassador Ambassador address being replaced\\n     * @param oldEntity Entity's old account address\\n     * @param newEntity Entity's new account address\\n     *\\n     */\\n    event AmbassadorTransfered(\\n        address indexed ambassador,\\n        address indexed oldEntity,\\n        address indexed newEntity\\n    );\\n\\n    /**\\n     * @notice Triggered when a community is transfered from one ambassador to another.\\n     *\\n     * @param fromAmbassador Ambassador address from which the community is being transfered from\\n     * @param toAmbassador Ambassador address to which the community is being transfered to\\n     * @param community Community address being transfered\\n     *\\n     */\\n    event AmbassadorToCommunityUpdated(\\n        address indexed fromAmbassador,\\n        address indexed toAmbassador,\\n        address indexed community\\n    );\\n\\n    /**\\n     * @notice Triggered when a community is removed.\\n     *\\n     * @param ambassador Ambassador of the community being removed\\n     * @param community Community address being removed\\n     *\\n     */\\n    event CommunityRemoved(address indexed ambassador, address indexed community);\\n\\n    /**\\n     * @notice Enforces sender to be an ambassador\\n     */\\n    modifier onlyAmbassador() {\\n        require(ambassadorByAddress[msg.sender] != 0, \\\"Ambassador:: ONLY_AMBASSADOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be an entity\\n     */\\n    modifier onlyEntity() {\\n        require(entityByAddress[msg.sender] != 0, \\\"Ambassador:: ONLY_ENTITY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be an entity or owner\\n     */\\n    modifier onlyEntityOrOwner() {\\n        require(\\n            entityByAddress[msg.sender] != 0 || owner() == msg.sender,\\n            \\\"Ambassador:: ONLY_ENTITY_OR_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be te community admin contract\\n     */\\n    modifier onlyCommunityAdmin() {\\n        require(address(communityAdmin) == msg.sender, \\\"Ambassador:: ONLY_COMMUNITY_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize a new Ambassadors contract\\n     *\\n     * @param _communityAdmin Address of the community admin contract\\n     *\\n     */\\n    function initialize(ICommunityAdmin _communityAdmin) external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        ambassadorIndex = 1;\\n        entityIndex = 1;\\n        communityAdmin = _communityAdmin;\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns boolean whether an address is ambassador or not.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     * @return Boolean whether an address is ambassador or not\\n     */\\n    function isAmbassador(address _ambassador) public view override returns (bool) {\\n        return ambassadorByAddress[_ambassador] != 0;\\n    }\\n\\n    /**\\n     * @notice Returns boolean whether an address is ambassador of a given community.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     * @param _community Address of the community\\n     * @return Boolean whether an address is ambassador of a given community or not\\n     */\\n    function isAmbassadorOf(address _ambassador, address _community)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ambassadorByAddress[_ambassador] == communityToAmbassador[_community];\\n    }\\n\\n    /**\\n     * @notice Returns boolean whether an address is entity reponsible for ambassador of a given community.\\n     *\\n     * @param _entity Address of the entity\\n     * @param _community Address of the community\\n     * @return Boolean whether an address is entity reponsible for ambassador of a given community or not\\n     */\\n    function isEntityOf(address _entity, address _community) public view override returns (bool) {\\n        return entityByAddress[_entity] == ambassadorToEntity[communityToAmbassador[_community]];\\n    }\\n\\n    /**\\n     * @notice Returns boolean whether an address is ambassador at a given entity.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     * @param _entityAddress Address of the entity\\n     * @return Boolean whether an address is ambassador at a given entity or not\\n     */\\n    function isAmbassadorAt(address _ambassador, address _entityAddress)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            ambassadorToEntity[ambassadorByAddress[_ambassador]] == entityByAddress[_entityAddress];\\n    }\\n\\n    /** Updates the address of the communityAdmin\\n     *\\n     * @param _newCommunityAdmin address of the new communityAdmin\\n     * @dev used only for testing the new community upgrade flow\\n     */\\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external onlyOwner {\\n        communityAdmin = _newCommunityAdmin;\\n    }\\n\\n    /**\\n     * @notice Registers an entity.\\n     *\\n     * @param _entity Address of the entity\\n     */\\n    function addEntity(address _entity) public override onlyOwner {\\n        require(entityByAddress[_entity] == 0, \\\"Ambassador:: ALREADY_ENTITY\\\");\\n\\n        entityByAddress[_entity] = entityIndex;\\n        entityByIndex[entityIndex] = _entity;\\n        entityIndex++;\\n\\n        emit EntityAdded(_entity);\\n    }\\n\\n    /**\\n     * @notice Removes an entity.\\n     *\\n     * @param _entity Address of the entity\\n     */\\n    function removeEntity(address _entity) public override onlyOwner {\\n        uint256 entityIndex = entityByAddress[_entity];\\n\\n        require(entityIndex != 0, \\\"Ambassador:: NOT_ENTITY\\\");\\n        require(entityAmbassadors[entityIndex] == 0, \\\"Ambassador:: HAS_AMBASSADORS\\\");\\n\\n        entityByIndex[entityIndex] = address(0);\\n        entityByAddress[_entity] = 0;\\n\\n        emit EntityRemoved(_entity);\\n    }\\n\\n    /**\\n     * @notice Replace entity account.\\n     *\\n     * @param _entity Address of the entity\\n     * @param _newEntity New entity address\\n     */\\n    function replaceEntityAccount(address _entity, address _newEntity) external override {\\n        uint256 entityIndex = entityByAddress[_entity];\\n\\n        require(msg.sender == _entity || msg.sender == owner(), \\\"Ambassador:: NOT_ALLOWED\\\");\\n        require(entityIndex != 0, \\\"Ambassador:: NOT_ENTITY\\\");\\n\\n        entityByIndex[entityIndex] = _newEntity;\\n        entityByAddress[_newEntity] = entityByAddress[_entity];\\n        entityByAddress[_entity] = 0;\\n\\n        emit EntityAccountReplaced(entityIndex, _entity, _newEntity);\\n    }\\n\\n    /**\\n     * @notice Registers an ambassador.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     */\\n    function addAmbassador(address _ambassador) external override onlyEntity {\\n        require(!isAmbassador(_ambassador), \\\"Ambassador:: ALREADY_AMBASSADOR\\\");\\n\\n        uint256 entityIndex = entityByAddress[msg.sender];\\n\\n        ambassadorByAddress[_ambassador] = ambassadorIndex;\\n        ambassadorByIndex[ambassadorIndex] = _ambassador;\\n        ambassadorToEntity[ambassadorIndex] = entityIndex;\\n        entityAmbassadors[entityIndex]++;\\n        ambassadorIndex++;\\n\\n        emit AmbassadorAdded(_ambassador, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes an ambassador.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     */\\n    function removeAmbassador(address _ambassador) external override onlyEntity {\\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\\n        uint256 entityIndex = entityByAddress[msg.sender];\\n\\n        require(isAmbassadorAt(_ambassador, msg.sender), \\\"Ambassador:: NOT_AMBASSADOR\\\");\\n        require(\\n            ambassadorCommunities[thisAmbassadorIndex].length() == 0,\\n            \\\"Ambassador:: HAS_COMMUNITIES\\\"\\n        );\\n\\n        entityAmbassadors[entityIndex]--;\\n        ambassadorByAddress[_ambassador] = 0;\\n\\n        emit AmbassadorRemoved(_ambassador, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Replace ambassador account. Called by ambassador.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     * @param _newAmbassador New ambassador address\\n     */\\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador)\\n        external\\n        override\\n    {\\n        require(msg.sender == _ambassador || msg.sender == owner(), \\\"Ambassador:: NOT_ALLOWED\\\");\\n        require(isAmbassador(_ambassador), \\\"Ambassador:: NOT_AMBASSADOR\\\");\\n        require(!isAmbassador(_newAmbassador), \\\"Ambassador:: ALREADY_AMBASSADOR\\\");\\n\\n        uint256 thisAmbassadorIndex;\\n        address entityAddress;\\n        address oldAmbassador;\\n        address newAmbassador;\\n        (\\n            thisAmbassadorIndex,\\n            entityAddress,\\n            oldAmbassador,\\n            newAmbassador\\n        ) = _replaceAmbassadorAccountInternal(_ambassador, _newAmbassador);\\n\\n        emit AmbassadorAccountReplaced(\\n            thisAmbassadorIndex,\\n            entityAddress,\\n            oldAmbassador,\\n            newAmbassador\\n        );\\n    }\\n\\n    /**\\n     * @notice Replaces an ambassador. Called by entity.\\n     *\\n     * @param _oldAmbassador Address of the ambassador\\n     * @param _newAmbassador New ambassador address\\n     */\\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external override {\\n        require(\\n            isAmbassadorAt(_oldAmbassador, msg.sender) || msg.sender == owner(),\\n            \\\"Ambassador:: NOT_AMBASSADOR\\\"\\n        );\\n        require(!isAmbassador(_newAmbassador), \\\"Ambassador:: ALREADY_AMBASSADOR\\\");\\n\\n        uint256 thisAmbassadorIndex;\\n        address entityAddress;\\n        address oldAmbassador;\\n        address newAmbassador;\\n        (\\n            thisAmbassadorIndex,\\n            entityAddress,\\n            oldAmbassador,\\n            newAmbassador\\n        ) = _replaceAmbassadorAccountInternal(_oldAmbassador, _newAmbassador);\\n\\n        emit AmbassadorReplaced(thisAmbassadorIndex, entityAddress, oldAmbassador, newAmbassador);\\n    }\\n\\n    /**\\n     * @notice Transfers an ambassador to another entity.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     * @param _toEntity Address of the entity\\n     * @param _keepCommunities Boolean whether to keep the ambassador's communities or not\\n     */\\n    function transferAmbassador(\\n        address _ambassador,\\n        address _toEntity,\\n        bool _keepCommunities\\n    ) external override onlyEntityOrOwner {\\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\\n        require(\\n            isAmbassadorAt(_ambassador, msg.sender) || msg.sender == owner(),\\n            \\\"Ambassador:: NOT_AMBASSADOR\\\"\\n        );\\n        require(\\n            ambassadorCommunities[thisAmbassadorIndex].length() == 0 || _keepCommunities == true,\\n            \\\"Ambassador:: HAS_COMMUNITIES\\\"\\n        );\\n\\n        uint256 entityIndex = ambassadorToEntity[thisAmbassadorIndex];\\n        uint256 entityToIndex = entityByAddress[_toEntity];\\n\\n        ambassadorToEntity[thisAmbassadorIndex] = entityToIndex;\\n        entityAmbassadors[entityIndex]--;\\n        entityAmbassadors[entityToIndex]++;\\n\\n        emit AmbassadorTransfered(_ambassador, entityByIndex[entityIndex], _toEntity);\\n    }\\n\\n    /**\\n     * @notice Transfers community from ambassador to another ambassador.\\n     *\\n     * @param _to Address of the ambassador to transfer the community to\\n     * @param _community Community address\\n     */\\n    function transferCommunityToAmbassador(address _to, address _community)\\n        external\\n        override\\n        onlyEntityOrOwner\\n    {\\n        address _from = ambassadorByIndex[communityToAmbassador[_community]];\\n\\n        require(isAmbassadorOf(_from, _community), \\\"Ambassador:: NOT_AMBASSADOR\\\");\\n        require(!isAmbassadorOf(_to, _community), \\\"Ambassador:: ALREADY_AMBASSADOR\\\");\\n        require(\\n            isAmbassadorAt(_from, msg.sender) || msg.sender == owner(),\\n            \\\"Ambassador:: NOT_AMBASSADOR\\\"\\n        );\\n        require(\\n            isAmbassadorAt(_to, msg.sender) || msg.sender == owner(),\\n            \\\"Ambassador:: NOT_AMBASSADOR\\\"\\n        );\\n\\n        communityToAmbassador[_community] = ambassadorByAddress[_to];\\n        ambassadorCommunities[ambassadorByAddress[_from]].remove(_community);\\n        ambassadorCommunities[ambassadorByAddress[_to]].add(_community);\\n\\n        emit AmbassadorToCommunityUpdated(_from, _to, _community);\\n    }\\n\\n    /**\\n     * @notice Sets community to ambassador.\\n     *\\n     * @param _ambassador Address of the ambassador\\n     * @param _community Community address\\n     */\\n    function setCommunityToAmbassador(address _ambassador, address _community)\\n        external\\n        override\\n        onlyCommunityAdmin\\n    {\\n        require(isAmbassador(_ambassador), \\\"Ambassador:: NOT_AMBASSADOR\\\");\\n        require(!isAmbassadorOf(_ambassador, _community), \\\"Ambassador:: ALREADY_AMBASSADOR\\\");\\n\\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\\n\\n        communityToAmbassador[_community] = thisAmbassadorIndex;\\n        ambassadorCommunities[thisAmbassadorIndex].add(_community);\\n\\n        emit AmbassadorToCommunityUpdated(address(0), _ambassador, _community);\\n    }\\n\\n    /**\\n     * @notice Removes community.\\n     *\\n     * @param _community Community address\\n     */\\n    function removeCommunity(address _community) external override onlyCommunityAdmin {\\n        address _ambassador = ambassadorByIndex[communityToAmbassador[_community]];\\n\\n        require(isAmbassadorOf(_ambassador, _community), \\\"Ambassador:: NOT_AMBASSADOR\\\");\\n\\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\\n\\n        communityToAmbassador[_community] = 0;\\n        ambassadorCommunities[thisAmbassadorIndex].remove(_community);\\n\\n        emit CommunityRemoved(_ambassador, _community);\\n    }\\n\\n    /**\\n     * @notice Internal function, common to account replacement.\\n     *\\n     * @param _old Address of the ambassador\\n     * @param _new New ambassador address\\n     */\\n    function _replaceAmbassadorAccountInternal(address _old, address _new)\\n        private\\n        returns (\\n            uint256,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_old];\\n        uint256 entityIndex = ambassadorToEntity[thisAmbassadorIndex];\\n\\n        ambassadorByIndex[thisAmbassadorIndex] = _new;\\n        ambassadorByAddress[_new] = ambassadorByAddress[_old];\\n        ambassadorByAddress[_old] = 0;\\n\\n        return (thisAmbassadorIndex, entityByIndex[entityIndex], _old, _new);\\n    }\\n}\\n\",\"keccak256\":\"0x0fe59c2574f7dffb2d7a4d1c2f1d6a2c529326b85f9ff886b5d2cb3798e75ef0\",\"license\":\"Apache-2.0\"},\"contracts/ambassadors/interfaces/AmbassadorsStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./IAmbassadors.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\n\\n/**\\n * @title Storage for Ambassadors\\n * @notice For future upgrades, do not change AmbassadorsStorageV1. Create a new\\n * contract which implements AmbassadorsStorageV1 and following the naming convention\\n * AmbassadorsStorageVX.\\n */\\nabstract contract AmbassadorsStorageV1 is IAmbassadors {\\n    uint256 public ambassadorIndex;\\n    uint256 public entityIndex;\\n\\n    ICommunityAdmin public communityAdmin;\\n    // address to index\\n    mapping(address => uint256) public ambassadorByAddress;\\n    // index to address\\n    mapping(uint256 => address) public ambassadorByIndex;\\n    // communities an ambassador is reponsible for\\n    mapping(uint256 => EnumerableSet.AddressSet) internal ambassadorCommunities;\\n    // community address to ambassador index\\n    mapping(address => uint256) public communityToAmbassador;\\n    // ambassador belongs to entity\\n    mapping(uint256 => uint256) public ambassadorToEntity;\\n    // entity adding ambassadors\\n    mapping(address => uint256) public entityByAddress;\\n    // entity adding ambassadors\\n    mapping(uint256 => address) public entityByIndex;\\n    // number of ambassadors an entity is resposible for\\n    mapping(uint256 => uint256) public entityAmbassadors;\\n}\\n\",\"keccak256\":\"0x20f25bad7223179d12428c514f57ab5f362a2cae8cdb1620cc12001b8e566dbb\",\"license\":\"Apache-2.0\"},\"contracts/ambassadors/interfaces/IAmbassadors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAmbassadors {\\n    function getVersion() external returns(uint256);\\n    function isAmbassador(address _ambassador) external view returns (bool);\\n    function isAmbassadorOf(address _ambassador, address _community) external view returns (bool);\\n    function isEntityOf(address _ambassador, address _entityAddress) external view returns (bool);\\n    function isAmbassadorAt(address _ambassador, address _entityAddress) external view returns (bool);\\n\\n    function addEntity(address _entity) external;\\n    function removeEntity(address _entity) external;\\n    function replaceEntityAccount(address _entity, address _newEntity) external;\\n    function addAmbassador(address _ambassador) external;\\n    function removeAmbassador(address _ambassador) external;\\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador) external;\\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external;\\n    function transferAmbassador(address _ambassador, address _toEntity, bool _keepCommunities) external;\\n    function transferCommunityToAmbassador(address _to, address _community) external;\\n    function setCommunityToAmbassador(address _ambassador, address _community) external;\\n    function removeCommunity(address _community) external;\\n}\\n\",\"keccak256\":\"0xc65f840a3ae4f30e3a579e6113080334b31300c40b56596aeb77eaed67702133\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of cUSD received\\n        uint256 lastClaim;       //block number of the last claim\\n    }\\n\\n    function initialize(\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function getVersion() external returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address _beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 _index) external view returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function impactMarketAddress() external pure returns (address);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n    function lastFundRequest() external view returns(uint256);\\n\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function donate(address _sender, uint256 _amount) external;\\n    function addTreasuryFunds(uint256 _amount) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function addManager(address _managerAddress) external;\\n    function removeManager(address _managerAddress) external;\\n    function addBeneficiary(address _beneficiaryAddress) external;\\n    function lockBeneficiary(address _beneficiaryAddress) external;\\n    function unlockBeneficiary(address _beneficiaryAddress) external;\\n    function removeBeneficiary(address _beneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26196a4ed9b1b04cebfd283cadcf6f02297e4c44a38a77e8f561a5698ce57a55\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../governor/ubiCommittee/interfaces/IUBICommittee.sol\\\";\\nimport \\\"../../ambassadors/interfaces/IAmbassadors.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function ubiCommittee() external view returns(IUBICommittee);\\n    function ambassadors() external view returns(IAmbassadors);\\n    function communityMiddleProxy() external view returns(address);\\n    function communities(address _community) external view returns(CommunityState);\\n    function communityImplementation() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 _index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity) external view returns (bool);\\n\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateUbiCommittee(IUBICommittee _newUbiCommittee) external;\\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external;\\n    function updateCommunityMiddleProxy(address _communityMiddleProxy) external;\\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\\n    function updateBeneficiaryParams(\\n        ICommunity _community,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity _community,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateProxyImplementation(address _CommunityMiddleProxy, address _newLogic) external;\\n    function addCommunity(\\n        address[] memory _managers,\\n        address _ambassador,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory _managers,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function addManagerToCommunity(ICommunity _community_, address _account_) external;\\n    function removeCommunity(ICommunity _community) external;\\n    function fundCommunity() external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function transferFromCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaa04e37f5615545fdafe80789a45e9a2770e8ec1e9b841a9641227cae9b9c799\",\"license\":\"Apache-2.0\"},\"contracts/governor/ubiCommittee/interfaces/IUBICommittee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"./ICommunity.sol\\\";\\n// import \\\"../../treasury/interfaces/ITreasury.sol\\\";\\n// import \\\"../../governance/interfaces/IUBICommittee.sol\\\";\\n\\ninterface IUBICommittee {\\n    //\\n}\\n\",\"keccak256\":\"0x1a2e34ba0542587a3c615310e3beb76770e95ad358213e4a917f7a3b76014305\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\ninterface ITreasury {\\n    struct Token {\\n        uint256 rate;\\n        address[] exchangePath;\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function uniswapRouter() external view returns(IUniswapV2Router);\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updateUniswapRouter(IUniswapV2Router _uniswapRouter) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function isToken(address _tokenAddress) external view returns (bool);\\n    function tokenListLength() external view returns (uint256);\\n    function tokenListAt(uint256 _index) external view returns (address);\\n    function tokens(address _tokenAddress) external view returns (uint256 rate, address[] memory exchangePath);\\n    function setToken(address _tokenAddress, uint256 _rate, address[] calldata _exchangePath) external;\\n    function removeToken(address _tokenAddress) external;\\n    function getConvertedAmount(address _tokenAddress, uint256 _amount) external view returns (uint256);\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] memory _exchangePath,\\n        uint256 _deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28f21d39880e3ef9bcd2422b109ac6fdc2eab02a65d3d28f154afbf2ed8b7599\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address tokenA, address tokenB) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a12eebf4cf3741e1b1a30a4315096ae6d545af2e07a92e544d05739ceb811e9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b93806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80639ac0c6ac1161010f578063cb53f503116100a2578063df3441a811610071578063df3441a814610493578063e8729646146104b3578063f1703d24146104bc578063f2fde38b146104cf57600080fd5b8063cb53f50314610415578063d33d4ec61461045a578063dd1829961461046d578063de96587e1461048057600080fd5b8063c273f1f1116100de578063c273f1f1146103a2578063c4d66de8146103c2578063c80acb3c146103d5578063cacc3088146103f557600080fd5b80639ac0c6ac146103405780639f9abc1414610353578063b08d66b814610366578063bb26e9b61461037957600080fd5b806330a14f9511610187578063715018a611610156578063715018a6146103015780638da5cb5b14610309578063926345401461031a57806397710ab11461032d57600080fd5b806330a14f95146102a55780633ddfee0c146102b857806342e1d997146102cb5780635fac917a146102ee57600080fd5b80632426de98116101c35780632426de981461021e578063295c25d51461023e5780632af82058146102515780632de00ddc1461029257600080fd5b80630d8e6e2c146101ea578063169e7d56146102005780631df7b3cd14610215575b600080fd5b60015b6040519081526020015b60405180910390f35b61021361020e3660046118db565b6104e2565b005b6101ed60975481565b6101ed61022c3660046118bf565b609d6020526000908152604090205481565b61021361024c3660046118bf565b610603565b61027a61025f366004611961565b60a0602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101f7565b6102136102a03660046118db565b610741565b6102136102b3366004611913565b610838565b6102136102c63660046118db565b610a0b565b6102de6102d93660046118db565b610b4d565b60405190151581526020016101f7565b60995461027a906001600160a01b031681565b610213610b89565b6033546001600160a01b031661027a565b6102136103283660046118bf565b610bbf565b61021361033b3660046118db565b610cbd565b6102de61034e3660046118bf565b610d7b565b6102136103613660046118db565b610d98565b6102de6103743660046118db565b610f9c565b61027a610387366004611961565b609b602052600090815260409020546001600160a01b031681565b6101ed6103b03660046118bf565b609f6020526000908152604090205481565b6102136103d03660046118bf565b610fc9565b6101ed6103e3366004611961565b609e6020526000908152604090205481565b6101ed610403366004611961565b60a16020526000908152604090205481565b6102de6104233660046118db565b6001600160a01b039081166000908152609d60209081526040808320548352609e825280832054949093168252609f905220541490565b6102136104683660046118bf565b6110b8565b61021361047b3660046118bf565b611104565b61021361048e3660046118bf565b61124b565b6101ed6104a13660046118bf565b609a6020526000908152604090205481565b6101ed60985481565b6102136104ca3660046118bf565b6113bd565b6102136104dd3660046118bf565b6114d3565b336001600160a01b038316148061050357506033546001600160a01b031633145b61054f5760405162461bcd60e51b8152602060048201526018602482015277105b58985cdcd8591bdc8e8e881393d517d0531313d5d15160421b60448201526064015b60405180910390fd5b61055882610d7b565b6105745760405162461bcd60e51b8152600401610546906119ef565b61057d81610d7b565b1561059a5760405162461bcd60e51b815260040161054690611a67565b6000806000806105aa868661156e565b604051848152939750919550935091506001600160a01b0380831691818516918616907fb0433a1c3702cf0bd7986f8f52d4b155e390f3f600a3677f19d9953305466d7b906020015b60405180910390a4505050505050565b336000908152609f602052604090205461065a5760405162461bcd60e51b8152602060048201526018602482015277416d6261737361646f723a3a204f4e4c595f454e5449545960401b6044820152606401610546565b61066381610d7b565b156106805760405162461bcd60e51b815260040161054690611a67565b336000908152609f6020908152604080832054609780546001600160a01b038716808752609a8652848720829055908652609b855283862080546001600160a01b0319169091179055548452609e835281842081905580845260a19092528220805491926106ed83611b17565b90915550506097805490600061070283611b17565b909155505060405133906001600160a01b038416907f7974b0235ffa33752026d77f968bed3382bcd8ce49170bbb32d3fb7494d2275e90600090a35050565b6099546001600160a01b0316331461076b5760405162461bcd60e51b815260040161054690611979565b61077482610d7b565b6107905760405162461bcd60e51b8152600401610546906119ef565b61079a8282610f9c565b156107b75760405162461bcd60e51b815260040161054690611a67565b6001600160a01b038083166000908152609a60209081526040808320549385168352609d8252808320849055838352609c90915290206107f790836115db565b506040516001600160a01b0380841691908516906000907f8e197c1b94ad42b061a1947f91c7bff6387f001a7a5a0ddee8610893706de8af908290a4505050565b336000908152609f602052604090205415158061086e5750336108636033546001600160a01b031690565b6001600160a01b0316145b61088a5760405162461bcd60e51b815260040161054690611a26565b6001600160a01b0383166000908152609a60205260409020546108ad8433610b4d565b806108c257506033546001600160a01b031633145b6108de5760405162461bcd60e51b8152600401610546906119ef565b6000818152609c602052604090206108f5906115f7565b158061090357506001821515145b61094f5760405162461bcd60e51b815260206004820152601c60248201527f416d6261737361646f723a3a204841535f434f4d4d554e4954494553000000006044820152606401610546565b6000818152609e6020908152604080832080546001600160a01b0388168552609f8452828520549182905580855260a19093529083208054929391929161099583611b00565b9091555050600081815260a1602052604081208054916109b483611b17565b9091555050600082815260a060205260408082205490516001600160a01b038089169392811692908a16917ffcc524962ae2655aeb5b6c7ad6cb8e8fc45c9f14edf517beb2b48595a3cd90489190a4505050505050565b6001600160a01b0382166000818152609f602052604090205490331480610a3c57506033546001600160a01b031633145b610a835760405162461bcd60e51b8152602060048201526018602482015277105b58985cdcd8591bdc8e8e881393d517d0531313d5d15160421b6044820152606401610546565b80610aca5760405162461bcd60e51b8152602060048201526017602482015276416d6261737361646f723a3a204e4f545f454e5449545960481b6044820152606401610546565b600081815260a06020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255908716808552609f84528285208054838752848720558186529490945590518481529092917f1cef456569215c66a24eca2e9e631350d3daf1f358738ba7a3df455fcdc243a4910160405180910390a3505050565b6001600160a01b038082166000908152609f60209081526040808320549386168352609a8252808320548352609e909152902054145b92915050565b6033546001600160a01b03163314610bb35760405162461bcd60e51b8152600401610546906119ba565b610bbd6000611601565b565b6099546001600160a01b03163314610be95760405162461bcd60e51b815260040161054690611979565b6001600160a01b038082166000908152609d60209081526040808320548352609b90915290205416610c1b8183610f9c565b610c375760405162461bcd60e51b8152600401610546906119ef565b6001600160a01b038082166000908152609a60209081526040808320549386168352609d8252808320839055838352609c9091529020610c779084611653565b50826001600160a01b0316826001600160a01b03167fbac68789a3f4e375a8fa2492f0930108bbb4d9e2646f37abc5ef2a94ddce06ba60405160405180910390a3505050565b610cc78233610b4d565b80610cdc57506033546001600160a01b031633145b610cf85760405162461bcd60e51b8152600401610546906119ef565b610d0181610d7b565b15610d1e5760405162461bcd60e51b815260040161054690611a67565b600080600080610d2e868661156e565b604051848152939750919550935091506001600160a01b0380831691818516918616907f9998ffadb0cd2ca491daebaaecf860ac02dd25cd317ec9ef08b5c2a0a6a5677f906020016105f3565b6001600160a01b03166000908152609a6020526040902054151590565b336000908152609f6020526040902054151580610dce575033610dc36033546001600160a01b031690565b6001600160a01b0316145b610dea5760405162461bcd60e51b815260040161054690611a26565b6001600160a01b038082166000908152609d60209081526040808320548352609b90915290205416610e1c8183610f9c565b610e385760405162461bcd60e51b8152600401610546906119ef565b610e428383610f9c565b15610e5f5760405162461bcd60e51b815260040161054690611a67565b610e698133610b4d565b80610e7e57506033546001600160a01b031633145b610e9a5760405162461bcd60e51b8152600401610546906119ef565b610ea48333610b4d565b80610eb957506033546001600160a01b031633145b610ed55760405162461bcd60e51b8152600401610546906119ef565b6001600160a01b038084166000908152609a60208181526040808420548786168552609d8352818520559385168352908152828220548252609c905220610f1c9083611653565b506001600160a01b0383166000908152609a60209081526040808320548352609c9091529020610f4c90836115db565b50816001600160a01b0316836001600160a01b0316826001600160a01b03167f8e197c1b94ad42b061a1947f91c7bff6387f001a7a5a0ddee8610893706de8af60405160405180910390a4505050565b6001600160a01b039081166000908152609d6020908152604080832054949093168252609a905220541490565b600054610100900460ff16610fe45760005460ff1615610fe8565b303b155b61104b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610546565b600054610100900460ff1615801561106d576000805461ffff19166101011790555b611075611668565b61107d61169f565b60016097819055609855609980546001600160a01b0319166001600160a01b03841617905580156110b4576000805461ff00191690555b5050565b6033546001600160a01b031633146110e25760405162461bcd60e51b8152600401610546906119ba565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461112e5760405162461bcd60e51b8152600401610546906119ba565b6001600160a01b0381166000908152609f60205260409020548061118e5760405162461bcd60e51b8152602060048201526017602482015276416d6261737361646f723a3a204e4f545f454e5449545960481b6044820152606401610546565b600081815260a16020526040902054156111ea5760405162461bcd60e51b815260206004820152601c60248201527f416d6261737361646f723a3a204841535f414d4241535341444f5253000000006044820152606401610546565b600081815260a06020908152604080832080546001600160a01b03191690556001600160a01b038516808452609f9092528083208390555190917f66baa8598dad476a7a23c2c39a3c9ea353a313b8050f5f2ff7df3121abe1f98391a25050565b336000908152609f60205260409020546112a25760405162461bcd60e51b8152602060048201526018602482015277416d6261737361646f723a3a204f4e4c595f454e5449545960401b6044820152606401610546565b6001600160a01b0381166000908152609a602090815260408083205433808552609f909352922054906112d6908490610b4d565b6112f25760405162461bcd60e51b8152600401610546906119ef565b6000828152609c60205260409020611309906115f7565b156113565760405162461bcd60e51b815260206004820152601c60248201527f416d6261737361646f723a3a204841535f434f4d4d554e4954494553000000006044820152606401610546565b600081815260a16020526040812080549161137083611b00565b90915550506001600160a01b0383166000818152609a6020526040808220829055513392917fdf0a456c1486c80ba4cdebb55052f692736d848b7cd52f7586d824a51018483791a3505050565b6033546001600160a01b031633146113e75760405162461bcd60e51b8152600401610546906119ba565b6001600160a01b0381166000908152609f60205260409020541561144d5760405162461bcd60e51b815260206004820152601b60248201527f416d6261737361646f723a3a20414c52454144595f454e5449545900000000006044820152606401610546565b609880546001600160a01b0383166000818152609f6020908152604080832085905593825260a0905291822080546001600160a01b03191690911790558154919061149783611b17565b90915550506040516001600160a01b038216907fb22e19f08ff14b8507fef310677b98ad1329eba6abb5b90f147acd6475dc762b90600090a250565b6033546001600160a01b031633146114fd5760405162461bcd60e51b8152600401610546906119ba565b6001600160a01b0381166115625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610546565b61156b81611601565b50565b6001600160a01b038281166000908152609a602081815260408084208054808652609e845282862054609b855283872080546001600160a01b0319168a8a169081179091559585528254958752838720959095559085905592845260a09091529091205490949116929190565b60006115f0836001600160a01b0384166116ce565b9392505050565b6000610b83825490565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006115f0836001600160a01b03841661171d565b600054610100900460ff1661168f5760405162461bcd60e51b815260040161054690611a9e565b61169761183a565b610bbd611861565b600054610100900460ff166116c65760405162461bcd60e51b815260040161054690611a9e565b610bbd611891565b600081815260018301602052604081205461171557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b83565b506000610b83565b60008181526001830160205260408120548015611830576000611741600183611ae9565b855490915060009061175590600190611ae9565b90508181146117d657600086600001828154811061178357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106117b457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806117f557634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b83565b6000915050610b83565b600054610100900460ff16610bbd5760405162461bcd60e51b815260040161054690611a9e565b600054610100900460ff166118885760405162461bcd60e51b815260040161054690611a9e565b610bbd33611601565b600054610100900460ff166118b85760405162461bcd60e51b815260040161054690611a9e565b6001606555565b6000602082840312156118d0578081fd5b81356115f081611b48565b600080604083850312156118ed578081fd5b82356118f881611b48565b9150602083013561190881611b48565b809150509250929050565b600080600060608486031215611927578081fd5b833561193281611b48565b9250602084013561194281611b48565b915060408401358015158114611956578182fd5b809150509250925092565b600060208284031215611972578081fd5b5035919050565b60208082526021908201527f416d6261737361646f723a3a204f4e4c595f434f4d4d554e4954595f41444d496040820152602760f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f416d6261737361646f723a3a204e4f545f414d4241535341444f520000000000604082015260600190565b60208082526021908201527f416d6261737361646f723a3a204f4e4c595f454e544954595f4f525f4f574e456040820152602960f91b606082015260800190565b6020808252601f908201527f416d6261737361646f723a3a20414c52454144595f414d4241535341444f5200604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082821015611afb57611afb611b32565b500390565b600081611b0f57611b0f611b32565b506000190190565b6000600019821415611b2b57611b2b611b32565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461156b57600080fdfea2646970667358221220860a416c28402c7468c8e01f56c36fe700231a61450e79055bef17aed347fb2064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80639ac0c6ac1161010f578063cb53f503116100a2578063df3441a811610071578063df3441a814610493578063e8729646146104b3578063f1703d24146104bc578063f2fde38b146104cf57600080fd5b8063cb53f50314610415578063d33d4ec61461045a578063dd1829961461046d578063de96587e1461048057600080fd5b8063c273f1f1116100de578063c273f1f1146103a2578063c4d66de8146103c2578063c80acb3c146103d5578063cacc3088146103f557600080fd5b80639ac0c6ac146103405780639f9abc1414610353578063b08d66b814610366578063bb26e9b61461037957600080fd5b806330a14f9511610187578063715018a611610156578063715018a6146103015780638da5cb5b14610309578063926345401461031a57806397710ab11461032d57600080fd5b806330a14f95146102a55780633ddfee0c146102b857806342e1d997146102cb5780635fac917a146102ee57600080fd5b80632426de98116101c35780632426de981461021e578063295c25d51461023e5780632af82058146102515780632de00ddc1461029257600080fd5b80630d8e6e2c146101ea578063169e7d56146102005780631df7b3cd14610215575b600080fd5b60015b6040519081526020015b60405180910390f35b61021361020e3660046118db565b6104e2565b005b6101ed60975481565b6101ed61022c3660046118bf565b609d6020526000908152604090205481565b61021361024c3660046118bf565b610603565b61027a61025f366004611961565b60a0602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101f7565b6102136102a03660046118db565b610741565b6102136102b3366004611913565b610838565b6102136102c63660046118db565b610a0b565b6102de6102d93660046118db565b610b4d565b60405190151581526020016101f7565b60995461027a906001600160a01b031681565b610213610b89565b6033546001600160a01b031661027a565b6102136103283660046118bf565b610bbf565b61021361033b3660046118db565b610cbd565b6102de61034e3660046118bf565b610d7b565b6102136103613660046118db565b610d98565b6102de6103743660046118db565b610f9c565b61027a610387366004611961565b609b602052600090815260409020546001600160a01b031681565b6101ed6103b03660046118bf565b609f6020526000908152604090205481565b6102136103d03660046118bf565b610fc9565b6101ed6103e3366004611961565b609e6020526000908152604090205481565b6101ed610403366004611961565b60a16020526000908152604090205481565b6102de6104233660046118db565b6001600160a01b039081166000908152609d60209081526040808320548352609e825280832054949093168252609f905220541490565b6102136104683660046118bf565b6110b8565b61021361047b3660046118bf565b611104565b61021361048e3660046118bf565b61124b565b6101ed6104a13660046118bf565b609a6020526000908152604090205481565b6101ed60985481565b6102136104ca3660046118bf565b6113bd565b6102136104dd3660046118bf565b6114d3565b336001600160a01b038316148061050357506033546001600160a01b031633145b61054f5760405162461bcd60e51b8152602060048201526018602482015277105b58985cdcd8591bdc8e8e881393d517d0531313d5d15160421b60448201526064015b60405180910390fd5b61055882610d7b565b6105745760405162461bcd60e51b8152600401610546906119ef565b61057d81610d7b565b1561059a5760405162461bcd60e51b815260040161054690611a67565b6000806000806105aa868661156e565b604051848152939750919550935091506001600160a01b0380831691818516918616907fb0433a1c3702cf0bd7986f8f52d4b155e390f3f600a3677f19d9953305466d7b906020015b60405180910390a4505050505050565b336000908152609f602052604090205461065a5760405162461bcd60e51b8152602060048201526018602482015277416d6261737361646f723a3a204f4e4c595f454e5449545960401b6044820152606401610546565b61066381610d7b565b156106805760405162461bcd60e51b815260040161054690611a67565b336000908152609f6020908152604080832054609780546001600160a01b038716808752609a8652848720829055908652609b855283862080546001600160a01b0319169091179055548452609e835281842081905580845260a19092528220805491926106ed83611b17565b90915550506097805490600061070283611b17565b909155505060405133906001600160a01b038416907f7974b0235ffa33752026d77f968bed3382bcd8ce49170bbb32d3fb7494d2275e90600090a35050565b6099546001600160a01b0316331461076b5760405162461bcd60e51b815260040161054690611979565b61077482610d7b565b6107905760405162461bcd60e51b8152600401610546906119ef565b61079a8282610f9c565b156107b75760405162461bcd60e51b815260040161054690611a67565b6001600160a01b038083166000908152609a60209081526040808320549385168352609d8252808320849055838352609c90915290206107f790836115db565b506040516001600160a01b0380841691908516906000907f8e197c1b94ad42b061a1947f91c7bff6387f001a7a5a0ddee8610893706de8af908290a4505050565b336000908152609f602052604090205415158061086e5750336108636033546001600160a01b031690565b6001600160a01b0316145b61088a5760405162461bcd60e51b815260040161054690611a26565b6001600160a01b0383166000908152609a60205260409020546108ad8433610b4d565b806108c257506033546001600160a01b031633145b6108de5760405162461bcd60e51b8152600401610546906119ef565b6000818152609c602052604090206108f5906115f7565b158061090357506001821515145b61094f5760405162461bcd60e51b815260206004820152601c60248201527f416d6261737361646f723a3a204841535f434f4d4d554e4954494553000000006044820152606401610546565b6000818152609e6020908152604080832080546001600160a01b0388168552609f8452828520549182905580855260a19093529083208054929391929161099583611b00565b9091555050600081815260a1602052604081208054916109b483611b17565b9091555050600082815260a060205260408082205490516001600160a01b038089169392811692908a16917ffcc524962ae2655aeb5b6c7ad6cb8e8fc45c9f14edf517beb2b48595a3cd90489190a4505050505050565b6001600160a01b0382166000818152609f602052604090205490331480610a3c57506033546001600160a01b031633145b610a835760405162461bcd60e51b8152602060048201526018602482015277105b58985cdcd8591bdc8e8e881393d517d0531313d5d15160421b6044820152606401610546565b80610aca5760405162461bcd60e51b8152602060048201526017602482015276416d6261737361646f723a3a204e4f545f454e5449545960481b6044820152606401610546565b600081815260a06020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255908716808552609f84528285208054838752848720558186529490945590518481529092917f1cef456569215c66a24eca2e9e631350d3daf1f358738ba7a3df455fcdc243a4910160405180910390a3505050565b6001600160a01b038082166000908152609f60209081526040808320549386168352609a8252808320548352609e909152902054145b92915050565b6033546001600160a01b03163314610bb35760405162461bcd60e51b8152600401610546906119ba565b610bbd6000611601565b565b6099546001600160a01b03163314610be95760405162461bcd60e51b815260040161054690611979565b6001600160a01b038082166000908152609d60209081526040808320548352609b90915290205416610c1b8183610f9c565b610c375760405162461bcd60e51b8152600401610546906119ef565b6001600160a01b038082166000908152609a60209081526040808320549386168352609d8252808320839055838352609c9091529020610c779084611653565b50826001600160a01b0316826001600160a01b03167fbac68789a3f4e375a8fa2492f0930108bbb4d9e2646f37abc5ef2a94ddce06ba60405160405180910390a3505050565b610cc78233610b4d565b80610cdc57506033546001600160a01b031633145b610cf85760405162461bcd60e51b8152600401610546906119ef565b610d0181610d7b565b15610d1e5760405162461bcd60e51b815260040161054690611a67565b600080600080610d2e868661156e565b604051848152939750919550935091506001600160a01b0380831691818516918616907f9998ffadb0cd2ca491daebaaecf860ac02dd25cd317ec9ef08b5c2a0a6a5677f906020016105f3565b6001600160a01b03166000908152609a6020526040902054151590565b336000908152609f6020526040902054151580610dce575033610dc36033546001600160a01b031690565b6001600160a01b0316145b610dea5760405162461bcd60e51b815260040161054690611a26565b6001600160a01b038082166000908152609d60209081526040808320548352609b90915290205416610e1c8183610f9c565b610e385760405162461bcd60e51b8152600401610546906119ef565b610e428383610f9c565b15610e5f5760405162461bcd60e51b815260040161054690611a67565b610e698133610b4d565b80610e7e57506033546001600160a01b031633145b610e9a5760405162461bcd60e51b8152600401610546906119ef565b610ea48333610b4d565b80610eb957506033546001600160a01b031633145b610ed55760405162461bcd60e51b8152600401610546906119ef565b6001600160a01b038084166000908152609a60208181526040808420548786168552609d8352818520559385168352908152828220548252609c905220610f1c9083611653565b506001600160a01b0383166000908152609a60209081526040808320548352609c9091529020610f4c90836115db565b50816001600160a01b0316836001600160a01b0316826001600160a01b03167f8e197c1b94ad42b061a1947f91c7bff6387f001a7a5a0ddee8610893706de8af60405160405180910390a4505050565b6001600160a01b039081166000908152609d6020908152604080832054949093168252609a905220541490565b600054610100900460ff16610fe45760005460ff1615610fe8565b303b155b61104b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610546565b600054610100900460ff1615801561106d576000805461ffff19166101011790555b611075611668565b61107d61169f565b60016097819055609855609980546001600160a01b0319166001600160a01b03841617905580156110b4576000805461ff00191690555b5050565b6033546001600160a01b031633146110e25760405162461bcd60e51b8152600401610546906119ba565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331461112e5760405162461bcd60e51b8152600401610546906119ba565b6001600160a01b0381166000908152609f60205260409020548061118e5760405162461bcd60e51b8152602060048201526017602482015276416d6261737361646f723a3a204e4f545f454e5449545960481b6044820152606401610546565b600081815260a16020526040902054156111ea5760405162461bcd60e51b815260206004820152601c60248201527f416d6261737361646f723a3a204841535f414d4241535341444f5253000000006044820152606401610546565b600081815260a06020908152604080832080546001600160a01b03191690556001600160a01b038516808452609f9092528083208390555190917f66baa8598dad476a7a23c2c39a3c9ea353a313b8050f5f2ff7df3121abe1f98391a25050565b336000908152609f60205260409020546112a25760405162461bcd60e51b8152602060048201526018602482015277416d6261737361646f723a3a204f4e4c595f454e5449545960401b6044820152606401610546565b6001600160a01b0381166000908152609a602090815260408083205433808552609f909352922054906112d6908490610b4d565b6112f25760405162461bcd60e51b8152600401610546906119ef565b6000828152609c60205260409020611309906115f7565b156113565760405162461bcd60e51b815260206004820152601c60248201527f416d6261737361646f723a3a204841535f434f4d4d554e4954494553000000006044820152606401610546565b600081815260a16020526040812080549161137083611b00565b90915550506001600160a01b0383166000818152609a6020526040808220829055513392917fdf0a456c1486c80ba4cdebb55052f692736d848b7cd52f7586d824a51018483791a3505050565b6033546001600160a01b031633146113e75760405162461bcd60e51b8152600401610546906119ba565b6001600160a01b0381166000908152609f60205260409020541561144d5760405162461bcd60e51b815260206004820152601b60248201527f416d6261737361646f723a3a20414c52454144595f454e5449545900000000006044820152606401610546565b609880546001600160a01b0383166000818152609f6020908152604080832085905593825260a0905291822080546001600160a01b03191690911790558154919061149783611b17565b90915550506040516001600160a01b038216907fb22e19f08ff14b8507fef310677b98ad1329eba6abb5b90f147acd6475dc762b90600090a250565b6033546001600160a01b031633146114fd5760405162461bcd60e51b8152600401610546906119ba565b6001600160a01b0381166115625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610546565b61156b81611601565b50565b6001600160a01b038281166000908152609a602081815260408084208054808652609e845282862054609b855283872080546001600160a01b0319168a8a169081179091559585528254958752838720959095559085905592845260a09091529091205490949116929190565b60006115f0836001600160a01b0384166116ce565b9392505050565b6000610b83825490565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006115f0836001600160a01b03841661171d565b600054610100900460ff1661168f5760405162461bcd60e51b815260040161054690611a9e565b61169761183a565b610bbd611861565b600054610100900460ff166116c65760405162461bcd60e51b815260040161054690611a9e565b610bbd611891565b600081815260018301602052604081205461171557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b83565b506000610b83565b60008181526001830160205260408120548015611830576000611741600183611ae9565b855490915060009061175590600190611ae9565b90508181146117d657600086600001828154811061178357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106117b457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806117f557634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b83565b6000915050610b83565b600054610100900460ff16610bbd5760405162461bcd60e51b815260040161054690611a9e565b600054610100900460ff166118885760405162461bcd60e51b815260040161054690611a9e565b610bbd33611601565b600054610100900460ff166118b85760405162461bcd60e51b815260040161054690611a9e565b6001606555565b6000602082840312156118d0578081fd5b81356115f081611b48565b600080604083850312156118ed578081fd5b82356118f881611b48565b9150602083013561190881611b48565b809150509250929050565b600080600060608486031215611927578081fd5b833561193281611b48565b9250602084013561194281611b48565b915060408401358015158114611956578182fd5b809150509250925092565b600060208284031215611972578081fd5b5035919050565b60208082526021908201527f416d6261737361646f723a3a204f4e4c595f434f4d4d554e4954595f41444d496040820152602760f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f416d6261737361646f723a3a204e4f545f414d4241535341444f520000000000604082015260600190565b60208082526021908201527f416d6261737361646f723a3a204f4e4c595f454e544954595f4f525f4f574e456040820152602960f91b606082015260800190565b6020808252601f908201527f416d6261737361646f723a3a20414c52454144595f414d4241535341444f5200604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082821015611afb57611afb611b32565b500390565b600081611b0f57611b0f611b32565b506000190190565b6000600019821415611b2b57611b2b611b32565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461156b57600080fdfea2646970667358221220860a416c28402c7468c8e01f56c36fe700231a61450e79055bef17aed347fb2064736f6c63430008040033",
  "devdoc": {
    "events": {
      "AmbassadorAccountReplaced(uint256,address,address,address)": {
        "params": {
          "ambassadorIndex": "Index of the ambassador being replaced",
          "entityAccount": "Address of the entity where ambassador is being replaced",
          "newAccount": "Ambassador's new account address",
          "oldAccount": "Ambassador's old account address"
        }
      },
      "AmbassadorAdded(address,address)": {
        "params": {
          "ambassador": "Address of the ambassador added",
          "entity": "Address of the entity where the ambassador is added"
        }
      },
      "AmbassadorRemoved(address,address)": {
        "params": {
          "ambassador": "Address of the ambassador removed",
          "entity": "Address of the entity where the ambassador is removed"
        }
      },
      "AmbassadorReplaced(uint256,address,address,address)": {
        "params": {
          "ambassadorIndex": "Index of the ambassador being replaced",
          "entityAccount": "Address of the entity where ambassador is being replaced",
          "newAmbassador": "Ambassador's new account address",
          "oldAmbassador": "Ambassador's old account address"
        }
      },
      "AmbassadorToCommunityUpdated(address,address,address)": {
        "params": {
          "community": "Community address being transfered",
          "fromAmbassador": "Ambassador address from which the community is being transfered from",
          "toAmbassador": "Ambassador address to which the community is being transfered to"
        }
      },
      "AmbassadorTransfered(address,address,address)": {
        "params": {
          "ambassador": "Ambassador address being replaced",
          "newEntity": "Entity's new account address",
          "oldEntity": "Entity's old account address"
        }
      },
      "CommunityRemoved(address,address)": {
        "params": {
          "ambassador": "Ambassador of the community being removed",
          "community": "Community address being removed"
        }
      },
      "EntityAccountReplaced(uint256,address,address)": {
        "params": {
          "entityIndex": "Entity index replacing account address",
          "newAccount": "New account address",
          "oldAccount": "Old account address"
        }
      },
      "EntityAdded(address)": {
        "params": {
          "entity": "Address of the entity added"
        }
      },
      "EntityRemoved(address)": {
        "params": {
          "entity": "Address of the entity removed"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addAmbassador(address)": {
        "params": {
          "_ambassador": "Address of the ambassador"
        }
      },
      "addEntity(address)": {
        "params": {
          "_entity": "Address of the entity"
        }
      },
      "initialize(address)": {
        "params": {
          "_communityAdmin": "Address of the community admin contract"
        }
      },
      "isAmbassador(address)": {
        "params": {
          "_ambassador": "Address of the ambassador"
        },
        "returns": {
          "_0": "Boolean whether an address is ambassador or not"
        }
      },
      "isAmbassadorAt(address,address)": {
        "params": {
          "_ambassador": "Address of the ambassador",
          "_entityAddress": "Address of the entity"
        },
        "returns": {
          "_0": "Boolean whether an address is ambassador at a given entity or not"
        }
      },
      "isAmbassadorOf(address,address)": {
        "params": {
          "_ambassador": "Address of the ambassador",
          "_community": "Address of the community"
        },
        "returns": {
          "_0": "Boolean whether an address is ambassador of a given community or not"
        }
      },
      "isEntityOf(address,address)": {
        "params": {
          "_community": "Address of the community",
          "_entity": "Address of the entity"
        },
        "returns": {
          "_0": "Boolean whether an address is entity reponsible for ambassador of a given community or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAmbassador(address)": {
        "params": {
          "_ambassador": "Address of the ambassador"
        }
      },
      "removeCommunity(address)": {
        "params": {
          "_community": "Community address"
        }
      },
      "removeEntity(address)": {
        "params": {
          "_entity": "Address of the entity"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "replaceAmbassador(address,address)": {
        "params": {
          "_newAmbassador": "New ambassador address",
          "_oldAmbassador": "Address of the ambassador"
        }
      },
      "replaceAmbassadorAccount(address,address)": {
        "params": {
          "_ambassador": "Address of the ambassador",
          "_newAmbassador": "New ambassador address"
        }
      },
      "replaceEntityAccount(address,address)": {
        "params": {
          "_entity": "Address of the entity",
          "_newEntity": "New entity address"
        }
      },
      "setCommunityToAmbassador(address,address)": {
        "params": {
          "_ambassador": "Address of the ambassador",
          "_community": "Community address"
        }
      },
      "transferAmbassador(address,address,bool)": {
        "params": {
          "_ambassador": "Address of the ambassador",
          "_keepCommunities": "Boolean whether to keep the ambassador's communities or not",
          "_toEntity": "Address of the entity"
        }
      },
      "transferCommunityToAmbassador(address,address)": {
        "params": {
          "_community": "Community address",
          "_to": "Address of the ambassador to transfer the community to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCommunityAdmin(address)": {
        "details": "used only for testing the new community upgrade flow",
        "params": {
          "_newCommunityAdmin": "address of the new communityAdmin"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AmbassadorAccountReplaced(uint256,address,address,address)": {
        "notice": "Triggered when an ambassador replaces it's own account."
      },
      "AmbassadorAdded(address,address)": {
        "notice": "Triggered when an ambassador is added to an entity."
      },
      "AmbassadorRemoved(address,address)": {
        "notice": "Triggered when an ambassador is removed."
      },
      "AmbassadorReplaced(uint256,address,address,address)": {
        "notice": "Triggered when an ambassador is replaced by the entity."
      },
      "AmbassadorToCommunityUpdated(address,address,address)": {
        "notice": "Triggered when a community is transfered from one ambassador to another."
      },
      "AmbassadorTransfered(address,address,address)": {
        "notice": "Triggered when an ambassador is transfered to a new entity."
      },
      "CommunityRemoved(address,address)": {
        "notice": "Triggered when a community is removed."
      },
      "EntityAccountReplaced(uint256,address,address)": {
        "notice": "Triggered when an entity replaced account address."
      },
      "EntityAdded(address)": {
        "notice": "Triggered when an entity is added."
      },
      "EntityRemoved(address)": {
        "notice": "Triggered when an entity is removed."
      }
    },
    "kind": "user",
    "methods": {
      "addAmbassador(address)": {
        "notice": "Registers an ambassador."
      },
      "addEntity(address)": {
        "notice": "Registers an entity."
      },
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "initialize(address)": {
        "notice": "Used to initialize a new Ambassadors contract"
      },
      "isAmbassador(address)": {
        "notice": "Returns boolean whether an address is ambassador or not."
      },
      "isAmbassadorAt(address,address)": {
        "notice": "Returns boolean whether an address is ambassador at a given entity."
      },
      "isAmbassadorOf(address,address)": {
        "notice": "Returns boolean whether an address is ambassador of a given community."
      },
      "isEntityOf(address,address)": {
        "notice": "Returns boolean whether an address is entity reponsible for ambassador of a given community."
      },
      "removeAmbassador(address)": {
        "notice": "Removes an ambassador."
      },
      "removeCommunity(address)": {
        "notice": "Removes community."
      },
      "removeEntity(address)": {
        "notice": "Removes an entity."
      },
      "replaceAmbassador(address,address)": {
        "notice": "Replaces an ambassador. Called by entity."
      },
      "replaceAmbassadorAccount(address,address)": {
        "notice": "Replace ambassador account. Called by ambassador."
      },
      "replaceEntityAccount(address,address)": {
        "notice": "Replace entity account."
      },
      "setCommunityToAmbassador(address,address)": {
        "notice": "Sets community to ambassador."
      },
      "transferAmbassador(address,address,bool)": {
        "notice": "Transfers an ambassador to another entity."
      },
      "transferCommunityToAmbassador(address,address)": {
        "notice": "Transfers community from ambassador to another ambassador."
      },
      "updateCommunityAdmin(address)": {
        "notice": "Updates the address of the communityAdmin"
      }
    },
    "notice": "Welcome to Ambassadors contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 542,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 545,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1068,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 736,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 779,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8578,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "ambassadorIndex",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 8580,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "entityIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 8583,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "communityAdmin",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(ICommunityAdmin)12085"
      },
      {
        "astId": 8587,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "ambassadorByAddress",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8591,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "ambassadorByIndex",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8596,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "ambassadorCommunities",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)5349_storage)"
      },
      {
        "astId": 8600,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "communityToAmbassador",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8604,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "ambassadorToEntity",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8608,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "entityByAddress",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8612,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "entityByIndex",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8616,
        "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
        "label": "entityAmbassadors",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICommunityAdmin)12085": {
        "encoding": "inplace",
        "label": "contract ICommunityAdmin",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)5349_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5349_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5349_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5348,
            "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5048_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5048_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5043,
            "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5047,
            "contract": "contracts/ambassadors/AmbassadorsImplementation.sol:AmbassadorsImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}