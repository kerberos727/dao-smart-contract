{
  "address": "0xd5A694C8F43f4449753357396cAC6B9171557233",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVotingPower",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a80c187792582d77650f07c6edb2b154a4dee23ad3fad0d70fbec190de4e612",
  "receipt": {
    "to": null,
    "from": "0x2F3340435E283A3d479dF091F913B6EFf96becF5",
    "contractAddress": "0xd5A694C8F43f4449753357396cAC6B9171557233",
    "transactionIndex": 2,
    "gasUsed": "1930268",
    "logsBloom": "0x
    "blockHash": "0xcf61edc53d3bcf118007140b696a4af20ae275b159c32bb1f98b504064efdf4c",
    "transactionHash": "0x0a80c187792582d77650f07c6edb2b154a4dee23ad3fad0d70fbec190de4e612",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8515917,
        "transactionHash": "0x0a80c187792582d77650f07c6edb2b154a4dee23ad3fad0d70fbec190de4e612",
        "address": "0xd5A694C8F43f4449753357396cAC6B9171557233",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f3340435e283a3d479df091f913b6eff96becf5"
        ],
        "data": "0x0000000000000000000000000000000000000000204fce5e3e25026110000000",
        "logIndex": 4,
        "blockHash": "0xcf61edc53d3bcf118007140b696a4af20ae275b159c32bb1f98b504064efdf4c"
      }
    ],
    "blockNumber": 8515917,
    "cumulativeGasUsed": "2326201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2F3340435E283A3d479dF091F913B6EFf96becF5"
  ],
  "solcInputHash": "afcdce682cbb7559134b40b7aecfc117",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotingPower\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"constructor\":{\"params\":{\"_initialOwner\":\"The initial account to grant all the tokens\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\"}},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"votingPower(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The amount of voting power held\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"},\"Transfer(address,address,uint256)\":{\"notice\":\"An event emitted when an account's voting power is transferred.\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"MAX_SUPPLY()\":{\"notice\":\"The maximum supply of PACT Tokens.\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the permit struct used by the contract\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"constructor\":{\"notice\":\"Construct a new PACT Token Note: this contract doesn't specify an initial minter, so there is no way new tokens can get created.\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spends\"},\"totalVotingPower()\":{\"notice\":\"Total voting power in existence.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"votingPower(address)\":{\"notice\":\"Get the amount of voting power of an account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/PACTToken.sol\":\"PACTToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ubeswap/governance/contracts/interfaces/IHasVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * Reads the votes that an account has.\\n */\\ninterface IHasVotes {\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n}\\n\",\"keccak256\":\"0x5ef48a77f18f580eab395335e8ec85ec9ad49ec7ce813515bd4aa73dfe0e8bf8\",\"license\":\"MIT\"},\"@ubeswap/governance/contracts/interfaces/INonTransferrableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * A token that cannot be transferred.\\n */\\ninterface INonTransferrableToken {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    // Views\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9e761706341588743eeb0bdeec8732766578d53ea3dfc357f3f734c7e0d6e1f8\",\"license\":\"MIT\"},\"@ubeswap/governance/contracts/interfaces/IVotingDelegates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * Interface for a contract that keeps track of voting delegates.\\n */\\ninterface IVotingDelegates {\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice An event emitted when an account's voting power is transferred.\\n    // - If `from` is `address(0)`, power was minted.\\n    // - If `to` is `address(0)`, power was burned.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice Name of the contract.\\n    // Required for signing.\\n    function name() external view returns (string memory);\\n\\n    /// @notice A record of each accounts delegate\\n    function delegates(address delegatee) external view returns (address);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Get the amount of voting power of an account\\n     * @param account The address of the account to get the balance of\\n     * @return The amount of voting power held\\n     */\\n    function votingPower(address account) external view returns (uint96);\\n\\n    /// @notice Total voting power in existence.\\n    function totalVotingPower() external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x0de81710d4c2bf47b34c0fe3d4dfa28891d931758280c1260344117965a5a634\",\"license\":\"MIT\"},\"@ubeswap/governance/contracts/voting/TransferrableVotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./VotingToken.sol\\\";\\n\\ncontract TransferrableVotingToken is VotingToken {\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @param initialSupply_ Initial supply of tokens\\n     * @param account_ The initial account to grant all the tokens\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint96 initialSupply_,\\n        address account_\\n    ) VotingToken(name_, symbol_, decimals_) {\\n        _mintVotes(account_, initialSupply_);\\n    }\\n\\n    ////////////////////////////////\\n    //\\n    // The below code is copied from Uniswap's Uni.sol.\\n    // Changes are marked with \\\"XXX\\\".\\n    //\\n    ////////////////////////////////\\n\\n    // XXX: deleted name, symbol, decimals, totalSupply, minter, mintingAllowedAfter,\\n    // minimumTimeBetweenMints, mintCap\\n\\n    // Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    // XXX: balances, delegates, Checkpoint, checkpoints,\\n    // numCheckpoints, DOMAIN_TYPEHASH, DELEGATION_TYPEHASH\\n    // are inherited from VotingPower.sol\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    // XXX: nonces is inherited from VotingPower.sol\\n\\n    // XXX: deleted MinterChanged\\n\\n    // XXX: deleted DelegateChanged, DelegateVotesChanged, Transfer and moved them to IVotingPower\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    // XXX: deleted constructor, setMinter, mint\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    // XXX_ADDED: upgrade to Solidity 0.8.3, which doesn't allow use of uintn(-1)\\n    uint256 internal constant MAX_INT = 2**256 - 1;\\n    uint96 internal constant MAX_INT_96 = 2**96 - 1;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        // XXX: uint256(-1) => MAX_INT\\n        if (rawAmount == MAX_INT) {\\n            // XXX: uint96(-1) => MAX_INT_96\\n            amount = MAX_INT_96;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Uni::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        uint96 amount;\\n        // XXX: uint256(-1) => MAX_INT\\n        if (rawAmount == MAX_INT) {\\n            // XXX: uint96(-1) => MAX_INT_oy\\n            amount = MAX_INT_96;\\n        } else {\\n            amount = safe96(rawAmount, \\\"Uni::permit: amount exceeds 96 bits\\\");\\n        }\\n\\n        // XXX_CHANGED: name => name()\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::permit: invalid signature\\\");\\n        require(signatory == owner, \\\"Uni::permit: unauthorized\\\");\\n        // XXX: added linter disable\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"Uni::permit: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    // XXX: deleted balanceOf\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        // XXX_ADDED\\n        require(\\n            dst != address(this),\\n            \\\"TransferrableVotingToken::transfer: cannot send tokens to contract\\\"\\n        );\\n        uint96 amount = safe96(rawAmount, \\\"Uni::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        // XXX_ADDED\\n        require(\\n            dst != address(this),\\n            \\\"TransferrableVotingToken::transferFrom: cannot send tokens to contract\\\"\\n        );\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"Uni::approve: amount exceeds 96 bits\\\");\\n\\n        // XXX: uint96(-1) => MAX_INT_96\\n        if (spender != src && spenderAllowance != MAX_INT_96) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"Uni::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    // XXX: rest is in VotingPower.sol\\n}\\n\",\"keccak256\":\"0xb10c4d88d69a52744a38a414fd7ede028be6aebf9a2d0e4daad765d0a24dbef2\",\"license\":\"MIT\"},\"@ubeswap/governance/contracts/voting/VotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../interfaces/IHasVotes.sol\\\";\\nimport \\\"../interfaces/IVotingDelegates.sol\\\";\\n/**\\n * Power to vote. Heavily based on Uni.\\n */\\ncontract VotingPower is IHasVotes, IVotingDelegates {\\n    // Name of the token. This cannot be changed after creating the token.\\n    string private _name;\\n\\n    // Total amount of voting power available.\\n    uint96 private totalVotingPowerSupply;\\n\\n    constructor(string memory name_) {\\n        _name = name_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Mint new voting power\\n     * @param dst The address of the destination account\\n     * @param amount The amount of voting power to be minted\\n     */\\n    function _mintVotes(address dst, uint96 amount) internal {\\n        require(dst != address(0), \\\"VotingPower::_mintVotes: cannot mint to the zero address\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[dst] = add96(balances[dst], amount, \\\"VotingPower::_mintVotes: mint amount overflows\\\");\\n        totalVotingPowerSupply = add96(\\n            totalVotingPowerSupply, amount, \\\"VotingPower::_mintVotes: total supply overflows\\\"\\n        );\\n        emit Transfer(address(0), dst, amount);\\n\\n        // move delegates\\n        _moveDelegates(address(0), delegates[dst], amount);\\n    }\\n\\n    /**\\n     * @notice Burn voting power\\n     * @param src The address of the source account\\n     * @param amount The amount of voting power to be burned\\n     */\\n    function _burnVotes(address src, uint96 amount) internal {\\n        require(src != address(0), \\\"VotingPower::_burnVotes: cannot burn from the zero address\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[src] = sub96(balances[src], amount, \\\"VotingPower::_burnVotes: burn amount underflows\\\");\\n        totalVotingPowerSupply = sub96(\\n            totalVotingPowerSupply, amount, \\\"VotingPower::_burnVotes: total supply underflows\\\"\\n        );\\n        emit Transfer(src, address(0), amount);\\n\\n        // move delegates\\n        _moveDelegates(delegates[src], address(0), amount);\\n    }\\n\\n    /**\\n     * @notice Get the amount of voting power of an account\\n     * @param account The address of the account to get the balance of\\n     * @return The amount of voting power held\\n     */\\n    function votingPower(address account) public view override returns (uint96) {\\n        return balances[account];\\n    }\\n\\n    function totalVotingPower() public view override returns (uint96) {\\n        return totalVotingPowerSupply;\\n    }\\n\\n    ////////////////////////////////\\n    //\\n    // The below code is copied from ../uniswap-governance/contracts/Uni.sol.\\n    // Changes are marked with \\\"XXX\\\".\\n    //\\n    ////////////////////////////////\\n\\n    // XXX: deleted name, symbol, decimals, totalSupply, minter, mintingAllowedAfter,\\n    // minimumTimeBetweenMints, mintCap, allowances\\n\\n    // Official record of token balances for each account\\n    // XXX: internal => private visibility\\n    mapping (address => uint96) private balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public override delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    // XXX: deleted PERMIT_TYPEHASH\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    // XXX: deleted MinterChanged\\n\\n    // XXX: deleted DelegateChanged, DelegateVotesChanged, Transfer and moved them to IVotingPower\\n\\n    // XXX: deleted Approval\\n\\n    // XXX: deleted constructor, setMinter, mint, allowance, approve, permit, balanceOf\\n\\n    // XXX: deleted transfer, transferFrom\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public override {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public override {\\n        // XXX_CHANGED: name => _name\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Uni::delegateBySig: invalid nonce\\\");\\n        // XXX: added linter disable\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= expiry, \\\"Uni::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view override returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view override returns (uint96) {\\n        require(blockNumber < block.number, \\\"Uni::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"Uni::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Uni::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"Uni::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"Uni::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"Uni::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"Uni::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"Uni::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint) {\\n        uint256 chainId;\\n        // XXX: added linter disable\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x8d0b83e7af0f3914a1818ad21d2f14bbc0113ffc249fe59cab322a7d0535839a\",\"license\":\"MIT\"},\"@ubeswap/governance/contracts/voting/VotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../interfaces/INonTransferrableToken.sol\\\";\\nimport \\\"./VotingPower.sol\\\";\\n\\n/**\\n * A non-transferrable token that can vote.\\n */\\ncontract VotingToken is INonTransferrableToken, VotingPower {\\n    string private _symbol;\\n    uint8 private immutable _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) VotingPower(name_) {\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name()\\n        public\\n        view\\n        override(INonTransferrableToken, VotingPower)\\n        returns (string memory)\\n    {\\n        return VotingPower.name();\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return totalVotingPower();\\n    }\\n\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return votingPower(_account);\\n    }\\n}\\n\",\"keccak256\":\"0x077a1da1011d51c9a7e808516cddb1e1e3de4d35594804cb4728db654d04f5af\",\"license\":\"MIT\"},\"contracts/token/PACTToken.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@ubeswap/governance/contracts/voting/TransferrableVotingToken.sol\\\";\\n\\ncontract PACTToken is TransferrableVotingToken {\\n    /// @notice The maximum supply of PACT Tokens.\\n    uint96 public constant MAX_SUPPLY = 10_000_000_000e18;\\n\\n    /**\\n     * @notice Construct a new PACT Token\\n     * Note: this contract doesn't specify an initial minter, so there is no way new\\n     * tokens can get created.\\n     * @param _initialOwner The initial account to grant all the tokens\\n     */\\n    constructor(address _initialOwner)\\n        TransferrableVotingToken(\\\"PactToken\\\", \\\"PACT\\\", 18, MAX_SUPPLY, _initialOwner)\\n    {}\\n}\\n\",\"keccak256\":\"0x1cc5f70397e994e5cd5ab2b53889b38edfebb1b70461aad9de34f7f8963e3931\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063c07473f61161007c578063c07473f6146103a6578063c3cda520146103b4578063d505accf146103c7578063dd62ed3e146103da578063e7a324dc1461041c578063f1127ed81461044357600080fd5b806370a0823114610313578063782d6fe1146103455780637ecebe001461035857806395d89b4114610378578063a9059cbb14610380578063b4b5ea571461039357600080fd5b8063313ce56711610115578063313ce5671461021557806332cb6b0c14610246578063587cde1e146102715780635c19a95c146102b2578063671b3793146102c75780636fcfff45146102d857600080fd5b806306fdde031461015d578063095ea7b31461017b57806318160ddd1461019e57806320606b70146101b457806323b872dd146101db57806330adf81f146101ee575b600080fd5b6101656104aa565b6040516101729190611c6f565b60405180910390f35b61018e610189366004611b16565b6104b9565b6040519015158152602001610172565b6101a661057a565b604051908152602001610172565b6101a67f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61018e6101e9366004611a72565b61059c565b6101a67f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610172565b6102596b204fce5e3e2502611000000081565b6040516001600160601b039091168152602001610172565b61029a61027f366004611a26565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610172565b6102c56102c0366004611a26565b610774565b005b6001546001600160601b0316610259565b6102fe6102e6366004611a26565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610172565b6101a6610321366004611a26565b6001600160a01b03166000908152600260205260409020546001600160601b031690565b610259610353366004611b16565b610781565b6101a6610366366004611a26565b60066020526000908152604090205481565b610165610a07565b61018e61038e366004611b16565b610a99565b6102596103a1366004611a26565b610b60565b610259610321366004611a26565b6102c56103c2366004611b3f565b610bde565b6102c56103d5366004611aad565b610eb1565b6101a66103e8366004611a40565b6001600160a01b0391821660009081526008602090815260408083209390941682529190915220546001600160601b031690565b6101a67fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b610486610451366004611b96565b600460209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b03909116602083015201610172565b60606104b4611282565b905090565b6000806000198314156104d457506001600160601b036104f9565b6104f683604051806060016040528060248152602001611f2660249139611291565b90505b3360008181526008602090815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b600061058e6001546001600160601b031690565b6001600160601b0316905090565b60006001600160a01b0383163014156106315760405162461bcd60e51b815260206004820152604660248201527f5472616e736665727261626c65566f74696e67546f6b656e3a3a7472616e736660448201527f657246726f6d3a2063616e6e6f742073656e6420746f6b656e7320746f20636f6064820152651b9d1c9858dd60d21b608482015260a4015b60405180910390fd5b6001600160a01b03841660009081526008602090815260408083203380855290835281842054825160608101909352602480845291946001600160601b03909116939092610687928892611f2690830139611291565b9050866001600160a01b0316836001600160a01b0316141580156106b457506001600160601b0382811614155b1561075c5760006106de83836040518060600160405280603c8152602001611ded603c91396112c0565b6001600160a01b038981166000818152600860209081526040808320948a168084529482529182902080546001600160601b0319166001600160601b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b61076787878361130a565b5060019695505050505050565b61077e338261155b565b50565b60004382106107e15760405162461bcd60e51b815260206004820152602660248201527f556e693a3a6765745072696f72566f7465733a206e6f742079657420646574656044820152651c9b5a5b995960d21b6064820152608401610628565b6001600160a01b03831660009081526005602052604090205463ffffffff168061080f576000915050610574565b6001600160a01b03841660009081526004602052604081208491610834600185611d3b565b63ffffffff908116825260208201929092526040016000205416116108a7576001600160a01b038416600090815260046020526040812090610877600184611d3b565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b031691506105749050565b6001600160a01b038416600090815260046020908152604080832083805290915290205463ffffffff168310156108e2576000915050610574565b6000806108f0600184611d3b565b90505b8163ffffffff168163ffffffff1611156109c257600060026109158484611d3b565b61091f9190611d0c565b6109299083611d3b565b6001600160a01b038816600090815260046020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152919250871415610996576020015194506105749350505050565b805163ffffffff168711156109ad578193506109bb565b6109b8600183611d3b565b92505b50506108f3565b506001600160a01b038516600090815260046020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b606060078054610a1690611d80565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4290611d80565b8015610a8f5780601f10610a6457610100808354040283529160200191610a8f565b820191906000526020600020905b815481529060010190602001808311610a7257829003601f168201915b5050505050905090565b60006001600160a01b038316301415610b255760405162461bcd60e51b815260206004820152604260248201527f5472616e736665727261626c65566f74696e67546f6b656e3a3a7472616e736660448201527f65723a2063616e6e6f742073656e6420746f6b656e7320746f20636f6e74726160648201526118dd60f21b608482015260a401610628565b6000610b4983604051806060016040528060258152602001611f0160259139611291565b9050610b5633858361130a565b5060019392505050565b6001600160a01b03811660009081526005602052604081205463ffffffff1680610b8b576000610bd7565b6001600160a01b038316600090815260046020526040812090610baf600184611d3b565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051610c109190611bd4565b6040518091039020610c1f4690565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a90528251808503909101815261014084019092528151919093012061190160f01b610160830152610162820183905261018282018190529192506000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610d4b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610dbc5760405162461bcd60e51b815260206004820152602560248201527f556e693a3a64656c656761746542795369673a20696e76616c6964207369676e604482015264617475726560d81b6064820152608401610628565b6001600160a01b0381166000908152600660205260408120805491610de083611dbb565b919050558914610e3c5760405162461bcd60e51b815260206004820152602160248201527f556e693a3a64656c656761746542795369673a20696e76616c6964206e6f6e636044820152606560f81b6064820152608401610628565b87421115610e9a5760405162461bcd60e51b815260206004820152602560248201527f556e693a3a64656c656761746542795369673a207369676e61747572652065786044820152641c1a5c995960da1b6064820152608401610628565b610ea4818b61155b565b505050505b505050505050565b6000600019861415610ecb57506001600160601b03610ef0565b610eed86604051806060016040528060238152602001611e5e60239139611291565b90505b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866610f1b6104aa565b80519060200120610f294690565b604080516020810194909452830191909152606082015230608082015260a00160408051601f1981840301815291815281516020928301206001600160a01b038c166000908152600690935290822080549193507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918c918c918c9186610faf83611dbb565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e0016040516020818303038152906040528051906020012090506000828260405160200161102e92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8b169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa158015611099573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110fc5760405162461bcd60e51b815260206004820152601e60248201527f556e693a3a7065726d69743a20696e76616c6964207369676e617475726500006044820152606401610628565b8b6001600160a01b0316816001600160a01b03161461115d5760405162461bcd60e51b815260206004820152601960248201527f556e693a3a7065726d69743a20756e617574686f72697a6564000000000000006044820152606401610628565b884211156111ad5760405162461bcd60e51b815260206004820152601e60248201527f556e693a3a7065726d69743a207369676e6174757265206578706972656400006044820152606401610628565b84600860008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405161126c91906001600160601b0391909116815260200190565b60405180910390a3505050505050505050505050565b606060008054610a1690611d80565b600081600160601b84106112b85760405162461bcd60e51b81526004016106289190611c6f565b509192915050565b6000836001600160601b0316836001600160601b0316111582906112f75760405162461bcd60e51b81526004016106289190611c6f565b506113028385611d60565b949350505050565b6001600160a01b0383166113865760405162461bcd60e51b815260206004820152603b60248201527f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160448201527f6e736665722066726f6d20746865207a65726f206164647265737300000000006064820152608401610628565b6001600160a01b0382166114025760405162461bcd60e51b815260206004820152603960248201527f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160448201527f6e7366657220746f20746865207a65726f2061646472657373000000000000006064820152608401610628565b6001600160a01b03831660009081526002602090815260409182902054825160608101909352603580845261144d936001600160601b039092169285929190611e29908301396112c0565b6001600160a01b03848116600090815260026020908152604080832080546001600160601b0319166001600160601b0396871617905592861682529082902054825160608101909352602f8084526114b59491909116928592909190611f4a908301396115e5565b6001600160a01b0383811660008181526002602090815260409182902080546001600160601b0319166001600160601b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b0380841660009081526003602052604080822054858416835291205461155692918216911683611632565b505050565b6001600160a01b03808316600081815260036020818152604080842080546002845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46115df828483611632565b50505050565b6000806115f28486611cea565b9050846001600160601b0316816001600160601b0316101583906116295760405162461bcd60e51b81526004016106289190611c6f565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561165d57506000816001600160601b0316115b15611556576001600160a01b03831615611722576001600160a01b03831660009081526005602052604081205463ffffffff16908161169d5760006116e9565b6001600160a01b0385166000908152600460205260408120906116c1600185611d3b565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006117108285604051806060016040528060278152602001611eda602791396112c0565b905061171e868484846117da565b5050505b6001600160a01b03821615611556576001600160a01b03821660009081526005602052604081205463ffffffff16908161175d5760006117a9565b6001600160a01b038416600090815260046020526040812090611781600185611d3b565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006117d08285604051806060016040528060268152602001611e81602691396115e5565b9050610ea9858484845b60006117fe43604051806060016040528060338152602001611ea7603391396119d2565b905060008463ffffffff1611801561185857506001600160a01b038516600090815260046020526040812063ffffffff83169161183c600188611d3b565b63ffffffff908116825260208201929092526040016000205416145b156118cc576001600160a01b03851660009081526004602052604081208391611882600188611d3b565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff000000001990921691909117905561197d565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600482528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff1990941691161791909117905561194c846001611cc2565b6001600160a01b0386166000908152600560205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b84106112b85760405162461bcd60e51b81526004016106289190611c6f565b80356001600160a01b0381168114611a1057600080fd5b919050565b803560ff81168114611a1057600080fd5b600060208284031215611a37578081fd5b610bd7826119f9565b60008060408385031215611a52578081fd5b611a5b836119f9565b9150611a69602084016119f9565b90509250929050565b600080600060608486031215611a86578081fd5b611a8f846119f9565b9250611a9d602085016119f9565b9150604084013590509250925092565b600080600080600080600060e0888a031215611ac7578283fd5b611ad0886119f9565b9650611ade602089016119f9565b95506040880135945060608801359350611afa60808901611a15565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611b28578182fd5b611b31836119f9565b946020939093013593505050565b60008060008060008060c08789031215611b57578182fd5b611b60876119f9565b95506020870135945060408701359350611b7c60608801611a15565b92506080870135915060a087013590509295509295509295565b60008060408385031215611ba8578182fd5b611bb1836119f9565b9150602083013563ffffffff81168114611bc9578182fd5b809150509250929050565b600080835482600182811c915080831680611bf057607f831692505b6020808410821415611c1057634e487b7160e01b87526022600452602487fd5b818015611c245760018114611c3557611c61565b60ff19861689528489019650611c61565b60008a815260209020885b86811015611c595781548b820152908501908301611c40565b505084890196505b509498975050505050505050565b6000602080835283518082850152825b81811015611c9b57858101830151858201604001528201611c7f565b81811115611cac5783604083870101525b50601f01601f1916929092016040019392505050565b600063ffffffff808316818516808303821115611ce157611ce1611dd6565b01949350505050565b60006001600160601b03808316818516808303821115611ce157611ce1611dd6565b600063ffffffff80841680611d2f57634e487b7160e01b83526012600452602483fd5b92169190910492915050565b600063ffffffff83811690831681811015611d5857611d58611dd6565b039392505050565b60006001600160601b0383811690831681811015611d5857611d58611dd6565b600181811c90821680611d9457607f821691505b60208210811415611db557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611dcf57611dcf611dd6565b5060010190565b634e487b7160e01b600052601160045260246000fdfe556e693a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365556e693a3a7065726d69743a20616d6f756e7420657863656564732039362062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773556e693a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473556e693a3a617070726f76653a20616d6f756e7420657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773a26469706673582212209373841b59fec5f99c6f77b30ee55e9f4bfed941d52c1992a6f066326413308864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "constructor": {
        "params": {
          "_initialOwner": "The initial account to grant all the tokens"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "votingPower(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The amount of voting power held"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      },
      "Transfer(address,address,uint256)": {
        "notice": "An event emitted when an account's voting power is transferred."
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "MAX_SUPPLY()": {
        "notice": "The maximum supply of PACT Tokens."
      },
      "PERMIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the permit struct used by the contract"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "constructor": {
        "notice": "Construct a new PACT Token Note: this contract doesn't specify an initial minter, so there is no way new tokens can get created."
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spends"
      },
      "totalVotingPower()": {
        "notice": "Total voting power in existence."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "votingPower(address)": {
        "notice": "Get the amount of voting power of an account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5830,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 5832,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "totalVotingPowerSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint96"
      },
      {
        "astId": 5996,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 6002,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "delegates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6015,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)6007_storage))"
      },
      {
        "astId": 6020,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 6037,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "nonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6731,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 5467,
        "contract": "contracts/token/PACTToken.sol:PACTToken",
        "label": "allowances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)6007_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct VotingPower.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)6007_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)6007_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct VotingPower.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)6007_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)6007_storage": {
        "encoding": "inplace",
        "label": "struct VotingPower.Checkpoint",
        "members": [
          {
            "astId": 6004,
            "contract": "contracts/token/PACTToken.sol:PACTToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 6006,
            "contract": "contracts/token/PACTToken.sol:PACTToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}