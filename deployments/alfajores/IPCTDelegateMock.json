{
  "address": "0x0Dca41310E35c61a0c98736Dcf1fc275C9c89D69",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposalThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldQuorumVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuorumVotes",
          "type": "uint256"
        }
      ],
      "name": "QuorumVotesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "VotingDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "VotingPeriodSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROPOSAL_MAX_OPERATIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "_setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "_setProposalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newQuorumVotes",
          "type": "uint256"
        }
      ],
      "name": "_setQuorumVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "_setVotingDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "_setVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct IPCTDelegateStorageV1.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "timelock_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "releaseToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votingPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingDelay_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quorumVotes_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestProposalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalCalldatas",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proposalReceipts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalSignatures",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalTargets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseToken",
      "outputs": [
        {
          "internalType": "contract IHasVotes",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IPCTDelegateStorageV1.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "contract TimelockInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IHasVotes",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58e44a3902dfbc95e532814cad5ffda6c9671440bc0bc859d35424df6ee40358",
  "receipt": {
    "to": null,
    "from": "0x2F3340435E283A3d479dF091F913B6EFf96becF5",
    "contractAddress": "0x0Dca41310E35c61a0c98736Dcf1fc275C9c89D69",
    "transactionIndex": 1,
    "gasUsed": "6419540",
    "logsBloom": "0x
    "blockHash": "0x3116ba299c7ed5c3988617d24f0d621f5fa50587c8a646137f097bccb7da9e15",
    "transactionHash": "0x58e44a3902dfbc95e532814cad5ffda6c9671440bc0bc859d35424df6ee40358",
    "logs": [],
    "blockNumber": 7669408,
    "cumulativeGasUsed": "6618264",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9c20b7d0ef3c95f34061765f16360135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"QuorumVotesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_MAX_OPERATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"_setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"_setQuorumVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"_setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"_setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct IPCTDelegateStorageV1.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"releaseToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalCalldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalReceipts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalSignatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[{\"internalType\":\"contract IHasVotes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IPCTDelegateStorageV1.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract TimelockInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IHasVotes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\"},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"}},\"_setProposalThreshold(uint256)\":{\"details\":\"newProposalThreshold must be greater than the hardcoded min\",\"params\":{\"newProposalThreshold\":\"new proposal threshold\"}},\"_setQuorumVotes(uint256)\":{\"params\":{\"newQuorumVotes\":\"new quorum votes\"}},\"_setVotingDelay(uint256)\":{\"params\":{\"newVotingDelay\":\"new voting delay, in blocks\"}},\"_setVotingPeriod(uint256)\":{\"params\":{\"newVotingPeriod\":\"new voting period, in blocks\"}},\"cancel(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal to cancel\"}},\"castVote(uint256,uint8)\":{\"params\":{\"proposalId\":\"The id of the proposal to vote on\",\"support\":\"The support value for the vote. 0=against, 1=for, 2=abstain\"}},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"External function that accepts EIP-712 signatures for voting on proposals.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"params\":{\"proposalId\":\"The id of the proposal to vote on\",\"reason\":\"The reason given for the vote by the voter\",\"support\":\"The support value for the vote. 0=against, 1=for, 2=abstain\"}},\"execute(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal to execute\"}},\"getActions(uint256)\":{\"params\":{\"proposalId\":\"Proposal to query.\"},\"returns\":{\"calldatas\":\"Calldatas for proposal calls.\",\"signatures\":\"Function signatures for proposal calls.\",\"targets\":\"Target addresses for proposal calls.\",\"values\":\"Eth values for proposal calls.\"}},\"getReceipt(uint256,address)\":{\"params\":{\"proposalId\":\"the id of proposal\",\"voter\":\"The address of the voter\"},\"returns\":{\"_0\":\"The voting receipt\"}},\"initialize(address,address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"proposalThreshold_\":\"The initial proposal threshold\",\"quorumVotes_\":\"The initial quorum votes\",\"releaseToken_\":\"The address of the \\\"Release\\\" voting token. If none, specify the zero address.\",\"timelock_\":\"The address of the Timelock\",\"token_\":\"The address of the voting token\",\"votingDelay_\":\"The initial voting delay\",\"votingPeriod_\":\"The initial voting period\"}},\"propose(address[],uint256[],string[],bytes[],string)\":{\"params\":{\"calldatas\":\"Calldatas for proposal calls.\",\"description\":\"String description of the proposal.\",\"signatures\":\"Function signatures for proposal calls.\",\"targets\":\"Target addresses for proposal calls.\",\"values\":\"Eth values for proposal calls.\"},\"returns\":{\"_0\":\"Proposal id of new proposal.\"}},\"queue(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal to queue\"}},\"state(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal\"},\"returns\":{\"_0\":\"Proposal state\"}}},\"version\":1},\"userdoc\":{\"events\":{\"NewAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewImplementation(address,address)\":{\"notice\":\"Emitted when implementation is changed\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is changed\"},\"ProposalCanceled(uint256)\":{\"notice\":\"An event emitted when a proposal has been canceled\"},\"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\":{\"notice\":\"An event emitted when a new proposal is created\"},\"ProposalExecuted(uint256)\":{\"notice\":\"An event emitted when a proposal has been executed in the Timelock\"},\"ProposalQueued(uint256,uint256)\":{\"notice\":\"An event emitted when a proposal has been queued in the Timelock\"},\"ProposalThresholdSet(uint256,uint256)\":{\"notice\":\"Emitted when proposal threshold is set\"},\"QuorumVotesSet(uint256,uint256)\":{\"notice\":\"An event emitted when the quorum votes is set\"},\"VoteCast(address,uint256,uint8,uint256,string)\":{\"notice\":\"An event emitted when a vote has been cast on a proposal\"},\"VotingDelaySet(uint256,uint256)\":{\"notice\":\"An event emitted when the voting delay is set\"},\"VotingPeriodSet(uint256,uint256)\":{\"notice\":\"An event emitted when the voting period is set\"}},\"kind\":\"user\",\"methods\":{\"BALLOT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the ballot struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"MAX_PROPOSAL_THRESHOLD()\":{\"notice\":\"The maximum setable proposal threshold\"},\"MAX_VOTING_DELAY()\":{\"notice\":\"The max setable voting delay\"},\"MAX_VOTING_PERIOD()\":{\"notice\":\"The max setable voting period\"},\"MIN_PROPOSAL_THRESHOLD()\":{\"notice\":\"The minimum setable proposal threshold\"},\"MIN_VOTING_DELAY()\":{\"notice\":\"The min setable voting delay\"},\"MIN_VOTING_PERIOD()\":{\"notice\":\"The minimum setable voting period\"},\"NAME()\":{\"notice\":\"The name of this contract\"},\"PROPOSAL_MAX_OPERATIONS()\":{\"notice\":\"The maximum number of actions that can be included in a proposal\"},\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setProposalThreshold(uint256)\":{\"notice\":\"Admin function for setting the proposal threshold\"},\"_setQuorumVotes(uint256)\":{\"notice\":\"Admin function for setting the quorum votes\"},\"_setVotingDelay(uint256)\":{\"notice\":\"Admin function for setting the voting delay\"},\"_setVotingPeriod(uint256)\":{\"notice\":\"Function for setting the voting period\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"cancel(uint256)\":{\"notice\":\"Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\"},\"castVote(uint256,uint8)\":{\"notice\":\"Cast a vote for a proposal\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"notice\":\"Cast a vote for a proposal by signature\"},\"castVoteWithReason(uint256,uint8,string)\":{\"notice\":\"Cast a vote for a proposal with a reason\"},\"execute(uint256)\":{\"notice\":\"Executes a queued proposal if eta has passed\"},\"getActions(uint256)\":{\"notice\":\"Gets actions of a proposal.\"},\"getReceipt(uint256,address)\":{\"notice\":\"Gets the receipt for a voter on a given proposal\"},\"implementation()\":{\"notice\":\"Active brains of Governor\"},\"initialize(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used to initialize the contract during delegator contructor\"},\"latestProposalIds(address)\":{\"notice\":\"The latest proposal for each proposer\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"proposalCalldatas(uint256,uint256)\":{\"notice\":\"The official each proposal's calldatas: An ordered list of calldata to be passed to each call\"},\"proposalCount()\":{\"notice\":\"The total number of proposals\"},\"proposalReceipts(uint256,address)\":{\"notice\":\"The official each proposal's receipts: Receipts of ballots for the entire set of voters\"},\"proposalSignatures(uint256,uint256)\":{\"notice\":\"The official each proposal's signatures: An ordered list of function signatures to be called\"},\"proposalTargets(uint256,uint256)\":{\"notice\":\"The official each proposal's targets: An ordered list of target addresses for calls to be made\"},\"proposalThreshold()\":{\"notice\":\"The number of votes required in order for a voter to become a proposer\"},\"proposalValues(uint256,uint256)\":{\"notice\":\"The official each proposal's values: An ordered list of values (i.e. msg.value) to be passed to the calls to be made\"},\"proposals(uint256)\":{\"notice\":\"The official record of all proposals ever proposed\"},\"propose(address[],uint256[],string[],bytes[],string)\":{\"notice\":\"Function used to propose a new proposal. Sender must have delegates above the proposal threshold.\"},\"queue(uint256)\":{\"notice\":\"Queues a proposal of state succeeded\"},\"quorumVotes()\":{\"notice\":\"The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\"},\"releaseToken()\":{\"notice\":\"The address of the \\\"Release\\\" governance token\"},\"state(uint256)\":{\"notice\":\"Gets the state of a proposal\"},\"timelock()\":{\"notice\":\"The address of the Governance Timelock\"},\"token()\":{\"notice\":\"The address of the governance token\"},\"votingDelay()\":{\"notice\":\"The delay before voting on a proposal may take place, once proposed, in blocks\"},\"votingPeriod()\":{\"notice\":\"The duration of voting on a proposal, in blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/IPCTDelegateMock.sol\":\"IPCTDelegateMock\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@ubeswap/governance/contracts/interfaces/IHasVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * Reads the votes that an account has.\\n */\\ninterface IHasVotes {\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n}\\n\",\"keccak256\":\"0x5ef48a77f18f580eab395335e8ec85ec9ad49ec7ce813515bd4aa73dfe0e8bf8\",\"license\":\"MIT\"},\"contracts/governor/IPCTDelegate.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IPCTDelegateStorageV1.sol\\\";\\nimport \\\"./interfaces/IPCTEvents.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract IPCTDelegate is IPCTDelegateStorageV1, IPCTEvents, Initializable {\\n    /// @notice The name of this contract\\n    string public constant NAME = \\\"IPCT\\\";\\n\\n    /// @notice The minimum setable proposal threshold\\n    uint256 public constant MIN_PROPOSAL_THRESHOLD = 100_000_000e18; // 100,000,000 Tokens\\n\\n    /// @notice The maximum setable proposal threshold\\n    uint256 public constant MAX_PROPOSAL_THRESHOLD = 500_000_000e18; // 500,000,000 Tokens\\n\\n    /// @notice The minimum setable voting period\\n    uint256 public constant MIN_VOTING_PERIOD = 17280; // About 24 hours\\n\\n    /// @notice The max setable voting period\\n    uint256 public constant MAX_VOTING_PERIOD = 241920; // About 2 weeks\\n\\n    /// @notice The min setable voting delay\\n    uint256 public constant MIN_VOTING_DELAY = 1;\\n\\n    /// @notice The max setable voting delay\\n    uint256 public constant MAX_VOTING_DELAY = 120960; // About 1 week\\n\\n    /// @notice The maximum number of actions that can be included in a proposal\\n    uint256 public constant PROPOSAL_MAX_OPERATIONS = 10; // 10 actions\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n    modifier adminOnly() {\\n        require(msg.sender == admin, \\\"Only admin can call\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize the contract during delegator contructor\\n     * @param timelock_ The address of the Timelock\\n     * @param token_ The address of the voting token\\n     * @param releaseToken_ The address of the \\\"Release\\\" voting token. If none, specify the zero address.\\n     * @param votingPeriod_ The initial voting period\\n     * @param votingDelay_ The initial voting delay\\n     * @param proposalThreshold_ The initial proposal threshold\\n     * @param quorumVotes_ The initial quorum votes\\n     */\\n    function initialize(\\n        address timelock_,\\n        address token_,\\n        address releaseToken_,\\n        uint256 votingPeriod_,\\n        uint256 votingDelay_,\\n        uint256 proposalThreshold_,\\n        uint256 quorumVotes_\\n    ) public initializer adminOnly {\\n        require(\\n            TimelockInterface(timelock_).admin() == address(this),\\n            \\\"IPCT::initialize: timelock admin is not assigned to IPCTDelegate\\\"\\n        );\\n        require(\\n            votingPeriod_ >= MIN_VOTING_PERIOD && votingPeriod_ <= MAX_VOTING_PERIOD,\\n            \\\"IPCT::initialize: invalid voting period\\\"\\n        );\\n        require(\\n            votingDelay_ >= MIN_VOTING_DELAY && votingDelay_ <= MAX_VOTING_DELAY,\\n            \\\"IPCT::initialize: invalid voting delay\\\"\\n        );\\n        require(\\n            proposalThreshold_ >= MIN_PROPOSAL_THRESHOLD &&\\n                proposalThreshold_ <= MAX_PROPOSAL_THRESHOLD,\\n            \\\"IPCT::initialize: invalid proposal threshold\\\"\\n        );\\n        require(quorumVotes_ >= proposalThreshold_, \\\"IPCT::initialize: invalid quorum votes\\\");\\n        timelock = TimelockInterface(timelock_);\\n        require(\\n            timelock.admin() == address(this),\\n            \\\"IPCT::initialize: timelock admin is not assigned to IPCTDelegate\\\"\\n        );\\n\\n        admin = msg.sender;\\n        token = IHasVotes(token_);\\n        releaseToken = IHasVotes(releaseToken_);\\n        votingPeriod = votingPeriod_;\\n        votingDelay = votingDelay_;\\n        proposalThreshold = proposalThreshold_;\\n        quorumVotes = quorumVotes_;\\n\\n        // Create dummy proposal\\n        Proposal memory dummyProposal = Proposal({\\n            id: proposalCount,\\n            proposer: address(this),\\n            eta: 0,\\n            startBlock: 0,\\n            endBlock: 0,\\n            forVotes: 0,\\n            againstVotes: 0,\\n            abstainVotes: 0,\\n            canceled: true,\\n            executed: false\\n        });\\n        proposalCount++;\\n\\n        proposals[dummyProposal.id] = dummyProposal;\\n        latestProposalIds[dummyProposal.proposer] = dummyProposal.id;\\n\\n        emit ProposalCreated(\\n            dummyProposal.id,\\n            address(this),\\n            proposalTargets[dummyProposal.id],\\n            proposalValues[dummyProposal.id],\\n            proposalSignatures[dummyProposal.id],\\n            proposalCalldatas[dummyProposal.id],\\n            0,\\n            0,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold.\\n     * @param targets Target addresses for proposal calls.\\n     * @param values Eth values for proposal calls.\\n     * @param signatures Function signatures for proposal calls.\\n     * @param calldatas Calldatas for proposal calls.\\n     * @param description String description of the proposal.\\n     * @return Proposal id of new proposal.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public returns (uint256) {\\n        require(\\n            getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold,\\n            \\\"IPCT::propose: proposer votes below proposal threshold\\\"\\n        );\\n        require(\\n            targets.length == values.length &&\\n                targets.length == signatures.length &&\\n                targets.length == calldatas.length,\\n            \\\"IPCT::propose: proposal function information arity mismatch\\\"\\n        );\\n        require(targets.length != 0, \\\"IPCT::propose: must provide actions\\\");\\n        require(targets.length <= PROPOSAL_MAX_OPERATIONS, \\\"IPCT::propose: too many actions\\\");\\n\\n        uint256 latestProposalId = latestProposalIds[msg.sender];\\n        if (latestProposalId != 0) {\\n            ProposalState proposersLatestProposalState = state(latestProposalId);\\n            require(\\n                proposersLatestProposalState != ProposalState.Active,\\n                \\\"IPCT::propose: one live proposal per proposer, found an already active proposal\\\"\\n            );\\n            require(\\n                proposersLatestProposalState != ProposalState.Pending,\\n                \\\"IPCT::propose: one live proposal per proposer, found an already pending proposal\\\"\\n            );\\n        }\\n\\n        uint256 startBlock = add256(block.number, votingDelay);\\n        uint256 endBlock = add256(startBlock, votingPeriod);\\n\\n        Proposal memory newProposal = Proposal({\\n            id: proposalCount,\\n            proposer: msg.sender,\\n            eta: 0,\\n            startBlock: startBlock,\\n            endBlock: endBlock,\\n            forVotes: 0,\\n            againstVotes: 0,\\n            abstainVotes: 0,\\n            canceled: false,\\n            executed: false\\n        });\\n        proposalCount++;\\n\\n        proposals[newProposal.id] = newProposal;\\n        proposalTargets[newProposal.id] = targets;\\n        proposalValues[newProposal.id] = values;\\n        proposalSignatures[newProposal.id] = signatures;\\n        proposalCalldatas[newProposal.id] = calldatas;\\n        latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n        emit ProposalCreated(\\n            newProposal.id,\\n            msg.sender,\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            startBlock,\\n            endBlock,\\n            description\\n        );\\n        return newProposal.id;\\n    }\\n\\n    /**\\n     * @notice Queues a proposal of state succeeded\\n     * @param proposalId The id of the proposal to queue\\n     */\\n    function queue(uint256 proposalId) external {\\n        require(\\n            state(proposalId) == ProposalState.Succeeded,\\n            \\\"IPCT::queue: proposal can only be queued if it is succeeded\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        uint256 eta = add256(block.timestamp, timelock.delay());\\n        for (uint256 i = 0; i < proposalTargets[proposalId].length; i++) {\\n            queueOrRevertInternal(\\n                proposalTargets[proposalId][i],\\n                proposalValues[proposalId][i],\\n                proposalSignatures[proposalId][i],\\n                proposalCalldatas[proposalId][i],\\n                eta\\n            );\\n        }\\n        proposal.eta = eta;\\n        emit ProposalQueued(proposalId, eta);\\n    }\\n\\n    function queueOrRevertInternal(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data,\\n        uint256 eta\\n    ) internal {\\n        require(\\n            !timelock.queuedTransactions(\\n                keccak256(abi.encode(target, value, signature, data, eta))\\n            ),\\n            \\\"IPCT::queueOrRevertInternal: identical proposal action already queued at eta\\\"\\n        );\\n        timelock.queueTransaction(target, value, signature, data, eta);\\n    }\\n\\n    /**\\n     * @notice Executes a queued proposal if eta has passed\\n     * @param proposalId The id of the proposal to execute\\n     */\\n    function execute(uint256 proposalId) external payable {\\n        require(\\n            state(proposalId) == ProposalState.Queued,\\n            \\\"IPCT::execute: proposal can only be executed if it is queued\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n        for (uint256 i = 0; i < proposalTargets[proposalId].length; i++) {\\n            timelock.executeTransaction{value: proposalValues[proposalId][i]}(\\n                proposalTargets[proposalId][i],\\n                proposalValues[proposalId][i],\\n                proposalSignatures[proposalId][i],\\n                proposalCalldatas[proposalId][i],\\n                proposal.eta\\n            );\\n        }\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    /**\\n     * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\\n     * @param proposalId The id of the proposal to cancel\\n     */\\n    function cancel(uint256 proposalId) external {\\n        require(\\n            state(proposalId) != ProposalState.Executed,\\n            \\\"IPCT::cancel: cannot cancel executed proposal\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        require(\\n            msg.sender == proposal.proposer ||\\n                getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold,\\n            \\\"IPCT::cancel: proposer above threshold\\\"\\n        );\\n\\n        proposal.canceled = true;\\n        for (uint256 i = 0; i < proposalTargets[proposalId].length; i++) {\\n            timelock.cancelTransaction(\\n                proposalTargets[proposalId][i],\\n                proposalValues[proposalId][i],\\n                proposalSignatures[proposalId][i],\\n                proposalCalldatas[proposalId][i],\\n                proposal.eta\\n            );\\n        }\\n\\n        emit ProposalCanceled(proposalId);\\n    }\\n\\n    /**\\n     * @notice Gets actions of a proposal.\\n     * @param proposalId Proposal to query.\\n     * @return targets Target addresses for proposal calls.\\n     * @return values Eth values for proposal calls.\\n     * @return signatures Function signatures for proposal calls.\\n     * @return calldatas Calldatas for proposal calls.\\n     */\\n    function getActions(uint256 proposalId)\\n        external\\n        view\\n        returns (\\n            address[] memory targets,\\n            uint256[] memory values,\\n            string[] memory signatures,\\n            bytes[] memory calldatas\\n        )\\n    {\\n        return (\\n            proposalTargets[proposalId],\\n            proposalValues[proposalId],\\n            proposalSignatures[proposalId],\\n            proposalCalldatas[proposalId]\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the receipt for a voter on a given proposal\\n     * @param proposalId the id of proposal\\n     * @param voter The address of the voter\\n     * @return The voting receipt\\n     */\\n    function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory) {\\n        return proposalReceipts[proposalId][voter];\\n    }\\n\\n    /**\\n     * @notice Gets the state of a proposal\\n     * @param proposalId The id of the proposal\\n     * @return Proposal state\\n     */\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\n        require(proposalCount > proposalId, \\\"IPCT::state: invalid proposal id\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        } else if (block.number <= proposal.startBlock) {\\n            return ProposalState.Pending;\\n        } else if (block.number <= proposal.endBlock) {\\n            return ProposalState.Active;\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {\\n            return ProposalState.Defeated;\\n        } else if (proposal.eta == 0) {\\n            return ProposalState.Succeeded;\\n        } else if (proposal.executed) {\\n            return ProposalState.Executed;\\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\n            return ProposalState.Expired;\\n        } else {\\n            return ProposalState.Queued;\\n        }\\n    }\\n\\n    /**\\n     * @notice Cast a vote for a proposal\\n     * @param proposalId The id of the proposal to vote on\\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n     */\\n    function castVote(uint256 proposalId, uint8 support) external {\\n        emit VoteCast(\\n            msg.sender,\\n            proposalId,\\n            support,\\n            castVoteInternal(msg.sender, proposalId, support),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Cast a vote for a proposal with a reason\\n     * @param proposalId The id of the proposal to vote on\\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n     * @param reason The reason given for the vote by the voter\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) external {\\n        emit VoteCast(\\n            msg.sender,\\n            proposalId,\\n            support,\\n            castVoteInternal(msg.sender, proposalId, support),\\n            reason\\n        );\\n    }\\n\\n    /**\\n     * @notice Cast a vote for a proposal by signature\\n     * @dev External function that accepts EIP-712 signatures for voting on proposals.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(NAME)), getChainIdInternal(), address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"IPCT::castVoteBySig: invalid signature\\\");\\n        emit VoteCast(\\n            signatory,\\n            proposalId,\\n            support,\\n            castVoteInternal(signatory, proposalId, support),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal function that caries out voting logic\\n     * @param voter The voter that is casting their vote\\n     * @param proposalId The id of the proposal to vote on\\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n     * @return The number of votes cast\\n     */\\n    function castVoteInternal(\\n        address voter,\\n        uint256 proposalId,\\n        uint8 support\\n    ) internal returns (uint96) {\\n        require(\\n            state(proposalId) == ProposalState.Active,\\n            \\\"IPCT::castVoteInternal: voting is closed\\\"\\n        );\\n        require(support <= 2, \\\"IPCT::castVoteInternal: invalid vote type\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposalReceipts[proposalId][voter];\\n        require(receipt.hasVoted == false, \\\"IPCT::castVoteInternal: voter already voted\\\");\\n        uint96 votes = getPriorVotes(voter, proposal.startBlock);\\n\\n        if (support == 0) {\\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\\n        } else if (support == 1) {\\n            proposal.forVotes = add256(proposal.forVotes, votes);\\n        } else if (support == 2) {\\n            proposal.abstainVotes = add256(proposal.abstainVotes, votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.support = support;\\n        receipt.votes = votes;\\n\\n        return votes;\\n    }\\n\\n    /**\\n     * @notice Admin function for setting the voting delay\\n     * @param newVotingDelay new voting delay, in blocks\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) external virtual adminOnly {\\n        require(\\n            newVotingDelay >= MIN_VOTING_DELAY && newVotingDelay <= MAX_VOTING_DELAY,\\n            \\\"IPCT::_setVotingDelay: invalid voting delay\\\"\\n        );\\n        uint256 oldVotingDelay = votingDelay;\\n        votingDelay = newVotingDelay;\\n\\n        emit VotingDelaySet(oldVotingDelay, votingDelay);\\n    }\\n\\n    /**\\n     * @notice Admin function for setting the quorum votes\\n     * @param newQuorumVotes new quorum votes\\n     */\\n    function _setQuorumVotes(uint256 newQuorumVotes) external adminOnly {\\n        require(newQuorumVotes >= proposalThreshold, \\\"IPCT::_setQuorumVotes: invalid quorum votes\\\");\\n\\n        uint256 oldQuorumVotes = votingDelay;\\n        quorumVotes = newQuorumVotes;\\n\\n        emit QuorumVotesSet(oldQuorumVotes, newQuorumVotes);\\n    }\\n\\n    /**\\n     * @notice Admin function for setting the voting period\\n     * @param newVotingPeriod new voting period, in blocks\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) external virtual adminOnly {\\n        require(\\n            newVotingPeriod >= MIN_VOTING_PERIOD && newVotingPeriod <= MAX_VOTING_PERIOD,\\n            \\\"IPCT::_setVotingPeriod: invalid voting period\\\"\\n        );\\n        uint256 oldVotingPeriod = votingPeriod;\\n        votingPeriod = newVotingPeriod;\\n\\n        emit VotingPeriodSet(oldVotingPeriod, votingPeriod);\\n    }\\n\\n    /**\\n     * @notice Admin function for setting the proposal threshold\\n     * @dev newProposalThreshold must be greater than the hardcoded min\\n     * @param newProposalThreshold new proposal threshold\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) external adminOnly {\\n        require(\\n            newProposalThreshold >= MIN_PROPOSAL_THRESHOLD &&\\n                newProposalThreshold <= MAX_PROPOSAL_THRESHOLD,\\n            \\\"IPCT::_setProposalThreshold: invalid proposal threshold\\\"\\n        );\\n        uint256 oldProposalThreshold = proposalThreshold;\\n        proposalThreshold = newProposalThreshold;\\n\\n        emit ProposalThresholdSet(oldProposalThreshold, proposalThreshold);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) external adminOnly {\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     */\\n    function _acceptAdmin() external {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        require(\\n            msg.sender == pendingAdmin && msg.sender != address(0),\\n            \\\"IPCT:_acceptAdmin: pending admin only\\\"\\n        );\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function getChainIdInternal() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    function getPriorVotes(address voter, uint256 beforeBlock) internal view returns (uint96) {\\n        if (address(releaseToken) == address(0)) {\\n            return token.getPriorVotes(voter, beforeBlock);\\n        }\\n        return\\n            add96(\\n                token.getPriorVotes(voter, beforeBlock),\\n                releaseToken.getPriorVotes(voter, beforeBlock),\\n                \\\"getPriorVotes overflow\\\"\\n            );\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x4667c782a626eb7a020320889f88165de169135a975e4b5c362ee82632708edc\",\"license\":\"Apache-2.0\"},\"contracts/governor/interfaces/IPCTDelegateStorageV1.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@ubeswap/governance/contracts/interfaces/IHasVotes.sol\\\";\\nimport \\\"./IPCTDelegatorStorage.sol\\\";\\nimport \\\"./TimelockInterface.sol\\\";\\n\\n/**\\n * @title Storage for Governor Bravo Delegate\\n * @notice For future upgrades, do not change IPCTDelegateStorageV1. Create a new\\n * contract which implements IPCTDelegateStorageV1 and following the naming convention\\n * IPCTDelegateStorageVX.\\n */\\ncontract IPCTDelegateStorageV1 is IPCTDelegatorStorage {\\n    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\n    uint256 public votingDelay;\\n\\n    /// @notice The duration of voting on a proposal, in blocks\\n    uint256 public votingPeriod;\\n\\n    /// @notice The number of votes required in order for a voter to become a proposer\\n    uint256 public proposalThreshold;\\n\\n    /// @notice The total number of proposals\\n    uint256 public proposalCount;\\n\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n    uint256 public quorumVotes;\\n\\n    /// @notice The address of the Governance Timelock\\n    TimelockInterface public timelock;\\n\\n    /// @notice The address of the governance token\\n    IHasVotes public token;\\n\\n    /// @notice The address of the \\\"Release\\\" governance token\\n    IHasVotes public releaseToken;\\n\\n    /// @notice The official record of all proposals ever proposed\\n    mapping(uint256 => Proposal) public proposals;\\n    /// @notice The official each proposal's targets:\\n    /// An ordered list of target addresses for calls to be made\\n    mapping(uint256 => address[]) public proposalTargets;\\n    /// @notice The official each proposal's values:\\n    /// An ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    mapping(uint256 => uint256[]) public proposalValues;\\n    /// @notice The official each proposal's signatures:\\n    /// An ordered list of function signatures to be called\\n    mapping(uint256 => string[]) public proposalSignatures;\\n    /// @notice The official each proposal's calldatas:\\n    /// An ordered list of calldata to be passed to each call\\n    mapping(uint256 => bytes[]) public proposalCalldatas;\\n    /// @notice The official each proposal's receipts:\\n    /// Receipts of ballots for the entire set of voters\\n    mapping(uint256 => mapping(address => Receipt)) public proposalReceipts;\\n\\n    /// @notice The latest proposal for each proposer\\n    mapping(address => uint256) public latestProposalIds;\\n\\n    struct Proposal {\\n        // Unique id for looking up a proposal\\n        uint256 id;\\n        // Creator of the proposal\\n        address proposer;\\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint256 eta;\\n        // The block at which voting begins: holders must delegate their votes prior to this block\\n        uint256 startBlock;\\n        // The block at which voting ends: votes must be cast prior to this block\\n        uint256 endBlock;\\n        // Current number of votes in favor of this proposal\\n        uint256 forVotes;\\n        // Current number of votes in opposition to this proposal\\n        uint256 againstVotes;\\n        // Current number of votes for abstaining for this proposal\\n        uint256 abstainVotes;\\n        // Flag marking whether the proposal has been canceled\\n        bool canceled;\\n        // Flag marking whether the proposal has been executed\\n        bool executed;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n        // Whether or not the voter supports the proposal or abstains\\n        uint8 support;\\n        // The number of votes the voter had, which were cast\\n        uint96 votes;\\n    }\\n\\n    /// @notice Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n}\\n\",\"keccak256\":\"0x03e74988ba3d34e65685ebe2ce0b94f312b7376b2280a8b97640e158310a6b1f\",\"license\":\"Apache-2.0\"},\"contracts/governor/interfaces/IPCTDelegatorStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\ncontract IPCTDelegatorStorage {\\n  /// @notice Administrator for this contract\\n  address public admin;\\n\\n  /// @notice Pending administrator for this contract\\n  address public pendingAdmin;\\n\\n  /// @notice Active brains of Governor\\n  address public implementation;\\n}\\n\",\"keccak256\":\"0xdaa1ae3492cd7649e878f13094b335562ed18e3af82fff4f7cfa92fa736cb1f4\",\"license\":\"Apache-2.0\"},\"contracts/governor/interfaces/IPCTEvents.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\ncontract IPCTEvents {\\n    /// @notice An event emitted when a new proposal is created\\n    event ProposalCreated(\\n        uint256 id,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /// @notice An event emitted when a vote has been cast on a proposal\\n    /// @param voter The address which casted a vote\\n    /// @param proposalId The proposal id which was voted on\\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\\n    /// @param votes Number of votes which were cast by the voter\\n    /// @param reason The reason given for the vote by the voter\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason);\\n\\n    /// @notice An event emitted when a proposal has been canceled\\n    event ProposalCanceled(uint256 id);\\n\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\n    event ProposalQueued(uint256 id, uint256 eta);\\n\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\n    event ProposalExecuted(uint256 id);\\n\\n    /// @notice An event emitted when the voting delay is set\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n\\n    /// @notice An event emitted when the voting period is set\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n\\n    /// @notice Emitted when implementation is changed\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /// @notice Emitted when proposal threshold is set\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /// @notice An event emitted when the quorum votes is set\\n    event QuorumVotesSet(uint256 oldQuorumVotes, uint256 newQuorumVotes);\\n\\n    /// @notice Emitted when pendingAdmin is changed\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n}\\n\",\"keccak256\":\"0x9476afe13883d29f73669a0c73a9f09e008f0f2b48b20196a0efdf471781c391\",\"license\":\"Apache-2.0\"},\"contracts/governor/interfaces/TimelockInterface.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\ninterface TimelockInterface {\\n  function admin() external view returns (address);\\n\\n  function delay() external view returns (uint256);\\n\\n  function GRACE_PERIOD() external view returns (uint256);\\n\\n  function acceptAdmin() external;\\n\\n  function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n  function queueTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external returns (bytes32);\\n\\n  function cancelTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external;\\n\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x0eee450ffaeb48a7f6d0ea2902d85e0dbf4a6d97073863b055bdd065870b7670\",\"license\":\"Apache-2.0\"},\"contracts/mocks/IPCTDelegateMock.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"../governor/IPCTDelegate.sol\\\";\\n\\ncontract IPCTDelegateMock is IPCTDelegate {\\n    /**\\n     * @notice Function for setting the voting period\\n     * @param newVotingPeriod new voting period, in blocks\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) external override {\\n        uint256 oldVotingPeriod = votingPeriod;\\n        votingPeriod = newVotingPeriod;\\n\\n        emit VotingPeriodSet(oldVotingPeriod, votingPeriod);\\n    }\\n\\n    /**\\n     * @notice Admin function for setting the voting delay\\n     * @param newVotingDelay new voting delay, in blocks\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) external override {\\n        uint256 oldVotingDelay = votingDelay;\\n        votingDelay = newVotingDelay;\\n\\n        emit VotingDelaySet(oldVotingDelay, votingDelay);\\n    }\\n}\\n\",\"keccak256\":\"0x56d561663df14746504ab384ad807399cef85834ee2af6d60a7dd2651c44c04d\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061738d80620000216000396000f3fe6080604052600436106102725760003560e01c8063791f5d231161014f578063d33219b4116100c1578063e48083fe1161007a578063e48083fe146109c2578063e9c714f2146109ed578063ec715a3114610a04578063f851a44014610a2f578063fc0c546a14610a5a578063fe0d94c114610a8557610272565b8063d33219b41461089e578063da35c664146108c9578063da95691a146108f4578063ddf0b00914610931578063deaaa7cc1461095a578063e23a9a521461098557610272565b8063a4a53a1311610113578063a4a53a131461077a578063a64e024a146107b7578063ac674664146107e2578063b11262631461081f578063b58131b01461084a578063b71d1a0c1461087557610272565b8063791f5d23146106955780637b3c71d3146106c057806386d37e8b146106e9578063878b608d14610712578063a3f4df7e1461074f57610272565b80632b4656c8116101e85780633e4f49e6116101ac5780633e4f49e61461055f57806340e58ee51461059c5780634e42b06d146105c557806356781388146106025780635c60da1b1461062b578063661767431461065657610272565b80632b4656c814610477578063328dd982146104a057806336e7048a146104e05780633932abb11461050b5780633bccf4fd1461053657610272565b80631dfb1b5a1161023a5780631dfb1b5a1461037757806320606b70146103a0578063215809ca146103cb57806324bc1a64146103f657806325fd935a14610421578063267822471461044c57610272565b8063013cf08b1461027757806302a251a3146102bd5780630ea2d98c146102e857806317977c611461031157806317ba1b8b1461034e575b600080fd5b34801561028357600080fd5b5061029e600480360381019061029991906149fe565b610aa1565b6040516102b49a99989796959493929190616103565b60405180910390f35b3480156102c957600080fd5b506102d2610b2f565b6040516102df9190615f8a565b60405180910390f35b3480156102f457600080fd5b5061030f600480360381019061030a91906149fe565b610b35565b005b34801561031d57600080fd5b5061033860048036038101906103339190614758565b610b82565b6040516103459190615f8a565b60405180910390f35b34801561035a57600080fd5b50610375600480360381019061037091906149fe565b610b9a565b005b34801561038357600080fd5b5061039e600480360381019061039991906149fe565b610cdb565b005b3480156103ac57600080fd5b506103b5610d28565b6040516103c29190615a7e565b60405180910390f35b3480156103d757600080fd5b506103e0610d4c565b6040516103ed9190615f8a565b60405180910390f35b34801561040257600080fd5b5061040b610d52565b6040516104189190615f8a565b60405180910390f35b34801561042d57600080fd5b50610436610d58565b6040516104439190615f8a565b60405180910390f35b34801561045857600080fd5b50610461610d68565b60405161046e91906158b7565b60405180910390f35b34801561048357600080fd5b5061049e600480360381019061049991906147b2565b610d8e565b005b3480156104ac57600080fd5b506104c760048036038101906104c291906149fe565b6115c7565b6040516104d794939291906159e6565b60405180910390f35b3480156104ec57600080fd5b506104f56118a8565b6040516105029190615f8a565b60405180910390f35b34801561051757600080fd5b506105206118ad565b60405161052d9190615f8a565b60405180910390f35b34801561054257600080fd5b5061055d60048036038101906105589190614b8c565b6118b3565b005b34801561056b57600080fd5b50610586600480360381019061058191906149fe565b611aed565b6040516105939190615bb2565b60405180910390f35b3480156105a857600080fd5b506105c360048036038101906105be91906149fe565b611cc0565b005b3480156105d157600080fd5b506105ec60048036038101906105e79190614a98565b612029565b6040516105f99190615b5a565b60405180910390f35b34801561060e57600080fd5b5061062960048036038101906106249190614ad8565b6120e2565b005b34801561063757600080fd5b50610640612142565b60405161064d91906158b7565b60405180910390f35b34801561066257600080fd5b5061067d60048036038101906106789190614a58565b612168565b60405161068c93929190615a47565b60405180910390f35b3480156106a157600080fd5b506106aa6121d1565b6040516106b79190615f8a565b60405180910390f35b3480156106cc57600080fd5b506106e760048036038101906106e29190614b18565b6121e0565b005b3480156106f557600080fd5b50610710600480360381019061070b91906149fe565b612246565b005b34801561071e57600080fd5b5061073960048036038101906107349190614a98565b612364565b6040516107469190615f8a565b60405180910390f35b34801561075b57600080fd5b50610764612395565b6040516107719190615bcd565b60405180910390f35b34801561078657600080fd5b506107a1600480360381019061079c9190614a98565b6123ce565b6040516107ae9190615bcd565b60405180910390f35b3480156107c357600080fd5b506107cc612487565b6040516107d99190615f8a565b60405180910390f35b3480156107ee57600080fd5b5061080960048036038101906108049190614a98565b61248e565b60405161081691906158b7565b60405180910390f35b34801561082b57600080fd5b506108346124dc565b6040516108419190615f8a565b60405180910390f35b34801561085657600080fd5b5061085f6124e3565b60405161086c9190615f8a565b60405180910390f35b34801561088157600080fd5b5061089c60048036038101906108979190614758565b6124e9565b005b3480156108aa57600080fd5b506108b361261c565b6040516108c09190615b97565b60405180910390f35b3480156108d557600080fd5b506108de612642565b6040516108eb9190615f8a565b60405180910390f35b34801561090057600080fd5b5061091b60048036038101906109169190614854565b612648565b6040516109289190615f8a565b60405180910390f35b34801561093d57600080fd5b50610958600480360381019061095391906149fe565b612bab565b005b34801561096657600080fd5b5061096f612f53565b60405161097c9190615a7e565b60405180910390f35b34801561099157600080fd5b506109ac60048036038101906109a79190614a58565b612f77565b6040516109b99190615f6f565b60405180910390f35b3480156109ce57600080fd5b506109d7613058565b6040516109e49190615f8a565b60405180910390f35b3480156109f957600080fd5b50610a0261305d565b005b348015610a1057600080fd5b50610a196132cf565b604051610a269190615b7c565b60405180910390f35b348015610a3b57600080fd5b50610a446132f5565b604051610a5191906158b7565b60405180910390f35b348015610a6657600080fd5b50610a6f613319565b604051610a7c9190615b7c565b60405180910390f35b610a9f6004803603810190610a9a91906149fe565b61333f565b005b600b6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff16908060080160019054906101000a900460ff1690508a565b60045481565b60006004549050816004819055507f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e882881600454604051610b7692919061619f565b60405180910390a15050565b60116020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f90615caf565b60405180910390fd5b6a52b7d2dcc80cd2e40000008110158015610c4f57506b019d971e4fe8401e740000008111155b610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590615d6f565b60405180910390fd5b60006005549050816005819055507fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc0546181600554604051610ccf92919061619f565b60405180910390a15050565b60006003549050816003819055507fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a9381600354604051610d1c92919061619f565b60405180910390a15050565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61438081565b60075481565b6b019d971e4fe8401e7400000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601260019054906101000a900460ff1680610db65750601260009054906101000a900460ff16155b610df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dec90615dcf565b60405180910390fd5b6000601260019054906101000a900460ff161590508015610e47576001601260016101000a81548160ff0219169083151502179055506001601260006101000a81548160ff0219169083151502179055505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90615caf565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a9190614785565b73ffffffffffffffffffffffffffffffffffffffff1614610fc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb790615c6f565b60405180910390fd5b6143808510158015610fd557506203b1008511155b611014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100b90615e6f565b60405180910390fd5b6001841015801561102857506201d8808411155b611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e90615eef565b60405180910390fd5b6a52b7d2dcc80cd2e4000000831015801561108e57506b019d971e4fe8401e740000008311155b6110cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c490615c8f565b60405180910390fd5b82821015611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110790615f0f565b60405180910390fd5b87600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d057600080fd5b505afa1580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190614785565b73ffffffffffffffffffffffffffffffffffffffff161461125e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125590615c6f565b60405180910390fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600481905550836003819055508260058190555081600781905550600060405180610140016040528060065481526020013073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600115158152602001600015158152509050600660008154809291906113bd90616895565b919050555080600b6000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff021916908315150217905550905050806000015160116000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0816000015130600c600085600001518152602001908152602001600020600d600086600001518152602001908152602001600020600e600087600001518152602001908152602001600020600f600088600001518152602001908152602001600020600080604051611592989796959493929190616055565b60405180910390a15080156115bd576000601260016101000a81548160ff0219169083151502179055505b5050505050505050565b606080606080600c6000868152602001908152602001600020600d6000878152602001908152602001600020600e6000888152602001908152602001600020600f60008981526020019081526020016000208380548060200260200160405190810160405280929190818152602001828054801561169a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611650575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156116ec57602002820191906000526020600020905b8154815260200190600101908083116116d8575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b828210156117c0578382906000526020600020018054611733906167fe565b80601f016020809104026020016040519081016040528092919081815260200182805461175f906167fe565b80156117ac5780601f10611781576101008083540402835291602001916117ac565b820191906000526020600020905b81548152906001019060200180831161178f57829003601f168201915b505050505081526020019060010190611714565b50505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611893578382906000526020600020018054611806906167fe565b80601f0160208091040260200160405190810160405280929190818152602001828054611832906167fe565b801561187f5780601f106118545761010080835404028352916020019161187f565b820191906000526020600020905b81548152906001019060200180831161186257829003601f168201915b5050505050815260200190600101906117e7565b50505050905093509350935093509193509193565b600a81565b60035481565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666040518060400160405280600481526020017f49504354000000000000000000000000000000000000000000000000000000008152508051906020012061191b61361b565b3060405160200161192f9493929190615a99565b60405160208183030381529060405280519060200120905060007f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f878760405160200161197e93929190615ade565b604051602081830303815290604052805190602001209050600082826040516020016119ab929190615880565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516119e89493929190615b15565b6020604051602081039080840390855afa158015611a0a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7d90615e4f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48a8a611acb858e8e613628565b604051611ada93929190616216565b60405180910390a2505050505050505050565b60008160065411611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a90615e0f565b60405180910390fd5b6000600b600084815260200190815260200160002090508060080160009054906101000a900460ff1615611b6b576002915050611cbb565b80600301544311611b80576000915050611cbb565b80600401544311611b95576001915050611cbb565b80600601548160050154111580611bb157506007548160050154105b15611bc0576003915050611cbb565b600081600201541415611bd7576004915050611cbb565b8060080160019054906101000a900460ff1615611bf8576007915050611cbb565b611ca58160020154600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1a287e26040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6857600080fd5b505afa158015611c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca09190614a2b565b6138cc565b4210611cb5576006915050611cbb565b60059150505b919050565b600780811115611cd357611cd2616917565b5b611cdc82611aed565b6007811115611cee57611ced616917565b5b1415611d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2690615bef565b60405180910390fd5b6000600b600083815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611dea5750600554611dda8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611dd543600161392a565b613983565b6bffffffffffffffffffffffff16105b611e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2090615def565b60405180910390fd5b60018160080160006101000a81548160ff02191690831515021790555060005b600c600084815260200190815260200160002080549050811015611fed57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663591fcdfe600c60008681526020019081526020016000208381548110611eca57611ec9616975565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60008781526020019081526020016000208481548110611f1a57611f19616975565b5b9060005260206000200154600e60008881526020019081526020016000208581548110611f4a57611f49616975565b5b90600052602060002001600f60008981526020019081526020016000208681548110611f7957611f78616975565b5b9060005260206000200187600201546040518663ffffffff1660e01b8152600401611fa8959493929190615985565b600060405180830381600087803b158015611fc257600080fd5b505af1158015611fd6573d6000803e3d6000fd5b505050508080611fe590616895565b915050611e49565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c8260405161201d9190615f8a565b60405180910390a15050565b600f602052816000526040600020818154811061204557600080fd5b90600052602060002001600091509150508054612061906167fe565b80601f016020809104026020016040519081016040528092919081815260200182805461208d906167fe565b80156120da5780601f106120af576101008083540402835291602001916120da565b820191906000526020600020905b8154815290600101906020018083116120bd57829003601f168201915b505050505081565b3373ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48383612127338787613628565b60405161213693929190616216565b60405180910390a25050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6010602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a90046bffffffffffffffffffffffff16905083565b6a52b7d2dcc80cd2e400000081565b3373ffffffffffffffffffffffffffffffffffffffff167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48585612225338989613628565b86866040516122389594939291906161c8565b60405180910390a250505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90615caf565b60405180910390fd5b600554811015612319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231090615d2f565b60405180910390fd5b60006003549050816007819055507fffff0a251408cb8f05a4fc2ab0bdffe28e1519cb8ee5bdb6531e5d6ca51aaf75818360405161235892919061619f565b60405180910390a15050565b600d602052816000526040600020818154811061238057600080fd5b90600052602060002001600091509150505481565b6040518060400160405280600481526020017f495043540000000000000000000000000000000000000000000000000000000081525081565b600e60205281600052604060002081815481106123ea57600080fd5b90600052602060002001600091509150508054612406906167fe565b80601f0160208091040260200160405190810160405280929190818152602001828054612432906167fe565b801561247f5780601f106124545761010080835404028352916020019161247f565b820191906000526020600020905b81548152906001019060200180831161246257829003601f168201915b505050505081565b6203b10081565b600c60205281600052604060002081815481106124aa57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6201d88081565b60055481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256e90615caf565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a981836040516126109291906158d2565b60405180910390a15050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60006005546126613361265c43600161392a565b613983565b6bffffffffffffffffffffffff16116126af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a690615c2f565b60405180910390fd5b845186511480156126c1575083518651145b80156126ce575082518651145b61270d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270490615eaf565b60405180910390fd5b600086511415612752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274990615e8f565b60405180910390fd5b600a86511115612797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278e90615d0f565b60405180910390fd5b6000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081146128c25760006127ee82611aed565b90506001600781111561280457612803616917565b5b81600781111561281757612816616917565b5b1415612858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284f90615ecf565b60405180910390fd5b6000600781111561286c5761286b616917565b5b81600781111561287f5761287e616917565b5b14156128c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b790615c4f565b60405180910390fd5b505b60006128d0436003546138cc565b905060006128e0826004546138cc565b9050600060405180610140016040528060065481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600081526020018481526020018381526020016000815260200160008152602001600081526020016000151581526020016000151581525090506006600081548092919061296190616895565b919050555080600b6000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff02191690831515021790555090505089600c6000836000015181526020019081526020016000209080519060200190612a7b929190613e85565b5088600d6000836000015181526020019081526020016000209080519060200190612aa7929190613f0f565b5087600e6000836000015181526020019081526020016000209080519060200190612ad3929190613f5c565b5086600f6000836000015181526020019081526020016000209080519060200190612aff929190613fbc565b50806000015160116000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e08160000151338c8c8c8c89898e604051612b8f99989796959493929190615fa5565b60405180910390a1806000015194505050505095945050505050565b60046007811115612bbf57612bbe616917565b5b612bc882611aed565b6007811115612bda57612bd9616917565b5b14612c1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1190615d4f565b60405180910390fd5b6000600b600083815260200190815260200160002090506000612cdc42600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a42b8f86040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9f57600080fd5b505afa158015612cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd79190614a2b565b6138cc565b905060005b600c600085815260200190815260200160002080549050811015612f0b57612ef8600c60008681526020019081526020016000208281548110612d2757612d26616975565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60008781526020019081526020016000208381548110612d7757612d76616975565b5b9060005260206000200154600e60008881526020019081526020016000208481548110612da757612da6616975565b5b906000526020600020018054612dbc906167fe565b80601f0160208091040260200160405190810160405280929190818152602001828054612de8906167fe565b8015612e355780601f10612e0a57610100808354040283529160200191612e35565b820191906000526020600020905b815481529060010190602001808311612e1857829003601f168201915b5050505050600f60008981526020019081526020016000208581548110612e5f57612e5e616975565b5b906000526020600020018054612e74906167fe565b80601f0160208091040260200160405190810160405280929190818152602001828054612ea0906167fe565b8015612eed5780601f10612ec257610100808354040283529160200191612eed565b820191906000526020600020905b815481529060010190602001808311612ed057829003601f168201915b505050505086613c30565b8080612f0390616895565b915050612ce1565b508082600201819055507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda28928382604051612f4692919061619f565b60405180910390a1505050565b7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b612f7f61401c565b6010600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff1660ff1660ff1681526020016000820160029054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525050905092915050565b600181565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156130e75750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b613126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161311d90615daf565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc8260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516132689291906158d2565b60405180910390a17fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a981600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516132c39291906158d2565b60405180910390a15050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005600781111561335357613352616917565b5b61335c82611aed565b600781111561336e5761336d616917565b5b146133ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133a590615cef565b60405180910390fd5b6000600b6000838152602001908152602001600020905060018160080160016101000a81548160ff02191690831515021790555060005b600c6000848152602001908152602001600020805490508110156135df57600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630825f38f600d6000868152602001908152602001600020838154811061346657613465616975565b5b9060005260206000200154600c6000878152602001908152602001600020848154811061349657613495616975565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d600088815260200190815260200160002085815481106134e6576134e5616975565b5b9060005260206000200154600e6000898152602001908152602001600020868154811061351657613515616975565b5b90600052602060002001600f60008a8152602001908152602001600020878154811061354557613544616975565b5b9060005260206000200188600201546040518763ffffffff1660e01b8152600401613574959493929190615985565b6000604051808303818588803b15801561358d57600080fd5b505af11580156135a1573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906135cb91906149b5565b5080806135d790616895565b9150506133e5565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f8260405161360f9190615f8a565b60405180910390a15050565b6000804690508091505090565b60006001600781111561363e5761363d616917565b5b61364784611aed565b600781111561365957613658616917565b5b14613699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161369090615c0f565b60405180910390fd5b60028260ff1611156136e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136d790615d8f565b60405180910390fd5b6000600b6000858152602001908152602001600020905060006010600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160000160009054906101000a900460ff161515146137a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161379a90615f4f565b60405180910390fd5b60006137b3878460030154613983565b905060008560ff1614156137ea576137dd8360060154826bffffffffffffffffffffffff166138cc565b8360060181905550613852565b60018560ff16141561381f576138128360050154826bffffffffffffffffffffffff166138cc565b8360050181905550613851565b60028560ff161415613850576138478360070154826bffffffffffffffffffffffff166138cc565b83600701819055505b5b5b60018260000160006101000a81548160ff021916908315150217905550848260000160016101000a81548160ff021916908360ff160217905550808260000160026101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508093505050509392505050565b60008082846138db91906165be565b905083811015613920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391790615e2f565b60405180910390fd5b8091505092915050565b60008282111561396f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161396690615f2f565b60405180910390fd5b818361397b9190616656565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613a8f57600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663782d6fe184846040518363ffffffff1660e01b8152600401613a389291906158fb565b60206040518083038186803b158015613a5057600080fd5b505afa158015613a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a889190614c07565b9050613c2a565b613c27600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663782d6fe185856040518363ffffffff1660e01b8152600401613aef9291906158fb565b60206040518083038186803b158015613b0757600080fd5b505afa158015613b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3f9190614c07565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663782d6fe186866040518363ffffffff1660e01b8152600401613b9c9291906158fb565b60206040518083038186803b158015613bb457600080fd5b505afa158015613bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bec9190614c07565b6040518060400160405280601681526020017f6765745072696f72566f746573206f766572666c6f7700000000000000000000815250613e06565b90505b92915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2b065378686868686604051602001613c87959493929190615924565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401613cb99190615a7e565b60206040518083038186803b158015613cd157600080fd5b505afa158015613ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d09919061495b565b15613d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d4090615ccf565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a66f90186868686866040518663ffffffff1660e01b8152600401613dac959493929190615924565b602060405180830381600087803b158015613dc657600080fd5b505af1158015613dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfe9190614988565b505050505050565b6000808385613e159190616614565b9050846bffffffffffffffffffffffff16816bffffffffffffffffffffffff1610158390613e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e709190615bcd565b60405180910390fd5b50809150509392505050565b828054828255906000526020600020908101928215613efe579160200282015b82811115613efd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613ea5565b5b509050613f0b9190614050565b5090565b828054828255906000526020600020908101928215613f4b579160200282015b82811115613f4a578251825591602001919060010190613f2f565b5b509050613f589190614050565b5090565b828054828255906000526020600020908101928215613fab579160200282015b82811115613faa578251829080519060200190613f9a92919061406d565b5091602001919060010190613f7c565b5b509050613fb891906140f3565b5090565b82805482825590600052602060002090810192821561400b579160200282015b8281111561400a578251829080519060200190613ffa929190614117565b5091602001919060010190613fdc565b5b509050614018919061419d565b5090565b6040518060600160405280600015158152602001600060ff16815260200160006bffffffffffffffffffffffff1681525090565b5b80821115614069576000816000905550600101614051565b5090565b828054614079906167fe565b90600052602060002090601f01602090048101928261409b57600085556140e2565b82601f106140b457805160ff19168380011785556140e2565b828001600101855582156140e2579182015b828111156140e15782518255916020019190600101906140c6565b5b5090506140ef9190614050565b5090565b5b80821115614113576000818161410a91906141c1565b506001016140f4565b5090565b828054614123906167fe565b90600052602060002090601f016020900481019282614145576000855561418c565b82601f1061415e57805160ff191683800117855561418c565b8280016001018555821561418c579182015b8281111561418b578251825591602001919060010190614170565b5b5090506141999190614050565b5090565b5b808211156141bd57600081816141b49190614201565b5060010161419e565b5090565b5080546141cd906167fe565b6000825580601f106141df57506141fe565b601f0160209004906000526020600020908101906141fd9190614050565b5b50565b50805461420d906167fe565b6000825580601f1061421f575061423e565b601f01602090049060005260206000209081019061423d9190614050565b5b50565b600061425461424f84616285565b616260565b9050808382526020820190508285602086028201111561427757614276616a03565b5b60005b858110156142a7578161428d8882614503565b84526020840193506020830192505060018101905061427a565b5050509392505050565b60006142c46142bf846162b1565b616260565b905080838252602082019050828560208602820111156142e7576142e6616a03565b5b60005b8581101561433557813567ffffffffffffffff81111561430d5761430c6169fe565b5b80860161431a8982614624565b855260208501945060208401935050506001810190506142ea565b5050509392505050565b600061435261434d846162dd565b616260565b9050808382526020820190508285602086028201111561437557614374616a03565b5b60005b858110156143c357813567ffffffffffffffff81111561439b5761439a6169fe565b5b8086016143a889826146d6565b85526020850194506020840193505050600181019050614378565b5050509392505050565b60006143e06143db84616309565b616260565b9050808382526020820190508285602086028201111561440357614402616a03565b5b60005b8581101561443357816144198882614704565b845260208401935060208301925050600181019050614406565b5050509392505050565b600061445061444b84616335565b616260565b90508281526020810184848401111561446c5761446b616a08565b5b6144778482856167bc565b509392505050565b600061449261448d84616335565b616260565b9050828152602081018484840111156144ae576144ad616a08565b5b6144b98482856167cb565b509392505050565b60006144d46144cf84616366565b616260565b9050828152602081018484840111156144f0576144ef616a08565b5b6144fb8482856167bc565b509392505050565b600081359050614512816172cd565b92915050565b600081519050614527816172cd565b92915050565b600082601f830112614542576145416169fe565b5b8135614552848260208601614241565b91505092915050565b600082601f8301126145705761456f6169fe565b5b81356145808482602086016142b1565b91505092915050565b600082601f83011261459e5761459d6169fe565b5b81356145ae84826020860161433f565b91505092915050565b600082601f8301126145cc576145cb6169fe565b5b81356145dc8482602086016143cd565b91505092915050565b6000815190506145f4816172e4565b92915050565b600081359050614609816172fb565b92915050565b60008151905061461e816172fb565b92915050565b600082601f830112614639576146386169fe565b5b813561464984826020860161443d565b91505092915050565b600082601f830112614667576146666169fe565b5b815161467784826020860161447f565b91505092915050565b60008083601f840112614696576146956169fe565b5b8235905067ffffffffffffffff8111156146b3576146b26169f9565b5b6020830191508360018202830111156146cf576146ce616a03565b5b9250929050565b600082601f8301126146eb576146ea6169fe565b5b81356146fb8482602086016144c1565b91505092915050565b60008135905061471381617312565b92915050565b60008151905061472881617312565b92915050565b60008135905061473d81617329565b92915050565b60008151905061475281617340565b92915050565b60006020828403121561476e5761476d616a12565b5b600061477c84828501614503565b91505092915050565b60006020828403121561479b5761479a616a12565b5b60006147a984828501614518565b91505092915050565b600080600080600080600060e0888a0312156147d1576147d0616a12565b5b60006147df8a828b01614503565b97505060206147f08a828b01614503565b96505060406148018a828b01614503565b95505060606148128a828b01614704565b94505060806148238a828b01614704565b93505060a06148348a828b01614704565b92505060c06148458a828b01614704565b91505092959891949750929550565b600080600080600060a086880312156148705761486f616a12565b5b600086013567ffffffffffffffff81111561488e5761488d616a0d565b5b61489a8882890161452d565b955050602086013567ffffffffffffffff8111156148bb576148ba616a0d565b5b6148c7888289016145b7565b945050604086013567ffffffffffffffff8111156148e8576148e7616a0d565b5b6148f488828901614589565b935050606086013567ffffffffffffffff81111561491557614914616a0d565b5b6149218882890161455b565b925050608086013567ffffffffffffffff81111561494257614941616a0d565b5b61494e888289016146d6565b9150509295509295909350565b60006020828403121561497157614970616a12565b5b600061497f848285016145e5565b91505092915050565b60006020828403121561499e5761499d616a12565b5b60006149ac8482850161460f565b91505092915050565b6000602082840312156149cb576149ca616a12565b5b600082015167ffffffffffffffff8111156149e9576149e8616a0d565b5b6149f584828501614652565b91505092915050565b600060208284031215614a1457614a13616a12565b5b6000614a2284828501614704565b91505092915050565b600060208284031215614a4157614a40616a12565b5b6000614a4f84828501614719565b91505092915050565b60008060408385031215614a6f57614a6e616a12565b5b6000614a7d85828601614704565b9250506020614a8e85828601614503565b9150509250929050565b60008060408385031215614aaf57614aae616a12565b5b6000614abd85828601614704565b9250506020614ace85828601614704565b9150509250929050565b60008060408385031215614aef57614aee616a12565b5b6000614afd85828601614704565b9250506020614b0e8582860161472e565b9150509250929050565b60008060008060608587031215614b3257614b31616a12565b5b6000614b4087828801614704565b9450506020614b518782880161472e565b935050604085013567ffffffffffffffff811115614b7257614b71616a0d565b5b614b7e87828801614680565b925092505092959194509250565b600080600080600060a08688031215614ba857614ba7616a12565b5b6000614bb688828901614704565b9550506020614bc78882890161472e565b9450506040614bd88882890161472e565b9350506060614be9888289016145fa565b9250506080614bfa888289016145fa565b9150509295509295909350565b600060208284031215614c1d57614c1c616a12565b5b6000614c2b84828501614743565b91505092915050565b6000614c408383614cb4565b60208301905092915050565b6000614c58838361506e565b905092915050565b6000614c6c83836150e0565b905092915050565b6000614c808383615249565b905092915050565b6000614c9483836152bb565b905092915050565b6000614ca88383615817565b60208301905092915050565b614cbd816166b4565b82525050565b614ccc816166b4565b82525050565b6000614cdd82616455565b614ce7818561652b565b9350614cf283616397565b8060005b83811015614d23578151614d0a8882614c34565b9750614d15836164c3565b925050600181019050614cf6565b5085935050505092915050565b6000614d3b82616460565b614d45818561652b565b9350614d50836163a7565b8060005b83811015614d8857614d65826169d3565b614d6f8882614c34565b9750614d7a836164d0565b925050600181019050614d54565b5085935050505092915050565b6000614da08261646b565b614daa818561653c565b935083602082028501614dbc856163bc565b8060005b85811015614df85784840389528151614dd98582614c4c565b9450614de4836164dd565b925060208a01995050600181019050614dc0565b50829750879550505050505092915050565b6000614e1582616476565b614e1f818561653c565b935083602082028501614e31856163cc565b8060005b85811015614e6c57848403895281614e4d8582614c60565b9450614e58836164ea565b925060208a01995050600181019050614e35565b50829750879550505050505092915050565b6000614e8982616481565b614e93818561654d565b935083602082028501614ea5856163e1565b8060005b85811015614ee15784840389528151614ec28582614c74565b9450614ecd836164f7565b925060208a01995050600181019050614ea9565b50829750879550505050505092915050565b6000614efe8261648c565b614f08818561654d565b935083602082028501614f1a856163f1565b8060005b85811015614f5557848403895281614f368582614c88565b9450614f4183616504565b925060208a01995050600181019050614f1e565b50829750879550505050505092915050565b6000614f7282616497565b614f7c818561655e565b9350614f8783616406565b8060005b83811015614fb8578151614f9f8882614c9c565b9750614faa83616511565b925050600181019050614f8b565b5085935050505092915050565b6000614fd0826164a2565b614fda818561655e565b9350614fe583616416565b8060005b8381101561501d57614ffa826169e6565b6150048882614c9c565b975061500f8361651e565b925050600181019050614fe9565b5085935050505092915050565b615033816166c6565b82525050565b615042816166c6565b82525050565b615051816166d2565b82525050565b615068615063826166d2565b6168de565b82525050565b6000615079826164ad565b615083818561656f565b93506150938185602086016167cb565b61509c81616a17565b840191505092915050565b60006150b2826164ad565b6150bc8185616580565b93506150cc8185602086016167cb565b6150d581616a17565b840191505092915050565b600081546150ed816167fe565b6150f7818661656f565b94506001821660008114615112576001811461512457615157565b60ff1983168652602086019350615157565b61512d8561642b565b60005b8381101561514f57815481890152600182019150602081019050615130565b808801955050505b50505092915050565b6000815461516d816167fe565b6151778186616580565b9450600182166000811461519257600181146151a4576151d7565b60ff19831686526020860193506151d7565b6151ad8561642b565b60005b838110156151cf578154818901526001820191506020810190506151b0565b808801955050505b50505092915050565b6151e98161673e565b82525050565b6151f881616762565b82525050565b61520781616786565b82525050565b61521681616798565b82525050565b600061522883856165a2565b93506152358385846167bc565b61523e83616a17565b840190509392505050565b6000615254826164b8565b61525e8185616591565b935061526e8185602086016167cb565b61527781616a17565b840191505092915050565b600061528d826164b8565b61529781856165a2565b93506152a78185602086016167cb565b6152b081616a17565b840191505092915050565b600081546152c8816167fe565b6152d28186616591565b945060018216600081146152ed57600181146152ff57615332565b60ff1983168652602086019350615332565b61530885616440565b60005b8381101561532a5781548189015260018201915060208101905061530b565b808801955050505b50505092915050565b60008154615348816167fe565b61535281866165a2565b9450600182166000811461536d576001811461537f576153b2565b60ff19831686526020860193506153b2565b61538885616440565b60005b838110156153aa5781548189015260018201915060208101905061538b565b808801955050505b50505092915050565b60006153c8602d836165a2565b91506153d382616a35565b604082019050919050565b60006153eb6028836165a2565b91506153f682616a84565b604082019050919050565b600061540e6036836165a2565b915061541982616ad3565b604082019050919050565b60006154316050836165a2565b915061543c82616b22565b606082019050919050565b60006154546040836165a2565b915061545f82616b97565b604082019050919050565b6000615477602c836165a2565b915061548282616be6565b604082019050919050565b600061549a6013836165a2565b91506154a582616c35565b602082019050919050565b60006154bd604c836165a2565b91506154c882616c5e565b606082019050919050565b60006154e06002836165b3565b91506154eb82616cd3565b600282019050919050565b6000615503603c836165a2565b915061550e82616cfc565b604082019050919050565b6000615526601f836165a2565b915061553182616d4b565b602082019050919050565b6000615549602b836165a2565b915061555482616d74565b604082019050919050565b600061556c603b836165a2565b915061557782616dc3565b604082019050919050565b600061558f6037836165a2565b915061559a82616e12565b604082019050919050565b60006155b26029836165a2565b91506155bd82616e61565b604082019050919050565b60006155d56025836165a2565b91506155e082616eb0565b604082019050919050565b60006155f8602e836165a2565b915061560382616eff565b604082019050919050565b600061561b6026836165a2565b915061562682616f4e565b604082019050919050565b600061563e6020836165a2565b915061564982616f9d565b602082019050919050565b60006156616011836165a2565b915061566c82616fc6565b602082019050919050565b60006156846026836165a2565b915061568f82616fef565b604082019050919050565b60006156a76027836165a2565b91506156b28261703e565b604082019050919050565b60006156ca6000836165a2565b91506156d58261708d565b600082019050919050565b60006156ed6023836165a2565b91506156f882617090565b604082019050919050565b6000615710603b836165a2565b915061571b826170df565b604082019050919050565b6000615733604f836165a2565b915061573e8261712e565b606082019050919050565b60006157566026836165a2565b9150615761826171a3565b604082019050919050565b60006157796026836165a2565b9150615784826171f2565b604082019050919050565b600061579c6015836165a2565b91506157a782617241565b602082019050919050565b60006157bf602b836165a2565b91506157ca8261726a565b604082019050919050565b6060820160008201516157eb600085018261502a565b5060208201516157fe6020850182615835565b5060408201516158116040850182615862565b50505050565b6158208161670f565b82525050565b61582f8161670f565b82525050565b61583e81616719565b82525050565b61584d81616719565b82525050565b61585c816167aa565b82525050565b61586b81616726565b82525050565b61587a81616726565b82525050565b600061588b826154d3565b91506158978285615057565b6020820191506158a78284615057565b6020820191508190509392505050565b60006020820190506158cc6000830184614cc3565b92915050565b60006040820190506158e76000830185614cc3565b6158f46020830184614cc3565b9392505050565b60006040820190506159106000830185614cc3565b61591d6020830184615826565b9392505050565b600060a0820190506159396000830188614cc3565b6159466020830187615826565b81810360408301526159588186615282565b9050818103606083015261596c81856150a7565b905061597b6080830184615826565b9695505050505050565b600060a08201905061599a6000830188614cc3565b6159a76020830187615826565b81810360408301526159b9818661533b565b905081810360608301526159cd8185615160565b90506159dc6080830184615826565b9695505050505050565b60006080820190508181036000830152615a008187614cd2565b90508181036020830152615a148186614f67565b90508181036040830152615a288185614e7e565b90508181036060830152615a3c8184614d95565b905095945050505050565b6000606082019050615a5c6000830186615039565b615a696020830185615844565b615a766040830184615871565b949350505050565b6000602082019050615a936000830184615048565b92915050565b6000608082019050615aae6000830187615048565b615abb6020830186615048565b615ac86040830185615826565b615ad56060830184614cc3565b95945050505050565b6000606082019050615af36000830186615048565b615b006020830185615826565b615b0d6040830184615844565b949350505050565b6000608082019050615b2a6000830187615048565b615b376020830186615844565b615b446040830185615048565b615b516060830184615048565b95945050505050565b60006020820190508181036000830152615b7481846150a7565b905092915050565b6000602082019050615b9160008301846151e0565b92915050565b6000602082019050615bac60008301846151ef565b92915050565b6000602082019050615bc760008301846151fe565b92915050565b60006020820190508181036000830152615be78184615282565b905092915050565b60006020820190508181036000830152615c08816153bb565b9050919050565b60006020820190508181036000830152615c28816153de565b9050919050565b60006020820190508181036000830152615c4881615401565b9050919050565b60006020820190508181036000830152615c6881615424565b9050919050565b60006020820190508181036000830152615c8881615447565b9050919050565b60006020820190508181036000830152615ca88161546a565b9050919050565b60006020820190508181036000830152615cc88161548d565b9050919050565b60006020820190508181036000830152615ce8816154b0565b9050919050565b60006020820190508181036000830152615d08816154f6565b9050919050565b60006020820190508181036000830152615d2881615519565b9050919050565b60006020820190508181036000830152615d488161553c565b9050919050565b60006020820190508181036000830152615d688161555f565b9050919050565b60006020820190508181036000830152615d8881615582565b9050919050565b60006020820190508181036000830152615da8816155a5565b9050919050565b60006020820190508181036000830152615dc8816155c8565b9050919050565b60006020820190508181036000830152615de8816155eb565b9050919050565b60006020820190508181036000830152615e088161560e565b9050919050565b60006020820190508181036000830152615e2881615631565b9050919050565b60006020820190508181036000830152615e4881615654565b9050919050565b60006020820190508181036000830152615e6881615677565b9050919050565b60006020820190508181036000830152615e888161569a565b9050919050565b60006020820190508181036000830152615ea8816156e0565b9050919050565b60006020820190508181036000830152615ec881615703565b9050919050565b60006020820190508181036000830152615ee881615726565b9050919050565b60006020820190508181036000830152615f0881615749565b9050919050565b60006020820190508181036000830152615f288161576c565b9050919050565b60006020820190508181036000830152615f488161578f565b9050919050565b60006020820190508181036000830152615f68816157b2565b9050919050565b6000606082019050615f8460008301846157d5565b92915050565b6000602082019050615f9f6000830184615826565b92915050565b600061012082019050615fbb600083018c615826565b615fc8602083018b614cc3565b8181036040830152615fda818a614cd2565b90508181036060830152615fee8189614f67565b905081810360808301526160028188614e7e565b905081810360a08301526160168187614d95565b905061602560c0830186615826565b61603260e0830185615826565b8181036101008301526160458184615282565b90509a9950505050505050505050565b60006101208201905061606b600083018b615826565b616078602083018a614cc3565b818103604083015261608a8189614d30565b9050818103606083015261609e8188614fc5565b905081810360808301526160b28187614ef3565b905081810360a08301526160c68186614e0a565b90506160d560c083018561520d565b6160e260e083018461520d565b8181036101008301526160f4816156bd565b90509998505050505050505050565b600061014082019050616119600083018d615826565b616126602083018c614cc3565b616133604083018b615826565b616140606083018a615826565b61614d6080830189615826565b61615a60a0830188615826565b61616760c0830187615826565b61617460e0830186615826565b616182610100830185615039565b616190610120830184615039565b9b9a5050505050505050505050565b60006040820190506161b46000830185615826565b6161c16020830184615826565b9392505050565b60006080820190506161dd6000830188615826565b6161ea6020830187615844565b6161f76040830186615853565b818103606083015261620a81848661521c565b90509695505050505050565b600060808201905061622b6000830186615826565b6162386020830185615844565b6162456040830184615853565b8181036060830152616256816156bd565b9050949350505050565b600061626a61627b565b90506162768282616864565b919050565b6000604051905090565b600067ffffffffffffffff8211156162a05761629f6169a4565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156162cc576162cb6169a4565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156162f8576162f76169a4565b5b602082029050602081019050919050565b600067ffffffffffffffff821115616324576163236169a4565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156163505761634f6169a4565b5b61635982616a17565b9050602081019050919050565b600067ffffffffffffffff821115616381576163806169a4565b5b61638a82616a17565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b6000600182019050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006165c98261670f565b91506165d48361670f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115616609576166086168e8565b5b828201905092915050565b600061661f82616726565b915061662a83616726565b9250826bffffffffffffffffffffffff0382111561664b5761664a6168e8565b5b828201905092915050565b60006166618261670f565b915061666c8361670f565b92508282101561667f5761667e6168e8565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006166bf826166ef565b9050919050565b60008115159050919050565b6000819050919050565b60008190506166ea826172b9565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b600061674982616750565b9050919050565b600061675b826166ef565b9050919050565b600061676d82616774565b9050919050565b600061677f826166ef565b9050919050565b6000616791826166dc565b9050919050565b60006167a38261670f565b9050919050565b60006167b582616726565b9050919050565b82818337600083830152505050565b60005b838110156167e95780820151818401526020810190506167ce565b838111156167f8576000848401525b50505050565b6000600282049050600182168061681657607f821691505b6020821081141561682a57616829616946565b5b50919050565b600061684361683e83616a28565b61668a565b9050919050565b600061685d61685883616a28565b6166aa565b9050919050565b61686d82616a17565b810181811067ffffffffffffffff8211171561688c5761688b6169a4565b5b80604052505050565b60006168a08261670f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156168d3576168d26168e8565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006169df8254616830565b9050919050565b60006169f2825461684a565b9050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f495043543a3a63616e63656c3a2063616e6e6f742063616e63656c206578656360008201527f757465642070726f706f73616c00000000000000000000000000000000000000602082015250565b7f495043543a3a63617374566f7465496e7465726e616c3a20766f74696e67206960008201527f7320636c6f736564000000000000000000000000000000000000000000000000602082015250565b7f495043543a3a70726f706f73653a2070726f706f73657220766f74657320626560008201527f6c6f772070726f706f73616c207468726573686f6c6400000000000000000000602082015250565b7f495043543a3a70726f706f73653a206f6e65206c6976652070726f706f73616c60008201527f207065722070726f706f7365722c20666f756e6420616e20616c72656164792060208201527f70656e64696e672070726f706f73616c00000000000000000000000000000000604082015250565b7f495043543a3a696e697469616c697a653a2074696d656c6f636b2061646d696e60008201527f206973206e6f742061737369676e656420746f204950435444656c6567617465602082015250565b7f495043543a3a696e697469616c697a653a20696e76616c69642070726f706f7360008201527f616c207468726573686f6c640000000000000000000000000000000000000000602082015250565b7f4f6e6c792061646d696e2063616e2063616c6c00000000000000000000000000600082015250565b7f495043543a3a71756575654f72526576657274496e7465726e616c3a2069646560008201527f6e746963616c2070726f706f73616c20616374696f6e20616c7265616479207160208201527f7565756564206174206574610000000000000000000000000000000000000000604082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f495043543a3a657865637574653a2070726f706f73616c2063616e206f6e6c7960008201527f2062652065786563757465642069662069742069732071756575656400000000602082015250565b7f495043543a3a70726f706f73653a20746f6f206d616e7920616374696f6e7300600082015250565b7f495043543a3a5f73657451756f72756d566f7465733a20696e76616c6964207160008201527f756f72756d20766f746573000000000000000000000000000000000000000000602082015250565b7f495043543a3a71756575653a2070726f706f73616c2063616e206f6e6c79206260008201527f6520717565756564206966206974206973207375636365656465640000000000602082015250565b7f495043543a3a5f73657450726f706f73616c5468726573686f6c643a20696e7660008201527f616c69642070726f706f73616c207468726573686f6c64000000000000000000602082015250565b7f495043543a3a63617374566f7465496e7465726e616c3a20696e76616c69642060008201527f766f746520747970650000000000000000000000000000000000000000000000602082015250565b7f495043543a5f61636365707441646d696e3a2070656e64696e672061646d696e60008201527f206f6e6c79000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f495043543a3a63616e63656c3a2070726f706f7365722061626f76652074687260008201527f6573686f6c640000000000000000000000000000000000000000000000000000602082015250565b7f495043543a3a73746174653a20696e76616c69642070726f706f73616c206964600082015250565b7f6164646974696f6e206f766572666c6f77000000000000000000000000000000600082015250565b7f495043543a3a63617374566f746542795369673a20696e76616c69642073696760008201527f6e61747572650000000000000000000000000000000000000000000000000000602082015250565b7f495043543a3a696e697469616c697a653a20696e76616c696420766f74696e6760008201527f20706572696f6400000000000000000000000000000000000000000000000000602082015250565b50565b7f495043543a3a70726f706f73653a206d7573742070726f76696465206163746960008201527f6f6e730000000000000000000000000000000000000000000000000000000000602082015250565b7f495043543a3a70726f706f73653a2070726f706f73616c2066756e6374696f6e60008201527f20696e666f726d6174696f6e206172697479206d69736d617463680000000000602082015250565b7f495043543a3a70726f706f73653a206f6e65206c6976652070726f706f73616c60008201527f207065722070726f706f7365722c20666f756e6420616e20616c72656164792060208201527f6163746976652070726f706f73616c0000000000000000000000000000000000604082015250565b7f495043543a3a696e697469616c697a653a20696e76616c696420766f74696e6760008201527f2064656c61790000000000000000000000000000000000000000000000000000602082015250565b7f495043543a3a696e697469616c697a653a20696e76616c69642071756f72756d60008201527f20766f7465730000000000000000000000000000000000000000000000000000602082015250565b7f7375627472616374696f6e20756e646572666c6f770000000000000000000000600082015250565b7f495043543a3a63617374566f7465496e7465726e616c3a20766f74657220616c60008201527f726561647920766f746564000000000000000000000000000000000000000000602082015250565b600881106172ca576172c9616917565b5b50565b6172d6816166b4565b81146172e157600080fd5b50565b6172ed816166c6565b81146172f857600080fd5b50565b617304816166d2565b811461730f57600080fd5b50565b61731b8161670f565b811461732657600080fd5b50565b61733281616719565b811461733d57600080fd5b50565b61734981616726565b811461735457600080fd5b5056fea2646970667358221220d222d91b80afd257476d8132803d67478be13706c288d09ef3e6309482d87a3264736f6c63430008050033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_acceptAdmin()": {
        "details": "Admin function for pending admin to accept role and update admin"
      },
      "_setPendingAdmin(address)": {
        "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
        "params": {
          "newPendingAdmin": "New pending admin."
        }
      },
      "_setProposalThreshold(uint256)": {
        "details": "newProposalThreshold must be greater than the hardcoded min",
        "params": {
          "newProposalThreshold": "new proposal threshold"
        }
      },
      "_setQuorumVotes(uint256)": {
        "params": {
          "newQuorumVotes": "new quorum votes"
        }
      },
      "_setVotingDelay(uint256)": {
        "params": {
          "newVotingDelay": "new voting delay, in blocks"
        }
      },
      "_setVotingPeriod(uint256)": {
        "params": {
          "newVotingPeriod": "new voting period, in blocks"
        }
      },
      "cancel(uint256)": {
        "params": {
          "proposalId": "The id of the proposal to cancel"
        }
      },
      "castVote(uint256,uint8)": {
        "params": {
          "proposalId": "The id of the proposal to vote on",
          "support": "The support value for the vote. 0=against, 1=for, 2=abstain"
        }
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "details": "External function that accepts EIP-712 signatures for voting on proposals."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "params": {
          "proposalId": "The id of the proposal to vote on",
          "reason": "The reason given for the vote by the voter",
          "support": "The support value for the vote. 0=against, 1=for, 2=abstain"
        }
      },
      "execute(uint256)": {
        "params": {
          "proposalId": "The id of the proposal to execute"
        }
      },
      "getActions(uint256)": {
        "params": {
          "proposalId": "Proposal to query."
        },
        "returns": {
          "calldatas": "Calldatas for proposal calls.",
          "signatures": "Function signatures for proposal calls.",
          "targets": "Target addresses for proposal calls.",
          "values": "Eth values for proposal calls."
        }
      },
      "getReceipt(uint256,address)": {
        "params": {
          "proposalId": "the id of proposal",
          "voter": "The address of the voter"
        },
        "returns": {
          "_0": "The voting receipt"
        }
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "proposalThreshold_": "The initial proposal threshold",
          "quorumVotes_": "The initial quorum votes",
          "releaseToken_": "The address of the \"Release\" voting token. If none, specify the zero address.",
          "timelock_": "The address of the Timelock",
          "token_": "The address of the voting token",
          "votingDelay_": "The initial voting delay",
          "votingPeriod_": "The initial voting period"
        }
      },
      "propose(address[],uint256[],string[],bytes[],string)": {
        "params": {
          "calldatas": "Calldatas for proposal calls.",
          "description": "String description of the proposal.",
          "signatures": "Function signatures for proposal calls.",
          "targets": "Target addresses for proposal calls.",
          "values": "Eth values for proposal calls."
        },
        "returns": {
          "_0": "Proposal id of new proposal."
        }
      },
      "queue(uint256)": {
        "params": {
          "proposalId": "The id of the proposal to queue"
        }
      },
      "state(uint256)": {
        "params": {
          "proposalId": "The id of the proposal"
        },
        "returns": {
          "_0": "Proposal state"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is accepted, which means admin is updated"
      },
      "NewImplementation(address,address)": {
        "notice": "Emitted when implementation is changed"
      },
      "NewPendingAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is changed"
      },
      "ProposalCanceled(uint256)": {
        "notice": "An event emitted when a proposal has been canceled"
      },
      "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {
        "notice": "An event emitted when a new proposal is created"
      },
      "ProposalExecuted(uint256)": {
        "notice": "An event emitted when a proposal has been executed in the Timelock"
      },
      "ProposalQueued(uint256,uint256)": {
        "notice": "An event emitted when a proposal has been queued in the Timelock"
      },
      "ProposalThresholdSet(uint256,uint256)": {
        "notice": "Emitted when proposal threshold is set"
      },
      "QuorumVotesSet(uint256,uint256)": {
        "notice": "An event emitted when the quorum votes is set"
      },
      "VoteCast(address,uint256,uint8,uint256,string)": {
        "notice": "An event emitted when a vote has been cast on a proposal"
      },
      "VotingDelaySet(uint256,uint256)": {
        "notice": "An event emitted when the voting delay is set"
      },
      "VotingPeriodSet(uint256,uint256)": {
        "notice": "An event emitted when the voting period is set"
      }
    },
    "kind": "user",
    "methods": {
      "BALLOT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the ballot struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "MAX_PROPOSAL_THRESHOLD()": {
        "notice": "The maximum setable proposal threshold"
      },
      "MAX_VOTING_DELAY()": {
        "notice": "The max setable voting delay"
      },
      "MAX_VOTING_PERIOD()": {
        "notice": "The max setable voting period"
      },
      "MIN_PROPOSAL_THRESHOLD()": {
        "notice": "The minimum setable proposal threshold"
      },
      "MIN_VOTING_DELAY()": {
        "notice": "The min setable voting delay"
      },
      "MIN_VOTING_PERIOD()": {
        "notice": "The minimum setable voting period"
      },
      "NAME()": {
        "notice": "The name of this contract"
      },
      "PROPOSAL_MAX_OPERATIONS()": {
        "notice": "The maximum number of actions that can be included in a proposal"
      },
      "_acceptAdmin()": {
        "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
      },
      "_setPendingAdmin(address)": {
        "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
      },
      "_setProposalThreshold(uint256)": {
        "notice": "Admin function for setting the proposal threshold"
      },
      "_setQuorumVotes(uint256)": {
        "notice": "Admin function for setting the quorum votes"
      },
      "_setVotingDelay(uint256)": {
        "notice": "Admin function for setting the voting delay"
      },
      "_setVotingPeriod(uint256)": {
        "notice": "Function for setting the voting period"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "cancel(uint256)": {
        "notice": "Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold"
      },
      "castVote(uint256,uint8)": {
        "notice": "Cast a vote for a proposal"
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "notice": "Cast a vote for a proposal by signature"
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "notice": "Cast a vote for a proposal with a reason"
      },
      "execute(uint256)": {
        "notice": "Executes a queued proposal if eta has passed"
      },
      "getActions(uint256)": {
        "notice": "Gets actions of a proposal."
      },
      "getReceipt(uint256,address)": {
        "notice": "Gets the receipt for a voter on a given proposal"
      },
      "implementation()": {
        "notice": "Active brains of Governor"
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Used to initialize the contract during delegator contructor"
      },
      "latestProposalIds(address)": {
        "notice": "The latest proposal for each proposer"
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "proposalCalldatas(uint256,uint256)": {
        "notice": "The official each proposal's calldatas: An ordered list of calldata to be passed to each call"
      },
      "proposalCount()": {
        "notice": "The total number of proposals"
      },
      "proposalReceipts(uint256,address)": {
        "notice": "The official each proposal's receipts: Receipts of ballots for the entire set of voters"
      },
      "proposalSignatures(uint256,uint256)": {
        "notice": "The official each proposal's signatures: An ordered list of function signatures to be called"
      },
      "proposalTargets(uint256,uint256)": {
        "notice": "The official each proposal's targets: An ordered list of target addresses for calls to be made"
      },
      "proposalThreshold()": {
        "notice": "The number of votes required in order for a voter to become a proposer"
      },
      "proposalValues(uint256,uint256)": {
        "notice": "The official each proposal's values: An ordered list of values (i.e. msg.value) to be passed to the calls to be made"
      },
      "proposals(uint256)": {
        "notice": "The official record of all proposals ever proposed"
      },
      "propose(address[],uint256[],string[],bytes[],string)": {
        "notice": "Function used to propose a new proposal. Sender must have delegates above the proposal threshold."
      },
      "queue(uint256)": {
        "notice": "Queues a proposal of state succeeded"
      },
      "quorumVotes()": {
        "notice": "The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed"
      },
      "releaseToken()": {
        "notice": "The address of the \"Release\" governance token"
      },
      "state(uint256)": {
        "notice": "Gets the state of a proposal"
      },
      "timelock()": {
        "notice": "The address of the Governance Timelock"
      },
      "token()": {
        "notice": "The address of the governance token"
      },
      "votingDelay()": {
        "notice": "The delay before voting on a proposal may take place, once proposed, in blocks"
      },
      "votingPeriod()": {
        "notice": "The duration of voting on a proposal, in blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11184,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11187,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11190,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11074,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "votingDelay",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11077,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "votingPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11080,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposalThreshold",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11083,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposalCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11086,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "quorumVotes",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11090,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "timelock",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(TimelockInterface)11369"
      },
      {
        "astId": 11094,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "token",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IHasVotes)5155"
      },
      {
        "astId": 11098,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "releaseToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IHasVotes)5155"
      },
      {
        "astId": 11104,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Proposal)11162_storage)"
      },
      {
        "astId": 11110,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposalTargets",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 11116,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposalValues",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11122,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposalSignatures",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 11128,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposalCalldatas",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_bytes_storage)dyn_storage)"
      },
      {
        "astId": 11136,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "proposalReceipts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)11169_storage))"
      },
      {
        "astId": 11141,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "latestProposalIds",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2316,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "_initialized",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2319,
        "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
        "label": "_initializing",
        "offset": 1,
        "slot": "18",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IHasVotes)5155": {
        "encoding": "inplace",
        "label": "contract IHasVotes",
        "numberOfBytes": "20"
      },
      "t_contract(TimelockInterface)11369": {
        "encoding": "inplace",
        "label": "contract TimelockInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Receipt)11169_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPCTDelegateStorageV1.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)11169_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_bytes_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)11169_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IPCTDelegateStorageV1.Receipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Receipt)11169_storage)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)11162_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPCTDelegateStorageV1.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)11162_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)11162_storage": {
        "encoding": "inplace",
        "label": "struct IPCTDelegateStorageV1.Proposal",
        "members": [
          {
            "astId": 11143,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11145,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11147,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "eta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11149,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "startBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11151,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "endBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11153,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "forVotes",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11155,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "againstVotes",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11157,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11159,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "canceled",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 11161,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "executed",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Receipt)11169_storage": {
        "encoding": "inplace",
        "label": "struct IPCTDelegateStorageV1.Receipt",
        "members": [
          {
            "astId": 11164,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11166,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "support",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11168,
            "contract": "contracts/mocks/IPCTDelegateMock.sol:IPCTDelegateMock",
            "label": "votes",
            "offset": 2,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}