{
  "language": "Solidity",
  "sources": {
    "contracts/airgrab/interfaces/IMerkleDistributor.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMerkleDistributor {\n    // Returns the address of the token distributed by this contract.\n    function token() external view returns (address);\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\n    function merkleRoot() external view returns (bytes32);\n    // Returns true if the index has been marked claimed.\n    function isClaimed(uint256 _index) external view returns (bool);\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\n    function claim(uint256 _index, address _account, uint256 _amount, bytes32[] calldata _merkleProof) external;\n    // Withdraw the unclaimed tokens after the claim period ends\n    function withdrawUnclaimed() external;\n    // Transfers an amount of an ERC20 from this contract to an address\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n\n\n    // This event is triggered whenever a call to #claim succeeds.\n    event Claimed(uint256 _index, address _account, uint256 _amount);\n    // This event is triggered whenever the unclaimed tokens are withdrawn\n    event Withdrawn(address _treasury, uint256 _amount);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/airgrab/MerkleDistributor.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IMerkleDistributor.sol\";\n\ncontract MerkleDistributor is IMerkleDistributor, Ownable {\n    using SafeERC20 for IERC20;\n\n    address public immutable override token;\n    bytes32 public immutable override merkleRoot;\n    uint256 public claimPeriodEndBlock;\n    uint256 private constant CLAIM_PERIOD_BLOCKS = 17280 * 365;\n\n    // This is a packed array of booleans.\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    modifier withinClaimPeriod() {\n        require(block.number <= claimPeriodEndBlock, \"MerkleDistributor: Claim period has ended\");\n        _;\n    }\n\n    modifier claimPeriodEnded() {\n        require(\n            block.number > claimPeriodEndBlock,\n            \"MerkleDistributor: Claim period has not ended\"\n        );\n        _;\n    }\n\n    constructor(address _token, bytes32 _merkleRoot) {\n        token = _token;\n        merkleRoot = _merkleRoot;\n        claimPeriodEndBlock = block.number + CLAIM_PERIOD_BLOCKS;\n    }\n\n    function isClaimed(uint256 _index) public view override returns (bool) {\n        uint256 _claimedWordIndex = _index / 256;\n        uint256 _claimedBitIndex = _index % 256;\n        uint256 _claimedWord = claimedBitMap[_claimedWordIndex];\n        uint256 _mask = (1 << _claimedBitIndex);\n        return _claimedWord & _mask == _mask;\n    }\n\n    function _setClaimed(uint256 _index) private returns (bool) {\n        uint256 _claimedWordIndex = _index / 256;\n        uint256 _claimedBitIndex = _index % 256;\n        uint256 _claimedWord = claimedBitMap[_claimedWordIndex];\n        uint256 _mask = (1 << _claimedBitIndex);\n\n        if (_claimedWord & _mask == _mask) {\n            // If already claimed signify failure\n            return false;\n        } else {\n            // Else claim and return success\n            claimedBitMap[_claimedWordIndex] = _claimedWord | _mask;\n            return true;\n        }\n    }\n\n    function claim(\n        uint256 _index,\n        address _account,\n        uint256 _amount,\n        bytes32[] calldata _merkleProof\n    ) external override withinClaimPeriod {\n        // Set it claimed (returns false if already claimed)\n        require(_setClaimed(_index), \"MerkleDistributor: Drop already claimed.\");\n\n        // Verify the merkle proof.\n        bytes32 _node = keccak256(abi.encodePacked(_index, _account, _amount));\n        require(\n            MerkleProof.verify(_merkleProof, merkleRoot, _node),\n            \"MerkleDistributor: Invalid proof.\"\n        );\n\n        // Send the token\n        IERC20(token).safeTransfer(_account, _amount);\n\n        emit Claimed(_index, _account, _amount);\n    }\n\n    function withdrawUnclaimed() external override onlyOwner claimPeriodEnded {\n        uint256 _unclaimedBalance = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransfer(msg.sender, _unclaimedBalance);\n        emit Withdrawn(msg.sender, _unclaimedBalance);\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner {\n        _token.safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/token/SPACTToken.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@ubeswap/governance/contracts/voting/VotingToken.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IMintableToken.sol\";\n\ncontract SPACTToken is IMintableToken, VotingToken, Ownable {\n    /**\n     * @notice Construct a Staking PACT Token\n     */\n    constructor() VotingToken(\"StakingPactToken\", \"SPACT\", 18) {}\n\n    /**\n     * @notice Mint new voting power\n     * @param _account     The address of the destination account\n     * @param _amount      The amount of voting power to be minted\n     */\n    function mint(address _account, uint96 _amount) external override onlyOwner {\n        _mintVotes(_account, _amount);\n    }\n\n    /**\n     * @notice Burn voting power\n     * @param _account     The address of the source account\n     * @param _amount      The amount of voting power to be burned\n     */\n    function burn(address _account, uint96 _amount) external override onlyOwner {\n        _burnVotes(_account, _amount);\n    }\n}\n"
    },
    "@ubeswap/governance/contracts/voting/VotingToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"../interfaces/INonTransferrableToken.sol\";\nimport \"./VotingPower.sol\";\n\n/**\n * A non-transferrable token that can vote.\n */\ncontract VotingToken is INonTransferrableToken, VotingPower {\n    string private _symbol;\n    uint8 private immutable _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) VotingPower(name_) {\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function name()\n        public\n        view\n        override(INonTransferrableToken, VotingPower)\n        returns (string memory)\n    {\n        return VotingPower.name();\n    }\n\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return totalVotingPower();\n    }\n\n    function balanceOf(address _account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return votingPower(_account);\n    }\n}\n"
    },
    "contracts/token/interfaces/IMintableToken.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ninterface IMintableToken {\n    function mint(address _account, uint96 _amount) external;\n    function burn(address _account, uint96 _amount) external;\n}\n"
    },
    "@ubeswap/governance/contracts/interfaces/INonTransferrableToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/**\n * A token that cannot be transferred.\n */\ninterface INonTransferrableToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _account) external view returns (uint256);\n}\n"
    },
    "@ubeswap/governance/contracts/voting/VotingPower.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"../interfaces/IHasVotes.sol\";\nimport \"../interfaces/IVotingDelegates.sol\";\n\n/**\n * Power to vote. Heavily based on Uni.\n */\ncontract VotingPower is IHasVotes, IVotingDelegates {\n    // Name of the token. This cannot be changed after creating the token.\n    string private _name;\n\n    // Total amount of voting power available.\n    uint96 private totalVotingPowerSupply;\n\n    constructor(string memory name_) {\n        _name = name_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @notice Mint new voting power\n     * @param dst The address of the destination account\n     * @param amount The amount of voting power to be minted\n     */\n    function _mintVotes(address dst, uint96 amount) internal {\n        require(dst != address(0), \"VotingPower::_mintVotes: cannot mint to the zero address\");\n\n        // transfer the amount to the recipient\n        balances[dst] = add96(balances[dst], amount, \"VotingPower::_mintVotes: mint amount overflows\");\n        totalVotingPowerSupply = add96(\n            totalVotingPowerSupply, amount, \"VotingPower::_mintVotes: total supply overflows\"\n        );\n        emit Transfer(address(0), dst, amount);\n\n        // move delegates\n        _moveDelegates(address(0), delegates[dst], amount);\n    }\n\n    /**\n     * @notice Burn voting power\n     * @param src The address of the source account\n     * @param amount The amount of voting power to be burned\n     */\n    function _burnVotes(address src, uint96 amount) internal {\n        require(src != address(0), \"VotingPower::_burnVotes: cannot burn from the zero address\");\n\n        // transfer the amount to the recipient\n        balances[src] = sub96(balances[src], amount, \"VotingPower::_burnVotes: burn amount underflows\");\n        totalVotingPowerSupply = sub96(\n            totalVotingPowerSupply, amount, \"VotingPower::_burnVotes: total supply underflows\"\n        );\n        emit Transfer(src, address(0), amount);\n\n        // move delegates\n        _moveDelegates(delegates[src], address(0), amount);\n    }\n\n    /**\n     * @notice Get the amount of voting power of an account\n     * @param account The address of the account to get the balance of\n     * @return The amount of voting power held\n     */\n    function votingPower(address account) public view override returns (uint96) {\n        return balances[account];\n    }\n\n    function totalVotingPower() public view override returns (uint96) {\n        return totalVotingPowerSupply;\n    }\n\n    ////////////////////////////////\n    //\n    // The below code is copied from ../uniswap-governance/contracts/Uni.sol.\n    // Changes are marked with \"XXX\".\n    //\n    ////////////////////////////////\n\n    // XXX: deleted name, symbol, decimals, totalSupply, minter, mintingAllowedAfter,\n    // minimumTimeBetweenMints, mintCap, allowances\n\n    // Official record of token balances for each account\n    // XXX: internal => private visibility\n    mapping (address => uint96) private balances;\n\n    /// @notice A record of each accounts delegate\n    mapping (address => address) public override delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint96 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    // XXX: deleted PERMIT_TYPEHASH\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n    // XXX: deleted MinterChanged\n\n    // XXX: deleted DelegateChanged, DelegateVotesChanged, Transfer and moved them to IVotingPower\n\n    // XXX: deleted Approval\n\n    // XXX: deleted constructor, setMinter, mint, allowance, approve, permit, balanceOf\n\n    // XXX: deleted transfer, transferFrom\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public override {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public override {\n        // XXX_CHANGED: name => _name\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"Uni::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"Uni::delegateBySig: invalid nonce\");\n        // XXX: added linter disable\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= expiry, \"Uni::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view override returns (uint96) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber) public view override returns (uint96) {\n        require(blockNumber < block.number, \"Uni::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint96 delegatorBalance = balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _transferTokens(address src, address dst, uint96 amount) internal {\n        require(src != address(0), \"Uni::_transferTokens: cannot transfer from the zero address\");\n        require(dst != address(0), \"Uni::_transferTokens: cannot transfer to the zero address\");\n\n        balances[src] = sub96(balances[src], amount, \"Uni::_transferTokens: transfer amount exceeds balance\");\n        balances[dst] = add96(balances[dst], amount, \"Uni::_transferTokens: transfer amount overflows\");\n        emit Transfer(src, dst, amount);\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"Uni::_moveVotes: vote amount underflows\");\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint96 dstRepNew = add96(dstRepOld, amount, \"Uni::_moveVotes: vote amount overflows\");\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n      uint32 blockNumber = safe32(block.number, \"Uni::_writeCheckpoint: block number exceeds 32 bits\");\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n      } else {\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n      }\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\n        require(n < 2**96, errorMessage);\n        return uint96(n);\n    }\n\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        uint96 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function getChainId() internal view returns (uint) {\n        uint256 chainId;\n        // XXX: added linter disable\n        // solhint-disable-next-line no-inline-assembly\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}"
    },
    "@ubeswap/governance/contracts/interfaces/IHasVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/**\n * Reads the votes that an account has.\n */\ninterface IHasVotes {\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint96);\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber)\n        external\n        view\n        returns (uint96);\n}\n"
    },
    "@ubeswap/governance/contracts/interfaces/IVotingDelegates.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/**\n * Interface for a contract that keeps track of voting delegates.\n */\ninterface IVotingDelegates {\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(\n        address indexed delegate,\n        uint256 previousBalance,\n        uint256 newBalance\n    );\n\n    /// @notice An event emitted when an account's voting power is transferred.\n    // - If `from` is `address(0)`, power was minted.\n    // - If `to` is `address(0)`, power was burned.\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @notice Name of the contract.\n    // Required for signing.\n    function name() external view returns (string memory);\n\n    /// @notice A record of each accounts delegate\n    function delegates(address delegatee) external view returns (address);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @notice Get the amount of voting power of an account\n     * @param account The address of the account to get the balance of\n     * @return The amount of voting power held\n     */\n    function votingPower(address account) external view returns (uint96);\n\n    /// @notice Total voting power in existence.\n    function totalVotingPower() external view returns (uint96);\n}\n"
    },
    "contracts/staking/interfaces/IStaking.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../donationMiner/interfaces/IDonationMiner.sol\";\nimport \"../../token/interfaces/IMintableToken.sol\";\n\ninterface IStaking {\n    struct Unstake {\n        uint256 amount;         //amount unstaked\n        uint256 cooldownBlock;  //first block number that will allow holder to claim this unstake\n    }\n\n    struct Holder {\n        uint256 amount;          // amount of PACT that are staked by holder\n        uint256 nextUnstakeId;   //\n        Unstake[] unstakes;      //list of all unstakes amount\n    }\n\n    function getVersion() external returns(uint256);\n    function PACT() external view returns (IERC20);\n    function SPACT() external view returns (IMintableToken);\n    function donationMiner() external view returns (IDonationMiner);\n    function cooldown() external returns(uint256);\n    function currentTotalAmount() external returns(uint256);\n    function stakeholderAmount(address _holderAddress) external view returns(uint256);\n    function stakeholdersListAt(uint256 _index) external view returns (address);\n    function stakeholdersListLength() external view returns (uint256);\n\n    function stake(address _holder, uint256 _amount) external;\n    function unstake(uint256 _amount) external;\n    function claim() external;\n}\n"
    },
    "contracts/donationMiner/interfaces/IDonationMiner.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../community/interfaces/ICommunityAdmin.sol\";\nimport \"../../treasury/interfaces/ITreasury.sol\";\nimport \"../../staking/interfaces/IStaking.sol\";\n\ninterface IDonationMiner {\n    struct RewardPeriod {\n        //reward tokens created per block\n        uint256 rewardPerBlock;\n        //reward tokens from previous periods + reward tokens from this reward period\n        uint256 rewardAmount;\n        //block number at which reward period starts\n        uint256 startBlock;\n        //block number at which reward period ends\n        uint256 endBlock;\n        //total of donations for this rewardPeriod\n        uint256 donationsAmount;\n        //amounts donated by every donor in this rewardPeriod\n        mapping(address => uint256) donorAmounts;\n        uint256 againstPeriods;\n        //total stake amount at the end of this rewardPeriod\n        uint256 stakesAmount;\n        //ratio between 1 cUSD donated and 1 PACT staked\n        uint256 stakingDonationRatio;\n        //true if user has staked/unstaked in this reward period\n        mapping(address => bool) hasSetStakeAmount;\n        //stake amount of a user at the end of this reward period;\n        //if a user doesn't stake/unstake in a reward period,\n        //              this value will remain 0 (and hasSetStakeAmount will be false)\n        //if hasNewStakeAmount is false it means the donorStakeAmount\n        //              is the same as the last reward period where hasSetStakeAmount is true\n        mapping(address => uint256) donorStakeAmounts;\n    }\n\n    struct Donor {\n        uint256 lastClaim;  //last reward period index for which the donor has claimed the reward; used until v2\n        uint256 rewardPeriodsCount; //total number of reward periods in which the donor donated\n        mapping(uint256 => uint256) rewardPeriods; //list of all reward period ids in which the donor donated\n        uint256 lastClaimPeriod; //last reward period id for which the donor has claimed the reward\n    }\n\n    struct Donation {\n        address donor;  //address of the donner\n        address target;  //address of the receiver (community or treasury)\n        uint256 rewardPeriod;  //number of the reward period in which the donation was made\n        uint256 blockNumber;  //number of the block in which the donation was executed\n        uint256 amount;  //the convertedAmount value\n        IERC20 token;  //address of the token\n        uint256 initialAmount;  //number of tokens donated\n    }\n\n    function getVersion() external returns(uint256);\n    function cUSD() external view returns (IERC20);\n    function PACT() external view returns (IERC20);\n    function treasury() external view returns (ITreasury);\n    function staking() external view returns (IStaking);\n    function rewardPeriodSize() external view returns (uint256);\n    function decayNumerator() external view returns (uint256);\n    function decayDenominator() external view returns (uint256);\n    function stakingDonationRatio() external view returns (uint256);\n    function rewardPeriodCount() external view returns (uint256);\n    function donationCount() external view returns (uint256);\n    function rewardPeriods(uint256 _period) external view returns (\n        uint256 rewardPerBlock,\n        uint256 rewardAmount,\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 donationsAmount,\n        uint256 againstPeriods,\n        uint256 stakesAmount,\n        uint256 stakingDonationRatio\n\n);\n    function rewardPeriodDonorAmount(uint256 _period, address _donor) external view returns (uint256);\n    function rewardPeriodDonorStakeAmounts(uint256 _period, address _donor) external view returns (uint256);\n    function donors(address _donor) external view returns (\n        uint256 rewardPeriodsCount,\n        uint256 lastClaim,\n        uint256 lastClaimPeriod\n    );\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex) external view returns (uint256);\n    function donations(uint256 _index) external view returns (\n        address donor,\n        address target,\n        uint256 rewardPeriod,\n        uint256 blockNumber,\n        uint256 amount,\n        IERC20 token,\n        uint256 tokenPrice\n    );\n    function claimDelay() external view returns (uint256);\n    function againstPeriods() external view returns (uint256);\n    function updateRewardPeriodParams(\n        uint256 _newRewardPeriodSize,\n        uint256 _newDecayNumerator,\n        uint256 _newDecayDenominator\n    ) external;\n    function updateClaimDelay(uint256 _newClaimDelay) external;\n    function updateStakingDonationRatio(uint256 _newStakingDonationRatio) external;\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external;\n    function updateTreasury(ITreasury _newTreasury) external;\n    function updateStaking(IStaking _newStaking) external;\n    function donate(IERC20 _token, uint256 _amount, address _delegateAddress) external;\n    function donateToCommunity(ICommunity _community, IERC20 _token, uint256 _amount, address _delegateAddress) external;\n    function lastPeriodsDonations(address _donor) external view returns (uint256, uint256);\n    function claimRewards() external;\n    function claimRewardsPartial(uint256 _lastPeriodNumber) external;\n    function stakeRewards() external;\n    function stakeRewardsPartial(uint256 _lastPeriodNumber) external;\n    function calculateClaimableRewards(address _donor) external returns (uint256 claimAmount, uint256 lastDonorStakeAmount);\n    function calculateClaimableRewardsByPeriodNumber(address _donor, uint256 _lastPeriodNumber) external returns (uint256 claimAmount, uint256 lastDonorStakeAmount);\n    function estimateClaimableReward(address _donor) external view returns (uint256);\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n    function setStakingAmounts(address _holderAddress, uint256 _holderStakeAmount, uint256 _totalStakesAmount) external;\n}\n"
    },
    "contracts/community/interfaces/ICommunityAdmin.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./ICommunity.sol\";\nimport \"../../treasury/interfaces/ITreasury.sol\";\nimport \"../../governor/ubiCommittee/interfaces/IUBICommittee.sol\";\nimport \"../../ambassadors/interfaces/IAmbassadors.sol\";\n\ninterface ICommunityAdmin {\n    enum CommunityState {\n        NONE,\n        Valid,\n        Removed,\n        Migrated\n    }\n\n    function getVersion() external returns(uint256);\n    function cUSD() external view returns(IERC20);\n    function treasury() external view returns(ITreasury);\n    function ubiCommittee() external view returns(IUBICommittee);\n    function ambassadors() external view returns(IAmbassadors);\n    function communityMiddleProxy() external view returns(address);\n    function communities(address _community) external view returns(CommunityState);\n    function communityImplementation() external view returns(ICommunity);\n    function communityProxyAdmin() external view returns(ProxyAdmin);\n    function communityListAt(uint256 _index) external view returns (address);\n    function communityListLength() external view returns (uint256);\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity) external view returns (bool);\n\n    function updateTreasury(ITreasury _newTreasury) external;\n    function updateUbiCommittee(IUBICommittee _newUbiCommittee) external;\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external;\n    function updateCommunityMiddleProxy(address _communityMiddleProxy) external;\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\n    function updateBeneficiaryParams(\n        ICommunity _community,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external;\n    function updateCommunityParams(\n        ICommunity _community,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external;\n    function updateProxyImplementation(address _CommunityMiddleProxy, address _newLogic) external;\n    function addCommunity(\n        address[] memory _managers,\n        address _ambassador,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external;\n    function migrateCommunity(\n        address[] memory _managers,\n        ICommunity _previousCommunity\n    ) external;\n    function addManagerToCommunity(ICommunity _community_, address _account_) external;\n    function removeCommunity(ICommunity _community) external;\n    function fundCommunity() external;\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n    function transferFromCommunity(\n        ICommunity _community,\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "contracts/treasury/interfaces/ITreasury.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../community/interfaces/ICommunityAdmin.sol\";\nimport \"./IUniswapV2Router.sol\";\n\ninterface ITreasury {\n    struct Token {\n        uint256 rate;\n        address[] exchangePath;\n    }\n\n    function getVersion() external returns(uint256);\n    function communityAdmin() external view returns(ICommunityAdmin);\n    function uniswapRouter() external view returns(IUniswapV2Router);\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\n    function updateUniswapRouter(IUniswapV2Router _uniswapRouter) external;\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n    function isToken(address _tokenAddress) external view returns (bool);\n    function tokenListLength() external view returns (uint256);\n    function tokenListAt(uint256 _index) external view returns (address);\n    function tokens(address _tokenAddress) external view returns (uint256 rate, address[] memory exchangePath);\n    function setToken(address _tokenAddress, uint256 _rate, address[] calldata _exchangePath) external;\n    function removeToken(address _tokenAddress) external;\n    function getConvertedAmount(address _tokenAddress, uint256 _amount) external view returns (uint256);\n    function convertAmount(\n        address _tokenAddress,\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address[] memory _exchangePath,\n        uint256 _deadline\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "contracts/community/interfaces/ICommunity.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./ICommunityAdmin.sol\";\n\ninterface ICommunity {\n    enum BeneficiaryState {\n        NONE, //the beneficiary hasn't been added yet\n        Valid,\n        Locked,\n        Removed\n    }\n\n    struct Beneficiary {\n        BeneficiaryState state;  //beneficiary state\n        uint256 claims;          //total number of claims\n        uint256 claimedAmount;   //total amount of cUSD received\n        uint256 lastClaim;       //block number of the last claim\n    }\n\n    function initialize(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche,\n        ICommunity _previousCommunity\n    ) external;\n    function getVersion() external returns(uint256);\n    function previousCommunity() external view returns(ICommunity);\n    function claimAmount() external view returns(uint256);\n    function baseInterval() external view returns(uint256);\n    function incrementInterval() external view returns(uint256);\n    function maxClaim() external view returns(uint256);\n    function validBeneficiaryCount() external view returns(uint);\n    function treasuryFunds() external view returns(uint);\n    function privateFunds() external view returns(uint);\n    function communityAdmin() external view returns(ICommunityAdmin);\n    function cUSD() external view  returns(IERC20);\n    function locked() external view returns(bool);\n    function beneficiaries(address _beneficiaryAddress) external view returns(\n        BeneficiaryState state,\n        uint256 claims,\n        uint256 claimedAmount,\n        uint256 lastClaim\n    );\n    function decreaseStep() external view returns(uint);\n    function beneficiaryListAt(uint256 _index) external view returns (address);\n    function beneficiaryListLength() external view returns (uint256);\n    function impactMarketAddress() external pure returns (address);\n    function minTranche() external view returns(uint256);\n    function maxTranche() external view returns(uint256);\n    function lastFundRequest() external view returns(uint256);\n\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\n    function updateBeneficiaryParams(\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external;\n    function updateCommunityParams(\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external;\n    function donate(address _sender, uint256 _amount) external;\n    function addTreasuryFunds(uint256 _amount) external;\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n    function addManager(address _managerAddress) external;\n    function removeManager(address _managerAddress) external;\n    function addBeneficiary(address _beneficiaryAddress) external;\n    function lockBeneficiary(address _beneficiaryAddress) external;\n    function unlockBeneficiary(address _beneficiaryAddress) external;\n    function removeBeneficiary(address _beneficiaryAddress) external;\n    function claim() external;\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\n    function lock() external;\n    function unlock() external;\n    function requestFunds() external;\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external;\n    function getInitialMaxClaim() external view returns (uint256);\n}\n"
    },
    "contracts/governor/ubiCommittee/interfaces/IUBICommittee.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./ICommunity.sol\";\n// import \"../../treasury/interfaces/ITreasury.sol\";\n// import \"../../governance/interfaces/IUBICommittee.sol\";\n\ninterface IUBICommittee {\n    //\n}\n"
    },
    "contracts/ambassadors/interfaces/IAmbassadors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ninterface IAmbassadors {\n    function getVersion() external returns(uint256);\n    function isAmbassador(address _ambassador) external view returns (bool);\n    function isAmbassadorOf(address _ambassador, address _community) external view returns (bool);\n    function isEntityOf(address _ambassador, address _entityAddress) external view returns (bool);\n    function isAmbassadorAt(address _ambassador, address _entityAddress) external view returns (bool);\n\n    function addEntity(address _entity) external;\n    function removeEntity(address _entity) external;\n    function replaceEntityAccount(address _entity, address _newEntity) external;\n    function addAmbassador(address _ambassador) external;\n    function removeAmbassador(address _ambassador) external;\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador) external;\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external;\n    function transferAmbassador(address _ambassador, address _toEntity, bool _keepCommunities) external;\n    function transferCommunityToAmbassador(address _to, address _community) external;\n    function setCommunityToAmbassador(address _ambassador, address _community) external;\n    function removeCommunity(address _community) external;\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/treasury/interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ninterface IUniswapV2Router {\n    function factory() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function pairFor(address tokenA, address tokenB) external view returns (address);\n}\n"
    },
    "contracts/staking/interfaces/StakingStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./IStaking.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV1. Create a new\n * contract which implements DonationMinerStorageV1 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract StakingStorageV1 is IStaking {\n    IERC20 public override PACT;\n    IMintableToken public override SPACT;\n    IDonationMiner public override donationMiner;\n    uint256 public override cooldown;\n\n    uint256 public override currentTotalAmount;\n\n    mapping(address => Holder) internal holders;\n    EnumerableSet.AddressSet internal stakeholdersList;\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/staking/StakingImplementation.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/StakingStorageV1.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract StakingImplementation is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    StakingStorageV1\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice Triggered when some tokens have been staked\n     *\n     * @param holder     Address of the holder\n     * @param amount     Stake amount\n     */\n    event Staked(address indexed holder, uint256 amount);\n\n    /**\n     * @notice Triggered when some tokens have been unstaked\n     *\n     * @param holder     Address of the holder\n     * @param amount     Unstake amount\n     */\n    event Unstaked(address indexed holder, uint256 amount);\n\n    /**\n     * @notice Triggered when some tokens have been claimed\n     *\n     * @param holder     Address of the holder\n     * @param amount     Claim amount\n     */\n    event Claimed(address indexed holder, uint256 amount);\n\n    /**\n     * @notice Used to initialize a new DonationMiner contract\n     *\n     * @param _PACT                 Address of the PACT Token\n     * @param _SPACT                Address of the SPACT Token\n     * @param _donationMiner        Address of the DonationMiner\n     * @param _cooldown             Number of blocks after a user can claim a stake\n     */\n    function initialize(\n        IERC20 _PACT,\n        IMintableToken _SPACT,\n        IDonationMiner _donationMiner,\n        uint256 _cooldown\n    ) public initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        PACT = _PACT;\n        SPACT = _SPACT;\n        donationMiner = _donationMiner;\n        cooldown = _cooldown;\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function stakeholderAmount(address _holderAddress) external view override returns (uint256) {\n        return holders[_holderAddress].amount;\n    }\n\n    /**\n     * @notice Returns the address of a stakeholder from stakeholdersList\n     *\n     * @param _index index of the stakeholder\n     * @return address of the stakeholder\n     */\n    function stakeholdersListAt(uint256 _index) external view override returns (address) {\n        return stakeholdersList.at(_index);\n    }\n\n    /**\n     * @notice Returns the number of stakeholders\n     *\n     * @return uint256 number of stakeholders\n     */\n    function stakeholdersListLength() external view override returns (uint256) {\n        return stakeholdersList.length();\n    }\n\n    /**\n     * @notice Stakes new founds for the holder\n     *\n     * @param _holderAddress Address of the holder\n     * @param _amount Amount of cUSD tokens to stake\n     */\n    function stake(address _holderAddress, uint256 _amount) external override nonReentrant {\n        require(_amount > 0, \"Stake::stake: Amount can't be 0\");\n\n        PACT.safeTransferFrom(msg.sender, address(this), _amount);\n        SPACT.mint(_holderAddress, uint96(_amount));\n\n        //.add method checks if the stakeholdersList already contains this address\n        stakeholdersList.add(_holderAddress);\n\n        holders[_holderAddress].amount += _amount;\n        currentTotalAmount += _amount;\n\n        donationMiner.setStakingAmounts(\n            _holderAddress,\n            holders[_holderAddress].amount,\n            currentTotalAmount\n        );\n\n        emit Staked(_holderAddress, _amount);\n    }\n\n    /**\n     * @notice Unstake\n     *\n     * @param _amount number of tokens to be unstaked\n     */\n    function unstake(uint256 _amount) external override {\n        require(_amount > 0, \"Stake::unstake: Unstake amount should not be 0\");\n\n        Holder storage _holder = holders[msg.sender];\n\n        require(_holder.amount >= _amount, \"Stake::unstake: Not enough funds\");\n\n        _holder.unstakes.push(Unstake({amount: _amount, cooldownBlock: block.number + cooldown}));\n\n        _holder.amount -= _amount;\n        currentTotalAmount -= _amount;\n\n        donationMiner.setStakingAmounts(msg.sender, _holder.amount, currentTotalAmount);\n\n        emit Unstaked(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Claim all unstakes that are older than cooldown\n     */\n    function claim() external override nonReentrant {\n        Holder storage _holder = holders[msg.sender];\n\n        uint256 _index = _holder.nextUnstakeId;\n        uint256 _amount;\n\n        while (\n            _index < _holder.unstakes.length &&\n            _holder.unstakes[_index].cooldownBlock < block.number\n        ) {\n            _amount += _holder.unstakes[_index].amount;\n            _index++;\n        }\n\n        require(_amount > 0, \"Stake::claim: No funds to claim\");\n\n        _holder.nextUnstakeId = _index;\n\n        SPACT.burn(msg.sender, uint96(_amount));\n        PACT.safeTransfer(msg.sender, _amount);\n\n        emit Claimed(msg.sender, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/vesting/ImpactLabsVestingImplementation.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/ImpactLabsVestingStorageV1.sol\";\n\ncontract ImpactLabsVestingImplementation is\n    Initializable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    ImpactLabsVestingStorageV1\n{\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Triggered when ImpactLabs has claimed\n     *\n     * @param amount      Value of the claim\n     */\n    event Claimed(uint256 amount);\n\n    /**\n     * @notice Triggered when advancePayment has been decreased\n     *\n     * @param amount                  Value of the decrease\n     * @param advancePaymentLeft      Value of the advancePayment left\n     */\n    event AdvancePaymentDecreased(uint256 amount, uint256 advancePaymentLeft);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Used to initialize a new ImpactLabsVesting contract\n     * !!! before calling this method, you must ensure that there is enough PACTs on the contract address\n     *\n     * @param _impactLabs           Address of the ImpactLabs\n     * @param _PACT                 Address of the PACT Token\n     * @param _advancePayment       The amount of PACT that will be given in advance to ImpactLabs\n     */\n    function initialize(\n        address _impactLabs,\n        IERC20 _PACT,\n        IDonationMiner _donationMiner,\n        uint256 _advancePayment\n    ) public initializer {\n        require(\n            address(_impactLabs) != address(0),\n            \"ImpactLabsVesting::initialize: impactLabs_ address not set\"\n        );\n        require(\n            address(_PACT) != address(0),\n            \"ImpactLabsVesting::initialize: PACT address not set\"\n        );\n        require(\n            address(_donationMiner) != address(0),\n            \"ImpactLabsVesting::initialize: donationMiner_ address not set\"\n        );\n\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        impactLabs = _impactLabs;\n        PACT = _PACT;\n        donationMiner = _donationMiner;\n        advancePayment = _advancePayment;\n        nextRewardPeriod = 1;\n\n        transferToImpactLabs(_advancePayment);\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Transfers PACT to ImpactLabs\n     * it will not be transferred PACTs to ImpactLabs until\n     * the entire amount payed in advance will be covered\n     */\n    function claim() external override whenNotPaused {\n        uint256 _index = nextRewardPeriod;\n        uint256 _rewardPeriodCount = donationMiner.rewardPeriodCount();\n\n        uint256 _rewardPerBlock;\n        uint256 _startBlock;\n        uint256 _endBlock;\n        uint256 _claimAmount;\n\n        while (_index <= _rewardPeriodCount) {\n            (_rewardPerBlock, , _startBlock, _endBlock, , , , ) = donationMiner.rewardPeriods(\n                _index\n            );\n\n            if (_endBlock >= block.number) {\n                break;\n            }\n\n            _claimAmount += ((_endBlock - _startBlock + 1) * _rewardPerBlock * 3) / 4;\n            _index++;\n        }\n\n        // if advancePayment is zero it means that all the entire amount payed in advance has been covered\n        if (advancePayment == 0) {\n            transferToImpactLabs(_claimAmount);\n        } else if (advancePayment >= _claimAmount) {\n            // if the claim amount is lesser than the amount of PACTs that is still given in advance\n            // it decrease advancePayment value\n            // it doesn't transfer PACTs to ImpactLabs\n            advancePayment -= _claimAmount;\n            emit AdvancePaymentDecreased(_claimAmount, advancePayment);\n        } else {\n            // if the claim amount is greater than the amount of PACTs that is still given in advance\n            // it decrease advancePayment to 0\n            // it transfer the difference to ImpactLabs\n            uint256 toTransfer = _claimAmount - advancePayment;\n            advancePayment = 0;\n\n            emit AdvancePaymentDecreased(_claimAmount - toTransfer, 0);\n            transferToImpactLabs(toTransfer);\n        }\n\n        nextRewardPeriod = _index;\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    /**\n     * @notice Transfers an amount of PACTs from this contract to impactLabs address\n     *\n     * @param _amount amount of the transaction\n     */\n    function transferToImpactLabs(uint256 _amount) internal nonReentrant {\n        if (_amount > 0) {\n            require(\n                PACT.balanceOf(address(this)) >= _amount,\n                \"ImpactLabsVesting::transferToImpactLabs: ERR_REWARD_TOKEN_BALANCE\"\n            );\n            PACT.safeTransfer(impactLabs, _amount);\n        }\n\n        emit Claimed(_amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/vesting/interfaces/ImpactLabsVestingStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./IImpactLabsVesting.sol\";\n\n/**\n * @title Storage for ImpactLabsVesting\n * @notice For future upgrades, do not change ImpactLabsVestingStorageV1. Create a new\n * contract which implements ImpactLabsVestingStorageV1 and following the naming convention\n * ImpactLabsVestingStorageVx.\n */\nabstract contract ImpactLabsVestingStorageV1 is IImpactLabsVesting {\n    address public override impactLabs;\n    IERC20 public override PACT;\n    IDonationMiner public override donationMiner;\n\n    uint256 public override nextRewardPeriod;\n    uint256 public override advancePayment;\n}\n"
    },
    "contracts/vesting/interfaces/IImpactLabsVesting.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../community/interfaces/ICommunityAdmin.sol\";\nimport \"../../treasury/interfaces/ITreasury.sol\";\nimport \"../../donationMiner/interfaces/IDonationMiner.sol\";\n\ninterface IImpactLabsVesting {\n    function getVersion() external pure returns (uint256);\n    function impactLabs() external view returns (address);\n    function PACT() external view returns (IERC20);\n    function donationMiner() external view returns (IDonationMiner);\n    function nextRewardPeriod() external view returns (uint256);\n    function advancePayment() external view returns (uint256);\n    function claim() external;\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/treasury/interfaces/TreasuryStorageV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./ITreasury.sol\";\nimport \"./TreasuryStorageV1.sol\";\n\n/**\n * @title Storage for Treasury\n * @notice For future upgrades, do not change TreasuryStorageV2. Create a new\n * contract which implements TreasuryStorageV2 and following the naming convention\n * TreasuryStorageVX.\n */\nabstract contract TreasuryStorageV2 is TreasuryStorageV1 {\n    IUniswapV2Router public override uniswapRouter;\n    mapping(address => Token) internal _tokens;\n    EnumerableSet.AddressSet internal _tokenList;\n}\n"
    },
    "contracts/treasury/interfaces/TreasuryStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./ITreasury.sol\";\n\n/**\n * @title Storage for Treasury\n * @notice For future upgrades, do not change TreasuryStorageV1. Create a new\n * contract which implements TreasuryStorageV1 and following the naming convention\n * TreasuryStorageVX.\n */\nabstract contract TreasuryStorageV1 is ITreasury {\n    ICommunityAdmin public override communityAdmin;\n}\n"
    },
    "contracts/treasury/TreasuryImplementation.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/TreasuryStorageV2.sol\";\n\ncontract TreasuryImplementation is\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    TreasuryStorageV2\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice Triggered when CommunityAdmin has been updated\n     *\n     * @param oldCommunityAdmin   Old communityAdmin address\n     * @param newCommunityAdmin   New communityAdmin address\n     */\n    event CommunityAdminUpdated(\n        address indexed oldCommunityAdmin,\n        address indexed newCommunityAdmin\n    );\n\n    /**\n     * @notice Triggered when UniswapRouter has been updated\n     *\n     * @param oldUniswapRouter   Old uniswapRouter address\n     * @param newUniswapRouter   New uniswapRouter address\n     */\n    event UniswapRouterUpdated(address indexed oldUniswapRouter, address indexed newUniswapRouter);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Triggered when a token has been set\n     *\n     * @param tokenAddress        Address of the token\n     * @param oldRate            Old token rate value\n     * @param oldExchangePath    Old token exchange path\n     * @param newRate            New token rate value\n     * @param newExchangePath    New token exchange path\n     */\n    event TokenSet(\n        address indexed tokenAddress,\n        uint256 oldRate,\n        address[] oldExchangePath,\n        uint256 newRate,\n        address[] newExchangePath\n    );\n\n    /**\n     * @notice Triggered when a token has been removed\n     *\n     * @param tokenAddress        Address of the token\n     */\n    event TokenRemoved(address indexed tokenAddress);\n\n    /**\n     * @notice Triggered when a token has been set\n     *\n     * @param tokenAddress           Address of the token\n     * @param amountIn               Amount changed\n     * @param amountOutMin           Minimum amount out\n     * @param exchangePath           Exchange path\n     * @param approximateAmountsOut  Approximate value of the final amount out\n     */\n    event AmountConverted(\n        address indexed tokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] exchangePath,\n        uint256 approximateAmountsOut\n    );\n\n    /**\n     * @notice Enforces sender to be communityAdmin\n     */\n    modifier onlyCommunityAdmin() {\n        require(msg.sender == address(communityAdmin), \"Treasury: NOT_COMMUNITY_ADMIN\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be communityAdmin or owner\n     */\n    modifier onlyCommunityAdminOrOwner() {\n        require(\n            msg.sender == address(communityAdmin) || msg.sender == owner(),\n            \"Treasury: NOT_COMMUNITY_ADMIN AND NOT_OWNER\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Used to initialize a new Treasury contract\n     *\n     * @param _communityAdmin    Address of the CommunityAdmin contract\n     */\n    function initialize(ICommunityAdmin _communityAdmin) public initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        communityAdmin = _communityAdmin;\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Returns if an address is an accepted token\n     *\n     * @param _tokenAddress token address to be checked\n     * @return bool true if the tokenAddress is an accepted token\n     */\n    function isToken(address _tokenAddress) external view override returns (bool) {\n        return _tokenList.contains(_tokenAddress);\n    }\n\n    /**\n     * @notice Returns the address of a token from tokenList\n     *\n     * @param _index index of the token\n     * @return address of the token\n     */\n    function tokenListAt(uint256 _index) external view override returns (address) {\n        return _tokenList.at(_index);\n    }\n\n    /**\n     * @notice Returns the number of tokens\n     *\n     * @return uint256 number of tokens\n     */\n    function tokenListLength() external view override returns (uint256) {\n        return _tokenList.length();\n    }\n\n    /**\n     * @notice Returns the details of a token\n     *\n     * @param _tokenAddress address of the token\n     * @return rate of the token\n     * @return exchangePath of the token\n     */\n    function tokens(address _tokenAddress)\n        external\n        view\n        override\n        returns (uint256 rate, address[] memory exchangePath)\n    {\n        return (_tokens[_tokenAddress].rate, _tokens[_tokenAddress].exchangePath);\n    }\n\n    /**\n     * @notice Updates the CommunityAdmin contract address\n     *\n     * @param _newCommunityAdmin address of the new CommunityAdmin contract\n     */\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external override onlyOwner {\n        address _oldCommunityAdminAddress = address(communityAdmin);\n        communityAdmin = _newCommunityAdmin;\n\n        emit CommunityAdminUpdated(_oldCommunityAdminAddress, address(_newCommunityAdmin));\n    }\n\n    /**\n     * @notice Updates the UniswapRouter contract address\n     *\n     * @param _newUniswapRouter address of the new UniswapRouter contract\n     */\n    function updateUniswapRouter(IUniswapV2Router _newUniswapRouter) external override onlyOwner {\n        address _oldUniswapRouterAddress = address(uniswapRouter);\n        uniswapRouter = _newUniswapRouter;\n\n        emit UniswapRouterUpdated(_oldUniswapRouterAddress, address(_newUniswapRouter));\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyCommunityAdminOrOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    function setToken(\n        address _tokenAddress,\n        uint256 _rate,\n        address[] calldata _exchangePath\n    ) external override onlyOwner {\n        require(_rate > 0, \"Treasury::setToken: invalid rate\");\n\n        if (_exchangePath.length > 0) {\n            require(\n                _exchangePath.length > 1 && _exchangePath[0] == _tokenAddress,\n                \"Treasury::setToken: invalid exchangePath\"\n            );\n\n            uint256[] memory _amounts = uniswapRouter.getAmountsOut(1e18, _exchangePath);\n            require(_amounts[_amounts.length - 1] > 0, \"Treasury::setToken: invalid exchangePath\");\n        }\n\n        uint256 _oldRate = _tokens[_tokenAddress].rate;\n        address[] memory _oldExchangePath = _tokens[_tokenAddress].exchangePath;\n\n        _tokens[_tokenAddress].rate = _rate;\n        _tokens[_tokenAddress].exchangePath = _exchangePath;\n\n        _tokenList.add(_tokenAddress);\n\n        emit TokenSet(_tokenAddress, _oldRate, _oldExchangePath, _rate, _exchangePath);\n    }\n\n    function removeToken(address _tokenAddress) external override onlyOwner {\n        require(_tokenList.contains(_tokenAddress), \"Treasury::removeToken: this is not a token\");\n\n        _tokens[_tokenAddress].rate = 0;\n        delete _tokens[_tokenAddress].exchangePath;\n\n        _tokenList.remove(_tokenAddress);\n\n        emit TokenRemoved(_tokenAddress);\n    }\n\n    function getConvertedAmount(address _tokenAddress, uint256 _amount)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        require(\n            _tokenList.contains(_tokenAddress),\n            \"Treasury::getConvertedAmount: this is not a valid token\"\n        );\n\n        Token memory _token = _tokens[_tokenAddress];\n\n        uint256 _convertedAmount;\n        if (_token.exchangePath.length == 0) {\n            _convertedAmount = _amount;\n        } else {\n            uint256[] memory _amountsOut = uniswapRouter.getAmountsOut(\n                _amount,\n                _token.exchangePath\n            );\n            _convertedAmount = _amountsOut[_amountsOut.length - 1];\n        }\n\n        return (_convertedAmount * _token.rate) / 1e18;\n    }\n\n    function convertAmount(\n        address _tokenAddress,\n        uint256 _amountIn,\n        uint256 _amountOutMin,\n        address[] memory _exchangePath,\n        uint256 _deadline\n    ) external override onlyOwner {\n        require(\n            _tokenList.contains(_tokenAddress),\n            \"Treasury::convertAmount: this is not a valid token\"\n        );\n\n        if (_exchangePath.length == 0) {\n            _exchangePath = _tokens[_tokenAddress].exchangePath;\n        }\n\n        if (_deadline == 0) {\n            _deadline = block.timestamp + 3600;\n        }\n\n        uint256[] memory _amountsOut = uniswapRouter.getAmountsOut(_amountIn, _exchangePath);\n\n        IERC20(_tokenAddress).approve(address(uniswapRouter), _amountIn);\n        uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            _amountIn,\n            _amountOutMin,\n            _exchangePath,\n            address(this),\n            _deadline\n        );\n\n        emit AmountConverted(\n            _tokenAddress,\n            _amountIn,\n            _amountOutMin,\n            _exchangePath,\n            _amountsOut[_amountsOut.length - 1]\n        );\n    }\n}\n"
    },
    "contracts/mocks/treasury/TreasuryImplementationOld.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/TreasuryStorageV1Old.sol\";\n\ncontract TreasuryImplementationOld is\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    TreasuryStorageV1\n{\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Triggered when CommunityAdmin has been updated\n     *\n     * @param oldCommunityAdmin   Old communityAdmin address\n     * @param newCommunityAdmin   New communityAdmin address\n     */\n    event CommunityAdminUpdated(\n        address indexed oldCommunityAdmin,\n        address indexed newCommunityAdmin\n    );\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Used to initialize a new Treasury contract\n     *\n     * @param _communityAdmin    Address of the CommunityAdmin contract\n     */\n    function initialize(ICommunityAdmin _communityAdmin) public initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        communityAdmin = _communityAdmin;\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Enforces sender to be communityAdmin\n     */\n    modifier onlyCommunityAdmin() {\n        require(msg.sender == address(communityAdmin), \"Treasury: NOT_COMMUNITY_ADMIN\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be communityAdmin or owner\n     */\n    modifier onlyCommunityAdminOrOwner() {\n        require(\n            msg.sender == address(communityAdmin) || msg.sender == owner(),\n            \"Treasury: NOT_COMMUNITY_ADMIN AND NOT_OWNER\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Updates the CommunityAdmin contract address\n     *\n     * @param _newCommunityAdmin address of the new CommunityAdmin contract\n     */\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external override onlyOwner {\n        address _oldCommunityAdminAddress = address(communityAdmin);\n        communityAdmin = _newCommunityAdmin;\n\n        emit CommunityAdminUpdated(_oldCommunityAdminAddress, address(_newCommunityAdmin));\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyCommunityAdminOrOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n}\n"
    },
    "contracts/mocks/treasury/interfaces/TreasuryStorageV1Old.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./ITreasuryOld.sol\";\n\n/**\n * @title Storage for Treasury\n * @notice For future upgrades, do not change TreasuryStorageV1. Create a new\n * contract which implements TreasuryStorageV1 and following the naming convention\n * TreasuryStorageVX.\n */\nabstract contract TreasuryStorageV1 is ITreasuryOld {\n    ICommunityAdmin public override communityAdmin;\n}\n"
    },
    "contracts/mocks/treasury/interfaces/ITreasuryOld.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../../community/interfaces/ICommunityAdmin.sol\";\n\ninterface ITreasuryOld {\n    function getVersion() external returns(uint256);\n    function communityAdmin() external view returns(ICommunityAdmin);\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/mocks/donationMiner/interfaces/IDonationMinerOld.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../../community/interfaces/ICommunityAdmin.sol\";\nimport \"../../../treasury/interfaces/ITreasury.sol\";\n\ninterface IDonationMinerOld {\n    struct RewardPeriod {\n        uint256 rewardPerBlock; //reward tokens created per block.\n        uint256 rewardAmount; //reward tokens from previous periods + reward tokens from this reward period\n        uint256 startBlock; //block number at which reward period starts.\n        uint256 endBlock; //block number at which reward period ends.\n        uint256 donationsAmount; //total of donations for this rewardPeriod.\n        mapping(address => uint256) donorAmounts; //amounts donated by every donor in this rewardPeriod.\n        uint256 againstPeriods;\n    }\n\n    struct Donor {\n        uint256 lastClaim;  //last reward period index for which the donor has claimed the reward\n        uint256 rewardPeriodsCount; //total number of reward periods in which the donor donated\n        mapping(uint256 => uint256) rewardPeriods; //list of all reward period ids in which the donor donated\n        uint256 lastClaimPeriod;\n    }\n\n    struct Donation {\n        address donor;  //address of the donner\n        address target;  //address of the receiver (community or treasury)\n        uint256 rewardPeriod;  //number of the reward period in which the donation was made\n        uint256 blockNumber;  //number of the block in which the donation was executed\n        uint256 amount;  //number of tokens donated\n        IERC20 token;  //address of the token\n        uint256 tokenPrice;  //the price of the token in cUSD\n    }\n\n    function getVersion() external returns(uint256);\n    function cUSD() external view returns (IERC20);\n    function PACT() external view returns (IERC20);\n    function treasury() external view returns (ITreasury);\n    function rewardPeriodSize() external view returns (uint256);\n    function decayNumerator() external view returns (uint256);\n    function decayDenominator() external view returns (uint256);\n    function rewardPeriodCount() external view returns (uint256);\n    function donationCount() external view returns (uint256);\n    function rewardPeriods(uint256 _period) external view returns (\n        uint256 rewardPerBlock,\n        uint256 rewardAmount,\n        uint256 startBlock,\n        uint256 endBlock,\n        uint256 donationsAmount,\n        uint256 againstPeriods\n    );\n    function rewardPeriodDonorAmount(uint256 _period, address _donor) external view returns (uint256);\n    function donors(address _donor) external view returns (\n        uint256 rewardPeriodsCount,\n        uint256 lastClaim,\n        uint256 lastClaimPeriod\n    );\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex) external view returns (uint256);\n    function donations(uint256 _index) external view returns (\n        address donor,\n        address target,\n        uint256 rewardPeriod,\n        uint256 blockNumber,\n        uint256 amount,\n        IERC20 token,\n        uint256 tokenPrice\n    );\n    function claimDelay() external view returns (uint256);\n    function againstPeriods() external view returns (uint256);\n    function updateRewardPeriodParams(\n        uint256 _newRewardPeriodSize,\n        uint256 _newDecayNumerator,\n        uint256 _newDecayDenominator\n    ) external;\n    function updateClaimDelay(uint256 _newClaimDelay) external;\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external;\n    function updateTreasury(ITreasury _newTreasury) external;\n    function donate(uint256 _amount) external;\n    function donateToCommunity(ICommunity _community, uint256 _amount) external;\n    function claimRewards() external;\n    function claimRewardsPartial(uint256 _lastPeriodNumber) external;\n    function calculateClaimableRewards(address _donor) external returns (uint256);\n    function calculateClaimableRewardsByPeriodNumber(address _donor, uint256 _lastPeriodNumber) external returns (uint256);\n    function estimateClaimableReward(address _donor) external view returns (uint256);\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/mocks/community/interfaces/CommunityStorageV2Mock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../../../community/interfaces/ICommunity.sol\";\nimport \"../../../community/interfaces/ICommunityAdmin.sol\";\nimport \"../../../community/interfaces/CommunityStorageV1.sol\";\n\n/**\n * @title Storage for Community\n * @notice For future upgrades, do not change CommunityStorageV1. Create a new\n * contract which implements CommunityStorageV1 and following the naming convention\n * CommunityStorageVX.\n */\nabstract contract CommunityStorageV2Mock is CommunityStorageV1 {\n    address public addressTest1;\n    address public addressTest2;\n    address public addressTest3;\n    uint256 public uint256Test1;\n    uint256 public uint256Test2;\n    uint256 public uint256Test3;\n\n    mapping(bytes32 => bytes32) public mapTest1;\n    mapping(address => bool) public mapTest2;\n    mapping(uint256 => address) public mapTest3;\n}\n"
    },
    "contracts/community/interfaces/CommunityStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./ICommunity.sol\";\nimport \"./ICommunityAdmin.sol\";\n\n/**\n * @title Storage for Community\n * @notice For future upgrades, do not change CommunityStorageV1. Create a new\n * contract which implements CommunityStorageV1 and following the naming convention\n * CommunityStorageVX.\n */\nabstract contract CommunityStorageV1 is ICommunity {\n    bool public override locked;\n    uint256 public override claimAmount;\n    uint256 public override baseInterval;\n    uint256 public override incrementInterval;\n    uint256 public override maxClaim;\n    uint256 public override validBeneficiaryCount;\n    uint256 public override treasuryFunds;\n    uint256 public override privateFunds;\n    uint256 public override decreaseStep;\n    uint256 public override minTranche;\n    uint256 public override maxTranche;\n    uint256 public override lastFundRequest;\n\n    ICommunity public override previousCommunity;\n    ICommunityAdmin public override communityAdmin;\n\n    mapping(address => Beneficiary) public override beneficiaries;\n    EnumerableSet.AddressSet internal beneficiaryList;\n}\n"
    },
    "contracts/mocks/community/CommunityMock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../../community/interfaces/ICommunity.sol\";\nimport \"../../community/interfaces/ICommunityLegacy.sol\";\nimport \"../../community/interfaces/ICommunityAdmin.sol\";\nimport \"../../community/interfaces/CommunityStorageV1.sol\";\nimport \"./interfaces/CommunityStorageV2Mock.sol\";\n\n/**\n * @notice Welcome to the Community contract. For each community\n * there will be one proxy contract deployed by CommunityAdmin.\n * The implementation of the proxy is this contract. This enable\n * us to save tokens on the contract itself, and avoid the problems\n * of having everything in one single contract.\n *Each community has it's own members and and managers.\n */\ncontract CommunityImplementationMock is\n    Initializable,\n    AccessControlUpgradeable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    CommunityStorageV2Mock\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 private constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    uint256 private constant DEFAULT_AMOUNT = 5e16;\n\n    /**\n     * @notice Triggered when a manager has been added\n     *\n     * @param manager           Address of the manager that triggered the event\n     *                          or address of the CommunityAdmin if it's first manager\n     * @param account           Address of the manager that has been added\n     */\n    event ManagerAdded(address indexed manager, address indexed account);\n\n    /**\n     * @notice Triggered when a manager has been removed\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param account           Address of the manager that has been removed\n     */\n    event ManagerRemoved(address indexed manager, address indexed account);\n\n    /**\n     * @notice Triggered when a beneficiary has been added\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been added\n     */\n    event BeneficiaryAdded(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been locked\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been locked\n     */\n    event BeneficiaryLocked(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been unlocked\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been unlocked\n     */\n    event BeneficiaryUnlocked(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been removed\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been removed\n     */\n    event BeneficiaryRemoved(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has claimed\n     *\n     * @param beneficiary       Address of the beneficiary that has claimed\n     * @param amount            Amount of the claim\n     */\n    event BeneficiaryClaim(address indexed beneficiary, uint256 amount);\n\n    /**\n     * @notice Triggered when a community has been locked\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event CommunityLocked(address indexed manager);\n\n    /**\n     * @notice Triggered when a community has been unlocked\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event CommunityUnlocked(address indexed manager);\n\n    /**\n     * @notice Triggered when a manager has requested funds for community\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event FundsRequested(address indexed manager);\n\n    /**\n     * @notice Triggered when someone has donated cUSD\n     *\n     * @param donor             Address of the donor\n     * @param amount            Amount of the donation\n     */\n    event Donate(address indexed donor, uint256 amount);\n\n    /**\n     * @notice Triggered when a beneficiary from previous community has joined in the current community\n     *\n     * @param beneficiary       Address of the beneficiary\n     */\n    event BeneficiaryJoined(address indexed beneficiary);\n\n    /**\n     * @notice Triggered when beneficiary params has been updated\n     *\n     * @param oldClaimAmount       Old claimAmount value\n     * @param oldMaxClaim          Old maxClaim value\n     * @param oldDecreaseStep      Old decreaseStep value\n     * @param oldBaseInterval      Old baseInterval value\n     * @param oldIncrementInterval Old incrementInterval value\n     * @param newClaimAmount       New claimAmount value\n     * @param newMaxClaim          New maxClaim value\n     * @param newDecreaseStep      New decreaseStep value\n     * @param newBaseInterval      New baseInterval value\n     * @param newIncrementInterval New incrementInterval value\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event BeneficiaryParamsUpdated(\n        uint256 oldClaimAmount,\n        uint256 oldMaxClaim,\n        uint256 oldDecreaseStep,\n        uint256 oldBaseInterval,\n        uint256 oldIncrementInterval,\n        uint256 newClaimAmount,\n        uint256 newMaxClaim,\n        uint256 newDecreaseStep,\n        uint256 newBaseInterval,\n        uint256 newIncrementInterval\n    );\n\n    /**\n     * @notice Triggered when community params has been updated\n     *\n     * @param oldMinTranche        Old minTranche value\n     * @param oldMaxTranche        Old maxTranche value\n     * @param newMinTranche        New minTranche value\n     * @param newMaxTranche        New maxTranche value\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event CommunityParamsUpdated(\n        uint256 oldMinTranche,\n        uint256 oldMaxTranche,\n        uint256 newMinTranche,\n        uint256 newMaxTranche\n    );\n\n    /**\n     * @notice Triggered when communityAdmin has been updated\n     *\n     * @param oldCommunityAdmin   Old communityAdmin address\n     * @param newCommunityAdmin   New communityAdmin address\n     */\n    event CommunityAdminUpdated(\n        address indexed oldCommunityAdmin,\n        address indexed newCommunityAdmin\n    );\n\n    /**\n     * @notice Triggered when previousCommunity has been updated\n     *\n     * @param oldPreviousCommunity   Old previousCommunity address\n     * @param newPreviousCommunity   New previousCommunity address\n     */\n    event PreviousCommunityUpdated(\n        address indexed oldPreviousCommunity,\n        address indexed newPreviousCommunity\n    );\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Used to initialize a new Community contract\n     *\n     * @param _managers            Community's initial managers.\n     *                             Will be able to add others\n     * @param _claimAmount         Base amount to be claim by the beneficiary\n     * @param _maxClaim            Limit that a beneficiary can claim in total\n     * @param _decreaseStep        Value decreased from maxClaim each time a beneficiary is added\n     * @param _baseInterval        Base interval to start claiming\n     * @param _incrementInterval   Increment interval used in each claim\n     * @param _previousCommunity   Previous smart contract address of community\n     * @param _minTranche          Minimum amount that the community will receive when requesting funds\n     * @param _maxTranche          Maximum amount that the community will receive when requesting funds\n     */\n    function initialize(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche,\n        ICommunity _previousCommunity\n    ) external override initializer {\n        require(\n            _baseInterval > _incrementInterval,\n            \"Community::initialize: baseInterval must be greater than incrementInterval\"\n        );\n        require(\n            _maxClaim > _claimAmount,\n            \"Community::initialize: maxClaim must be greater than claimAmount\"\n        );\n\n        require(\n            _minTranche <= _maxTranche,\n            \"Community::initialize: minTranche should not be greater than maxTranche\"\n        );\n\n        __AccessControl_init();\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        claimAmount = _claimAmount;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n        maxClaim = _maxClaim;\n        minTranche = _minTranche;\n        maxTranche = _maxTranche;\n        previousCommunity = _previousCommunity;\n        communityAdmin = ICommunityAdmin(msg.sender);\n        decreaseStep = _decreaseStep;\n        locked = false;\n\n        transferOwnership(msg.sender);\n\n        // MANAGER_ROLE is the admin for the MANAGER_ROLE\n        // so every manager is able to add or remove other managers\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\n\n        _setupRole(MANAGER_ROLE, msg.sender);\n        emit ManagerAdded(msg.sender, msg.sender);\n\n        for (uint256 i = 0; i < _managers.length; i++) {\n            addManager(_managers[i]);\n        }\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Enforces sender to be a valid beneficiary\n     */\n    modifier onlyValidBeneficiary() {\n        require(\n            beneficiaries[msg.sender].state == BeneficiaryState.Valid,\n            \"Community: NOT_VALID_BENEFICIARY\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to have manager role\n     */\n    modifier onlyManagers() {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"Community: NOT_MANAGER\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be the community ambassador or entity ambassador responsible\n     */\n    modifier onlyAmbassadorOrEntity() {\n        require(\n            communityAdmin.isAmbassadorOrEntityOfCommunity(address(this), msg.sender),\n            \"Community: NOT_AMBASSADOR_OR_ENTITY\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Returns the cUSD contract address\n     */\n    function cUSD() public view override returns (IERC20) {\n        return communityAdmin.cUSD();\n    }\n\n    /**\n     * @notice Returns the length of the beneficiaryList\n     */\n    function beneficiaryListLength() external view override returns (uint256) {\n        return beneficiaryList.length();\n    }\n\n    /**\n     * @notice Returns an address from the beneficiaryList\n     *\n     * @param index_ index value\n     * @return address of the beneficiary\n     */\n    function beneficiaryListAt(uint256 index_) external view override returns (address) {\n        return beneficiaryList.at(index_);\n    }\n\n    /**\n     * @notice Returns the 0 address\n     * only used for backwards compatibility\n     */\n    function impactMarketAddress() public pure override returns (address) {\n        return address(0);\n    }\n\n    /** Updates the address of the communityAdmin\n     *\n     * @param _newCommunityAdmin address of the new communityAdmin\n     */\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external override onlyOwner {\n        address _oldCommunityAdminAddress = address(communityAdmin);\n        communityAdmin = _newCommunityAdmin;\n\n        addManager(address(communityAdmin));\n\n        emit CommunityAdminUpdated(_oldCommunityAdminAddress, address(_newCommunityAdmin));\n    }\n\n    /** Updates the address of the previousCommunity\n     *\n     * @param _newPreviousCommunity address of the new previousCommunity\n     */\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external override onlyOwner {\n        address _oldPreviousCommunityAddress = address(previousCommunity);\n        previousCommunity = _newPreviousCommunity;\n\n        emit PreviousCommunityUpdated(_oldPreviousCommunityAddress, address(_newPreviousCommunity));\n    }\n\n    /** Updates beneficiary params\n     *\n     * @param _claimAmount  base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim  in total\n     * @param _decreaseStep value decreased from maxClaim each time a is beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     */\n    function updateBeneficiaryParams(\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external override onlyOwner {\n        require(\n            _baseInterval > _incrementInterval,\n            \"Community::constructor: baseInterval must be greater than incrementInterval\"\n        );\n        require(\n            _maxClaim > _claimAmount,\n            \"Community::constructor: maxClaim must be greater than claimAmount\"\n        );\n\n        uint256 _oldClaimAmount = claimAmount;\n        uint256 _oldMaxClaim = maxClaim;\n        uint256 _oldDecreaseStep = decreaseStep;\n        uint256 _oldBaseInterval = baseInterval;\n        uint256 _oldIncrementInterval = incrementInterval;\n\n        claimAmount = _claimAmount;\n        maxClaim = _maxClaim;\n        decreaseStep = _decreaseStep;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n\n        emit BeneficiaryParamsUpdated(\n            _oldClaimAmount,\n            _oldMaxClaim,\n            _oldDecreaseStep,\n            _oldBaseInterval,\n            _oldIncrementInterval,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval\n        );\n    }\n\n    /** @notice Updates params of a community\n     *\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     */\n    function updateCommunityParams(uint256 _minTranche, uint256 _maxTranche)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            _minTranche <= _maxTranche,\n            \"Community::updateCommunityParams: minTranche should not be greater than maxTranche\"\n        );\n\n        uint256 _oldMinTranche = minTranche;\n        uint256 _oldMaxTranche = maxTranche;\n\n        minTranche = _minTranche;\n        maxTranche = _maxTranche;\n\n        emit CommunityParamsUpdated(_oldMinTranche, _oldMaxTranche, _minTranche, _maxTranche);\n    }\n\n    /**\n     * @notice Adds a new manager\n     *\n     * @param _account address of the manager to be added\n     */\n    function addManager(address _account) public override onlyAmbassadorOrEntity {\n        if (!hasRole(MANAGER_ROLE, _account)) {\n            super.grantRole(MANAGER_ROLE, _account);\n            emit ManagerAdded(msg.sender, _account);\n        }\n    }\n\n    /**\n     * @notice Remove an existing manager\n     *\n     * @param _account address of the manager to be removed\n     */\n    function removeManager(address _account) external override onlyAmbassadorOrEntity {\n        require(\n            hasRole(MANAGER_ROLE, _account),\n            \"Community::removeManager: This account doesn't have manager role\"\n        );\n        require(\n            _account != address(communityAdmin),\n            \"Community::removeManager: You are not allow to remove communityAdmin\"\n        );\n        super.revokeRole(MANAGER_ROLE, _account);\n        emit ManagerRemoved(msg.sender, _account);\n    }\n\n    /**\n     * @notice Enforces managers to use addManager method\n     */\n    function grantRole(bytes32, address) public pure override {\n        require(false, \"Community::grantRole: You are not allow to use this method\");\n    }\n\n    /**\n     * @notice Enforces managers to use removeManager method\n     */\n    function revokeRole(bytes32, address) public pure override {\n        require(false, \"Community::revokeRole: You are not allow to use this method\");\n    }\n\n    /**\n     * @notice Adds a new beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be added\n     */\n    function addBeneficiary(address _beneficiaryAddress)\n        external\n        override\n        onlyManagers\n        nonReentrant\n    {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n        require(\n            _beneficiary.state == BeneficiaryState.NONE,\n            \"Community::addBeneficiary: Beneficiary exists\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\n        // solhint-disable-next-line not-rely-on-time\n        _beneficiary.lastClaim = block.number;\n\n        beneficiaryList.add(_beneficiaryAddress);\n\n        // send default amount when adding a new beneficiary\n        cUSD().safeTransfer(_beneficiaryAddress, DEFAULT_AMOUNT);\n\n        emit BeneficiaryAdded(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice Locks a valid beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be locked\n     */\n    function lockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Valid,\n            \"Community::lockBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Locked);\n        emit BeneficiaryLocked(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice  Unlocks a locked beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be unlocked\n     */\n    function unlockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Locked,\n            \"Community::unlockBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\n        emit BeneficiaryUnlocked(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice Remove an existing beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be removed\n     */\n    function removeBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Valid ||\n                _beneficiary.state == BeneficiaryState.Locked,\n            \"Community::removeBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Removed);\n        emit BeneficiaryRemoved(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @dev Transfers cUSD to a valid beneficiary\n     */\n    function claim() external override onlyValidBeneficiary nonReentrant {\n        Beneficiary storage _beneficiary = beneficiaries[msg.sender];\n\n        require(!locked, \"LOCKED\");\n        require(claimCooldown(msg.sender) <= block.number, \"Community::claim: NOT_YET\");\n        require(\n            (_beneficiary.claimedAmount + claimAmount) <= maxClaim,\n            \"Community::claim: MAX_CLAIM\"\n        );\n\n        _beneficiary.claimedAmount += claimAmount;\n        _beneficiary.claims++;\n        _beneficiary.lastClaim = block.number;\n\n        cUSD().safeTransfer(msg.sender, claimAmount);\n        emit BeneficiaryClaim(msg.sender, claimAmount);\n    }\n\n    /**\n     * @notice Returns the number of blocks that a beneficiary have to wait between claims\n     *\n     * @param _beneficiaryAddress address of the beneficiary\n     * @return uint256 number of blocks for the lastInterval\n     */\n    function lastInterval(address _beneficiaryAddress) public view override returns (uint256) {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n        if (_beneficiary.claims == 0) {\n            return 0;\n        }\n        return baseInterval + (_beneficiary.claims - 1) * incrementInterval;\n    }\n\n    /**\n     * @notice Returns the block number when a beneficiary can claim again\n     *\n     * @param _beneficiaryAddress address of the beneficiary\n     * @return uint256 number of block when the beneficiary can claim\n     */\n    function claimCooldown(address _beneficiaryAddress) public view override returns (uint256) {\n        return beneficiaries[_beneficiaryAddress].lastClaim + lastInterval(_beneficiaryAddress);\n    }\n\n    /**\n     * @notice Locks the community claims\n     */\n    function lock() external override onlyManagers {\n        locked = true;\n        emit CommunityLocked(msg.sender);\n    }\n\n    /**\n     * @notice Unlocks the community claims\n     */\n    function unlock() external override onlyManagers {\n        locked = false;\n        emit CommunityUnlocked(msg.sender);\n    }\n\n    /**\n     * @notice Requests treasury funds from the communityAdmin\n     */\n    function requestFunds() external override onlyManagers {\n        communityAdmin.fundCommunity();\n\n        emit FundsRequested(msg.sender);\n    }\n\n    /**\n     * @notice Transfers cUSDs from donor to this community\n     * Used by donationToCommunity method from DonationMiner contract\n     *\n     * @param _sender address of the sender\n     * @param _amount amount to be donated\n     */\n    function donate(address _sender, uint256 _amount) external override nonReentrant {\n        cUSD().safeTransferFrom(_sender, address(this), _amount);\n        privateFunds += _amount;\n\n        emit Donate(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Increases the treasuryFunds value\n     * Used by communityAdmin after an amount of cUSD are sent from the treasury\n     *\n     * @param _amount amount to be added to treasuryFunds\n     */\n    function addTreasuryFunds(uint256 _amount) external override onlyOwner {\n        treasuryFunds += _amount;\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    /**\n     * @notice Allows a beneficiary from the previousCommunity to join in this community\n     */\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external override {\n        // no need to check if it's a beneficiary, as the state is copied\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.NONE,\n            \"Community::beneficiaryJoinFromMigrated: Beneficiary exists\"\n        );\n\n        //if the previousCommunity is deployed with the new type of smart contract\n        if (previousCommunity.impactMarketAddress() == address(0)) {\n            (\n                BeneficiaryState _oldBeneficiaryState,\n                uint256 _oldBeneficiaryClaims,\n                uint256 _oldBeneficiaryClaimedAmount,\n                uint256 _oldBeneficiaryLastClaim\n            ) = previousCommunity.beneficiaries(_beneficiaryAddress);\n\n            _changeBeneficiaryState(_beneficiary, _oldBeneficiaryState);\n            _beneficiary.claims = _oldBeneficiaryClaims;\n            _beneficiary.lastClaim = _oldBeneficiaryLastClaim;\n            _beneficiary.claimedAmount = _oldBeneficiaryClaimedAmount;\n        } else {\n            ICommunityLegacy _legacyCommunity = ICommunityLegacy(address(previousCommunity));\n            uint256 _legacyBeneficiaryLastInterval = _legacyCommunity.lastInterval(_beneficiaryAddress);\n            _changeBeneficiaryState(\n                _beneficiary,\n                BeneficiaryState(_legacyCommunity.beneficiaries(_beneficiaryAddress))\n            );\n\n            uint256 _legacyBeneficiaryCooldown = _legacyCommunity.cooldown(_beneficiaryAddress);\n\n            if (_legacyBeneficiaryCooldown >= _legacyBeneficiaryLastInterval + _firstBlockTimestamp()) {\n                // seconds to blocks conversion\n                _beneficiary.lastClaim =\n                    (_legacyBeneficiaryCooldown -\n                    _legacyBeneficiaryLastInterval -\n                        _firstBlockTimestamp()) /\n                    5;\n            } else {\n                _beneficiary.lastClaim = 0;\n            }\n\n            _beneficiary.claimedAmount = _legacyCommunity.claimed(_beneficiaryAddress);\n\n            uint256 _previousBaseInterval = _legacyCommunity.baseInterval();\n            if (_legacyBeneficiaryLastInterval >= _previousBaseInterval) {\n                _beneficiary.claims =\n                    (_legacyBeneficiaryLastInterval - _previousBaseInterval) /\n                    _legacyCommunity.incrementInterval() +\n                    1;\n            } else {\n                _beneficiary.claims = 0;\n            }\n        }\n\n        beneficiaryList.add(_beneficiaryAddress);\n\n        emit BeneficiaryJoined(_beneficiaryAddress);\n    }\n\n    /**\n     * @notice Returns the initial maxClaim\n     */\n    function getInitialMaxClaim() external view override returns (uint256) {\n        return maxClaim + validBeneficiaryCount * decreaseStep;\n    }\n\n    /**\n     * @notice Changes the state of a beneficiary\n     *\n     * @param _beneficiary address of the beneficiary\n     * @param _newState new state\n     */\n    function _changeBeneficiaryState(Beneficiary storage _beneficiary, BeneficiaryState _newState)\n        internal\n    {\n        if (_beneficiary.state == _newState) {\n            return;\n        }\n\n        if (_newState == BeneficiaryState.Valid) {\n            require(\n                maxClaim - decreaseStep >= claimAmount,\n                \"Community::_changeBeneficiaryState: Max claim too low\"\n            );\n            validBeneficiaryCount++;\n            maxClaim -= decreaseStep;\n        } else if (_beneficiary.state == BeneficiaryState.Valid) {\n            validBeneficiaryCount--;\n            maxClaim += decreaseStep;\n        }\n\n        _beneficiary.state = _newState;\n    }\n\n    function _firstBlockTimestamp() public view returns (uint256) {\n        if (block.chainid == 42220) {\n            //celo mainnet\n            return 1587571205;\n        } else if (block.chainid == 44787) {\n            //alfajores testnet\n            return 1594921556;\n        } else if (block.chainid == 44787) {\n            //baklava testnet\n            return 1593012289;\n        } else {\n            return block.timestamp - block.number; //local\n        }\n    }\n\n    function setParams() public {\n        addressTest1 = address(1);\n        addressTest2 = address(2);\n        addressTest3 = address(3);\n        uint256Test1 = 1;\n        uint256Test2 = 2;\n        uint256Test3 = 3;\n\n        mapTest2[address(1)] = true;\n        mapTest3[1] = address(1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/community/interfaces/ICommunityLegacy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ninterface ICommunityLegacy {\n    function cooldown(address _account) external returns(uint256);\n    function lastInterval(address _account) external returns(uint256);\n    function claimed(address _account) external returns(uint256);\n    function beneficiaries(address _account) external returns(uint256);\n    function claimAmount() external returns(uint256);\n    function baseInterval() external returns(uint256);\n    function incrementInterval() external returns(uint256);\n    function maxClaim() external returns(uint256);\n    function previousCommunityContract() external returns(address);\n    function impactMarketAddress() external returns(address);\n    function cUSDAddress() external returns(address);\n    function locked() external returns(bool);\n    function addManager(address _account) external;\n    function removeManager(address _account) external;\n    function addBeneficiary(address _account) external;\n    function lockBeneficiary(address _account) external;\n    function unlockBeneficiary(address _account) external;\n    function removeBeneficiary(address _account) external;\n    function claim() external;\n    function edit(uint256 _claimAmount, uint256 _maxClaim, uint256 _baseInterval, uint256 _incrementInterval) external;\n    function lock() external;\n    function unlock() external;\n    function migrateFunds(address _newCommunity, address _newCommunityManager) external;\n    function hasRole(bytes32 role, address account) external view returns(bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/mocks/communityLegacy/CommunityLegacy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../community/interfaces/ICommunityLegacy.sol\";\n\n/**\n * @notice Welcome to the Community contract. For each community\n * there will be one contract like this being deployed by\n * ImpactMarket contract. This enable us to save tokens on the\n * contract itself, and avoid the problems of having everything\n * in one single contract. Each community has it's own members and\n * and managers.\n */\ncontract CommunityLegacy is AccessControl {\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    enum BeneficiaryState {\n        NONE,\n        Valid,\n        Locked,\n        Removed\n    } // starts by 0 (when user is not added yet)\n\n    mapping(address => uint256) public cooldown;\n    mapping(address => uint256) public lastInterval;\n    mapping(address => uint256) public claimed;\n    mapping(address => BeneficiaryState) public beneficiaries;\n\n    uint256 public claimAmount;\n    uint256 public baseInterval;\n    uint256 public incrementInterval;\n    uint256 public maxClaim;\n\n    address public previousCommunityContract;\n    address public impactMarketAddress;\n    address public cUSDAddress;\n    bool public locked;\n\n    event ManagerAdded(address indexed _account);\n    event ManagerRemoved(address indexed _account);\n    event BeneficiaryAdded(address indexed _account);\n    event BeneficiaryLocked(address indexed _account);\n    event BeneficiaryUnlocked(address indexed _account);\n    event BeneficiaryRemoved(address indexed _account);\n    event BeneficiaryClaim(address indexed _account, uint256 _amount);\n    event CommunityEdited(\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    );\n    event CommunityLocked(address indexed _by);\n    event CommunityUnlocked(address indexed _by);\n    event MigratedFunds(address indexed _to, uint256 _amount);\n\n    /**\n     * @dev Constructor with custom fields, choosen by the community.\n     * @param _firstManager Comminuty's first manager. Will\n     * be able to add others.\n     * @param _claimAmount Base amount to be claim by the benificiary.\n     * @param _maxClaim Limit that a beneficiary can claim at once.\n     * @param _baseInterval Base interval to start claiming.\n     * @param _incrementInterval Increment interval used in each claim.\n     * @param _previousCommunityContract previous smart contract address of community.\n     * @param _cUSDAddress cUSD smart contract address.\n     */\n    constructor(\n        address _firstManager,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        address _previousCommunityContract,\n        address _cUSDAddress,\n        address _impactMarketAddress\n    ) {\n        require(_baseInterval > _incrementInterval, \"\");\n        require(_maxClaim > _claimAmount, \"\");\n\n        _setupRole(MANAGER_ROLE, _firstManager);\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\n        emit ManagerAdded(_firstManager);\n\n        claimAmount = _claimAmount;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n        maxClaim = _maxClaim;\n\n        previousCommunityContract = _previousCommunityContract;\n        cUSDAddress = _cUSDAddress;\n        impactMarketAddress = _impactMarketAddress;\n        locked = false;\n    }\n\n    modifier onlyValidBeneficiary() {\n        require(beneficiaries[msg.sender] != BeneficiaryState.Locked, \"LOCKED\");\n        require(beneficiaries[msg.sender] != BeneficiaryState.Removed, \"REMOVED\");\n        require(beneficiaries[msg.sender] == BeneficiaryState.Valid, \"NOT_BENEFICIARY\");\n        _;\n    }\n\n    modifier onlyManagers() {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"NOT_MANAGER\");\n        _;\n    }\n\n    modifier onlyImpactMarket() {\n        require(msg.sender == impactMarketAddress, \"NOT_ALLOWED\");\n        _;\n    }\n\n    /**\n     * @dev Allow community managers to add other managers.\n     */\n    function addManager(address _account) external onlyManagers {\n        grantRole(MANAGER_ROLE, _account);\n        emit ManagerAdded(_account);\n    }\n\n    /**\n     * @dev Allow community managers to remove other managers.\n     */\n    function removeManager(address _account) external onlyManagers {\n        revokeRole(MANAGER_ROLE, _account);\n        emit ManagerRemoved(_account);\n    }\n\n    /**\n     * @dev Allow community managers to add beneficiaries.\n     */\n    function addBeneficiary(address _account) external onlyManagers {\n        beneficiaries[_account] = BeneficiaryState.Valid;\n        // solhint-disable-next-line not-rely-on-time\n        cooldown[_account] = block.timestamp;\n        lastInterval[_account] = uint256(baseInterval - incrementInterval);\n        // send 5 cents when adding a new beneficiary\n        bool success = IERC20(cUSDAddress).transfer(_account, 50000000000000000);\n        require(success, \"NOT_ALLOWED\");\n        emit BeneficiaryAdded(_account);\n    }\n\n    /**\n     * @dev Allow community managers to lock beneficiaries.\n     */\n    function lockBeneficiary(address _account) external onlyManagers {\n        require(beneficiaries[_account] == BeneficiaryState.Valid, \"NOT_YET\");\n        beneficiaries[_account] = BeneficiaryState.Locked;\n        emit BeneficiaryLocked(_account);\n    }\n\n    /**\n     * @dev Allow community managers to unlock locked beneficiaries.\n     */\n    function unlockBeneficiary(address _account) external onlyManagers {\n        require(beneficiaries[_account] == BeneficiaryState.Locked, \"NOT_YET\");\n        beneficiaries[_account] = BeneficiaryState.Valid;\n        emit BeneficiaryUnlocked(_account);\n    }\n\n    /**\n     * @dev Allow community managers to add beneficiaries.\n     */\n    function removeBeneficiary(address _account) external onlyManagers {\n        beneficiaries[_account] = BeneficiaryState.Removed;\n        emit BeneficiaryRemoved(_account);\n    }\n\n    /**\n     * @dev Allow beneficiaries to claim.\n     */\n    function claim() external onlyValidBeneficiary {\n        require(!locked, \"LOCKED\");\n        // solhint-disable-next-line not-rely-on-time\n        require(cooldown[msg.sender] <= block.timestamp, \"NOT_YET\");\n        require((claimed[msg.sender] + claimAmount) <= maxClaim, \"MAX_CLAIM\");\n        claimed[msg.sender] = claimed[msg.sender] + claimAmount;\n        lastInterval[msg.sender] = lastInterval[msg.sender] + incrementInterval;\n        cooldown[msg.sender] = uint256(\n            // solhint-disable-next-line not-rely-on-time\n            block.timestamp + lastInterval[msg.sender]\n        );\n        emit BeneficiaryClaim(msg.sender, claimAmount);\n        bool success = IERC20(cUSDAddress).transfer(msg.sender, claimAmount);\n        require(success, \"NOT_ALLOWED\");\n    }\n\n    /**\n     * @dev Allow community managers to edit community variables.\n     */\n    function edit(\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external onlyManagers {\n        require(_baseInterval > _incrementInterval, \"\");\n        require(_maxClaim > _claimAmount, \"\");\n\n        claimAmount = _claimAmount;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n        maxClaim = _maxClaim;\n\n        emit CommunityEdited(_claimAmount, _maxClaim, _baseInterval, _incrementInterval);\n    }\n\n    /**\n     * Allow community managers to lock community claims.\n     */\n    function lock() external onlyManagers {\n        locked = true;\n        emit CommunityLocked(msg.sender);\n    }\n\n    /**\n     * Allow community managers to unlock community claims.\n     */\n    function unlock() external onlyManagers {\n        locked = false;\n        emit CommunityUnlocked(msg.sender);\n    }\n\n    /**\n     * Migrate funds in current community to new one.\n     */\n    function migrateFunds(address _newCommunity, address _newCommunityManager)\n        external\n        onlyImpactMarket\n    {\n        ICommunityLegacy newCommunity = ICommunityLegacy(_newCommunity);\n        require(newCommunity.hasRole(MANAGER_ROLE, _newCommunityManager) == true, \"NOT_ALLOWED\");\n        require(newCommunity.previousCommunityContract() == address(this), \"NOT_ALLOWED\");\n        uint256 balance = IERC20(cUSDAddress).balanceOf(address(this));\n        bool success = IERC20(cUSDAddress).transfer(_newCommunity, balance);\n        require(success, \"NOT_ALLOWED\");\n        emit MigratedFunds(_newCommunity, balance);\n    }\n}\n"
    },
    "contracts/mocks/community/CommunityImplementationOld.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../../community/interfaces/ICommunityLegacy.sol\";\nimport \"./interfaces/ICommunityAdminOld.sol\";\nimport \"./interfaces/CommunityStorageV1Old.sol\";\n\n/**\n * @notice Welcome to the Community contract. For each community\n * there will be one proxy contract deployed by CommunityAdmin.\n * The implementation of the proxy is this contract. This enable\n * us to save tokens on the contract itself, and avoid the problems\n * of having everything in one single contract.\n *Each community has it's own members and and managers.\n */\ncontract CommunityImplementationOld is\n    Initializable,\n    AccessControlUpgradeable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    CommunityStorageV1Old\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 private constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    uint256 private constant DEFAULT_AMOUNT = 5e16;\n\n    /**\n     * @notice Triggered when a manager has been added\n     *\n     * @param manager           Address of the manager that triggered the event\n     *                          or address of the CommunityAdmin if it's first manager\n     * @param account           Address of the manager that has been added\n     */\n    event ManagerAdded(address indexed manager, address indexed account);\n\n    /**\n     * @notice Triggered when a manager has been removed\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param account           Address of the manager that has been removed\n     */\n    event ManagerRemoved(address indexed manager, address indexed account);\n\n    /**\n     * @notice Triggered when a beneficiary has been added\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been added\n     */\n    event BeneficiaryAdded(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been locked\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been locked\n     */\n    event BeneficiaryLocked(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been unlocked\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been unlocked\n     */\n    event BeneficiaryUnlocked(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been removed\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been removed\n     */\n    event BeneficiaryRemoved(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has claimed\n     *\n     * @param beneficiary       Address of the beneficiary that has claimed\n     * @param amount            Amount of the claim\n     */\n    event BeneficiaryClaim(address indexed beneficiary, uint256 amount);\n\n    /**\n     * @notice Triggered when a community has been locked\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event CommunityLocked(address indexed manager);\n\n    /**\n     * @notice Triggered when a community has been unlocked\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event CommunityUnlocked(address indexed manager);\n\n    /**\n     * @notice Triggered when a manager has requested funds for community\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event FundsRequested(address indexed manager);\n\n    /**\n     * @notice Triggered when someone has donated cUSD\n     *\n     * @param donor             Address of the donor\n     * @param amount            Amount of the donation\n     */\n    event Donate(address indexed donor, uint256 amount);\n\n    /**\n     * @notice Triggered when a beneficiary from previous community has joined in the current community\n     *\n     * @param beneficiary       Address of the beneficiary\n     */\n    event BeneficiaryJoined(address indexed beneficiary);\n\n    /**\n     * @notice Triggered when beneficiary params has been updated\n     *\n     * @param oldClaimAmount       Old claimAmount value\n     * @param oldMaxClaim          Old maxClaim value\n     * @param oldDecreaseStep      Old decreaseStep value\n     * @param oldBaseInterval      Old baseInterval value\n     * @param oldIncrementInterval Old incrementInterval value\n     * @param newClaimAmount       New claimAmount value\n     * @param newMaxClaim          New maxClaim value\n     * @param newDecreaseStep      New decreaseStep value\n     * @param newBaseInterval      New baseInterval value\n     * @param newIncrementInterval New incrementInterval value\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event BeneficiaryParamsUpdated(\n        uint256 oldClaimAmount,\n        uint256 oldMaxClaim,\n        uint256 oldDecreaseStep,\n        uint256 oldBaseInterval,\n        uint256 oldIncrementInterval,\n        uint256 newClaimAmount,\n        uint256 newMaxClaim,\n        uint256 newDecreaseStep,\n        uint256 newBaseInterval,\n        uint256 newIncrementInterval\n    );\n\n    /**\n     * @notice Triggered when community params has been updated\n     *\n     * @param oldMinTranche        Old minTranche value\n     * @param oldMaxTranche        Old maxTranche value\n     * @param newMinTranche        New minTranche value\n     * @param newMaxTranche        New maxTranche value\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event CommunityParamsUpdated(\n        uint256 oldMinTranche,\n        uint256 oldMaxTranche,\n        uint256 newMinTranche,\n        uint256 newMaxTranche\n    );\n\n    /**\n     * @notice Triggered when communityAdmin has been updated\n     *\n     * @param oldCommunityAdmin   Old communityAdmin address\n     * @param newCommunityAdmin   New communityAdmin address\n     */\n    event CommunityAdminUpdated(\n        address indexed oldCommunityAdmin,\n        address indexed newCommunityAdmin\n    );\n\n    /**\n     * @notice Triggered when previousCommunity has been updated\n     *\n     * @param oldPreviousCommunity   Old previousCommunity address\n     * @param newPreviousCommunity   New previousCommunity address\n     */\n    event PreviousCommunityUpdated(\n        address indexed oldPreviousCommunity,\n        address indexed newPreviousCommunity\n    );\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Used to initialize a new Community contract\n     *\n     * @param _managers            Community's initial managers.\n     *                             Will be able to add others\n     * @param _claimAmount         Base amount to be claim by the beneficiary\n     * @param _maxClaim            Limit that a beneficiary can claim in total\n     * @param _decreaseStep        Value decreased from maxClaim each time a beneficiary is added\n     * @param _baseInterval        Base interval to start claiming\n     * @param _incrementInterval   Increment interval used in each claim\n     * @param _previousCommunity   Previous smart contract address of community\n     * @param _minTranche          Minimum amount that the community will receive when requesting funds\n     * @param _maxTranche          Maximum amount that the community will receive when requesting funds\n     */\n    function initialize(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche,\n        ICommunityOld _previousCommunity\n    ) external initializer {\n        require(\n            _baseInterval > _incrementInterval,\n            \"Community::initialize: baseInterval must be greater than incrementInterval\"\n        );\n        require(\n            _maxClaim > _claimAmount,\n            \"Community::initialize: maxClaim must be greater than claimAmount\"\n        );\n\n        require(\n            _minTranche <= _maxTranche,\n            \"Community::initialize: minTranche should not be greater than maxTranche\"\n        );\n\n        __AccessControl_init();\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        claimAmount = _claimAmount;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n        maxClaim = _maxClaim;\n        minTranche = _minTranche;\n        maxTranche = _maxTranche;\n        previousCommunity = _previousCommunity;\n        communityAdmin = ICommunityAdminOld(msg.sender);\n        decreaseStep = _decreaseStep;\n        locked = false;\n\n        transferOwnership(msg.sender);\n\n        // MANAGER_ROLE is the admin for the MANAGER_ROLE\n        // so every manager is able to add or remove other managers\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\n\n        _setupRole(MANAGER_ROLE, msg.sender);\n        emit ManagerAdded(msg.sender, msg.sender);\n\n        for (uint256 i = 0; i < _managers.length; i++) {\n            addManager(_managers[i]);\n        }\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Enforces sender to be a valid beneficiary\n     */\n    modifier onlyValidBeneficiary() {\n        require(\n            beneficiaries[msg.sender].state == BeneficiaryState.Valid,\n            \"Community: NOT_VALID_BENEFICIARY\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to have manager role\n     */\n    modifier onlyManagers() {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"Community: NOT_MANAGER\");\n        _;\n    }\n\n    /**\n     * @notice Returns the cUSD contract address\n     */\n    function cUSD() public view override returns (IERC20) {\n        return communityAdmin.cUSD();\n    }\n\n    /**\n     * @notice Returns the length of the beneficiaryList\n     */\n    function beneficiaryListLength() external view override returns (uint256) {\n        return beneficiaryList.length();\n    }\n\n    /**\n     * @notice Returns an address from the beneficiaryList\n     *\n     * @param index_ index value\n     * @return address of the beneficiary\n     */\n    function beneficiaryListAt(uint256 index_) external view override returns (address) {\n        return beneficiaryList.at(index_);\n    }\n\n    /**\n     * @notice Returns the 0 address\n     * only used for backwards compatibility\n     */\n    function impactMarketAddress() public pure override returns (address) {\n        return address(0);\n    }\n\n    /** Updates the address of the communityAdmin\n     *\n     * @param _newCommunityAdmin address of the new communityAdmin\n     */\n    function updateCommunityAdmin(ICommunityAdminOld _newCommunityAdmin) external override onlyOwner {\n        address _oldCommunityAdminAddress = address(communityAdmin);\n        communityAdmin = _newCommunityAdmin;\n\n        addManager(address(communityAdmin));\n\n        emit CommunityAdminUpdated(_oldCommunityAdminAddress, address(_newCommunityAdmin));\n    }\n\n    /** Updates the address of the previousCommunity\n     *\n     * @param _newPreviousCommunity address of the new previousCommunity\n     */\n    function updatePreviousCommunity(ICommunityOld _newPreviousCommunity) external override onlyOwner {\n        address _oldPreviousCommunityAddress = address(previousCommunity);\n        previousCommunity = _newPreviousCommunity;\n\n        emit PreviousCommunityUpdated(_oldPreviousCommunityAddress, address(_newPreviousCommunity));\n    }\n\n    /** Updates beneficiary params\n     *\n     * @param _claimAmount  base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim  in total\n     * @param _decreaseStep value decreased from maxClaim each time a is beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     */\n    function updateBeneficiaryParams(\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external override onlyOwner {\n        require(\n            _baseInterval > _incrementInterval,\n            \"Community::constructor: baseInterval must be greater than incrementInterval\"\n        );\n        require(\n            _maxClaim > _claimAmount,\n            \"Community::constructor: maxClaim must be greater than claimAmount\"\n        );\n\n        uint256 _oldClaimAmount = claimAmount;\n        uint256 _oldMaxClaim = maxClaim;\n        uint256 _oldDecreaseStep = decreaseStep;\n        uint256 _oldBaseInterval = baseInterval;\n        uint256 _oldIncrementInterval = incrementInterval;\n\n        claimAmount = _claimAmount;\n        maxClaim = _maxClaim;\n        decreaseStep = _decreaseStep;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n\n        emit BeneficiaryParamsUpdated(\n            _oldClaimAmount,\n            _oldMaxClaim,\n            _oldDecreaseStep,\n            _oldBaseInterval,\n            _oldIncrementInterval,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval\n        );\n    }\n\n    /** @notice Updates params of a community\n     *\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     */\n    function updateCommunityParams(uint256 _minTranche, uint256 _maxTranche)\n    external\n    override\n    onlyOwner\n    {\n        require(\n            _minTranche <= _maxTranche,\n            \"Community::updateCommunityParams: minTranche should not be greater than maxTranche\"\n        );\n\n        uint256 _oldMinTranche = minTranche;\n        uint256 _oldMaxTranche = maxTranche;\n\n        minTranche = _minTranche;\n        maxTranche = _maxTranche;\n\n        emit CommunityParamsUpdated(_oldMinTranche, _oldMaxTranche, _minTranche, _maxTranche);\n    }\n\n    /**\n     * @notice Adds a new manager\n     *\n     * @param _account address of the manager to be added\n     */\n    function addManager(address _account) public override onlyManagers {\n        if (!hasRole(MANAGER_ROLE, _account)) {\n            super.grantRole(MANAGER_ROLE, _account);\n            emit ManagerAdded(msg.sender, _account);\n        }\n    }\n\n    /**\n     * @notice Remove an existing manager\n     *\n     * @param _account address of the manager to be removed\n     */\n    function removeManager(address _account) external override onlyManagers {\n        require(\n            hasRole(MANAGER_ROLE, _account),\n            \"Community::removeManager: This account doesn't have manager role\"\n        );\n        require(\n            _account != address(communityAdmin),\n            \"Community::removeManager: You are not allow to remove communityAdmin\"\n        );\n        super.revokeRole(MANAGER_ROLE, _account);\n        emit ManagerRemoved(msg.sender, _account);\n    }\n\n    /**\n     * @notice Enforces managers to use addManager method\n     */\n    function grantRole(bytes32, address) public pure override {\n        require(false, \"Community::grantRole: You are not allow to use this method\");\n    }\n\n    /**\n     * @notice Enforces managers to use removeManager method\n     */\n    function revokeRole(bytes32, address) public pure override {\n        require(false, \"Community::revokeRole: You are not allow to use this method\");\n    }\n\n    /**\n     * @notice Adds a new beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be added\n     */\n    function addBeneficiary(address _beneficiaryAddress)\n    external\n    override\n    onlyManagers\n    nonReentrant\n    {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n        require(\n            _beneficiary.state == BeneficiaryState.NONE,\n            \"Community::addBeneficiary: Beneficiary exists\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\n        // solhint-disable-next-line not-rely-on-time\n        _beneficiary.lastClaim = block.number;\n\n        beneficiaryList.add(_beneficiaryAddress);\n\n        // send default amount when adding a new beneficiary\n        cUSD().safeTransfer(_beneficiaryAddress, DEFAULT_AMOUNT);\n\n        emit BeneficiaryAdded(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice Locks a valid beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be locked\n     */\n    function lockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Valid,\n            \"Community::lockBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Locked);\n        emit BeneficiaryLocked(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice  Unlocks a locked beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be unlocked\n     */\n    function unlockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Locked,\n            \"Community::unlockBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\n        emit BeneficiaryUnlocked(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice Remove an existing beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be removed\n     */\n    function removeBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Valid ||\n            _beneficiary.state == BeneficiaryState.Locked,\n            \"Community::removeBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Removed);\n        emit BeneficiaryRemoved(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @dev Transfers cUSD to a valid beneficiary\n     */\n    function claim() external override onlyValidBeneficiary nonReentrant {\n        Beneficiary storage _beneficiary = beneficiaries[msg.sender];\n\n        require(!locked, \"LOCKED\");\n        require(claimCooldown(msg.sender) <= block.number, \"Community::claim: NOT_YET\");\n        require(\n            (_beneficiary.claimedAmount + claimAmount) <= maxClaim,\n            \"Community::claim: MAX_CLAIM\"\n        );\n\n        _beneficiary.claimedAmount += claimAmount;\n        _beneficiary.claims++;\n        _beneficiary.lastClaim = block.number;\n\n        cUSD().safeTransfer(msg.sender, claimAmount);\n        emit BeneficiaryClaim(msg.sender, claimAmount);\n    }\n\n    /**\n     * @notice Returns the number of blocks that a beneficiary have to wait between claims\n     *\n     * @param _beneficiaryAddress address of the beneficiary\n     * @return uint256 number of blocks for the lastInterval\n     */\n    function lastInterval(address _beneficiaryAddress) public view override returns (uint256) {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n        if (_beneficiary.claims == 0) {\n            return 0;\n        }\n        return baseInterval + (_beneficiary.claims - 1) * incrementInterval;\n    }\n\n    /**\n     * @notice Returns the block number when a beneficiary can claim again\n     *\n     * @param _beneficiaryAddress address of the beneficiary\n     * @return uint256 number of block when the beneficiary can claim\n     */\n    function claimCooldown(address _beneficiaryAddress) public view override returns (uint256) {\n        return beneficiaries[_beneficiaryAddress].lastClaim + lastInterval(_beneficiaryAddress);\n    }\n\n    /**\n     * @notice Locks the community claims\n     */\n    function lock() external override onlyManagers {\n        locked = true;\n        emit CommunityLocked(msg.sender);\n    }\n\n    /**\n     * @notice Unlocks the community claims\n     */\n    function unlock() external override onlyManagers {\n        locked = false;\n        emit CommunityUnlocked(msg.sender);\n    }\n\n    /**\n     * @notice Requests treasury funds from the communityAdmin\n     */\n    function requestFunds() external override onlyManagers {\n        communityAdmin.fundCommunity();\n\n        lastFundRequest = block.number;\n\n        emit FundsRequested(msg.sender);\n    }\n\n    /**\n     * @notice Transfers cUSDs from donor to this community\n     * Used by donationToCommunity method from DonationMiner contract\n     *\n     * @param _sender address of the sender\n     * @param _amount amount to be donated\n     */\n    function donate(address _sender, uint256 _amount) external override nonReentrant {\n        cUSD().safeTransferFrom(_sender, address(this), _amount);\n        privateFunds += _amount;\n\n        emit Donate(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Increases the treasuryFunds value\n     * Used by communityAdmin after an amount of cUSD are sent from the treasury\n     *\n     * @param _amount amount to be added to treasuryFunds\n     */\n    function addTreasuryFunds(uint256 _amount) external override onlyOwner {\n        treasuryFunds += _amount;\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    /**\n     * @notice Allows a beneficiary from the previousCommunity to join in this community\n     */\n    function beneficiaryJoinFromMigrated() external override {\n        // no need to check if it's a beneficiary, as the state is copied\n        Beneficiary storage _beneficiary = beneficiaries[msg.sender];\n\n        require(\n            _beneficiary.state == BeneficiaryState.NONE,\n            \"Community::beneficiaryJoinFromMigrated: Beneficiary exists\"\n        );\n\n        //if the previousCommunity is deployed with the new type of smart contract\n        if (previousCommunity.impactMarketAddress() == address(0)) {\n            (\n            BeneficiaryState _oldBeneficiaryState,\n            uint256 _oldBeneficiaryClaims,\n            uint256 _oldBeneficiaryClaimedAmount,\n            uint256 _oldBeneficiaryLastClaim\n            ) = previousCommunity.beneficiaries(msg.sender);\n\n            _changeBeneficiaryState(_beneficiary, _oldBeneficiaryState);\n            _beneficiary.claims = _oldBeneficiaryClaims;\n            _beneficiary.lastClaim = _oldBeneficiaryLastClaim;\n            _beneficiary.claimedAmount = _oldBeneficiaryClaimedAmount;\n        } else {\n            ICommunityLegacy _oldCommunity = ICommunityLegacy(address(previousCommunity));\n            uint256 _oldBeneficiaryLastInterval = _oldCommunity.lastInterval(msg.sender);\n            _changeBeneficiaryState(\n                _beneficiary,\n                BeneficiaryState(_oldCommunity.beneficiaries(msg.sender))\n            );\n\n            uint256 _oldBeneficiaryCooldown = _oldCommunity.cooldown(msg.sender);\n\n            if (_oldBeneficiaryCooldown >= _oldBeneficiaryLastInterval + _firstBlockTimestamp()) {\n                // seconds to blocks conversion\n                _beneficiary.lastClaim =\n                (_oldBeneficiaryCooldown -\n                _oldBeneficiaryLastInterval -\n                _firstBlockTimestamp()) /\n                5;\n            } else {\n                _beneficiary.lastClaim = 0;\n            }\n\n            _beneficiary.claimedAmount = _oldCommunity.claimed(msg.sender);\n\n            uint256 _previousBaseInterval = _oldCommunity.baseInterval();\n            if (_oldBeneficiaryLastInterval >= _previousBaseInterval) {\n                _beneficiary.claims =\n                (_oldBeneficiaryLastInterval - _previousBaseInterval) /\n                _oldCommunity.incrementInterval() +\n                1;\n            } else {\n                _beneficiary.claims = 0;\n            }\n        }\n\n        beneficiaryList.add(msg.sender);\n\n        emit BeneficiaryJoined(msg.sender);\n    }\n\n    /**\n     * @notice Returns the initial maxClaim\n     */\n    function getInitialMaxClaim() external view override returns (uint256) {\n        return maxClaim + validBeneficiaryCount * decreaseStep;\n    }\n\n    /**\n     * @notice Changes the state of a beneficiary\n     *\n     * @param _beneficiary address of the beneficiary\n     * @param _newState new state\n     */\n    function _changeBeneficiaryState(Beneficiary storage _beneficiary, BeneficiaryState _newState)\n    internal\n    {\n        if (_beneficiary.state == _newState) {\n            return;\n        }\n\n        if (_newState == BeneficiaryState.Valid) {\n            require(\n                maxClaim - decreaseStep >= claimAmount,\n                \"Community::_changeBeneficiaryState: Max claim too low\"\n            );\n            validBeneficiaryCount++;\n            maxClaim -= decreaseStep;\n        } else if (_beneficiary.state == BeneficiaryState.Valid) {\n            validBeneficiaryCount--;\n            maxClaim += decreaseStep;\n        }\n\n        _beneficiary.state = _newState;\n    }\n\n    function _firstBlockTimestamp() public view returns (uint256) {\n        if (block.chainid == 42220) {\n            //celo mainnet\n            return 1587571205;\n        } else if (block.chainid == 44787) {\n            //alfajores testnet\n            return 1594921556;\n        } else if (block.chainid == 44787) {\n            //baklava testnet\n            return 1593012289;\n        } else {\n            return block.timestamp - block.number; //local\n        }\n    }\n}\n"
    },
    "contracts/mocks/community/interfaces/ICommunityAdminOld.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./ICommunityOld.sol\";\nimport \"../../../treasury/interfaces/ITreasury.sol\";\n\ninterface ICommunityAdminOld {\n    enum CommunityState {\n        NONE,\n        Valid,\n        Removed,\n        Migrated\n    }\n\n    function getVersion() external returns(uint256);\n    function cUSD() external view returns(IERC20);\n    function treasury() external view returns(ITreasury);\n    function communities(address _community) external view returns(CommunityState);\n    function communityImplementation() external view returns(ICommunityOld);\n    function communityProxyAdmin() external view returns(ProxyAdmin);\n    function communityListAt(uint256 _index) external view returns (address);\n    function communityListLength() external view returns (uint256);\n\n    function updateTreasury(ITreasury _newTreasury) external;\n    function updateCommunityImplementation(ICommunityOld _communityImplementation_) external;\n    function updateBeneficiaryParams(\n        ICommunityOld _community,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external;\n    function updateCommunityParams(\n        ICommunityOld _community,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external;\n    function updateProxyImplementation(address _CommunityMiddleProxy, address _newLogic) external;\n    function addCommunity(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external;\n    function migrateCommunity(\n        address[] memory _managers,\n        ICommunityOld _previousCommunity\n    ) external;\n    function addManagerToCommunity(ICommunityOld _community_, address _account_) external;\n    function removeCommunity(ICommunityOld _community) external;\n    function fundCommunity() external;\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n    function transferFromCommunity(\n        ICommunityOld _community,\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external;\n}\n"
    },
    "contracts/mocks/community/interfaces/CommunityStorageV1Old.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./ICommunityOld.sol\";\nimport \"./ICommunityAdminOld.sol\";\n\n/**\n * @title Storage for Community\n * @notice For future upgrades, do not change CommunityStorageV1. Create a new\n * contract which implements CommunityStorageV1 and following the naming convention\n * CommunityStorageVX.\n */\nabstract contract CommunityStorageV1Old is ICommunityOld {\n    bool public override locked;\n    uint256 public override claimAmount;\n    uint256 public override baseInterval;\n    uint256 public override incrementInterval;\n    uint256 public override maxClaim;\n    uint256 public override validBeneficiaryCount;\n    uint256 public override treasuryFunds;\n    uint256 public override privateFunds;\n    uint256 public override decreaseStep;\n    uint256 public override minTranche;\n    uint256 public override maxTranche;\n    uint256 public override lastFundRequest;\n\n    ICommunityOld public override previousCommunity;\n    ICommunityAdminOld public override communityAdmin;\n\n    mapping(address => Beneficiary) public override beneficiaries;\n    EnumerableSet.AddressSet internal beneficiaryList;\n}\n"
    },
    "contracts/mocks/community/interfaces/ICommunityOld.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./ICommunityAdminOld.sol\";\n\ninterface ICommunityOld {\n    enum BeneficiaryState {\n        NONE, //the beneficiary hasn't been added yet\n        Valid,\n        Locked,\n        Removed\n    }\n\n    struct Beneficiary {\n        BeneficiaryState state;  //beneficiary state\n        uint256 claims;          //total number of claims\n        uint256 claimedAmount;   //total amount of cUSD received\n        uint256 lastClaim;       //block number of the last claim\n    }\n\n    function getVersion() external returns(uint256);\n    function previousCommunity() external view returns(ICommunityOld);\n    function claimAmount() external view returns(uint256);\n    function baseInterval() external view returns(uint256);\n    function incrementInterval() external view returns(uint256);\n    function maxClaim() external view returns(uint256);\n    function validBeneficiaryCount() external view returns(uint);\n    function treasuryFunds() external view returns(uint);\n    function privateFunds() external view returns(uint);\n    function communityAdmin() external view returns(ICommunityAdminOld);\n    function cUSD() external view  returns(IERC20);\n    function locked() external view returns(bool);\n    function beneficiaries(address _beneficiaryAddress) external view returns(\n        BeneficiaryState state,\n        uint256 claims,\n        uint256 claimedAmount,\n        uint256 lastClaim\n    );\n    function decreaseStep() external view returns(uint);\n    function beneficiaryListAt(uint256 _index) external view returns (address);\n    function beneficiaryListLength() external view returns (uint256);\n    function impactMarketAddress() external pure returns (address);\n    function minTranche() external view returns(uint256);\n    function maxTranche() external view returns(uint256);\n    function lastFundRequest() external view returns(uint256);\n\n    function updateCommunityAdmin(ICommunityAdminOld _communityAdmin) external;\n    function updatePreviousCommunity(ICommunityOld _newPreviousCommunity) external;\n    function updateBeneficiaryParams(\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external;\n    function updateCommunityParams(\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external;\n    function donate(address _sender, uint256 _amount) external;\n    function addTreasuryFunds(uint256 _amount) external;\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\n    function addManager(address _managerAddress) external;\n    function removeManager(address _managerAddress) external;\n    function addBeneficiary(address _beneficiaryAddress) external;\n    function lockBeneficiary(address _beneficiaryAddress) external;\n    function unlockBeneficiary(address _beneficiaryAddress) external;\n    function removeBeneficiary(address _beneficiaryAddress) external;\n    function claim() external;\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\n    function lock() external;\n    function unlock() external;\n    function requestFunds() external;\n    function beneficiaryJoinFromMigrated() external;\n    function getInitialMaxClaim() external view returns (uint256);\n}\n"
    },
    "contracts/mocks/donationMiner/DonationMinerImplementationOld.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./interfaces/DonationMinerStorageV3Old.sol\";\n\ncontract DonationMinerImplementationOld is\n    Initializable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    DonationMinerStorageV3Old\n{\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Triggered when a donation has been added\n     *\n     * @param donationId  Id of the donation\n     * @param donor       Address of the donner\n     * @param amount      Value of the donation\n     * @param target      Address of the receiver (community or treasury)\n     *                    or address of the DonationMiner contract otherwise\n     */\n    event DonationAdded(\n        uint256 indexed donationId,\n        address indexed donor,\n        uint256 amount,\n        address indexed target\n    );\n\n    /**\n     * @notice Triggered when a donor has claimed his reward\n     *\n     * @param donor             Address of the donner\n     * @param amount            Value of the reward\n     */\n    event RewardClaimed(address indexed donor, uint256 amount);\n\n    /**\n     * @notice Triggered when a donor has claimed his reward\n     *\n     * @param donor             Address of the donner\n     * @param amount            Value of the reward\n     * @param lastRewardPeriod  Number of the last reward period for witch tha claim was made\n     */\n    event RewardClaimedPartial(address indexed donor, uint256 amount, uint256 lastRewardPeriod);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Triggered when reward period params have been updated\n     *\n     * @param oldRewardPeriodSize   Old rewardPeriodSize value\n     * @param oldDecayNumerator     Old decayNumerator value\n     * @param oldDecayDenominator   Old decayDenominator value\n     * @param newRewardPeriodSize   New rewardPeriodSize value\n     * @param newDecayNumerator     New decayNumerator value\n     * @param newDecayDenominator   New decayDenominator value\n     *\n     * For further information regarding each parameter, see\n     * *DonationMiner* smart contract initialize method.\n     */\n    event RewardPeriodParamsUpdated(\n        uint256 oldRewardPeriodSize,\n        uint256 oldDecayNumerator,\n        uint256 oldDecayDenominator,\n        uint256 newRewardPeriodSize,\n        uint256 newDecayNumerator,\n        uint256 newDecayDenominator\n    );\n\n    /**\n     * @notice Triggered when the claimDelay value has been updated\n     *\n     * @param oldClaimDelay            Old claimDelay value\n     * @param newClaimDelay            New claimDelay value\n     */\n    event ClaimDelayUpdated(uint256 oldClaimDelay, uint256 newClaimDelay);\n\n    /**\n     * @notice Triggered when the againstPeriods value has been updated\n     *\n     * @param oldAgainstPeriods            Old againstPeriods value\n     * @param newAgainstPeriods            New againstPeriods value\n     */\n    event AgainstPeriodsUpdated(uint256 oldAgainstPeriods, uint256 newAgainstPeriods);\n\n    /**\n     * @notice Triggered when the treasury address has been updated\n     *\n     * @param oldTreasury             Old treasury address\n     * @param newTreasury             New treasury address\n     */\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\n\n    /**\n     * @notice Enforces beginning rewardPeriod has started\n     */\n    modifier whenStarted() {\n        require(block.number >= rewardPeriods[1].startBlock, \"DonationMiner: ERR_NOT_STARTED\");\n        _;\n    }\n\n    /**\n     * @notice Used to initialize a new DonationMiner contract\n     *\n     * @param _cUSD                 Address of the cUSD token\n     * @param _PACT                 Address of the PACT Token\n     * @param _treasury             Address of the Treasury\n     * @param _firstRewardPerBlock  Number of PACTs given for each block\n     *                              from the first reward period\n     * @param _rewardPeriodSize     Number of blocks of the reward period\n     * @param _startingBlock        First block of the first reward period\n     * @param _decayNumerator       Decay numerator used for calculating\n                                    the new reward per block based on\n                                    the previous reward per block\n     * @param _decayDenominator     Decay denominator used for calculating\n                                    the new reward per block based on\n                                    the previous reward per block\n     */\n    function initialize(\n        IERC20 _cUSD,\n        IERC20 _PACT,\n        ITreasury _treasury,\n        uint256 _firstRewardPerBlock,\n        uint256 _rewardPeriodSize,\n        uint256 _startingBlock,\n        uint256 _decayNumerator,\n        uint256 _decayDenominator\n    ) public initializer {\n        require(address(_cUSD) != address(0), \"DonationMiner::initialize: cUSD address not set\");\n        require(address(_PACT) != address(0), \"DonationMiner::initialize: PACT address not set\");\n        require(address(_treasury) != address(0), \"DonationMiner::initialize: treasury_ not set\");\n        require(\n            _firstRewardPerBlock != 0,\n            \"DonationMiner::initialize: firstRewardPerBlock not set!\"\n        );\n        require(_startingBlock != 0, \"DonationMiner::initialize: startingRewardPeriod not set!\");\n\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        cUSD = _cUSD;\n        PACT = _PACT;\n        treasury = _treasury;\n        rewardPeriodSize = _rewardPeriodSize;\n        decayNumerator = _decayNumerator;\n        decayDenominator = _decayDenominator;\n\n        rewardPeriodCount = 1;\n        initFirstPeriod(_startingBlock, _firstRewardPerBlock);\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 3;\n    }\n\n    /**\n     * @notice Returns the amount of cUSD donated by a user in a reward period\n     *\n     * @param _period number of the reward period\n     * @param _donor address of the donor\n     * @return uint256 amount of cUSD donated by the user in this reward period\n     */\n    function rewardPeriodDonorAmount(uint256 _period, address _donor)\n    external\n    view\n    override\n    returns (uint256)\n    {\n        return rewardPeriods[_period].donorAmounts[_donor];\n    }\n\n    /**\n     * @notice Returns a reward period number from a donor reward period list\n     *\n     * @param _donor address of the donor\n     * @param _rewardPeriodIndex index of the reward period\n     * @return uint256 number of the reward period\n     */\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex)\n    external\n    view\n    override\n    returns (uint256)\n    {\n        return donors[_donor].rewardPeriods[_rewardPeriodIndex];\n    }\n\n    /**\n     * @notice Updates reward period default params\n     *\n     * @param _newRewardPeriodSize value of new rewardPeriodSize\n     * @param _newDecayNumerator value of new decayNumerator\n     * @param _newDecayDenominator value of new decayDenominator\n     */\n    function updateRewardPeriodParams(\n        uint256 _newRewardPeriodSize,\n        uint256 _newDecayNumerator,\n        uint256 _newDecayDenominator\n    ) external override onlyOwner {\n        uint256 _oldRewardPeriodSize = rewardPeriodSize;\n        uint256 _oldDecayNumerator = decayNumerator;\n        uint256 _oldDecayDenominator = decayDenominator;\n\n        rewardPeriodSize = _newRewardPeriodSize;\n        decayNumerator = _newDecayNumerator;\n        decayDenominator = _newDecayDenominator;\n\n        emit RewardPeriodParamsUpdated(\n            _oldRewardPeriodSize,\n            _oldDecayNumerator,\n            _oldDecayDenominator,\n            _newRewardPeriodSize,\n            _newDecayNumerator,\n            _newDecayDenominator\n        );\n    }\n\n    /**\n     * @notice Updates claimDelay value\n     *\n     * @param _newClaimDelay      Number of reward periods a donor has to wait after\n     *                            a donation until he will be able to claim his reward\n     */\n    function updateClaimDelay(uint256 _newClaimDelay) external override onlyOwner {\n        uint256 _oldClaimDelay = claimDelay;\n        claimDelay = _newClaimDelay;\n\n        emit ClaimDelayUpdated(_oldClaimDelay, _newClaimDelay);\n    }\n\n    /**\n     * @notice Updates againstPeriods value\n     *\n     * @param _newAgainstPeriods      Number of reward periods for the backward computation\n     */\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external override onlyOwner {\n        uint256 _oldAgainstPeriods = againstPeriods;\n        againstPeriods = _newAgainstPeriods;\n\n        emit AgainstPeriodsUpdated(_oldAgainstPeriods, _newAgainstPeriods);\n    }\n\n    /**\n     * @notice Updates Treasury address\n     *\n     * @param _newTreasury address of new treasury_ contract\n     */\n    function updateTreasury(ITreasury _newTreasury) external override onlyOwner {\n        address _oldTreasuryAddress = address(treasury);\n        treasury = _newTreasury;\n\n        emit TreasuryUpdated(_oldTreasuryAddress, address(_newTreasury));\n    }\n\n    /**\n     * @notice Transfers cUSD tokens to the treasury contract\n     *\n     * @param _amount Amount of cUSD tokens to deposit.\n     */\n    function donate(uint256 _amount) external override whenNotPaused whenStarted nonReentrant {\n        // Transfer the cUSD from the donor to the treasury\n        cUSD.safeTransferFrom(msg.sender, address(treasury), _amount);\n\n        addDonation(msg.sender, _amount, address(treasury));\n    }\n\n    /**\n     * @dev Transfers cUSD tokens to the community contract\n     *\n     * @param _community address of the community\n     * @param _amount amount of cUSD tokens to deposit\n     */\n    function donateToCommunity(ICommunity _community, uint256 _amount)\n    external\n    override\n    whenNotPaused\n    whenStarted\n    nonReentrant\n    {\n        ICommunityAdmin _communityAdmin = treasury.communityAdmin();\n        require(\n            _communityAdmin.communities(address(_community)) ==\n            ICommunityAdmin.CommunityState.Valid,\n            \"DonationMiner::donateToCommunity: This is not a valid community address\"\n        );\n        // Transfer the cUSD from the donor to the community\n        _community.donate(msg.sender, _amount);\n        addDonation(msg.sender, _amount, address(_community));\n    }\n\n    /**\n     * @notice Transfers to the sender the rewards\n     */\n    function claimRewards() external override whenNotPaused whenStarted nonReentrant {\n        uint256 _claimAmount = _claimRewardsByPeriodNumber(msg.sender, _getLastClaimablePeriod());\n\n        emit RewardClaimed(msg.sender, _claimAmount);\n    }\n\n    /**\n     * @notice Transfers to the sender the rewards\n     */\n    function claimRewardsPartial(uint256 _lastPeriodNumber)\n    external\n    override\n    whenNotPaused\n    whenStarted\n    nonReentrant\n    {\n        require(\n            _lastPeriodNumber <= _getLastClaimablePeriod(),\n            \"DonationMiner::claimRewardsPartial: This reward period isn't claimable yet\"\n        );\n\n        uint256 _claimAmount = _claimRewardsByPeriodNumber(msg.sender, _lastPeriodNumber);\n\n        emit RewardClaimedPartial(msg.sender, _claimAmount, _lastPeriodNumber);\n    }\n\n    /**\n     * @notice Calculates the rewards from ended reward periods of a donor\n     *\n     * @param _donorAddress address of the donor\n     * @param _lastPeriodNumber last reward period number to be computed\n     * @return uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\n     */\n    function calculateClaimableRewardsByPeriodNumber(\n        address _donorAddress,\n        uint256 _lastPeriodNumber\n    ) public view override returns (uint256) {\n        uint256 _maxRewardPeriod;\n\n        if (rewardPeriods[rewardPeriodCount].endBlock < block.number) {\n            _maxRewardPeriod =\n            (block.number - rewardPeriods[rewardPeriodCount].endBlock) /\n            rewardPeriodSize;\n            _maxRewardPeriod += rewardPeriodCount;\n        } else {\n            _maxRewardPeriod = rewardPeriodCount - 1;\n        }\n\n        require(\n            _lastPeriodNumber <= _maxRewardPeriod,\n            \"DonationMiner::calculateClaimableRewardsByPeriodNumber: This reward period isn't available yet\"\n        );\n\n        return _calculateRewardByPeriodNumber(_donorAddress, _lastPeriodNumber);\n    }\n\n    /**\n     * @notice Calculates the rewards from ended reward periods of a donor\n     *\n     * @param _donorAddress address of the donor\n     * @return uint256 sum of all donor's rewards that has not been claimed\n     */\n    function calculateClaimableRewards(address _donorAddress)\n    public\n    view\n    override\n    returns (uint256)\n    {\n        uint256 _maxRewardPeriod;\n\n        if (rewardPeriods[rewardPeriodCount].endBlock < block.number) {\n            _maxRewardPeriod =\n            (block.number - rewardPeriods[rewardPeriodCount].endBlock) /\n            rewardPeriodSize;\n            _maxRewardPeriod += rewardPeriodCount;\n        } else {\n            _maxRewardPeriod = rewardPeriodCount - 1;\n        }\n\n        return _calculateRewardByPeriodNumber(_donorAddress, _maxRewardPeriod);\n    }\n\n    /**\n     * @notice Calculates the estimate reward of a donor for current reward period\n     *\n     * @param _donorAddress address of the donor\n     * @return uint256 reward that donor will receive in current reward period if there isn't another donation\n     */\n    function estimateClaimableReward(address _donorAddress)\n    external\n    view\n    override\n    whenStarted\n    whenNotPaused\n    returns (uint256)\n    {\n        if (!isCurrentRewardPeriodInitialized()) {\n            return 0;\n        }\n\n        RewardPeriod storage _lastRewardPeriod = rewardPeriods[rewardPeriodCount];\n\n        uint256 _totalAmount;\n        uint256 _donorAmount;\n        uint256 _claimAmount;\n\n        uint256 _startPeriod = (rewardPeriodCount > againstPeriods)\n        ? rewardPeriodCount - againstPeriods\n        : 0;\n\n        (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\n            _donorAddress,\n            _startPeriod,\n            rewardPeriodCount\n        );\n\n        _claimAmount += (_lastRewardPeriod.rewardAmount * _donorAmount) / _totalAmount;\n\n        return _claimAmount;\n    }\n\n    /**\n     * @notice Calculates the number of PACTs given for each block in current reward period\n     *\n     * @return uint256 current reward per block\n     */\n    function calculateRewardPerBlock() internal view returns (uint256) {\n        return\n        (rewardPeriods[rewardPeriodCount - 1].rewardPerBlock * decayNumerator) /\n        decayDenominator;\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    /**\n     * @notice Initializes all reward periods that haven't been initialized yet until the current one.\n     *         The first donor in a reward period will pay for that operation.\n     */\n    function initializeRewardPeriods() internal {\n        RewardPeriod storage _lastPeriod = rewardPeriods[rewardPeriodCount];\n\n        while (_lastPeriod.endBlock < block.number) {\n            rewardPeriodCount++;\n            RewardPeriod storage _newPeriod = rewardPeriods[rewardPeriodCount];\n            _newPeriod.againstPeriods = againstPeriods;\n            _newPeriod.startBlock = _lastPeriod.endBlock + 1;\n            _newPeriod.endBlock = _newPeriod.startBlock + rewardPeriodSize - 1;\n            _newPeriod.rewardPerBlock = calculateRewardPerBlock();\n            uint256 _rewardAmount = rewardPeriodSize * _newPeriod.rewardPerBlock;\n\n            uint256 _totalAmountAgainst;\n            uint256 _startPeriod = (rewardPeriodCount - 1 > _lastPeriod.againstPeriods)\n            ? rewardPeriodCount - 1 - _lastPeriod.againstPeriods\n            : 0;\n            (, _totalAmountAgainst) = _calculateDonorIntervalAmounts(\n                msg.sender,\n                _startPeriod,\n                rewardPeriodCount - 1\n            );\n            if (_totalAmountAgainst == 0) {\n                _rewardAmount += _lastPeriod.rewardAmount;\n            }\n            _newPeriod.rewardAmount = _rewardAmount;\n            _lastPeriod = _newPeriod;\n        }\n    }\n\n    /**\n     * @notice Adds a new donation in donations list\n     *\n     * @param _donorAddress address of the donner\n     * @param _amount amount of the donation\n     * @param _target address of the receiver (community or treasury)\n     */\n    function addDonation(\n        address _donorAddress,\n        uint256 _amount,\n        address _target\n    ) internal {\n        initializeRewardPeriods();\n\n        donationCount++;\n        Donation storage _donation = donations[donationCount];\n        _donation.donor = _donorAddress;\n        _donation.target = _target;\n        _donation.amount = _amount;\n        _donation.blockNumber = block.number;\n        _donation.rewardPeriod = rewardPeriodCount;\n        _donation.token = cUSD;\n        _donation.tokenPrice = 1e18;\n\n        updateRewardPeriodAmounts(rewardPeriodCount, msg.sender, _amount);\n        addCurrentRewardPeriodToDonor(msg.sender);\n\n        emit DonationAdded(donationCount, msg.sender, _amount, _target);\n    }\n\n    /**\n     * @notice Adds the current reward period number to a donor's list only if it hasn't been added yet\n     *\n     * @param _donorAddress address of the donor\n     */\n    function addCurrentRewardPeriodToDonor(address _donorAddress) internal {\n        Donor storage _donor = donors[_donorAddress];\n        uint256 _lastDonorRewardPeriod = _donor.rewardPeriods[_donor.rewardPeriodsCount];\n\n        //ensures that the current reward period number hasn't been added in the donor's list\n        if (_lastDonorRewardPeriod != rewardPeriodCount) {\n            _donor.rewardPeriodsCount++;\n            _donor.rewardPeriods[_donor.rewardPeriodsCount] = rewardPeriodCount;\n        }\n    }\n\n    /**\n     * @notice Updates the amounts of a reward period\n     *\n     * @param _rewardPeriodNumber number of the reward period\n     * @param _donorAddress address of the donor\n     * @param _amount amount to be added\n     */\n    function updateRewardPeriodAmounts(\n        uint256 _rewardPeriodNumber,\n        address _donorAddress,\n        uint256 _amount\n    ) internal {\n        RewardPeriod storage _currentPeriod = rewardPeriods[_rewardPeriodNumber];\n        _currentPeriod.donationsAmount += _amount;\n        _currentPeriod.donorAmounts[_donorAddress] += _amount;\n    }\n\n    /**\n     * @notice Checks if current reward period has been initialized\n     *\n     * @return bool true if current reward period has been initialized\n     */\n    function isCurrentRewardPeriodInitialized() internal view returns (bool) {\n        return rewardPeriods[rewardPeriodCount].endBlock >= block.number;\n    }\n\n    function _calculateDonorIntervalAmounts(\n        address _donorAddress,\n        uint256 _startPeriod,\n        uint256 _endPeriod\n    ) internal view returns (uint256, uint256) {\n        uint256 _donorAmount;\n        uint256 _totalAmount;\n        uint256 _index;\n        for (_index = _startPeriod; _index <= _endPeriod; _index++) {\n            RewardPeriod storage _rewardPeriod = rewardPeriods[_index];\n            _donorAmount += _rewardPeriod.donorAmounts[_donorAddress];\n            _totalAmount += _rewardPeriod.donationsAmount;\n        }\n        return (_donorAmount, _totalAmount);\n    }\n\n    function _getLastClaimablePeriod() internal returns (uint256) {\n        initializeRewardPeriods();\n\n        return rewardPeriodCount > claimDelay + 1 ? rewardPeriodCount - 1 - claimDelay : 0;\n    }\n\n    /**\n     * @notice Transfers to the sender the rewards\n     */\n    function _claimRewardsByPeriodNumber(address _donorAddress, uint256 _lastPeriodNumber)\n    internal\n    returns (uint256)\n    {\n        Donor storage _donor = donors[_donorAddress];\n        uint256 _claimAmount;\n\n        _claimAmount = _calculateRewardByPeriodNumber(_donorAddress, _lastPeriodNumber);\n\n        if (_donor.lastClaimPeriod < _lastPeriodNumber) {\n            _donor.lastClaimPeriod = _lastPeriodNumber;\n        }\n\n        if (_claimAmount == 0) {\n            return _claimAmount;\n        }\n\n        if (_claimAmount > PACT.balanceOf(address(this))) {\n            _claimAmount = PACT.balanceOf(address(this));\n        }\n\n        PACT.safeTransfer(_donorAddress, _claimAmount);\n\n        return _claimAmount;\n    }\n\n    /**\n     * @notice Calculates the reward for a donor starting with his last reward period claimed\n     *\n     * @param _donorAddress address of the donor\n     * @param _lastPeriodNumber last reward period number to be computed\n     * @return uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\n     */\n    function _calculateRewardByPeriodNumber(address _donorAddress, uint256 _lastPeriodNumber)\n    internal\n    view\n    returns (uint256)\n    {\n        Donor storage _donor = donors[_donorAddress];\n        uint256 _claimAmount;\n\n        // this is only used for the transition from V2 to V3\n        // we have to be sure a user is not able to claim for a epoch that he's claimed\n        //      so _index has to be greater than _donor.rewardPeriods[_donor.lastClaim]\n        uint256 _index = _donor.lastClaimPeriod > _donor.rewardPeriods[_donor.lastClaim]\n        ? _donor.lastClaimPeriod + 1\n        : _donor.rewardPeriods[_donor.lastClaim] + 1;\n\n        // this is only for optimizing\n        // to not start from the epoch #1, we can start from the first epoch in witch the user donated\n        if (_index == 1) {\n            _index = _donor.rewardPeriods[1];\n        }\n\n        uint256 _donorAmount;\n        uint256 _totalAmount;\n        uint256 _startPeriod;\n        uint256 _rewardAmount;\n        RewardPeriod storage _previousRewardPeriod = rewardPeriods[0];\n        RewardPeriod storage _currentRewardPeriod = rewardPeriods[_index];\n        RewardPeriod storage _expiredRewardPeriod = rewardPeriods[0];\n\n        while (_index <= _lastPeriodNumber) {\n            // used only by calculateClaimableRewardsByPeriodNumber & calculateClaimableRewards\n            if (_currentRewardPeriod.startBlock == 0) {\n                if (_index > againstPeriods + 1) {\n                    _expiredRewardPeriod = rewardPeriods[_index - 1 - againstPeriods];\n                    _donorAmount -= _expiredRewardPeriod.donorAmounts[_donorAddress];\n                    _totalAmount -= _expiredRewardPeriod.donationsAmount;\n                }\n\n                _donorAmount += _currentRewardPeriod.donorAmounts[_donorAddress];\n                _totalAmount += _currentRewardPeriod.donationsAmount;\n                _rewardAmount = (_rewardAmount * decayNumerator) / decayDenominator;\n            } else if (_currentRewardPeriod.againstPeriods == 0) {\n                _donorAmount = _currentRewardPeriod.donorAmounts[_donorAddress];\n                _totalAmount = _currentRewardPeriod.donationsAmount;\n                _rewardAmount = _currentRewardPeriod.rewardAmount;\n            } else if (\n                _previousRewardPeriod.againstPeriods != _currentRewardPeriod.againstPeriods\n            ) {\n                _startPeriod = _index > _currentRewardPeriod.againstPeriods\n                ? _index - _currentRewardPeriod.againstPeriods\n                : 0;\n                (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\n                    _donorAddress,\n                    _startPeriod,\n                    _index\n                );\n                _rewardAmount = _currentRewardPeriod.rewardAmount;\n            } else {\n                if (_index > _currentRewardPeriod.againstPeriods + 1) {\n                    _expiredRewardPeriod = rewardPeriods[\n                    _index - 1 - _currentRewardPeriod.againstPeriods\n                    ];\n                    _donorAmount -= _expiredRewardPeriod.donorAmounts[_donorAddress];\n                    _totalAmount -= _expiredRewardPeriod.donationsAmount;\n                }\n\n                _donorAmount += _currentRewardPeriod.donorAmounts[_donorAddress];\n                _totalAmount += _currentRewardPeriod.donationsAmount;\n                _rewardAmount = _currentRewardPeriod.rewardAmount;\n            }\n\n            if (_totalAmount > 0) {\n                _claimAmount += (_rewardAmount * _donorAmount) / _totalAmount;\n            }\n            _index++;\n\n            _previousRewardPeriod = _currentRewardPeriod;\n            _currentRewardPeriod = rewardPeriods[_index];\n        }\n\n        return _claimAmount;\n    }\n\n    /**\n     * @notice Initializes the first reward period\n     *\n     * @param _startingBlock first block\n     * @param _firstRewardPerBlock initial reward per block\n     */\n    function initFirstPeriod(uint256 _startingBlock, uint256 _firstRewardPerBlock) internal {\n        RewardPeriod storage _firstPeriod = rewardPeriods[1];\n        _firstPeriod.startBlock = _startingBlock;\n        _firstPeriod.endBlock = _startingBlock + rewardPeriodSize - 1;\n        _firstPeriod.rewardPerBlock = _firstRewardPerBlock;\n        _firstPeriod.rewardAmount = _firstRewardPerBlock * rewardPeriodSize;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/mocks/donationMiner/interfaces/DonationMinerStorageV3Old.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./DonationMinerStorageV2Old.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV2. Create a new\n * contract which implements DonationMinerStorageV3 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract DonationMinerStorageV3Old is DonationMinerStorageV2Old {\n    uint256 public override againstPeriods;\n}\n"
    },
    "contracts/mocks/donationMiner/interfaces/DonationMinerStorageV2Old.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./DonationMinerStorageV1Old.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV2. Create a new\n * contract which implements DonationMinerStorageV2 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract DonationMinerStorageV2Old is DonationMinerStorageV1Old {\n    uint256 public override claimDelay;\n}\n"
    },
    "contracts/mocks/donationMiner/interfaces/DonationMinerStorageV1Old.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./IDonationMinerOld.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV1. Create a new\n * contract which implements DonationMinerStorageV1 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract DonationMinerStorageV1Old is IDonationMinerOld {\n    IERC20 public override cUSD;\n    IERC20 public override PACT;\n    ITreasury public override treasury;\n    uint256 public override rewardPeriodSize;\n    uint256 public override donationCount;\n    uint256 public override rewardPeriodCount;\n    uint256 public override decayNumerator;\n    uint256 public override decayDenominator;\n\n    mapping(uint256 => Donation) public override donations;\n    mapping(uint256 => RewardPeriod) public override rewardPeriods;\n    mapping(address => Donor) public override donors;\n}\n"
    },
    "contracts/donationMiner/DonationMinerImplementation.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./interfaces/DonationMinerStorageV4.sol\";\n\ncontract DonationMinerImplementation is\n    Initializable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    DonationMinerStorageV4\n{\n    using SafeERC20 for IERC20;\n\n    uint256 private constant COMMUNITY_DONATION_RATIO = 2;\n\n    /**\n     * @notice Triggered when a donation has been added\n     *\n     * @param donationId        Id of the donation\n     * @param delegateAddress   Address of the delegate\n     * @param amount            Value of the donation\n     * @param token             Address of the token after conversion\n     * @param amount            Number of token donated\n     * @param target            Address of the receiver (community or treasury)\n     *                          or address of the DonationMiner contract otherwise\n     */\n    event DonationAdded(\n        uint256 indexed donationId,\n        address indexed delegateAddress,\n        uint256 amount,\n        address token,\n        uint256 initialAmount,\n        address indexed target\n    );\n\n    /**\n     * @notice Triggered when a donor has claimed his reward\n     *\n     * @param donor             Address of the donner\n     * @param amount            Value of the reward\n     */\n    event RewardClaimed(address indexed donor, uint256 amount);\n\n    /**\n     * @notice Triggered when a donor has claimed his reward\n     *\n     * @param donor             Address of the donner\n     * @param amount            Value of the reward\n     * @param lastRewardPeriod  Number of the last reward period for witch the claim was made\n     */\n    event RewardClaimedPartial(address indexed donor, uint256 amount, uint256 lastRewardPeriod);\n\n    /**\n     * @notice Triggered when a donor has staked his reward\n     *\n     * @param donor             Address of the donner\n     * @param amount            Value of the reward\n     */\n    event RewardStaked(address indexed donor, uint256 amount);\n\n    /**\n     * @notice Triggered when a donor has staked his reward\n     *\n     * @param donor             Address of the donner\n     * @param amount            Value of the reward\n     * @param lastRewardPeriod  Number of the last reward period for witch tha stake was made\n     */\n    event RewardStakedPartial(address indexed donor, uint256 amount, uint256 lastRewardPeriod);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Triggered when reward period params have been updated\n     *\n     * @param oldRewardPeriodSize   Old rewardPeriodSize value\n     * @param oldDecayNumerator     Old decayNumerator value\n     * @param oldDecayDenominator   Old decayDenominator value\n     * @param newRewardPeriodSize   New rewardPeriodSize value\n     * @param newDecayNumerator     New decayNumerator value\n     * @param newDecayDenominator   New decayDenominator value\n     *\n     * For further information regarding each parameter, see\n     * *DonationMiner* smart contract initialize method.\n     */\n    event RewardPeriodParamsUpdated(\n        uint256 oldRewardPeriodSize,\n        uint256 oldDecayNumerator,\n        uint256 oldDecayDenominator,\n        uint256 newRewardPeriodSize,\n        uint256 newDecayNumerator,\n        uint256 newDecayDenominator\n    );\n\n    /**\n     * @notice Triggered when the claimDelay value has been updated\n     *\n     * @param oldClaimDelay            Old claimDelay value\n     * @param newClaimDelay            New claimDelay value\n     */\n    event ClaimDelayUpdated(uint256 oldClaimDelay, uint256 newClaimDelay);\n\n    /**\n     * @notice Triggered when the stakingDonationRatio value has been updated\n     *\n     * @param oldStakingDonationRatio            Old stakingDonationRatio value\n     * @param newStakingDonationRatio            New stakingDonationRatio value\n     */\n    event StakingDonationRatioUpdated(\n        uint256 oldStakingDonationRatio,\n        uint256 newStakingDonationRatio\n    );\n\n    /**\n     * @notice Triggered when the againstPeriods value has been updated\n     *\n     * @param oldAgainstPeriods            Old againstPeriods value\n     * @param newAgainstPeriods            New againstPeriods value\n     */\n    event AgainstPeriodsUpdated(uint256 oldAgainstPeriods, uint256 newAgainstPeriods);\n\n    /**\n     * @notice Triggered when the treasury address has been updated\n     *\n     * @param oldTreasury             Old treasury address\n     * @param newTreasury             New treasury address\n     */\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\n\n    /**\n     * @notice Triggered when the staking address has been updated\n     *\n     * @param oldStaking             Old staking address\n     * @param newStaking             New staking address\n     */\n    event StakingUpdated(address indexed oldStaking, address indexed newStaking);\n\n    /**\n     * @notice Enforces beginning rewardPeriod has started\n     */\n    modifier whenStarted() {\n        require(block.number >= rewardPeriods[1].startBlock, \"DonationMiner: ERR_NOT_STARTED\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be Staking contract\n     */\n    modifier onlyStaking() {\n        require(msg.sender == address(staking), \"DonationMiner: NOT_STAKING\");\n        _;\n    }\n\n    /**\n     * @notice Used to initialize a new DonationMiner contract\n     *\n     * @param _cUSD                 Address of the cUSD token\n     * @param _PACT                 Address of the PACT Token\n     * @param _treasury             Address of the Treasury\n     * @param _firstRewardPerBlock  Number of PACTs given for each block\n     *                              from the first reward period\n     * @param _rewardPeriodSize     Number of blocks of the reward period\n     * @param _startingBlock        First block of the first reward period\n     * @param _decayNumerator       Decay numerator used for calculating\n                                    the new reward per block based on\n                                    the previous reward per block\n     * @param _decayDenominator     Decay denominator used for calculating\n                                    the new reward per block based on\n                                    the previous reward per block\n     */\n    function initialize(\n        IERC20 _cUSD,\n        IERC20 _PACT,\n        ITreasury _treasury,\n        uint256 _firstRewardPerBlock,\n        uint256 _rewardPeriodSize,\n        uint256 _startingBlock,\n        uint256 _decayNumerator,\n        uint256 _decayDenominator\n    ) public initializer {\n        require(address(_cUSD) != address(0), \"DonationMiner::initialize: cUSD address not set\");\n        require(address(_PACT) != address(0), \"DonationMiner::initialize: PACT address not set\");\n        require(address(_treasury) != address(0), \"DonationMiner::initialize: treasury_ not set\");\n        require(\n            _firstRewardPerBlock != 0,\n            \"DonationMiner::initialize: firstRewardPerBlock not set!\"\n        );\n        require(_startingBlock != 0, \"DonationMiner::initialize: startingRewardPeriod not set!\");\n\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        cUSD = _cUSD;\n        PACT = _PACT;\n        treasury = _treasury;\n        rewardPeriodSize = _rewardPeriodSize;\n        decayNumerator = _decayNumerator;\n        decayDenominator = _decayDenominator;\n\n        rewardPeriodCount = 1;\n        initFirstPeriod(_startingBlock, _firstRewardPerBlock);\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 4;\n    }\n\n    /**\n     * @notice Returns the amount of cUSD donated by a user in a reward period\n     *\n     * @param _period number of the reward period\n     * @param _donor address of the donor\n     * @return uint256 amount of cUSD donated by the user in this reward period\n     */\n    function rewardPeriodDonorAmount(uint256 _period, address _donor)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return rewardPeriods[_period].donorAmounts[_donor];\n    }\n\n    /**\n     * @notice Returns the amount of PACT staked by a user at the and of the reward period\n     *\n     * @param _period reward period number\n     * @param _donor address of the donor\n     * @return uint256 amount of PACT staked by a user at the and of the reward period\n     */\n    function rewardPeriodDonorStakeAmounts(uint256 _period, address _donor)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return rewardPeriods[_period].donorStakeAmounts[_donor];\n    }\n\n    /**\n     * @notice Returns a reward period number from a donor reward period list\n     *\n     * @param _donor address of the donor\n     * @param _rewardPeriodIndex index of the reward period\n     * @return uint256 number of the reward period\n     */\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return donors[_donor].rewardPeriods[_rewardPeriodIndex];\n    }\n\n    /**\n     * @notice Updates reward period default params\n     *\n     * @param _newRewardPeriodSize value of new rewardPeriodSize\n     * @param _newDecayNumerator value of new decayNumerator\n     * @param _newDecayDenominator value of new decayDenominator\n     */\n    function updateRewardPeriodParams(\n        uint256 _newRewardPeriodSize,\n        uint256 _newDecayNumerator,\n        uint256 _newDecayDenominator\n    ) external override onlyOwner {\n        initializeRewardPeriods();\n\n        uint256 _oldRewardPeriodSize = rewardPeriodSize;\n        uint256 _oldDecayNumerator = decayNumerator;\n        uint256 _oldDecayDenominator = decayDenominator;\n\n        rewardPeriodSize = _newRewardPeriodSize;\n        decayNumerator = _newDecayNumerator;\n        decayDenominator = _newDecayDenominator;\n\n        emit RewardPeriodParamsUpdated(\n            _oldRewardPeriodSize,\n            _oldDecayNumerator,\n            _oldDecayDenominator,\n            _newRewardPeriodSize,\n            _newDecayNumerator,\n            _newDecayDenominator\n        );\n    }\n\n    /**\n     * @notice Updates claimDelay value\n     *\n     * @param _newClaimDelay      Number of reward periods a donor has to wait after\n     *                            a donation until he will be able to claim his reward\n     */\n    function updateClaimDelay(uint256 _newClaimDelay) external override onlyOwner {\n        uint256 _oldClaimDelay = claimDelay;\n        claimDelay = _newClaimDelay;\n\n        emit ClaimDelayUpdated(_oldClaimDelay, _newClaimDelay);\n    }\n\n    /**\n     * @notice Updates stakingDonationRatio value\n     *\n     * @param _newStakingDonationRatio    Number of tokens that need to be staked to be counted as 1 PACT donated\n     */\n    function updateStakingDonationRatio(uint256 _newStakingDonationRatio)\n        external\n        override\n        onlyOwner\n    {\n        uint256 _oldStakingDonationRatio = stakingDonationRatio;\n        stakingDonationRatio = _newStakingDonationRatio;\n\n        emit StakingDonationRatioUpdated(_oldStakingDonationRatio, _newStakingDonationRatio);\n    }\n\n    /**\n     * @notice Updates againstPeriods value\n     *\n     * @param _newAgainstPeriods      Number of reward periods for the backward computation\n     */\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external override onlyOwner {\n        initializeRewardPeriods();\n\n        uint256 _oldAgainstPeriods = againstPeriods;\n        againstPeriods = _newAgainstPeriods;\n\n        emit AgainstPeriodsUpdated(_oldAgainstPeriods, _newAgainstPeriods);\n    }\n\n    /**\n     * @notice Updates Treasury address\n     *\n     * @param _newTreasury address of new treasury_ contract\n     */\n    function updateTreasury(ITreasury _newTreasury) external override onlyOwner {\n        address _oldTreasuryAddress = address(treasury);\n        treasury = _newTreasury;\n\n        emit TreasuryUpdated(_oldTreasuryAddress, address(_newTreasury));\n    }\n\n    /**\n     * @notice Updates Staking address\n     *\n     * @param _newStaking address of new Staking contract\n     */\n    function updateStaking(IStaking _newStaking) external override onlyOwner {\n        address _oldStakingAddress = address(staking);\n        staking = _newStaking;\n\n        emit StakingUpdated(_oldStakingAddress, address(_newStaking));\n    }\n\n    /**\n     * @notice Transfers cUSD tokens to the treasury contract\n     *\n     * @param _token address of the token\n     * @param _amount Amount of cUSD tokens to deposit.\n     * @param _delegateAddress the address that will claim the reward for the donation\n     */\n    function donate(\n        IERC20 _token,\n        uint256 _amount,\n        address _delegateAddress\n    ) external override whenNotPaused whenStarted nonReentrant {\n        require(\n            _token == cUSD || treasury.isToken(address(_token)),\n            \"DonationMiner::donate: Invalid token\"\n        );\n\n        _token.safeTransferFrom(msg.sender, address(treasury), _amount);\n\n        _addDonation(_delegateAddress, _token, _amount, address(treasury));\n    }\n\n    /**\n     * @dev Transfers tokens to the community contract\n     *\n     * @param _community address of the community\n     * @param _token address of the token\n     * @param _amount amount of cUSD tokens to deposit\n     * @param _delegateAddress the address that will claim the reward for the donation\n     */\n    function donateToCommunity(\n        ICommunity _community,\n        IERC20 _token,\n        uint256 _amount,\n        address _delegateAddress\n    ) external override whenNotPaused whenStarted nonReentrant {\n        ICommunityAdmin _communityAdmin = treasury.communityAdmin();\n        require(\n            _communityAdmin.communities(address(_community)) ==\n                ICommunityAdmin.CommunityState.Valid,\n            \"DonationMiner::donateToCommunity: This is not a valid community address\"\n        );\n\n        require(\n            address(_token) == address(_community.cUSD()),\n            \"DonationMiner::donateToCommunity: Invalid token\"\n        );\n\n        _community.donate(msg.sender, _amount);\n        _addDonation(_delegateAddress, _token, _amount, address(_community));\n    }\n\n    /**\n     * @dev Calculate all donations on the last X epochs as well as everyone\n     * else in the same period.\n     *\n     * @param _donor address of the donor\n     * @return uint256, uint256 sum of all donor's and everyone else donations\n     */\n    function lastPeriodsDonations(address _donor)\n        external\n        view\n        override\n        returns (uint256, uint256)\n    {\n        uint256 _donorValue = 0;\n        uint256 _everyoneValue = 0;\n        uint256 _startPeriod = rewardPeriodCount > againstPeriods\n            ? rewardPeriodCount - againstPeriods\n            : 0;\n        for (uint256 i = _startPeriod; i <= rewardPeriodCount; i++) {\n            _everyoneValue += rewardPeriods[i].donationsAmount;\n            _donorValue += rewardPeriods[i].donorAmounts[_donor];\n        }\n        return (_donorValue, _everyoneValue);\n    }\n\n    /**\n     * @notice Transfers to the sender the rewards\n     */\n    function claimRewards() external override whenNotPaused whenStarted nonReentrant {\n        uint256 _claimAmount = _computeRewardsByPeriodNumber(msg.sender, _getLastClaimablePeriod());\n\n        PACT.safeTransfer(msg.sender, _claimAmount);\n\n        emit RewardClaimed(msg.sender, _claimAmount);\n    }\n\n    /**\n     * @notice Transfers to the sender the rewards\n     */\n    function claimRewardsPartial(uint256 _lastPeriodNumber)\n        external\n        override\n        whenNotPaused\n        whenStarted\n        nonReentrant\n    {\n        require(\n            _lastPeriodNumber <= _getLastClaimablePeriod(),\n            \"DonationMiner::claimRewardsPartial: This reward period isn't claimable yet\"\n        );\n\n        uint256 _claimAmount = _computeRewardsByPeriodNumber(msg.sender, _lastPeriodNumber);\n\n        PACT.safeTransfer(msg.sender, _claimAmount);\n\n        emit RewardClaimedPartial(msg.sender, _claimAmount, _lastPeriodNumber);\n    }\n\n    /**\n     * @notice Stakes the reward\n     */\n    function stakeRewards() external override whenNotPaused whenStarted nonReentrant {\n        initializeRewardPeriods();\n\n        uint256 _stakeAmount = _computeRewardsByPeriodNumber(msg.sender, rewardPeriodCount - 1);\n\n        PACT.approve(address(staking), _stakeAmount);\n        staking.stake(msg.sender, _stakeAmount);\n\n        emit RewardStaked(msg.sender, _stakeAmount);\n    }\n\n    /**\n     * @notice Stakes the reward\n     */\n    function stakeRewardsPartial(uint256 _lastPeriodNumber)\n        external\n        override\n        whenNotPaused\n        whenStarted\n        nonReentrant\n    {\n        initializeRewardPeriods();\n\n        require(\n            _lastPeriodNumber < rewardPeriodCount,\n            \"DonationMiner::stakeRewardsPartial: This reward period isn't claimable yet\"\n        );\n\n        uint256 _stakeAmount = _computeRewardsByPeriodNumber(msg.sender, _lastPeriodNumber);\n\n        PACT.approve(address(staking), _stakeAmount);\n        staking.stake(msg.sender, _stakeAmount);\n\n        emit RewardStaked(msg.sender, _stakeAmount);\n    }\n\n    /**\n     * @notice Calculates the rewards from ended reward periods of a donor\n     *\n     * @param _donorAddress address of the donor\n     * @param _lastPeriodNumber last reward period number to be computed\n     * @return claimAmount uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\n     * @return lastDonorStakeAmount uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\n     */\n    function calculateClaimableRewardsByPeriodNumber(\n        address _donorAddress,\n        uint256 _lastPeriodNumber\n    ) external view override returns (uint256 claimAmount, uint256 lastDonorStakeAmount) {\n        uint256 _maxRewardPeriod;\n\n        if (rewardPeriods[rewardPeriodCount].endBlock < block.number) {\n            _maxRewardPeriod =\n                (block.number - rewardPeriods[rewardPeriodCount].endBlock) /\n                rewardPeriodSize;\n            _maxRewardPeriod += rewardPeriodCount;\n        } else {\n            _maxRewardPeriod = rewardPeriodCount - 1;\n        }\n\n        require(\n            _lastPeriodNumber <= _maxRewardPeriod,\n            \"DonationMiner::calculateClaimableRewardsByPeriodNumber: This reward period isn't available yet\"\n        );\n\n        return _calculateRewardByPeriodNumber(_donorAddress, _lastPeriodNumber);\n    }\n\n    /**\n     * @notice Calculates the rewards from ended reward periods of a donor\n     *\n     * @param _donorAddress address of the donor\n     * @return claimAmount uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\n     * @return lastDonorStakeAmount uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\n     */\n    function calculateClaimableRewards(address _donorAddress)\n        external\n        view\n        override\n        returns (uint256 claimAmount, uint256 lastDonorStakeAmount)\n    {\n        uint256 _maxRewardPeriod;\n\n        if (rewardPeriods[rewardPeriodCount].endBlock < block.number) {\n            _maxRewardPeriod =\n                (block.number - rewardPeriods[rewardPeriodCount].endBlock) /\n                rewardPeriodSize;\n            _maxRewardPeriod += rewardPeriodCount;\n        } else {\n            _maxRewardPeriod = rewardPeriodCount - 1;\n        }\n\n        return _calculateRewardByPeriodNumber(_donorAddress, _maxRewardPeriod);\n    }\n\n    /**\n     * @notice Calculates the estimate reward of a donor for current reward period\n     *\n     * @param _donorAddress address of the donor\n     * @return uint256 reward that donor will receive in current reward period if there isn't another donation\n     */\n    function estimateClaimableReward(address _donorAddress)\n        external\n        view\n        override\n        whenStarted\n        whenNotPaused\n        returns (uint256)\n    {\n        if (!isCurrentRewardPeriodInitialized()) {\n            return 0;\n        }\n\n        RewardPeriod storage _lastRewardPeriod = rewardPeriods[rewardPeriodCount];\n\n        uint256 _totalAmount;\n        uint256 _donorAmount;\n        uint256 _claimAmount;\n\n        uint256 _startPeriod = (rewardPeriodCount > againstPeriods)\n            ? rewardPeriodCount - againstPeriods\n            : 0;\n\n        (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\n            _donorAddress,\n            _startPeriod,\n            rewardPeriodCount\n        );\n\n        _claimAmount += (_lastRewardPeriod.rewardAmount * _donorAmount) / _totalAmount;\n\n        return _claimAmount;\n    }\n\n    /**\n     * @notice Calculates the number of PACTs given for each block in current reward period\n     *\n     * @return uint256 current reward per block\n     */\n    function calculateRewardPerBlock() internal view returns (uint256) {\n        return\n            (rewardPeriods[rewardPeriodCount - 1].rewardPerBlock * decayNumerator) /\n            decayDenominator;\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    function setStakingAmounts(\n        address _holderAddress,\n        uint256 _holderAmount,\n        uint256 _totalAmount\n    ) external override whenNotPaused whenStarted onlyStaking {\n        initializeRewardPeriods();\n\n        RewardPeriod storage _rewardPeriod = rewardPeriods[rewardPeriodCount];\n        _rewardPeriod.hasSetStakeAmount[_holderAddress] = true;\n        _rewardPeriod.donorStakeAmounts[_holderAddress] = _holderAmount;\n        _rewardPeriod.stakesAmount = _totalAmount;\n\n        Donor storage _donor = donors[_holderAddress];\n        //if user hasn't made any donation/staking\n        //set _donor.lastClaimPeriod to be previous reward period\n        //to not calculate reward for epochs 1 to rewardPeriodsCount -1\n        if (_donor.lastClaimPeriod == 0 && _donor.rewardPeriodsCount == 0) {\n            _donor.lastClaimPeriod = rewardPeriodCount - 1;\n        }\n    }\n\n    /**\n     * @notice Initializes all reward periods that haven't been initialized yet until the current one.\n     *         The first donor in a reward period will pay for that operation.\n     */\n    function initializeRewardPeriods() internal {\n        RewardPeriod storage _lastPeriod = rewardPeriods[rewardPeriodCount];\n\n        while (_lastPeriod.endBlock < block.number) {\n            rewardPeriodCount++;\n            RewardPeriod storage _newPeriod = rewardPeriods[rewardPeriodCount];\n            _newPeriod.againstPeriods = againstPeriods;\n            _newPeriod.startBlock = _lastPeriod.endBlock + 1;\n            _newPeriod.endBlock = _newPeriod.startBlock + rewardPeriodSize - 1;\n            _newPeriod.rewardPerBlock = calculateRewardPerBlock();\n            _newPeriod.stakesAmount = _lastPeriod.stakesAmount;\n            _newPeriod.stakingDonationRatio = stakingDonationRatio;\n            uint256 _rewardAmount = rewardPeriodSize * _newPeriod.rewardPerBlock;\n\n            uint256 _startPeriod = (rewardPeriodCount - 1 > _lastPeriod.againstPeriods)\n                ? rewardPeriodCount - 1 - _lastPeriod.againstPeriods\n                : 1;\n\n            if (!hasDonationOrStake(_startPeriod, rewardPeriodCount - 1)) {\n                _rewardAmount += _lastPeriod.rewardAmount;\n            }\n            _newPeriod.rewardAmount = _rewardAmount;\n            _lastPeriod = _newPeriod;\n        }\n    }\n\n    /**\n     * @notice Adds a new donation in donations list\n     *\n     * @param _delegateAddress address of the wallet that will claim the reward\n     * @param _initialAmount amount of the donation\n     * @param _target address of the receiver (community or treasury)\n     */\n    function _addDonation(\n        address _delegateAddress,\n        IERC20 _token,\n        uint256 _initialAmount,\n        address _target\n    ) internal {\n        initializeRewardPeriods();\n\n        donationCount++;\n        Donation storage _donation = donations[donationCount];\n        _donation.donor = _delegateAddress;\n        _donation.target = _target;\n        _donation.blockNumber = block.number;\n        _donation.rewardPeriod = rewardPeriodCount;\n        _donation.token = _token;\n        _donation.initialAmount = _initialAmount;\n\n        if (_target == address(treasury)) {\n            _donation.amount = (_token == cUSD)\n                ? _initialAmount\n                : treasury.getConvertedAmount(address(_token), _initialAmount);\n        } else {\n            _donation.amount = _initialAmount / COMMUNITY_DONATION_RATIO;\n        }\n\n        updateRewardPeriodAmounts(rewardPeriodCount, _delegateAddress, _donation.amount);\n        addCurrentRewardPeriodToDonor(_delegateAddress);\n\n        emit DonationAdded(\n            donationCount,\n            _delegateAddress,\n            _donation.amount,\n            address(_token),\n            _initialAmount,\n            _target\n        );\n    }\n\n    /**\n     * @notice Adds the current reward period number to a donor's list only if it hasn't been added yet\n     *\n     * @param _donorAddress address of the donor\n     */\n    function addCurrentRewardPeriodToDonor(address _donorAddress) internal {\n        Donor storage _donor = donors[_donorAddress];\n        uint256 _lastDonorRewardPeriod = _donor.rewardPeriods[_donor.rewardPeriodsCount];\n\n        //ensures that the current reward period number hasn't been added in the donor's list\n        if (_lastDonorRewardPeriod != rewardPeriodCount) {\n            _donor.rewardPeriodsCount++;\n            _donor.rewardPeriods[_donor.rewardPeriodsCount] = rewardPeriodCount;\n        }\n\n        //if user hasn't made any donation/staking\n        //set _donor.lastClaimPeriod to be previous reward period\n        //to not calculate reward for epochs 1 to rewardPeriodsCount -1\n        if (_donor.lastClaimPeriod == 0 && _donor.rewardPeriodsCount == 0) {\n            _donor.lastClaimPeriod = rewardPeriodCount - 1;\n        }\n    }\n\n    /**\n     * @notice Updates the amounts of a reward period\n     *\n     * @param _rewardPeriodNumber number of the reward period\n     * @param _donorAddress address of the donor\n     * @param _amount amount to be added\n     */\n    function updateRewardPeriodAmounts(\n        uint256 _rewardPeriodNumber,\n        address _donorAddress,\n        uint256 _amount\n    ) internal {\n        RewardPeriod storage _currentPeriod = rewardPeriods[_rewardPeriodNumber];\n        _currentPeriod.donationsAmount += _amount;\n        _currentPeriod.donorAmounts[_donorAddress] += _amount;\n    }\n\n    /**\n     * @notice Checks if current reward period has been initialized\n     *\n     * @return bool true if current reward period has been initialized\n     */\n    function isCurrentRewardPeriodInitialized() internal view returns (bool) {\n        return rewardPeriods[rewardPeriodCount].endBlock >= block.number;\n    }\n\n    function _calculateDonorIntervalAmounts(\n        address _donorAddress,\n        uint256 _startPeriod,\n        uint256 _endPeriod\n    ) internal view returns (uint256, uint256) {\n        uint256 _donorAmount;\n        uint256 _totalAmount;\n        uint256 _index;\n        for (_index = _startPeriod; _index <= _endPeriod; _index++) {\n            RewardPeriod storage _rewardPeriod = rewardPeriods[_index];\n            _donorAmount += _rewardPeriod.donorAmounts[_donorAddress];\n            _totalAmount += _rewardPeriod.donationsAmount;\n        }\n        return (_donorAmount, _totalAmount);\n    }\n\n    function _getLastClaimablePeriod() internal returns (uint256) {\n        initializeRewardPeriods();\n\n        return rewardPeriodCount > claimDelay + 1 ? rewardPeriodCount - 1 - claimDelay : 0;\n    }\n\n    /**\n     * @notice Computes the rewards\n     */\n    function _computeRewardsByPeriodNumber(address _donorAddress, uint256 _lastPeriodNumber)\n        internal\n        returns (uint256)\n    {\n        Donor storage _donor = donors[_donorAddress];\n        uint256 _claimAmount;\n        uint256 _lastDonorStakeAmount;\n\n        (_claimAmount, _lastDonorStakeAmount) = _calculateRewardByPeriodNumber(\n            _donorAddress,\n            _lastPeriodNumber\n        );\n\n        if (_donor.lastClaimPeriod < _lastPeriodNumber) {\n            _donor.lastClaimPeriod = _lastPeriodNumber;\n        }\n\n        rewardPeriods[_lastPeriodNumber].donorStakeAmounts[_donorAddress] = _lastDonorStakeAmount;\n\n        if (_claimAmount == 0) {\n            return _claimAmount;\n        }\n\n        if (_claimAmount > PACT.balanceOf(address(this))) {\n            _claimAmount = PACT.balanceOf(address(this));\n        }\n\n        return _claimAmount;\n    }\n\n    /**\n     * @notice Calculates the reward for a donor starting with his last reward period claimed\n     *\n     * @param _donorAddress address of the donor\n     * @param _lastPeriodNumber last reward period number to be computed\n     * @return _claimAmount uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\n     * @return _lastDonorStakeAmount uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\n     */\n    function _calculateRewardByPeriodNumber(address _donorAddress, uint256 _lastPeriodNumber)\n        internal\n        view\n        returns (uint256 _claimAmount, uint256 _lastDonorStakeAmount)\n    {\n        Donor storage _donor = donors[_donorAddress];\n\n        // _index is the last reward period number for which the donor claimed his reward\n        uint256 _index = _donor.lastClaimPeriod + 1;\n\n        // this is only used for the transition from V2 to V3\n        // we have to be sure a user is not able to claim for a epoch that he's claimed\n        //      so, if the _donor.lastClaimPeriod hasn't been set yet,\n        //      we will start from _donor.rewardPeriods[_donor.lastClaim]\n        if (_index == 1) {\n            _index = _donor.rewardPeriods[_donor.lastClaim] + 1;\n        }\n\n        uint256 _donorAmount;\n        uint256 _totalAmount;\n        uint256 _rewardAmount;\n        uint256 _stakesAmount;\n        uint256 _stakingDonationRatio;\n\n        //first time _previousRewardPeriod must be rewardPeriods[0] in order to have:\n        //_currentRewardPeriod.againstPeriods = _currentRewardPeriod.againstPeriods - _previousRewardPeriod.againstPeriods\n        RewardPeriod storage _previousRewardPeriod = rewardPeriods[0];\n        RewardPeriod storage _currentRewardPeriod = rewardPeriods[_index];\n        RewardPeriod storage _expiredRewardPeriod = rewardPeriods[0];\n\n        //we save the stake amount of a donor at the end of each claim,\n        //so rewardPeriods[_index - 1].donorStakeAmounts[_donorAddress] is the amount staked by the donor at his last claim\n        _lastDonorStakeAmount = rewardPeriods[_index - 1].donorStakeAmounts[_donorAddress];\n\n        while (_index <= _lastPeriodNumber) {\n            if (_currentRewardPeriod.startBlock > 0) {\n                // this case is used to calculate the reward for periods that have been initialized yet\n\n                if (_currentRewardPeriod.againstPeriods == 0) {\n                    _donorAmount = _currentRewardPeriod.donorAmounts[_donorAddress];\n                    _totalAmount = _currentRewardPeriod.donationsAmount;\n                } else if (\n                    _previousRewardPeriod.againstPeriods == _currentRewardPeriod.againstPeriods\n                ) {\n                    if (_index > _currentRewardPeriod.againstPeriods + 1) {\n                        _expiredRewardPeriod = rewardPeriods[\n                            _index - 1 - _currentRewardPeriod.againstPeriods\n                        ];\n                        _donorAmount -= _expiredRewardPeriod.donorAmounts[_donorAddress];\n                        _totalAmount -= _expiredRewardPeriod.donationsAmount;\n                    }\n\n                    _donorAmount += _currentRewardPeriod.donorAmounts[_donorAddress];\n                    _totalAmount += _currentRewardPeriod.donationsAmount;\n                } else {\n                    if (_index > _currentRewardPeriod.againstPeriods) {\n                        (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\n                            _donorAddress,\n                            _index - _currentRewardPeriod.againstPeriods,\n                            _index\n                        );\n                    } else {\n                        (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\n                            _donorAddress,\n                            0,\n                            _index\n                        );\n                    }\n                }\n\n                _rewardAmount = _currentRewardPeriod.rewardAmount;\n                _stakesAmount = _currentRewardPeriod.stakesAmount;\n                _stakingDonationRatio = _currentRewardPeriod.stakingDonationRatio > 0\n                    ? _currentRewardPeriod.stakingDonationRatio\n                    : 1;\n            } else {\n                // this case is used to calculate the reward for periods that have not been initialized yet\n                // E.g. calculateClaimableRewardsByPeriodNumber & calculateClaimableRewards\n                // this step can be reached only after calculating the reward for periods that have been initialized\n\n                if (_index > againstPeriods + 1) {\n                    _expiredRewardPeriod = rewardPeriods[_index - 1 - againstPeriods];\n\n                    //we already know that _donorAmount >= _expiredRewardPeriod.donorAmounts[_donorAddress]\n                    //because _donorAmount is a sum of some donorAmounts, including _expiredRewardPeriod.donorAmounts[_donorAddress]\n                    _donorAmount -= _expiredRewardPeriod.donorAmounts[_donorAddress];\n                    //we already know that _totalAmount >= _expiredRewardPeriod.donationsAmount\n                    //because _totalAmount is a sum of some donationsAmounts, including _expiredRewardPeriod.donationsAmount\n                    _totalAmount -= _expiredRewardPeriod.donationsAmount;\n                }\n\n                _donorAmount += _currentRewardPeriod.donorAmounts[_donorAddress];\n                _totalAmount += _currentRewardPeriod.donationsAmount;\n                _rewardAmount = (_rewardAmount * decayNumerator) / decayDenominator;\n            }\n\n            if (_currentRewardPeriod.hasSetStakeAmount[_donorAddress]) {\n                _lastDonorStakeAmount = _currentRewardPeriod.donorStakeAmounts[_donorAddress];\n            }\n\n            if (_donorAmount + _lastDonorStakeAmount > 0) {\n                _claimAmount +=\n                    (_rewardAmount *\n                        (_donorAmount * _stakingDonationRatio + _lastDonorStakeAmount)) /\n                    (_totalAmount * _stakingDonationRatio + _stakesAmount);\n            }\n\n            _index++;\n\n            _previousRewardPeriod = _currentRewardPeriod;\n            _currentRewardPeriod = rewardPeriods[_index];\n        }\n\n        return (_claimAmount, _lastDonorStakeAmount);\n    }\n\n    /**\n     * @notice Initializes the first reward period\n     *\n     * @param _startingBlock first block\n     * @param _firstRewardPerBlock initial reward per block\n     */\n    function initFirstPeriod(uint256 _startingBlock, uint256 _firstRewardPerBlock) internal {\n        RewardPeriod storage _firstPeriod = rewardPeriods[1];\n        _firstPeriod.startBlock = _startingBlock;\n        _firstPeriod.endBlock = _startingBlock + rewardPeriodSize - 1;\n        _firstPeriod.rewardPerBlock = _firstRewardPerBlock;\n        _firstPeriod.rewardAmount = _firstRewardPerBlock * rewardPeriodSize;\n    }\n\n    /**\n     * @notice Checks if there is any donation or stake between _startPeriod and _endPeriod\n     *\n     * @return bool true if there is any donation or stake\n     */\n    function hasDonationOrStake(uint256 _startPeriod, uint256 _endPeriod)\n        internal\n        view\n        returns (bool)\n    {\n        while (_startPeriod <= _endPeriod) {\n            if (\n                rewardPeriods[_startPeriod].donationsAmount +\n                    rewardPeriods[_startPeriod].stakesAmount >\n                0\n            ) {\n                return true;\n            }\n            _startPeriod++;\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/donationMiner/interfaces/DonationMinerStorageV4.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./DonationMinerStorageV3.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV4. Create a new\n * contract which implements DonationMinerStorageV4 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract DonationMinerStorageV4 is DonationMinerStorageV3 {\n    IStaking public override staking;\n    //ratio between 1 cUSD donated and 1 PACT staked\n    uint256 public override stakingDonationRatio;\n}\n"
    },
    "contracts/donationMiner/interfaces/DonationMinerStorageV3.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./DonationMinerStorageV2.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV3. Create a new\n * contract which implements DonationMinerStorageV3 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract DonationMinerStorageV3 is DonationMinerStorageV2 {\n    uint256 public override againstPeriods;\n}\n"
    },
    "contracts/donationMiner/interfaces/DonationMinerStorageV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./DonationMinerStorageV1.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV2. Create a new\n * contract which implements DonationMinerStorageV2 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract DonationMinerStorageV2 is DonationMinerStorageV1 {\n    uint256 public override claimDelay;\n}\n"
    },
    "contracts/donationMiner/interfaces/DonationMinerStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./IDonationMiner.sol\";\n\n/**\n * @title Storage for DonationMiner\n * @notice For future upgrades, do not change DonationMinerStorageV1. Create a new\n * contract which implements DonationMinerStorageV1 and following the naming convention\n * DonationMinerStorageVX.\n */\nabstract contract DonationMinerStorageV1 is IDonationMiner {\n    IERC20 public override cUSD;\n    IERC20 public override PACT;\n    ITreasury public override treasury;\n    uint256 public override rewardPeriodSize;\n    uint256 public override donationCount;\n    uint256 public override rewardPeriodCount;\n    uint256 public override decayNumerator;\n    uint256 public override decayDenominator;\n\n    mapping(uint256 => Donation) public override donations;\n    mapping(uint256 => RewardPeriod) public override rewardPeriods;\n    mapping(address => Donor) public override donors;\n}\n"
    },
    "contracts/governor/PACTTimelock.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract PACTTimelock {\n    using SafeMath for uint256;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant MINIMUM_DELAY = 1 hours;\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint256 public delay;\n\n    mapping(bytes32 => bool) public queuedTransactions;\n\n    constructor(address _admin, uint256 _delay) {\n        require(_delay >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(\n            _delay <= MAXIMUM_DELAY,\n            \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n        );\n\n        admin = _admin;\n        delay = _delay;\n    }\n\n    receive() external payable {}\n\n    function setDelay(uint256 _delay) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(_delay >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(\n            _delay <= MAXIMUM_DELAY,\n            \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n        );\n        delay = _delay;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(\n            msg.sender == pendingAdmin,\n            \"Timelock::acceptAdmin: Call must come from pendingAdmin.\"\n        );\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address _pendingAdmin) public {\n        require(\n            msg.sender == address(this),\n            \"Timelock::setPendingAdmin: Call must come from Timelock.\"\n        );\n        pendingAdmin = _pendingAdmin;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(\n            _eta >= getBlockTimestamp().add(delay),\n            \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\n        );\n\n        bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        queuedTransactions[_txHash] = true;\n\n        emit QueueTransaction(_txHash, _target, _value, _signature, _data, _eta);\n        return _txHash;\n    }\n\n    function cancelTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        queuedTransactions[_txHash] = false;\n\n        emit CancelTransaction(_txHash, _target, _value, _signature, _data, _eta);\n    }\n\n    function executeTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        require(\n            queuedTransactions[_txHash],\n            \"Timelock::executeTransaction: Transaction hasn't been queued.\"\n        );\n        require(\n            getBlockTimestamp() >= _eta,\n            \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\n        );\n        require(\n            getBlockTimestamp() <= _eta.add(GRACE_PERIOD),\n            \"Timelock::executeTransaction: Transaction is stale.\"\n        );\n\n        queuedTransactions[_txHash] = false;\n\n        bytes memory _callData;\n\n        if (bytes(_signature).length == 0) {\n            _callData = _data;\n        } else {\n            _callData = abi.encodePacked(bytes4(keccak256(bytes(_signature))), _data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool _success, bytes memory _returnData) = _target.call{value: _value}(_callData);\n        require(_success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(_txHash, _target, _value, _signature, _data, _eta);\n\n        return _returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint256) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/mocks/governor/PACTDelegateOld.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../governor/interfaces/PACTDelegateStorageV1.sol\";\nimport \"../../governor/interfaces/PACTEvents.sol\";\n\ncontract PACTDelegateOld is\n    PACTEvents,\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PACTDelegateStorageV1\n{\n    using SafeERC20 for IERC20;\n\n    /// @notice The name of this contract\n    string public constant NAME = \"PACT\";\n\n    /// @notice The minimum setable proposal threshold\n    uint256 public constant MIN_PROPOSAL_THRESHOLD = 100_000_000e18; // 100,000,000 Tokens\n\n    /// @notice The maximum setable proposal threshold\n    uint256 public constant MAX_PROPOSAL_THRESHOLD = 500_000_000e18; // 500,000,000 Tokens\n\n    /// @notice The minimum setable voting period\n    uint256 public constant MIN_VOTING_PERIOD = 720; // About 1 hour\n\n    /// @notice The max setable voting period\n    uint256 public constant MAX_VOTING_PERIOD = 241920; // About 2 weeks\n\n    /// @notice The min setable voting delay\n    uint256 public constant MIN_VOTING_DELAY = 1;\n\n    /// @notice The max setable voting delay\n    uint256 public constant MAX_VOTING_DELAY = 120960; // About 1 week\n\n    /// @notice The maximum number of actions that can be included in a proposal\n    uint256 public constant PROPOSAL_MAX_OPERATIONS = 10; // 10 actions\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n\n    /**\n     * @notice Used to initialize the contract during delegator contructor\n     * @param _timelock The address of the Timelock\n     * @param _token The address of the voting token\n     * @param _releaseToken The address of the \"Release\" voting token. If none, specify the zero address.\n     * @param _votingPeriod The initial voting period\n     * @param _votingDelay The initial voting delay\n     * @param _proposalThreshold The initial proposal threshold\n     * @param _quorumVotes The initial quorum votes\n     */\n    function initialize(\n        address _timelock,\n        address _token,\n        address _releaseToken,\n        uint256 _votingPeriod,\n        uint256 _votingDelay,\n        uint256 _proposalThreshold,\n        uint256 _quorumVotes\n    ) public initializer {\n        require(\n            TimelockInterface(_timelock).admin() == address(this),\n            \"PACT::initialize: timelock admin is not assigned to PACTDelegate\"\n        );\n        require(\n            _votingPeriod >= MIN_VOTING_PERIOD && _votingPeriod <= MAX_VOTING_PERIOD,\n            \"PACT::initialize: invalid voting period\"\n        );\n        require(\n            _votingDelay >= MIN_VOTING_DELAY && _votingDelay <= MAX_VOTING_DELAY,\n            \"PACT::initialize: invalid voting delay\"\n        );\n        require(\n            _proposalThreshold >= MIN_PROPOSAL_THRESHOLD &&\n                _proposalThreshold <= MAX_PROPOSAL_THRESHOLD,\n            \"PACT::initialize: invalid proposal threshold\"\n        );\n        require(_quorumVotes >= _proposalThreshold, \"PACT::initialize: invalid quorum votes\");\n        timelock = TimelockInterface(_timelock);\n        require(\n            timelock.admin() == address(this),\n            \"PACT::initialize: timelock admin is not assigned to PACTDelegate\"\n        );\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        token = IHasVotes(_token);\n        releaseToken = IHasVotes(_releaseToken);\n        votingPeriod = _votingPeriod;\n        votingDelay = _votingDelay;\n        proposalThreshold = _proposalThreshold;\n        quorumVotes = _quorumVotes;\n\n        // Create dummy proposal\n        Proposal memory _dummyProposal = Proposal({\n            id: proposalCount,\n            proposer: address(this),\n            eta: 0,\n            startBlock: 0,\n            endBlock: 0,\n            forVotes: 0,\n            againstVotes: 0,\n            abstainVotes: 0,\n            canceled: true,\n            executed: false\n        });\n        proposalCount++;\n\n        proposals[_dummyProposal.id] = _dummyProposal;\n        latestProposalIds[_dummyProposal.proposer] = _dummyProposal.id;\n\n        emit ProposalCreated(\n            _dummyProposal.id,\n            address(this),\n            proposalTargets[_dummyProposal.id],\n            proposalValues[_dummyProposal.id],\n            proposalSignatures[_dummyProposal.id],\n            proposalCalldatas[_dummyProposal.id],\n            0,\n            0,\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold.\n     * @param _targets Target addresses for proposal calls.\n     * @param _values Eth values for proposal calls.\n     * @param _signatures Function signatures for proposal calls.\n     * @param _calldatas Calldatas for proposal calls.\n     * @param _description String description of the proposal.\n     * @return Proposal id of new proposal.\n     */\n    function propose(\n        address[] memory _targets,\n        uint256[] memory _values,\n        string[] memory _signatures,\n        bytes[] memory _calldatas,\n        string memory _description\n    ) public returns (uint256) {\n        require(\n            getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold,\n            \"PACT::propose: proposer votes below proposal threshold\"\n        );\n        require(\n            _targets.length == _values.length &&\n                _targets.length == _signatures.length &&\n                _targets.length == _calldatas.length,\n            \"PACT::propose: proposal function information arity mismatch\"\n        );\n        require(_targets.length != 0, \"PACT::propose: must provide actions\");\n        require(_targets.length <= PROPOSAL_MAX_OPERATIONS, \"PACT::propose: too many actions\");\n\n        uint256 _latestProposalId = latestProposalIds[msg.sender];\n        if (_latestProposalId != 0) {\n            ProposalState proposersLatestProposalState = state(_latestProposalId);\n            require(\n                proposersLatestProposalState != ProposalState.Active,\n                \"PACT::propose: one live proposal per proposer, found an already active proposal\"\n            );\n            require(\n                proposersLatestProposalState != ProposalState.Pending,\n                \"PACT::propose: one live proposal per proposer, found an already pending proposal\"\n            );\n        }\n\n        uint256 _startBlock = add256(block.number, votingDelay);\n        uint256 _endBlock = add256(_startBlock, votingPeriod);\n\n        Proposal memory _newProposal = Proposal({\n            id: proposalCount,\n            proposer: msg.sender,\n            eta: 0,\n            startBlock: _startBlock,\n            endBlock: _endBlock,\n            forVotes: 0,\n            againstVotes: 0,\n            abstainVotes: 0,\n            canceled: false,\n            executed: false\n        });\n        proposalCount++;\n\n        proposals[_newProposal.id] = _newProposal;\n        proposalTargets[_newProposal.id] = _targets;\n        proposalValues[_newProposal.id] = _values;\n        proposalSignatures[_newProposal.id] = _signatures;\n        proposalCalldatas[_newProposal.id] = _calldatas;\n        latestProposalIds[_newProposal.proposer] = _newProposal.id;\n\n        emit ProposalCreated(\n            _newProposal.id,\n            msg.sender,\n            _targets,\n            _values,\n            _signatures,\n            _calldatas,\n            _startBlock,\n            _endBlock,\n            _description\n        );\n        return _newProposal.id;\n    }\n\n    /**\n     * @notice Queues a proposal of state succeeded\n     * @param _proposalId The id of the proposal to queue\n     */\n    function queue(uint256 _proposalId) external {\n        require(\n            state(_proposalId) == ProposalState.Succeeded,\n            \"PACT::queue: proposal can only be queued if it is succeeded\"\n        );\n        Proposal storage _proposal = proposals[_proposalId];\n        uint256 _eta = add256(block.timestamp, timelock.delay());\n        for (uint256 i = 0; i < proposalTargets[_proposalId].length; i++) {\n            queueOrRevertInternal(\n                proposalTargets[_proposalId][i],\n                proposalValues[_proposalId][i],\n                proposalSignatures[_proposalId][i],\n                proposalCalldatas[_proposalId][i],\n                _eta\n            );\n        }\n        _proposal.eta = _eta;\n        emit ProposalQueued(_proposalId, _eta);\n    }\n\n    function queueOrRevertInternal(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) internal {\n        require(\n            !timelock.queuedTransactions(\n                keccak256(abi.encode(_target, _value, _signature, _data, _eta))\n            ),\n            \"PACT::queueOrRevertInternal: identical proposal action already queued at eta\"\n        );\n        timelock.queueTransaction(_target, _value, _signature, _data, _eta);\n    }\n\n    /**\n     * @notice Executes a queued proposal if eta has passed\n     * @param _proposalId The id of the proposal to execute\n     */\n    function execute(uint256 _proposalId) external payable {\n        require(\n            state(_proposalId) == ProposalState.Queued,\n            \"PACT::execute: proposal can only be executed if it is queued\"\n        );\n        Proposal storage _proposal = proposals[_proposalId];\n        _proposal.executed = true;\n        for (uint256 i = 0; i < proposalTargets[_proposalId].length; i++) {\n            timelock.executeTransaction{value: proposalValues[_proposalId][i]}(\n                proposalTargets[_proposalId][i],\n                proposalValues[_proposalId][i],\n                proposalSignatures[_proposalId][i],\n                proposalCalldatas[_proposalId][i],\n                _proposal.eta\n            );\n        }\n        emit ProposalExecuted(_proposalId);\n    }\n\n    /**\n     * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\n     * @param _proposalId The id of the proposal to cancel\n     */\n    function cancel(uint256 _proposalId) external {\n        require(\n            state(_proposalId) != ProposalState.Executed,\n            \"PACT::cancel: cannot cancel executed proposal\"\n        );\n\n        Proposal storage _proposal = proposals[_proposalId];\n        require(\n            msg.sender == _proposal.proposer ||\n                getPriorVotes(_proposal.proposer, sub256(block.number, 1)) < proposalThreshold,\n            \"PACT::cancel: proposer above threshold\"\n        );\n\n        _proposal.canceled = true;\n        for (uint256 i = 0; i < proposalTargets[_proposalId].length; i++) {\n            timelock.cancelTransaction(\n                proposalTargets[_proposalId][i],\n                proposalValues[_proposalId][i],\n                proposalSignatures[_proposalId][i],\n                proposalCalldatas[_proposalId][i],\n                _proposal.eta\n            );\n        }\n\n        emit ProposalCanceled(_proposalId);\n    }\n\n    /**\n     * @notice Gets actions of a proposal.\n     * @param _proposalId Proposal to query.\n     * @return targets Target addresses for proposal calls.\n     * @return values Eth values for proposal calls.\n     * @return signatures Function signatures for proposal calls.\n     * @return calldatas Calldatas for proposal calls.\n     */\n    function getActions(uint256 _proposalId)\n        external\n        view\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        )\n    {\n        return (\n            proposalTargets[_proposalId],\n            proposalValues[_proposalId],\n            proposalSignatures[_proposalId],\n            proposalCalldatas[_proposalId]\n        );\n    }\n\n    /**\n     * @notice Gets the receipt for a voter on a given proposal\n     * @param _proposalId the id of proposal\n     * @param _voter The address of the voter\n     * @return The voting receipt\n     */\n    function getReceipt(uint256 _proposalId, address _voter)\n        external\n        view\n        returns (Receipt memory)\n    {\n        return proposalReceipts[_proposalId][_voter];\n    }\n\n    /**\n     * @notice Gets the state of a proposal\n     * @param _proposalId The id of the proposal\n     * @return Proposal state\n     */\n    function state(uint256 _proposalId) public view returns (ProposalState) {\n        require(proposalCount > _proposalId, \"PACT::state: invalid proposal id\");\n        Proposal storage _proposal = proposals[_proposalId];\n\n        if (_proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (block.number <= _proposal.startBlock) {\n            return ProposalState.Pending;\n        } else if (block.number <= _proposal.endBlock) {\n            return ProposalState.Active;\n        } else if (\n            _proposal.forVotes <= _proposal.againstVotes || _proposal.forVotes < quorumVotes\n        ) {\n            return ProposalState.Defeated;\n        } else if (_proposal.eta == 0) {\n            return ProposalState.Succeeded;\n        } else if (_proposal.executed) {\n            return ProposalState.Executed;\n        } else if (block.timestamp >= add256(_proposal.eta, timelock.GRACE_PERIOD())) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @notice Cast a vote for a proposal\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     */\n    function castVote(uint256 _proposalId, uint8 _support) external {\n        emit VoteCast(\n            msg.sender,\n            _proposalId,\n            _support,\n            castVoteInternal(msg.sender, _proposalId, _support),\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Cast a vote for a proposal with a reason\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     * @param _reason The reason given for the vote by the voter\n     */\n    function castVoteWithReason(\n        uint256 _proposalId,\n        uint8 _support,\n        string calldata _reason\n    ) external {\n        emit VoteCast(\n            msg.sender,\n            _proposalId,\n            _support,\n            castVoteInternal(msg.sender, _proposalId, _support),\n            _reason\n        );\n    }\n\n    /**\n     * @notice Cast a vote for a proposal by signature\n     * @dev External function that accepts EIP-712 signatures for voting on proposals.\n     */\n    function castVoteBySig(\n        uint256 _proposalId,\n        uint8 _support,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        require(_v == 27 || _v == 28, \"PACT::castVoteBySig: invalid v value\");\n        require(\n            _s < 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1,\n            \"PACT::castVoteBySig: invalid s value\"\n        );\n        bytes32 _domainSeparator = keccak256(\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(NAME)), getChainIdInternal(), address(this))\n        );\n        bytes32 _structHash = keccak256(abi.encode(BALLOT_TYPEHASH, _proposalId, _support));\n        bytes32 _digest = keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparator, _structHash));\n        address _signatory = ecrecover(_digest, _v, _r, _s);\n        require(_signatory != address(0), \"PACT::castVoteBySig: invalid signature\");\n        emit VoteCast(\n            _signatory,\n            _proposalId,\n            _support,\n            castVoteInternal(_signatory, _proposalId, _support),\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Internal function that caries out voting logic\n     * @param _voter The voter that is casting their vote\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     * @return The number of votes cast\n     */\n    function castVoteInternal(\n        address _voter,\n        uint256 _proposalId,\n        uint8 _support\n    ) internal returns (uint96) {\n        require(\n            state(_proposalId) == ProposalState.Active,\n            \"PACT::castVoteInternal: voting is closed\"\n        );\n        require(_support <= 2, \"PACT::castVoteInternal: invalid vote type\");\n        Proposal storage _proposal = proposals[_proposalId];\n        Receipt storage _receipt = proposalReceipts[_proposalId][_voter];\n        require(_receipt.hasVoted == false, \"PACT::castVoteInternal: voter already voted\");\n        uint96 _votes = getPriorVotes(_voter, _proposal.startBlock);\n\n        if (_support == 0) {\n            _proposal.againstVotes = add256(_proposal.againstVotes, _votes);\n        } else if (_support == 1) {\n            _proposal.forVotes = add256(_proposal.forVotes, _votes);\n        } else if (_support == 2) {\n            _proposal.abstainVotes = add256(_proposal.abstainVotes, _votes);\n        }\n\n        _receipt.hasVoted = true;\n        _receipt.support = _support;\n        _receipt.votes = _votes;\n\n        return _votes;\n    }\n\n    /**\n     * @notice Owner function for setting the voting delay\n     * @param _newVotingDelay new voting delay, in blocks\n     */\n    function _setVotingDelay(uint256 _newVotingDelay) external virtual onlyOwner {\n        require(\n            _newVotingDelay >= MIN_VOTING_DELAY && _newVotingDelay <= MAX_VOTING_DELAY,\n            \"PACT::_setVotingDelay: invalid voting delay\"\n        );\n        uint256 _oldVotingDelay = votingDelay;\n        votingDelay = _newVotingDelay;\n\n        emit VotingDelaySet(_oldVotingDelay, _newVotingDelay);\n    }\n\n    /**\n     * @notice Owner function for setting the quorum votes\n     * @param _newQuorumVotes new quorum votes\n     */\n    function _setQuorumVotes(uint256 _newQuorumVotes) external onlyOwner {\n        require(\n            _newQuorumVotes >= proposalThreshold,\n            \"PACT::_setQuorumVotes: invalid quorum votes\"\n        );\n\n        uint256 _oldQuorumVotes = votingDelay;\n        quorumVotes = _newQuorumVotes;\n\n        emit QuorumVotesSet(_oldQuorumVotes, _newQuorumVotes);\n    }\n\n    /**\n     * @notice Owner function for setting the voting period\n     * @param _newVotingPeriod new voting period, in blocks\n     */\n    function _setVotingPeriod(uint256 _newVotingPeriod) external virtual onlyOwner {\n        require(\n            _newVotingPeriod >= MIN_VOTING_PERIOD && _newVotingPeriod <= MAX_VOTING_PERIOD,\n            \"PACT::_setVotingPeriod: invalid voting period\"\n        );\n        uint256 _oldVotingPeriod = votingPeriod;\n        votingPeriod = _newVotingPeriod;\n\n        emit VotingPeriodSet(_oldVotingPeriod, _newVotingPeriod);\n    }\n\n    /**\n     * @notice Owner function for setting the proposal threshold\n     * @dev _newProposalThreshold must be greater than the hardcoded min\n     * @param _newProposalThreshold new proposal threshold\n     */\n    function _setProposalThreshold(uint256 _newProposalThreshold) external onlyOwner {\n        require(\n            _newProposalThreshold >= MIN_PROPOSAL_THRESHOLD &&\n                _newProposalThreshold <= MAX_PROPOSAL_THRESHOLD,\n            \"PACT::_setProposalThreshold: invalid proposal threshold\"\n        );\n        uint256 _oldProposalThreshold = proposalThreshold;\n        proposalThreshold = _newProposalThreshold;\n\n        emit ProposalThresholdSet(_oldProposalThreshold, _newProposalThreshold);\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    function add256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 _c = _a + _b;\n        require(_c >= _a, \"addition overflow\");\n        return _c;\n    }\n\n    function sub256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, \"subtraction underflow\");\n        return _a - _b;\n    }\n\n    function getChainIdInternal() internal view returns (uint256) {\n        uint256 _chainId;\n        assembly {\n            _chainId := chainid()\n        }\n        return _chainId;\n    }\n\n    function getPriorVotes(address _voter, uint256 _beforeBlock) internal view returns (uint96) {\n        if (address(releaseToken) == address(0)) {\n            return token.getPriorVotes(_voter, _beforeBlock);\n        }\n        return\n            add96(\n                token.getPriorVotes(_voter, _beforeBlock),\n                releaseToken.getPriorVotes(_voter, _beforeBlock),\n                \"getPriorVotes overflow\"\n            );\n    }\n\n    function add96(\n        uint96 _a,\n        uint96 _b,\n        string memory _errorMessage\n    ) internal pure returns (uint96) {\n        uint96 _c = _a + _b;\n        require(_c >= _a, _errorMessage);\n        return _c;\n    }\n}\n"
    },
    "contracts/governor/interfaces/PACTDelegateStorageV1.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@ubeswap/governance/contracts/interfaces/IHasVotes.sol\";\nimport \"./TimelockInterface.sol\";\n\n/**\n * @title Storage for Governor Delegate\n * @notice For future upgrades, do not change PACTDelegateStorageV1. Create a new\n * contract which implements PACTDelegateStorageV1 and following the naming convention\n * PACTDelegateStorageVX.\n */\ncontract PACTDelegateStorageV1 {\n    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\n    uint256 public votingDelay;\n\n    /// @notice The duration of voting on a proposal, in blocks\n    uint256 public votingPeriod;\n\n    /// @notice The number of votes required in order for a voter to become a proposer\n    uint256 public proposalThreshold;\n\n    /// @notice The total number of proposals\n    uint256 public proposalCount;\n\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n    uint256 public quorumVotes;\n\n    /// @notice The address of the Governance Timelock\n    TimelockInterface public timelock;\n\n    /// @notice The address of the governance token\n    IHasVotes public token;\n\n    /// @notice The address of the \"Release\" governance token\n    IHasVotes public releaseToken;\n\n    /// @notice The official record of all proposals ever proposed\n    mapping(uint256 => Proposal) public proposals;\n    /// @notice The official each proposal's targets:\n    /// An ordered list of target addresses for calls to be made\n    mapping(uint256 => address[]) public proposalTargets;\n    /// @notice The official each proposal's values:\n    /// An ordered list of values (i.e. msg.value) to be passed to the calls to be made\n    mapping(uint256 => uint256[]) public proposalValues;\n    /// @notice The official each proposal's signatures:\n    /// An ordered list of function signatures to be called\n    mapping(uint256 => string[]) public proposalSignatures;\n    /// @notice The official each proposal's calldatas:\n    /// An ordered list of calldata to be passed to each call\n    mapping(uint256 => bytes[]) public proposalCalldatas;\n    /// @notice The official each proposal's receipts:\n    /// Receipts of ballots for the entire set of voters\n    mapping(uint256 => mapping(address => Receipt)) public proposalReceipts;\n\n    /// @notice The latest proposal for each proposer\n    mapping(address => uint256) public latestProposalIds;\n\n    struct Proposal {\n        // Unique id for looking up a proposal\n        uint256 id;\n        // Creator of the proposal\n        address proposer;\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\n        uint256 eta;\n        // The block at which voting begins: holders must delegate their votes prior to this block\n        uint256 startBlock;\n        // The block at which voting ends: votes must be cast prior to this block\n        uint256 endBlock;\n        // Current number of votes in favor of this proposal\n        uint256 forVotes;\n        // Current number of votes in opposition to this proposal\n        uint256 againstVotes;\n        // Current number of votes for abstaining for this proposal\n        uint256 abstainVotes;\n        // Flag marking whether the proposal has been canceled\n        bool canceled;\n        // Flag marking whether the proposal has been executed\n        bool executed;\n    }\n\n    /// @notice Ballot receipt record for a voter\n    struct Receipt {\n        // Whether or not a vote has been cast\n        bool hasVoted;\n        // Whether or not the voter supports the proposal or abstains\n        uint8 support;\n        // The number of votes the voter had, which were cast\n        uint96 votes;\n    }\n\n    /// @notice Possible states that a proposal may be in\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n}\n"
    },
    "contracts/governor/interfaces/PACTEvents.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ncontract PACTEvents {\n    /// @notice An event emitted when a new proposal is created\n    event ProposalCreated(\n        uint256 id,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 startBlock,\n        uint256 endBlock,\n        string description\n    );\n\n    /// @notice An event emitted when a vote has been cast on a proposal\n    /// @param voter The address which casted a vote\n    /// @param proposalId The proposal id which was voted on\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\n    /// @param votes Number of votes which were cast by the voter\n    /// @param reason The reason given for the vote by the voter\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason);\n\n    /// @notice An event emitted when a proposal has been canceled\n    event ProposalCanceled(uint256 id);\n\n    /// @notice An event emitted when a proposal has been queued in the Timelock\n    event ProposalQueued(uint256 id, uint256 eta);\n\n    /// @notice An event emitted when a proposal has been executed in the Timelock\n    event ProposalExecuted(uint256 id);\n\n    /// @notice An event emitted when the voting delay is set\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\n\n    /// @notice An event emitted when the voting period is set\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\n\n    /// @notice Emitted when implementation is changed\n    event NewImplementation(address oldImplementation, address newImplementation);\n\n    /// @notice Emitted when proposal threshold is set\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\n\n    /// @notice Emitted when release token is set\n    event ReleaseTokenSet(address oldReleaseToken, address newReleaseToken);\n\n    /// @notice An event emitted when the quorum votes is set\n    event QuorumVotesSet(uint256 oldQuorumVotes, uint256 newQuorumVotes);\n\n    /// @notice Emitted when pendingAdmin is changed\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n}\n"
    },
    "contracts/governor/interfaces/TimelockInterface.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ninterface TimelockInterface {\n  function admin() external view returns (address);\n\n  function delay() external view returns (uint256);\n\n  function GRACE_PERIOD() external view returns (uint256);\n\n  function acceptAdmin() external;\n\n  function queuedTransactions(bytes32 _hash) external view returns (bool);\n\n  function queueTransaction(\n    address target,\n    uint256 value,\n    string calldata signature,\n    bytes calldata data,\n    uint256 eta\n  ) external returns (bytes32);\n\n  function cancelTransaction(\n    address _target,\n    uint256 _value,\n    string calldata _signature,\n    bytes calldata _data,\n    uint256 _eta\n  ) external;\n\n  function executeTransaction(\n    address _target,\n    uint256 _value,\n    string calldata _signature,\n    bytes calldata _data,\n    uint256 _eta\n  ) external payable returns (bytes memory);\n}\n"
    },
    "contracts/governor/PACTDelegate.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/PACTDelegateStorageV1.sol\";\nimport \"./interfaces/PACTEvents.sol\";\n\ncontract PACTDelegate is\n    PACTEvents,\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PACTDelegateStorageV1\n{\n    using SafeERC20 for IERC20;\n\n    /// @notice The name of this contract\n    string public constant NAME = \"PACT\";\n\n    /// @notice The minimum setable proposal threshold\n    uint256 public constant MIN_PROPOSAL_THRESHOLD = 100_000_000e18; // 100,000,000 Tokens\n\n    /// @notice The maximum setable proposal threshold\n    uint256 public constant MAX_PROPOSAL_THRESHOLD = 500_000_000e18; // 500,000,000 Tokens\n\n    /// @notice The minimum setable voting period\n    uint256 public constant MIN_VOTING_PERIOD = 720; // About 1 hour\n\n    /// @notice The max setable voting period\n    uint256 public constant MAX_VOTING_PERIOD = 241920; // About 2 weeks\n\n    /// @notice The min setable voting delay\n    uint256 public constant MIN_VOTING_DELAY = 1;\n\n    /// @notice The max setable voting delay\n    uint256 public constant MAX_VOTING_DELAY = 120960; // About 1 week\n\n    /// @notice The maximum number of actions that can be included in a proposal\n    uint256 public constant PROPOSAL_MAX_OPERATIONS = 10; // 10 actions\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n\n    /**\n     * @notice Used to initialize the contract during delegator constructor\n     * @param _timelock The address of the Timelock\n     * @param _token The address of the voting token\n     * @param _releaseToken The address of the \"Release\" voting token. If none, specify the zero address.\n     * @param _votingPeriod The initial voting period\n     * @param _votingDelay The initial voting delay\n     * @param _proposalThreshold The initial proposal threshold\n     * @param _quorumVotes The initial quorum votes\n     */\n    function initialize(\n        address _timelock,\n        address _token,\n        address _releaseToken,\n        uint256 _votingPeriod,\n        uint256 _votingDelay,\n        uint256 _proposalThreshold,\n        uint256 _quorumVotes\n    ) public initializer {\n        require(\n            TimelockInterface(_timelock).admin() == address(this),\n            \"PACT::initialize: timelock admin is not assigned to PACTDelegate\"\n        );\n        require(\n            _votingPeriod >= MIN_VOTING_PERIOD && _votingPeriod <= MAX_VOTING_PERIOD,\n            \"PACT::initialize: invalid voting period\"\n        );\n        require(\n            _votingDelay >= MIN_VOTING_DELAY && _votingDelay <= MAX_VOTING_DELAY,\n            \"PACT::initialize: invalid voting delay\"\n        );\n        require(\n            _proposalThreshold >= MIN_PROPOSAL_THRESHOLD &&\n                _proposalThreshold <= MAX_PROPOSAL_THRESHOLD,\n            \"PACT::initialize: invalid proposal threshold\"\n        );\n        require(_quorumVotes >= _proposalThreshold, \"PACT::initialize: invalid quorum votes\");\n        timelock = TimelockInterface(_timelock);\n        require(\n            timelock.admin() == address(this),\n            \"PACT::initialize: timelock admin is not assigned to PACTDelegate\"\n        );\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        token = IHasVotes(_token);\n        releaseToken = IHasVotes(_releaseToken);\n        votingPeriod = _votingPeriod;\n        votingDelay = _votingDelay;\n        proposalThreshold = _proposalThreshold;\n        quorumVotes = _quorumVotes;\n\n        // Create dummy proposal\n        Proposal memory _dummyProposal = Proposal({\n            id: proposalCount,\n            proposer: address(this),\n            eta: 0,\n            startBlock: 0,\n            endBlock: 0,\n            forVotes: 0,\n            againstVotes: 0,\n            abstainVotes: 0,\n            canceled: true,\n            executed: false\n        });\n        proposalCount++;\n\n        proposals[_dummyProposal.id] = _dummyProposal;\n        latestProposalIds[_dummyProposal.proposer] = _dummyProposal.id;\n\n        emit ProposalCreated(\n            _dummyProposal.id,\n            address(this),\n            proposalTargets[_dummyProposal.id],\n            proposalValues[_dummyProposal.id],\n            proposalSignatures[_dummyProposal.id],\n            proposalCalldatas[_dummyProposal.id],\n            0,\n            0,\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold.\n     * @param _targets Target addresses for proposal calls.\n     * @param _values Eth values for proposal calls.\n     * @param _signatures Function signatures for proposal calls.\n     * @param _calldatas Calldatas for proposal calls.\n     * @param _description String description of the proposal.\n     * @return Proposal id of new proposal.\n     */\n    function propose(\n        address[] memory _targets,\n        uint256[] memory _values,\n        string[] memory _signatures,\n        bytes[] memory _calldatas,\n        string memory _description\n    ) public returns (uint256) {\n        require(\n            getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold,\n            \"PACT::propose: proposer votes below proposal threshold\"\n        );\n        require(\n            _targets.length == _values.length &&\n                _targets.length == _signatures.length &&\n                _targets.length == _calldatas.length,\n            \"PACT::propose: proposal function information arity mismatch\"\n        );\n        require(_targets.length != 0, \"PACT::propose: must provide actions\");\n        require(_targets.length <= PROPOSAL_MAX_OPERATIONS, \"PACT::propose: too many actions\");\n\n        uint256 _latestProposalId = latestProposalIds[msg.sender];\n        if (_latestProposalId != 0) {\n            ProposalState proposersLatestProposalState = state(_latestProposalId);\n            require(\n                proposersLatestProposalState != ProposalState.Active,\n                \"PACT::propose: one live proposal per proposer, found an already active proposal\"\n            );\n            require(\n                proposersLatestProposalState != ProposalState.Pending,\n                \"PACT::propose: one live proposal per proposer, found an already pending proposal\"\n            );\n        }\n\n        uint256 _startBlock = add256(block.number, votingDelay);\n        uint256 _endBlock = add256(_startBlock, votingPeriod);\n\n        Proposal memory _newProposal = Proposal({\n            id: proposalCount,\n            proposer: msg.sender,\n            eta: 0,\n            startBlock: _startBlock,\n            endBlock: _endBlock,\n            forVotes: 0,\n            againstVotes: 0,\n            abstainVotes: 0,\n            canceled: false,\n            executed: false\n        });\n        proposalCount++;\n\n        proposals[_newProposal.id] = _newProposal;\n        proposalTargets[_newProposal.id] = _targets;\n        proposalValues[_newProposal.id] = _values;\n        proposalSignatures[_newProposal.id] = _signatures;\n        proposalCalldatas[_newProposal.id] = _calldatas;\n        latestProposalIds[_newProposal.proposer] = _newProposal.id;\n\n        emit ProposalCreated(\n            _newProposal.id,\n            msg.sender,\n            _targets,\n            _values,\n            _signatures,\n            _calldatas,\n            _startBlock,\n            _endBlock,\n            _description\n        );\n        return _newProposal.id;\n    }\n\n    /**\n     * @notice Queues a proposal of state succeeded\n     * @param _proposalId The id of the proposal to queue\n     */\n    function queue(uint256 _proposalId) external {\n        require(\n            state(_proposalId) == ProposalState.Succeeded,\n            \"PACT::queue: proposal can only be queued if it is succeeded\"\n        );\n        Proposal storage _proposal = proposals[_proposalId];\n        uint256 _eta = add256(block.timestamp, timelock.delay());\n        for (uint256 i = 0; i < proposalTargets[_proposalId].length; i++) {\n            queueOrRevertInternal(\n                proposalTargets[_proposalId][i],\n                proposalValues[_proposalId][i],\n                proposalSignatures[_proposalId][i],\n                proposalCalldatas[_proposalId][i],\n                _eta\n            );\n        }\n        _proposal.eta = _eta;\n        emit ProposalQueued(_proposalId, _eta);\n    }\n\n    function queueOrRevertInternal(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) internal {\n        require(\n            !timelock.queuedTransactions(\n                keccak256(abi.encode(_target, _value, _signature, _data, _eta))\n            ),\n            \"PACT::queueOrRevertInternal: identical proposal action already queued at eta\"\n        );\n        timelock.queueTransaction(_target, _value, _signature, _data, _eta);\n    }\n\n    /**\n     * @notice Executes a queued proposal if eta has passed\n     * @param _proposalId The id of the proposal to execute\n     */\n    function execute(uint256 _proposalId) external payable {\n        require(\n            state(_proposalId) == ProposalState.Queued,\n            \"PACT::execute: proposal can only be executed if it is queued\"\n        );\n        Proposal storage _proposal = proposals[_proposalId];\n        _proposal.executed = true;\n        for (uint256 i = 0; i < proposalTargets[_proposalId].length; i++) {\n            timelock.executeTransaction{value: proposalValues[_proposalId][i]}(\n                proposalTargets[_proposalId][i],\n                proposalValues[_proposalId][i],\n                proposalSignatures[_proposalId][i],\n                proposalCalldatas[_proposalId][i],\n                _proposal.eta\n            );\n        }\n        emit ProposalExecuted(_proposalId);\n    }\n\n    /**\n     * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\n     * @param _proposalId The id of the proposal to cancel\n     */\n    function cancel(uint256 _proposalId) external {\n        require(\n            state(_proposalId) != ProposalState.Executed,\n            \"PACT::cancel: cannot cancel executed proposal\"\n        );\n\n        Proposal storage _proposal = proposals[_proposalId];\n        require(\n            msg.sender == _proposal.proposer ||\n                getPriorVotes(_proposal.proposer, sub256(block.number, 1)) < proposalThreshold,\n            \"PACT::cancel: proposer above threshold\"\n        );\n\n        _proposal.canceled = true;\n        for (uint256 i = 0; i < proposalTargets[_proposalId].length; i++) {\n            timelock.cancelTransaction(\n                proposalTargets[_proposalId][i],\n                proposalValues[_proposalId][i],\n                proposalSignatures[_proposalId][i],\n                proposalCalldatas[_proposalId][i],\n                _proposal.eta\n            );\n        }\n\n        emit ProposalCanceled(_proposalId);\n    }\n\n    /**\n     * @notice Gets actions of a proposal.\n     * @param _proposalId Proposal to query.\n     * @return targets Target addresses for proposal calls.\n     * @return values Eth values for proposal calls.\n     * @return signatures Function signatures for proposal calls.\n     * @return calldatas Calldatas for proposal calls.\n     */\n    function getActions(uint256 _proposalId)\n        external\n        view\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        )\n    {\n        return (\n            proposalTargets[_proposalId],\n            proposalValues[_proposalId],\n            proposalSignatures[_proposalId],\n            proposalCalldatas[_proposalId]\n        );\n    }\n\n    /**\n     * @notice Gets the receipt for a voter on a given proposal\n     * @param _proposalId the id of proposal\n     * @param _voter The address of the voter\n     * @return The voting receipt\n     */\n    function getReceipt(uint256 _proposalId, address _voter)\n        external\n        view\n        returns (Receipt memory)\n    {\n        return proposalReceipts[_proposalId][_voter];\n    }\n\n    /**\n     * @notice Gets the state of a proposal\n     * @param _proposalId The id of the proposal\n     * @return Proposal state\n     */\n    function state(uint256 _proposalId) public view returns (ProposalState) {\n        require(proposalCount > _proposalId, \"PACT::state: invalid proposal id\");\n        Proposal storage _proposal = proposals[_proposalId];\n\n        if (_proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (block.number <= _proposal.startBlock) {\n            return ProposalState.Pending;\n        } else if (block.number <= _proposal.endBlock) {\n            return ProposalState.Active;\n        } else if (\n            _proposal.forVotes <= _proposal.againstVotes || _proposal.forVotes < quorumVotes\n        ) {\n            return ProposalState.Defeated;\n        } else if (_proposal.eta == 0) {\n            return ProposalState.Succeeded;\n        } else if (_proposal.executed) {\n            return ProposalState.Executed;\n        } else if (block.timestamp >= add256(_proposal.eta, timelock.GRACE_PERIOD())) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    /**\n     * @notice Cast a vote for a proposal\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     */\n    function castVote(uint256 _proposalId, uint8 _support) external {\n        emit VoteCast(\n            msg.sender,\n            _proposalId,\n            _support,\n            castVoteInternal(msg.sender, _proposalId, _support),\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Cast a vote for a proposal with a reason\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     * @param _reason The reason given for the vote by the voter\n     */\n    function castVoteWithReason(\n        uint256 _proposalId,\n        uint8 _support,\n        string calldata _reason\n    ) external {\n        emit VoteCast(\n            msg.sender,\n            _proposalId,\n            _support,\n            castVoteInternal(msg.sender, _proposalId, _support),\n            _reason\n        );\n    }\n\n    /**\n     * @notice Cast a vote for a proposal by signature\n     * @dev External function that accepts EIP-712 signatures for voting on proposals.\n     */\n    function castVoteBySig(\n        uint256 _proposalId,\n        uint8 _support,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        require(_v == 27 || _v == 28, \"PACT::castVoteBySig: invalid v value\");\n        require(\n            _s < 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1,\n            \"PACT::castVoteBySig: invalid s value\"\n        );\n        bytes32 _domainSeparator = keccak256(\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(NAME)), getChainIdInternal(), address(this))\n        );\n        bytes32 _structHash = keccak256(abi.encode(BALLOT_TYPEHASH, _proposalId, _support));\n        bytes32 _digest = keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparator, _structHash));\n        address _signatory = ecrecover(_digest, _v, _r, _s);\n        require(_signatory != address(0), \"PACT::castVoteBySig: invalid signature\");\n        emit VoteCast(\n            _signatory,\n            _proposalId,\n            _support,\n            castVoteInternal(_signatory, _proposalId, _support),\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Internal function that caries out voting logic\n     * @param _voter The voter that is casting their vote\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     * @return The number of votes cast\n     */\n    function castVoteInternal(\n        address _voter,\n        uint256 _proposalId,\n        uint8 _support\n    ) internal returns (uint96) {\n        require(\n            state(_proposalId) == ProposalState.Active,\n            \"PACT::castVoteInternal: voting is closed\"\n        );\n        require(_support <= 2, \"PACT::castVoteInternal: invalid vote type\");\n        Proposal storage _proposal = proposals[_proposalId];\n        Receipt storage _receipt = proposalReceipts[_proposalId][_voter];\n        require(_receipt.hasVoted == false, \"PACT::castVoteInternal: voter already voted\");\n        uint96 _votes = getPriorVotes(_voter, _proposal.startBlock);\n\n        if (_support == 0) {\n            _proposal.againstVotes = add256(_proposal.againstVotes, _votes);\n        } else if (_support == 1) {\n            _proposal.forVotes = add256(_proposal.forVotes, _votes);\n        } else if (_support == 2) {\n            _proposal.abstainVotes = add256(_proposal.abstainVotes, _votes);\n        }\n\n        _receipt.hasVoted = true;\n        _receipt.support = _support;\n        _receipt.votes = _votes;\n\n        return _votes;\n    }\n\n    /**\n     * @notice Owner function for setting the voting delay\n     * @param _newVotingDelay new voting delay, in blocks\n     */\n    function _setVotingDelay(uint256 _newVotingDelay) external virtual onlyOwner {\n        require(\n            _newVotingDelay >= MIN_VOTING_DELAY && _newVotingDelay <= MAX_VOTING_DELAY,\n            \"PACT::_setVotingDelay: invalid voting delay\"\n        );\n        uint256 _oldVotingDelay = votingDelay;\n        votingDelay = _newVotingDelay;\n\n        emit VotingDelaySet(_oldVotingDelay, _newVotingDelay);\n    }\n\n    /**\n     * @notice Owner function for setting the quorum votes\n     * @param _newQuorumVotes new quorum votes\n     */\n    function _setQuorumVotes(uint256 _newQuorumVotes) external onlyOwner {\n        require(\n            _newQuorumVotes >= proposalThreshold,\n            \"PACT::_setQuorumVotes: invalid quorum votes\"\n        );\n\n        uint256 _oldQuorumVotes = votingDelay;\n        quorumVotes = _newQuorumVotes;\n\n        emit QuorumVotesSet(_oldQuorumVotes, _newQuorumVotes);\n    }\n\n    /**\n     * @notice Owner function for setting the voting period\n     * @param _newVotingPeriod new voting period, in blocks\n     */\n    function _setVotingPeriod(uint256 _newVotingPeriod) external virtual onlyOwner {\n        require(\n            _newVotingPeriod >= MIN_VOTING_PERIOD && _newVotingPeriod <= MAX_VOTING_PERIOD,\n            \"PACT::_setVotingPeriod: invalid voting period\"\n        );\n        uint256 _oldVotingPeriod = votingPeriod;\n        votingPeriod = _newVotingPeriod;\n\n        emit VotingPeriodSet(_oldVotingPeriod, _newVotingPeriod);\n    }\n\n    /**\n     * @notice Owner function for setting the proposal threshold\n     * @dev _newProposalThreshold must be greater than the hardcoded min\n     * @param _newProposalThreshold new proposal threshold\n     */\n    function _setProposalThreshold(uint256 _newProposalThreshold) external onlyOwner {\n        require(\n            _newProposalThreshold >= MIN_PROPOSAL_THRESHOLD &&\n                _newProposalThreshold <= MAX_PROPOSAL_THRESHOLD,\n            \"PACT::_setProposalThreshold: invalid proposal threshold\"\n        );\n        uint256 _oldProposalThreshold = proposalThreshold;\n        proposalThreshold = _newProposalThreshold;\n\n        emit ProposalThresholdSet(_oldProposalThreshold, _newProposalThreshold);\n    }\n\n    /**\n     * @notice Owner function for setting the release token\n     * @param _newReleaseToken new release token address\n     */\n    function _setReleaseToken(IHasVotes _newReleaseToken) external onlyOwner {\n        require(\n            _newReleaseToken != token,\n            \"PACT::_setReleaseToken: releaseToken and token must be different\"\n        );\n        IHasVotes _oldReleaseToken = releaseToken;\n        releaseToken = _newReleaseToken;\n\n        emit ReleaseTokenSet(address(_oldReleaseToken), address(_newReleaseToken));\n    }\n\n    function getPriorVotes(address _voter, uint256 _beforeBlock) public view returns (uint96) {\n        if (address(releaseToken) == address(0)) {\n            return token.getPriorVotes(_voter, _beforeBlock);\n        }\n        return\n            add96(\n                token.getPriorVotes(_voter, _beforeBlock),\n                releaseToken.getPriorVotes(_voter, _beforeBlock),\n                \"getPriorVotes overflow\"\n            );\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    function add256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 _c = _a + _b;\n        require(_c >= _a, \"addition overflow\");\n        return _c;\n    }\n\n    function sub256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, \"subtraction underflow\");\n        return _a - _b;\n    }\n\n    function getChainIdInternal() internal view returns (uint256) {\n        uint256 _chainId;\n        assembly {\n            _chainId := chainid()\n        }\n        return _chainId;\n    }\n\n    function add96(\n        uint96 _a,\n        uint96 _b,\n        string memory _errorMessage\n    ) internal pure returns (uint96) {\n        uint96 _c = _a + _b;\n        require(_c >= _a, _errorMessage);\n        return _c;\n    }\n}\n"
    },
    "@ubeswap/governance/contracts/voting/TransferrableVotingToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"./VotingToken.sol\";\n\ncontract TransferrableVotingToken is VotingToken {\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     * @param initialSupply_ Initial supply of tokens\n     * @param account_ The initial account to grant all the tokens\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint96 initialSupply_,\n        address account_\n    ) VotingToken(name_, symbol_, decimals_) {\n        _mintVotes(account_, initialSupply_);\n    }\n\n    ////////////////////////////////\n    //\n    // The below code is copied from Uniswap's Uni.sol.\n    // Changes are marked with \"XXX\".\n    //\n    ////////////////////////////////\n\n    // XXX: deleted name, symbol, decimals, totalSupply, minter, mintingAllowedAfter,\n    // minimumTimeBetweenMints, mintCap\n\n    // Allowance amounts on behalf of others\n    mapping (address => mapping (address => uint96)) internal allowances;\n\n    // XXX: balances, delegates, Checkpoint, checkpoints,\n    // numCheckpoints, DOMAIN_TYPEHASH, DELEGATION_TYPEHASH\n    // are inherited from VotingPower.sol\n\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    // XXX: nonces is inherited from VotingPower.sol\n\n    // XXX: deleted MinterChanged\n\n    // XXX: deleted DelegateChanged, DelegateVotesChanged, Transfer and moved them to IVotingPower\n\n    /// @notice The standard EIP-20 approval event\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    // XXX: deleted constructor, setMinter, mint\n\n    /**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */\n    function allowance(address account, address spender) external view returns (uint) {\n        return allowances[account][spender];\n    }\n\n    // XXX_ADDED: upgrade to Solidity 0.8.3, which doesn't allow use of uintn(-1)\n    uint256 internal constant MAX_INT = 2**256 - 1;\n    uint96 internal constant MAX_INT_96 = 2**96 - 1;\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint rawAmount) external returns (bool) {\n        uint96 amount;\n        // XXX: uint256(-1) => MAX_INT\n        if (rawAmount == MAX_INT) {\n            // XXX: uint96(-1) => MAX_INT_96\n            amount = MAX_INT_96;\n        } else {\n            amount = safe96(rawAmount, \"Uni::approve: amount exceeds 96 bits\");\n        }\n\n        allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Triggers an approval from owner to spends\n     * @param owner The address to approve from\n     * @param spender The address to be approved\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @param deadline The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        uint96 amount;\n        // XXX: uint256(-1) => MAX_INT\n        if (rawAmount == MAX_INT) {\n            // XXX: uint96(-1) => MAX_INT_oy\n            amount = MAX_INT_96;\n        } else {\n            amount = safe96(rawAmount, \"Uni::permit: amount exceeds 96 bits\");\n        }\n\n        // XXX_CHANGED: name => name()\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"Uni::permit: invalid signature\");\n        require(signatory == owner, \"Uni::permit: unauthorized\");\n        // XXX: added linter disable\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"Uni::permit: signature expired\");\n\n        allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    // XXX: deleted balanceOf\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint rawAmount) external returns (bool) {\n        // XXX_ADDED\n        require(\n            dst != address(this),\n            \"TransferrableVotingToken::transfer: cannot send tokens to contract\"\n        );\n        uint96 amount = safe96(rawAmount, \"Uni::transfer: amount exceeds 96 bits\");\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\n        // XXX_ADDED\n        require(\n            dst != address(this),\n            \"TransferrableVotingToken::transferFrom: cannot send tokens to contract\"\n        );\n        address spender = msg.sender;\n        uint96 spenderAllowance = allowances[src][spender];\n        uint96 amount = safe96(rawAmount, \"Uni::approve: amount exceeds 96 bits\");\n\n        // XXX: uint96(-1) => MAX_INT_96\n        if (spender != src && spenderAllowance != MAX_INT_96) {\n            uint96 newAllowance = sub96(spenderAllowance, amount, \"Uni::transferFrom: transfer amount exceeds spender allowance\");\n            allowances[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    // XXX: rest is in VotingPower.sol\n}\n"
    },
    "contracts/token/PACTToken.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@ubeswap/governance/contracts/voting/TransferrableVotingToken.sol\";\n\ncontract PACTToken is TransferrableVotingToken {\n    /// @notice The maximum supply of PACT Tokens.\n    uint96 public constant MAX_SUPPLY = 10_000_000_000e18;\n\n    /**\n     * @notice Construct a new PACT Token\n     * Note: this contract doesn't specify an initial minter, so there is no way new\n     * tokens can get created.\n     * @param _initialOwner The initial account to grant all the tokens\n     */\n    constructor(address _initialOwner)\n        TransferrableVotingToken(\"PactToken\", \"PACT\", 18, MAX_SUPPLY, _initialOwner)\n    {}\n}\n"
    },
    "contracts/mocks/community/CommunityAdminImplementationOld.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./interfaces/CommunityAdminStorageV1Old.sol\";\n\n/**\n * @notice Welcome to CommunityAdmin, the main contract. This is an\n * administrative (for now) contract where the admins have control\n * over the list of communities. Being only able to add and\n * remove communities\n */\ncontract CommunityAdminImplementationOld is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    CommunityAdminStorageV1Old\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 private constant DEFAULT_AMOUNT = 5e16;\n    uint256 private constant TREASURY_SAFETY_FACTOR = 10;\n\n    /**\n     * @notice Triggered when a community has been added\n     *\n     * @param communityAddress  Address of the community that has been added\n     * @param managers          Addresses of the initial managers\n     * @param claimAmount       Value of the claimAmount\n     * @param maxClaim          Value of the maxClaim\n     * @param decreaseStep      Value of the decreaseStep\n     * @param baseInterval      Value of the baseInterval\n     * @param incrementInterval Value of the incrementInterval\n     * @param minTranche        Value of the minTranche\n     * @param maxTranche        Value of the maxTranche\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event CommunityAdded(\n        address indexed communityAddress,\n        address[] managers,\n        uint256 claimAmount,\n        uint256 maxClaim,\n        uint256 decreaseStep,\n        uint256 baseInterval,\n        uint256 incrementInterval,\n        uint256 minTranche,\n        uint256 maxTranche\n    );\n\n    /**\n     * @notice Triggered when a community has been removed\n     *\n     * @param communityAddress  Address of the community that has been removed\n     */\n    event CommunityRemoved(address indexed communityAddress);\n\n    /**\n     * @notice Triggered when a community has been migrated\n     *\n     * @param managers                 Addresses of the new community's initial managers\n     * @param communityAddress         New community address\n     * @param previousCommunityAddress Old community address\n     */\n    event CommunityMigrated(\n        address[] managers,\n        address indexed communityAddress,\n        address indexed previousCommunityAddress\n    );\n\n    /**\n     * @notice Triggered when the treasury address has been updated\n     *\n     * @param oldTreasury             Old treasury address\n     * @param newTreasury             New treasury address\n     */\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\n\n    /**\n     * @notice Triggered when the communityImplementation address has been updated\n     *\n     * @param oldCommunityImplementation    Old communityImplementation address\n     * @param newCommunityImplementation    New communityImplementation address\n     */\n    event CommunityImplementationUpdated(\n        address indexed oldCommunityImplementation,\n        address indexed newCommunityImplementation\n    );\n\n    /**\n     * @notice Triggered when a community has been funded\n     *\n     * @param community           Address of the community\n     * @param amount              Amount of the funding\n     */\n    event CommunityFunded(address indexed community, uint256 amount);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Enforces sender to be a valid community\n     */\n    modifier onlyCommunities() {\n        require(communities[msg.sender] == CommunityState.Valid, \"CommunityAdmin: NOT_COMMUNITY\");\n        _;\n    }\n\n    /**\n     * @notice Used to initialize a new CommunityAdmin contract\n     *\n     * @param _communityImplementation    Address of the Community implementation\n     *                              used for deploying new communities\n     * @param _cUSD                 Address of the cUSD token\n     */\n    function initialize(ICommunityOld _communityImplementation, IERC20 _cUSD) external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        communityImplementation = _communityImplementation;\n        cUSD = _cUSD;\n\n        communityProxyAdmin = new ProxyAdmin();\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Returns the address of a community from communityList\n     *\n     * @param _index index of the community\n     * @return address of the community\n     */\n    function communityListAt(uint256 _index) external view override returns (address) {\n        return communityList.at(_index);\n    }\n\n    /**\n     * @notice Returns the number of communities\n     *\n     * @return uint256 number of communities\n     */\n    function communityListLength() external view override returns (uint256) {\n        return communityList.length();\n    }\n\n    /**\n     * @notice Updates the address of the treasury\n     *\n     * @param _newTreasury address of the new treasury contract\n     */\n    function updateTreasury(ITreasury _newTreasury) external override onlyOwner {\n        address oldTreasuryAddress = address(treasury);\n        treasury = _newTreasury;\n\n        emit TreasuryUpdated(oldTreasuryAddress, address(_newTreasury));\n    }\n\n    /**\n     * @notice Updates the address of the the communityImplementation\n     *\n     * @param _newCommunityImplementation address of the new communityImplementation contract\n     */\n    function updateCommunityImplementation(ICommunityOld _newCommunityImplementation) external override onlyOwner {\n        address _oldCommunityImplementationAddress = address(communityImplementation);\n        communityImplementation = _newCommunityImplementation;\n\n        emit CommunityImplementationUpdated(_oldCommunityImplementationAddress, address(_newCommunityImplementation));\n    }\n\n    /**\n     * @notice Adds a new community\n     *\n     * @param _managers addresses of the community managers\n     * @param _claimAmount base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim at in total\n     * @param _decreaseStep value decreased from maxClaim for every beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     */\n    function addCommunity(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external override onlyOwner {\n        require(\n            _managers.length > 0,\n            \"CommunityAdmin::addCommunity: Community should have at least one manager\"\n        );\n        address _communityAddress = deployCommunity(\n            _managers,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval,\n            _minTranche,\n            _maxTranche,\n            ICommunityOld(address(0))\n        );\n        require(_communityAddress != address(0), \"CommunityAdmin::addCommunity: NOT_VALID\");\n        communities[_communityAddress] = CommunityState.Valid;\n        communityList.add(_communityAddress);\n\n        emit CommunityAdded(\n            _communityAddress,\n            _managers,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval,\n            _minTranche,\n            _maxTranche\n        );\n\n        transferToCommunity(ICommunityOld(_communityAddress), _minTranche);\n        treasury.transfer(cUSD, address(_managers[0]), DEFAULT_AMOUNT);\n    }\n\n    /**\n     * @notice Migrates a community by deploying a new contract.\n     *\n     * @param _managers address of the community managers\n     * @param _previousCommunity address of the community to be migrated\n     */\n    function migrateCommunity(address[] memory _managers, ICommunityOld _previousCommunity)\n        external\n        override\n        onlyOwner\n        nonReentrant\n    {\n        require(\n            communities[address(_previousCommunity)] != CommunityState.Migrated,\n            \"CommunityAdmin::migrateCommunity: this community has been migrated\"\n        );\n\n        communities[address(_previousCommunity)] = CommunityState.Migrated;\n\n        bool _isCommunityNew = isCommunityNewType(_previousCommunity);\n\n        address newCommunityAddress;\n        if (_isCommunityNew) {\n            newCommunityAddress = deployCommunity(\n                _managers,\n                _previousCommunity.claimAmount(),\n                _previousCommunity.getInitialMaxClaim(),\n                _previousCommunity.decreaseStep(),\n                _previousCommunity.baseInterval(),\n                _previousCommunity.incrementInterval(),\n                _previousCommunity.minTranche(),\n                _previousCommunity.maxTranche(),\n                _previousCommunity\n            );\n        } else {\n            newCommunityAddress = deployCommunity(\n                _managers,\n                _previousCommunity.claimAmount(),\n                _previousCommunity.maxClaim(),\n                1e16,\n                (_previousCommunity.baseInterval() / 5),\n                (_previousCommunity.incrementInterval() / 5),\n                1e16,\n                5e18,\n                _previousCommunity\n            );\n        }\n\n        require(newCommunityAddress != address(0), \"CommunityAdmin::migrateCommunity: NOT_VALID\");\n\n        if (_isCommunityNew) {\n            uint256 balance = cUSD.balanceOf(address(_previousCommunity));\n            _previousCommunity.transfer(cUSD, newCommunityAddress, balance);\n        }\n\n        communities[newCommunityAddress] = CommunityState.Valid;\n        communityList.add(newCommunityAddress);\n\n        emit CommunityMigrated(_managers, newCommunityAddress, address(_previousCommunity));\n    }\n\n    /**\n     * @notice Adds a new manager to a community\n     *\n     * @param _community address of the community\n     * @param _account address to be added as community manager\n     */\n    function addManagerToCommunity(ICommunityOld _community, address _account)\n        external\n        override\n        onlyOwner\n    {\n        _community.addManager(_account);\n    }\n\n    /**\n     * @notice Removes an existing community. All community funds are transferred to the treasury\n     *\n     * @param _community address of the community\n     */\n    function removeCommunity(ICommunityOld _community) external override onlyOwner nonReentrant {\n        require(\n            communities[address(_community)] == CommunityState.Valid,\n            \"CommunityAdmin::removeCommunity: this isn't a valid community\"\n        );\n        communities[address(_community)] = CommunityState.Removed;\n\n        _community.transfer(cUSD, address(treasury), cUSD.balanceOf(address(_community)));\n        emit CommunityRemoved(address(_community));\n    }\n\n    /**\n     * @dev Funds an existing community if it hasn't enough funds\n     */\n    function fundCommunity() external override onlyCommunities {\n        ICommunityOld _community = ICommunityOld(msg.sender);\n        uint256 _balance = cUSD.balanceOf(msg.sender);\n        require(\n            _balance < _community.minTranche(),\n            \"CommunityAdmin::fundCommunity: this community has enough funds\"\n        );\n        require(\n            block.number > _community.lastFundRequest() + _community.baseInterval(),\n            \"CommunityAdmin::fundCommunity: this community is not allowed to request yet\"\n        );\n\n        uint256 _trancheAmount = calculateCommunityTrancheAmount(ICommunityOld(msg.sender));\n\n        if (_trancheAmount > _balance) {\n            uint256 _amount = _trancheAmount - _balance;\n            uint256 _treasurySafetyBalance = cUSD.balanceOf(address(treasury)) /\n                TREASURY_SAFETY_FACTOR;\n            require(\n                _amount <= _treasurySafetyBalance,\n                \"CommunityAdmin::fundCommunity: Not enough funds\"\n            );\n            transferToCommunity(_community, _amount);\n        }\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from  community to an address\n     *\n     * @param _community address of the community\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transferFromCommunity(\n        ICommunityOld _community,\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _community.transfer(_token, _to, _amount);\n    }\n\n    /** @notice Updates the beneficiary params of a community\n     *\n     * @param _community address of the community\n     * @param _claimAmount  base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim  in total\n     * @param _decreaseStep value decreased from maxClaim each time a is beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     */\n    function updateBeneficiaryParams(\n        ICommunityOld _community,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external override onlyOwner {\n        _community.updateBeneficiaryParams(\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval\n        );\n    }\n\n    /** @notice Updates params of a community\n     *\n     * @param _community address of the community\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     */\n    function updateCommunityParams(\n        ICommunityOld _community,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external override onlyOwner {\n        _community.updateCommunityParams(_minTranche, _maxTranche);\n    }\n\n    /**\n     * @notice Updates proxy implementation address of a community\n     *\n     * @param _CommunityMiddleProxy address of the community\n     * @param _newCommunityImplementation address of new implementation contract\n     */\n    function updateProxyImplementation(address _CommunityMiddleProxy, address _newCommunityImplementation)\n        external\n        override\n        onlyOwner\n    {\n        communityProxyAdmin.upgrade(\n            TransparentUpgradeableProxy(payable(_CommunityMiddleProxy)),\n            _newCommunityImplementation\n        );\n    }\n\n    /**\n     * @dev Transfers cUSDs from the treasury to a community\n     *\n     * @param _community address of the community\n     * @param _amount amount of the transaction\n     */\n    function transferToCommunity(ICommunityOld _community, uint256 _amount) internal nonReentrant {\n        treasury.transfer(cUSD, address(_community), _amount);\n        _community.addTreasuryFunds(_amount);\n\n        emit CommunityFunded(address(_community), _amount);\n    }\n\n    /**\n     * @dev Internal implementation of deploying a new community\n     *\n     * @param _managers addresses of the community managers\n     * @param _claimAmount base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim at in total\n     * @param _decreaseStep value decreased from maxClaim for every beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     * @param _previousCommunity address of the previous community. Used for migrating communities\n     */\n    function deployCommunity(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche,\n        ICommunityOld _previousCommunity\n    ) internal returns (address) {\n        TransparentUpgradeableProxy _community = new TransparentUpgradeableProxy(\n            address(communityImplementation),\n            address(communityProxyAdmin),\n            abi.encodeWithSignature(\n                \"initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)\",\n                _managers,\n                _claimAmount,\n                _maxClaim,\n                _decreaseStep,\n                _baseInterval,\n                _incrementInterval,\n                _minTranche,\n                _maxTranche,\n                address(_previousCommunity)\n            )\n        );\n\n        return address(_community);\n    }\n\n    /** @dev Calculates the tranche amount of a community.\n     *        Enforces the tranche amount to be between community minTranche and maxTranche\n     * @param _community address of the community\n     * @return uint256 the value of the tranche amount\n     */\n    function calculateCommunityTrancheAmount(ICommunityOld _community)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 _validBeneficiaries = _community.validBeneficiaryCount();\n        uint256 _claimAmount = _community.claimAmount();\n        uint256 _treasuryFunds = _community.treasuryFunds();\n        uint256 _privateFunds = _community.privateFunds();\n        uint256 _minTranche = _community.minTranche();\n        uint256 _maxTranche = _community.maxTranche();\n\n        // `treasuryFunds` can't be zero.\n        // Otherwise, migrated communities will have zero.\n        _treasuryFunds = _treasuryFunds > 0 ? _treasuryFunds : 1e18;\n\n        uint256 _trancheAmount = (_validBeneficiaries *\n            _claimAmount *\n            (_treasuryFunds + _privateFunds)) / _treasuryFunds;\n\n        if (_trancheAmount < _minTranche) {\n            _trancheAmount = _minTranche;\n        } else if (_trancheAmount > _maxTranche) {\n            _trancheAmount = _maxTranche;\n        }\n\n        return _trancheAmount;\n    }\n\n    /**\n     * @notice Checks if a community is deployed with the new type of smart contract\n     *\n     * @param _community address of the community\n     * @return bool true if the community is deployed with the new type of smart contract\n     */\n    function isCommunityNewType(ICommunityOld _community) internal pure returns (bool) {\n        return _community.impactMarketAddress() == address(0);\n    }\n}\n"
    },
    "contracts/mocks/community/interfaces/CommunityAdminStorageV1Old.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"./ICommunityAdminOld.sol\";\nimport \"../../../treasury/interfaces/ITreasury.sol\";\n\n/**\n * @title Storage for CommunityAdmin\n * @notice For future upgrades, do not change CommunityAdminStorageV1. Create a new\n * contract which implements CommunityAdminStorageV1 and following the naming convention\n * CommunityAdminStorageVX.\n */\nabstract contract CommunityAdminStorageV1Old is ICommunityAdminOld {\n    IERC20 public override cUSD;\n    ITreasury public override treasury;\n    ICommunityOld public override communityImplementation;\n    ProxyAdmin public override communityProxyAdmin;\n\n    mapping(address => CommunityState) public override communities;\n    EnumerableSet.AddressSet internal communityList;\n}\n"
    },
    "contracts/governor/ubiCommittee/interfaces/UBICommitteeStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"../../../community/interfaces/ICommunityAdmin.sol\";\nimport \"./IUBICommittee.sol\";\n\nabstract contract UBICommitteeStorageV1 is IUBICommittee {\n    ProxyAdmin public communityProxyAdmin;\n    ICommunityAdmin public communityAdmin;\n\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n    uint256 public quorumVotes;\n\n    /// @notice The total number of proposals\n    uint256 public proposalCount;\n\n    /// @notice The committee members\n    mapping(address => bool) public members;\n\n    /// @notice The official record of all proposals ever proposed\n    mapping(uint256 => Proposal) public proposals;\n    /// @notice The official each proposal's signatures:\n    /// An ordered list of function signatures to be called\n    mapping(uint256 => string[]) public proposalSignatures;\n    /// @notice The official each proposal's calldatas:\n    /// An ordered list of calldata to be passed to each call\n    mapping(uint256 => bytes[]) public proposalCalldatas;\n    /// @notice The official each proposal's receipts:\n    /// Receipts of ballots for the entire set of voters\n    mapping(uint256 => mapping(address => Receipt)) public proposalReceipts;\n\n    /// @notice The latest proposal for each proposer\n    mapping(address => uint256) public latestProposalIds;\n\n    struct Proposal {\n        // Unique id for looking up a proposal\n        uint256 id;\n        // Creator of the proposal\n        address proposer;\n        // The block at which voting ends: votes must be cast prior to this block\n        uint256 endBlock;\n        // Current number of votes in favor of this proposal\n        uint256 forVotes;\n        // Current number of votes in opposition to this proposal\n        uint256 againstVotes;\n        // Current number of votes for abstaining for this proposal\n        uint256 abstainVotes;\n        // Flag marking whether the proposal has been canceled\n        bool canceled;\n        // Flag marking whether the proposal has been executed\n        bool executed;\n    }\n\n    /// @notice Ballot receipt record for a voter\n    struct Receipt {\n        // Whether or not a vote has been cast\n        bool hasVoted;\n        // Whether or not the voter supports the proposal or abstains\n        uint8 support;\n        // The number of votes the voter had, which were cast\n        uint96 votes;\n    }\n\n    /// @notice Possible states that a proposal may be in\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Expired,\n        Succeeded,\n        Executed\n    }\n}\n"
    },
    "contracts/governor/ubiCommittee/UBICommitteeImplementation.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"./interfaces/UBICommitteeStorageV1.sol\";\n\ncontract UBICommitteeImplementation is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    UBICommitteeStorageV1\n{\n    /// @notice The max setable voting period\n    uint256 public constant MAX_VOTING_PERIOD = 518400; // About 30 days\n\n    /// @notice The maximum number of actions that can be included in a proposal\n    uint256 public constant PROPOSAL_MAX_OPERATIONS = 10; // 10 actions\n\n    /// @notice An event emitted when a new proposal is created\n    event ProposalCreated(\n        uint256 id,\n        address proposer,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 endBlock,\n        string description\n    );\n\n    /// @notice An event emitted when a vote has been cast on a proposal\n    /// @param voter The address which casted a vote\n    /// @param proposalId The proposal id which was voted on\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\n    /// @param votes Number of votes which were cast by the voter\n    /// @param reason The reason given for the vote by the voter\n    event VoteCast(\n        address indexed voter,\n        uint256 proposalId,\n        uint8 support,\n        uint256 votes,\n        string reason\n    );\n\n    /// @notice An event emitted when a proposal has been canceled\n    event ProposalCanceled(uint256 id);\n\n    /// @notice An event emitted when a proposal has been executed in the Timelock\n    event ProposalExecuted(uint256 id);\n\n    /// @notice Emitted when implementation is changed\n    event NewImplementation(address oldImplementation, address newImplementation);\n\n    /// @notice An event emitted when the quorum votes is set\n    event QuorumVotesSet(uint256 oldQuorumVotes, uint256 newQuorumVotes);\n\n    /// @notice An event emitted when a member is added\n    event MemberAdded(address member);\n\n    /// @notice An event emitted when a member is removed\n    event MemberRemoved(address member);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    modifier onlyMember() {\n        require(members[msg.sender] == true, \"PACT:: Not a member\");\n        _;\n    }\n\n    /**\n     * @notice Used to initialize the contract during delegator contructor\n     * @param _quorumVotes The initial quorum votes\n     */\n    function initialize(\n        uint256 _quorumVotes,\n        ICommunityAdmin _communityAdmin,\n        address[] calldata _members\n    ) public initializer {\n        require(_quorumVotes >= 1, \"PACT::initialize: invalid proposal threshold\");\n        require(_quorumVotes <= _members.length, \"PACT::initialize: params mismatch\");\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        communityProxyAdmin = new ProxyAdmin();\n        communityAdmin = _communityAdmin;\n        quorumVotes = _quorumVotes;\n\n        // Create dummy proposal\n        Proposal memory _dummyProposal = Proposal({\n            id: proposalCount,\n            proposer: address(this),\n            endBlock: 0,\n            forVotes: 0,\n            againstVotes: 0,\n            abstainVotes: 0,\n            canceled: true,\n            executed: false\n        });\n        proposalCount++;\n\n        proposals[_dummyProposal.id] = _dummyProposal;\n        latestProposalIds[_dummyProposal.proposer] = _dummyProposal.id;\n\n        for (uint256 index = 0; index < _members.length; index++) {\n            members[_members[index]] = true;\n            emit MemberAdded(_members[index]);\n        }\n\n        emit ProposalCreated(\n            _dummyProposal.id,\n            address(this),\n            proposalSignatures[_dummyProposal.id],\n            proposalCalldatas[_dummyProposal.id],\n            0,\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Function used to add new members to the committee.\n     * @param _member Member address.\n     */\n    function addMember(address _member) external onlyOwner {\n        require(members[_member] == false, \"PACT::addMember: already a member\");\n\n        members[_member] = true;\n\n        emit MemberAdded(_member);\n    }\n\n    /**\n     * @notice Function used to remove members from the committee.\n     * @param _member Member address.\n     */\n    function removeMember(address _member) external onlyOwner {\n        require(members[_member] == true, \"PACT::removeMember: not a member\");\n\n        members[_member] = false;\n\n        emit MemberRemoved(_member);\n    }\n\n    /**\n     * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold.\n     * @param _signatures Function signatures for proposal calls.\n     * @param _calldatas Calldatas for proposal calls.\n     * @param _description String description of the proposal.\n     * @return Proposal id of new proposal.\n     */\n    function propose(\n        string[] memory _signatures,\n        bytes[] memory _calldatas,\n        string memory _description\n    ) external onlyMember returns (uint256) {\n        require(\n            _signatures.length == _calldatas.length,\n            \"PACT::propose: proposal function information arity mismatch\"\n        );\n        require(_signatures.length != 0, \"PACT::propose: must provide actions\");\n        require(_signatures.length <= PROPOSAL_MAX_OPERATIONS, \"PACT::propose: too many actions\");\n\n        uint256 _endBlock = add256(block.number, MAX_VOTING_PERIOD); // (518400) 30 days\n\n        Proposal memory _newProposal = Proposal({\n            id: proposalCount,\n            proposer: msg.sender,\n            endBlock: _endBlock,\n            forVotes: 0,\n            againstVotes: 0,\n            abstainVotes: 0,\n            canceled: false,\n            executed: false\n        });\n        proposalCount++;\n\n        proposals[_newProposal.id] = _newProposal;\n        proposalSignatures[_newProposal.id] = _signatures;\n        proposalCalldatas[_newProposal.id] = _calldatas;\n        latestProposalIds[_newProposal.proposer] = _newProposal.id;\n\n        emit ProposalCreated(\n            _newProposal.id,\n            msg.sender,\n            _signatures,\n            _calldatas,\n            _endBlock,\n            _description\n        );\n        return _newProposal.id;\n    }\n\n    /**\n     * @notice Executes a queued proposal if eta has passed\n     * @param _proposalId The id of the proposal to execute\n     */\n    function execute(uint256 _proposalId) external onlyMember payable {\n        require(\n            state(_proposalId) == ProposalState.Succeeded,\n            \"PACT::execute: proposal can only be executed if it is succeeded\"\n        );\n        Proposal storage _proposal = proposals[_proposalId];\n        _proposal.executed = true;\n        for (uint256 i = 0; i < proposalCalldatas[_proposalId].length; i++) {\n            bytes memory _callData;\n            if (bytes(proposalSignatures[_proposalId][i]).length == 0) {\n                _callData = proposalCalldatas[_proposalId][i];\n            } else {\n                _callData = abi.encodePacked(\n                    bytes4(keccak256(bytes(proposalSignatures[_proposalId][i]))),\n                    proposalCalldatas[_proposalId][i]\n                );\n            }\n\n            // solium-disable-next-line security/no-call-value\n            (bool _success, ) = address(communityAdmin).call{value: 0}(_callData);\n            require(_success, \"PACT::execute: Transaction execution reverted.\");\n        }\n        emit ProposalExecuted(_proposalId);\n    }\n\n    /**\n     * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\n     * @param _proposalId The id of the proposal to cancel\n     */\n    function cancel(uint256 _proposalId) external onlyMember {\n        require(\n            state(_proposalId) != ProposalState.Executed,\n            \"PACT::cancel: cannot cancel executed proposal\"\n        );\n\n        Proposal storage _proposal = proposals[_proposalId];\n        require(msg.sender == _proposal.proposer, \"PACT::cancel: proposer not allowed\");\n\n        _proposal.canceled = true;\n\n        emit ProposalCanceled(_proposalId);\n    }\n\n    /**\n     * @notice Gets actions of a proposal.\n     * @param _proposalId Proposal to query.\n     * @return signatures Function signatures for proposal calls.\n     * @return calldatas Calldatas for proposal calls.\n     */\n    function getActions(uint256 _proposalId)\n        external\n        view\n        returns (string[] memory signatures, bytes[] memory calldatas)\n    {\n        return (proposalSignatures[_proposalId], proposalCalldatas[_proposalId]);\n    }\n\n    /**\n     * @notice Gets the receipt for a voter on a given proposal\n     * @param _proposalId the id of proposal\n     * @param _voter The address of the voter\n     * @return The voting receipt\n     */\n    function getReceipt(uint256 _proposalId, address _voter)\n        external\n        view\n        returns (Receipt memory)\n    {\n        return proposalReceipts[_proposalId][_voter];\n    }\n\n    /**\n     * @notice Gets the state of a proposal\n     * @param _proposalId The id of the proposal\n     * @return Proposal state\n     */\n    function state(uint256 _proposalId) public view returns (ProposalState) {\n        require(proposalCount > _proposalId, \"PACT::state: invalid proposal id\");\n        Proposal storage _proposal = proposals[_proposalId];\n\n        if (_proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (_proposal.executed) {\n            return ProposalState.Executed;\n        } else if (block.number > _proposal.endBlock) {\n            return ProposalState.Expired;\n        } else if (\n            _proposal.forVotes > _proposal.againstVotes && _proposal.forVotes >= quorumVotes\n        ) {\n            return ProposalState.Succeeded;\n        } else {\n            return ProposalState.Active;\n        }\n    }\n\n    /**\n     * @notice Cast a vote for a proposal\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     */\n    function castVote(uint256 _proposalId, uint8 _support) external onlyMember {\n        emit VoteCast(\n            msg.sender,\n            _proposalId,\n            _support,\n            castVoteInternal(msg.sender, _proposalId, _support),\n            \"\"\n        );\n    }\n\n    /**\n     * @notice Internal function that caries out voting logic\n     * @param _voter The voter that is casting their vote\n     * @param _proposalId The id of the proposal to vote on\n     * @param _support The support value for the vote. 0=against, 1=for, 2=abstain\n     * @return The number of votes cast\n     */\n    function castVoteInternal(\n        address _voter,\n        uint256 _proposalId,\n        uint8 _support\n    ) internal returns (uint96) {\n        require(\n            state(_proposalId) == ProposalState.Active,\n            \"PACT::castVoteInternal: voting is closed\"\n        );\n        require(_support <= 2, \"PACT::castVoteInternal: invalid vote type\");\n        Proposal storage _proposal = proposals[_proposalId];\n        Receipt storage _receipt = proposalReceipts[_proposalId][_voter];\n        require(_receipt.hasVoted == false, \"PACT::castVoteInternal: voter already voted\");\n        uint96 _votes = 1;\n\n        if (_support == 0) {\n            _proposal.againstVotes = add256(_proposal.againstVotes, _votes);\n        } else if (_support == 1) {\n            _proposal.forVotes = add256(_proposal.forVotes, _votes);\n        } else if (_support == 2) {\n            _proposal.abstainVotes = add256(_proposal.abstainVotes, _votes);\n        }\n\n        _receipt.hasVoted = true;\n        _receipt.support = _support;\n        _receipt.votes = _votes;\n\n        return _votes;\n    }\n\n    /**\n     * @notice Owner function for setting the quorum votes\n     * @param _newQuorumVotes new quorum votes\n     */\n    function setQuorumVotes(uint256 _newQuorumVotes) external onlyOwner {\n        require(_newQuorumVotes >= 1, \"PACT::_setQuorumVotes: invalid quorum votes\");\n\n        uint256 _oldQuorumVotes = quorumVotes;\n        quorumVotes = _newQuorumVotes;\n\n        emit QuorumVotesSet(_oldQuorumVotes, _newQuorumVotes);\n    }\n\n    function add256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 _c = _a + _b;\n        require(_c >= _a, \"addition overflow\");\n        return _c;\n    }\n\n    function sub256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, \"subtraction underflow\");\n        return _a - _b;\n    }\n\n    function add96(\n        uint96 _a,\n        uint96 _b,\n        string memory _errorMessage\n    ) internal pure returns (uint96) {\n        uint96 _c = _a + _b;\n        require(_c >= _a, _errorMessage);\n        return _c;\n    }\n}\n"
    },
    "contracts/vesting/ImpactLabsVestingProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract ImpactLabsVestingProxy is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/treasury/TreasuryProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract TreasuryProxy is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/staking/StakingProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract StakingProxy is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/governor/ubiCommittee/UBICommitteeProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UBICommitteeProxy is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/governor/PACTDelegator.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract PACTDelegator is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/donationMiner/DonationMinerProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract DonationMinerProxy is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/interfaces/IProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ninterface IProxyAdmin {\n    function getProxyImplementation(TransparentUpgradeableProxy proxy)\n        external\n        view\n        virtual\n        returns (address);\n\n    function getProxyAdmin(TransparentUpgradeableProxy proxy)\n        external\n        view\n        virtual\n        returns (address);\n\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) external virtual;\n\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) external virtual;\n\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) external payable virtual;\n\n    function owner() external view virtual returns (address);\n}\n"
    },
    "contracts/community/CommunityMiddleProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"./interfaces/ICommunityAdmin.sol\";\nimport \"../interfaces/IProxyAdmin.sol\";\nimport \"../interfaces/ITransparentUpgradeableProxy.sol\";\n\ncontract CommunityMiddleProxy is TransparentUpgradeableProxy {\n    /** @notice Calls the TransparentUpgradeableProxy constructor\n     *\n     * @param _fakeLogic       any contract address\n     * @param _fakeProxyAdmin  any address\n     *\n     * @dev _fakeLogic, _fakeProxyAdmin are used only\n     *     to satisfy the TransparentUpgradeableProxy requirements.\n     *     Their values are not important because this is a middle proxy contract\n     *     the real logic ans proxy admin values are stored into the CommunityProxy\n     */\n    constructor(address _fakeLogic, address _fakeProxyAdmin)\n        TransparentUpgradeableProxy(_fakeLogic, _fakeProxyAdmin, \"\")\n    {}\n\n    /**\n     * @notice Returns the community implementation address.\n     *\n     * @dev this is a custom method that gets the community implementation address from the CommunityAdmin\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        // Admin of the CommunityProxy is CommunityAdmin.communityProxyAdmin\n        // the owner of CommunityAdmin.communityProxyAdmin is CommunityAdmin\n        // so:\n        // CommunityAdmin.communityProxyAdmin = IProxyAdmin(_admin())\n        // CommunityAdmin = (CommunityAdmin.communityProxyAdmin).owner = (IProxyAdmin(_admin())).owner()\n        // communityImplementation = CommunityAdmin.communityImplementation\n        // communityImplementation = ICommunityAdmin(IProxyAdmin(_admin()).owner()).communityImplementation()\n        return address(ICommunityAdmin(IProxyAdmin(_admin()).owner()).communityImplementation());\n    }\n}\n"
    },
    "contracts/interfaces/ITransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ninterface ITransparentUpgradeableProxy {\n    function admin() external view returns (address admin_);\n\n    function implementation() external returns (address implementation_);\n\n    function changeAdmin(address newAdmin) external virtual;\n\n    function upgradeTo(address newImplementation) external;\n\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\n}\n"
    },
    "contracts/community/CommunityAdminProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract CommunityAdminProxy is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/community/CommunityAdminImplementation.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./interfaces/ICommunity.sol\";\nimport \"./interfaces/CommunityAdminStorageV1.sol\";\nimport \"../governor/ubiCommittee/interfaces/IUBICommittee.sol\";\nimport \"./interfaces/CommunityAdminStorageV2.sol\";\n\n/**\n * @notice Welcome to CommunityAdmin, the main contract. This is an\n * administrative (for now) contract where the admins have control\n * over the list of communities. Being only able to add and\n * remove communities\n */\ncontract CommunityAdminImplementation is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    CommunityAdminStorageV2\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 private constant DEFAULT_AMOUNT = 5e16;\n    uint256 private constant TREASURY_SAFETY_FACTOR = 10;\n\n    /**\n     * @notice Triggered when a community has been added\n     *\n     * @param communityAddress  Address of the community that has been added\n     * @param managers          Addresses of the initial managers\n     * @param claimAmount       Value of the claimAmount\n     * @param maxClaim          Value of the maxClaim\n     * @param decreaseStep      Value of the decreaseStep\n     * @param baseInterval      Value of the baseInterval\n     * @param incrementInterval Value of the incrementInterval\n     * @param minTranche        Value of the minTranche\n     * @param maxTranche        Value of the maxTranche\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event CommunityAdded(\n        address indexed communityAddress,\n        address[] managers,\n        uint256 claimAmount,\n        uint256 maxClaim,\n        uint256 decreaseStep,\n        uint256 baseInterval,\n        uint256 incrementInterval,\n        uint256 minTranche,\n        uint256 maxTranche\n    );\n\n    /**\n     * @notice Triggered when a community has been removed\n     *\n     * @param communityAddress  Address of the community that has been removed\n     */\n    event CommunityRemoved(address indexed communityAddress);\n\n    /**\n     * @notice Triggered when a community has been migrated\n     *\n     * @param managers                 Addresses of the new community's initial managers\n     * @param communityAddress         New community address\n     * @param previousCommunityAddress Old community address\n     */\n    event CommunityMigrated(\n        address[] managers,\n        address indexed communityAddress,\n        address indexed previousCommunityAddress\n    );\n\n    /**\n     * @notice Triggered when the treasury address has been updated\n     *\n     * @param oldTreasury             Old treasury address\n     * @param newTreasury             New treasury address\n     */\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\n\n    /**\n     * @notice Triggered when the ubi committee has been updated\n     *\n     * @param oldUbiCommittee   Old UBI Committee address\n     * @param newUbiCommittee   New UBI Committee address\n     */\n    event UBICommitteeUpdated(address indexed oldUbiCommittee, address indexed newUbiCommittee);\n\n    /**\n     * @notice Triggered when the ambassadors has been updated\n     *\n     * @param oldAmbassadors   Old Ambassador address\n     * @param newAmbassadors   New Ambassador address\n     */\n    event AmbassadorsUpdated(address indexed oldAmbassadors, address indexed newAmbassadors);\n\n    /**\n     * @notice Triggered when the ubi communityMiddleProxy address has been updated\n     *\n     * @param oldCommunityMiddleProxy   Old communityMiddleProxy address\n     * @param newCommunityMiddleProxy   New communityMiddleProxy address\n     */\n    event CommunityMiddleProxyUpdated(\n        address oldCommunityMiddleProxy,\n        address newCommunityMiddleProxy\n    );\n\n    /**\n     * @notice Triggered when the communityImplementation address has been updated\n     *\n     * @param oldCommunityImplementation    Old communityImplementation address\n     * @param newCommunityImplementation    New communityImplementation address\n     */\n    event CommunityImplementationUpdated(\n        address indexed oldCommunityImplementation,\n        address indexed newCommunityImplementation\n    );\n\n    /**\n     * @notice Triggered when a community has been funded\n     *\n     * @param community           Address of the community\n     * @param amount              Amount of the funding\n     */\n    event CommunityFunded(address indexed community, uint256 amount);\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Enforces sender to be a valid community\n     */\n    modifier onlyCommunities() {\n        require(communities[msg.sender] == CommunityState.Valid, \"CommunityAdmin: NOT_COMMUNITY\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be a valid community\n     */\n    modifier onlyOwnerOrUBICommittee() {\n        require(\n            msg.sender == owner() || msg.sender == address(ubiCommittee),\n            \"CommunityAdmin: Not Owner Or UBICommittee\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Used to initialize a new CommunityAdmin contract\n     *\n     * @param _communityImplementation    Address of the Community implementation\n     *                              used for deploying new communities\n     * @param _cUSD                 Address of the cUSD token\n     */\n    function initialize(ICommunity _communityImplementation, IERC20 _cUSD) external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        communityImplementation = _communityImplementation;\n        cUSD = _cUSD;\n\n        communityProxyAdmin = new ProxyAdmin();\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Returns the address of a community from communityList\n     *\n     * @param _index index of the community\n     * @return address of the community\n     */\n    function communityListAt(uint256 _index) external view override returns (address) {\n        return communityList.at(_index);\n    }\n\n    /**\n     * @notice Returns the number of communities\n     *\n     * @return uint256 number of communities\n     */\n    function communityListLength() external view override returns (uint256) {\n        return communityList.length();\n    }\n\n    /**\n     * @notice Returns if an address is the ambassador or entity of the community\n     *\n     * @return bool true if the address is an ambassador or entity of the community\n     */\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return\n            ambassadors.isAmbassadorOf(_ambassadorOrEntity, _community) ||\n            ambassadors.isEntityOf(_ambassadorOrEntity, _community);\n    }\n\n    /**\n     * @notice Updates the address of the treasury\n     *\n     * @param _newTreasury address of the new treasury contract\n     */\n    function updateTreasury(ITreasury _newTreasury) external override onlyOwner {\n        address oldTreasuryAddress = address(treasury);\n        treasury = _newTreasury;\n\n        emit TreasuryUpdated(oldTreasuryAddress, address(_newTreasury));\n    }\n\n    /**\n     * @notice Updates the address of the the communityImplementation\n     *\n     * @param _newCommunityImplementation address of the new communityImplementation contract\n     */\n    function updateCommunityImplementation(ICommunity _newCommunityImplementation)\n        external\n        override\n        onlyOwner\n    {\n        address _oldCommunityImplementationAddress = address(communityImplementation);\n        communityImplementation = _newCommunityImplementation;\n\n        emit CommunityImplementationUpdated(\n            _oldCommunityImplementationAddress,\n            address(_newCommunityImplementation)\n        );\n    }\n\n    /**\n     * @notice Adds a new community\n     *\n     * @param _managers addresses of the community managers\n     * @param _ambassador address of the ambassador\n     * @param _claimAmount base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim at in total\n     * @param _decreaseStep value decreased from maxClaim for every beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     */\n    function addCommunity(\n        address[] memory _managers,\n        address _ambassador,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external override onlyOwnerOrUBICommittee {\n        require(\n            _managers.length > 0,\n            \"CommunityAdmin::addCommunity: Community should have at least one manager\"\n        );\n        address _communityAddress = deployCommunity(\n            _managers,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval,\n            _minTranche,\n            _maxTranche,\n            ICommunity(address(0))\n        );\n        require(_communityAddress != address(0), \"CommunityAdmin::addCommunity: NOT_VALID\");\n        communities[_communityAddress] = CommunityState.Valid;\n        communityList.add(_communityAddress);\n        ambassadors.setCommunityToAmbassador(_ambassador, address(_communityAddress));\n\n        emit CommunityAdded(\n            _communityAddress,\n            _managers,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval,\n            _minTranche,\n            _maxTranche\n        );\n\n        transferToCommunity(ICommunity(_communityAddress), _minTranche);\n        treasury.transfer(cUSD, address(_managers[0]), DEFAULT_AMOUNT);\n    }\n\n    /**\n     * @notice Migrates a community by deploying a new contract.\n     *\n     * @param _managers address of the community managers\n     * @param _previousCommunity address of the community to be migrated\n     */\n    function migrateCommunity(address[] memory _managers, ICommunity _previousCommunity)\n        external\n        override\n        onlyOwnerOrUBICommittee\n        nonReentrant\n    {\n        require(\n            communities[address(_previousCommunity)] != CommunityState.Migrated,\n            \"CommunityAdmin::migrateCommunity: this community has been migrated\"\n        );\n\n        communities[address(_previousCommunity)] = CommunityState.Migrated;\n\n        bool _isCommunityNew = isCommunityNewType(_previousCommunity);\n\n        address newCommunityAddress;\n        if (_isCommunityNew) {\n            newCommunityAddress = deployCommunity(\n                _managers,\n                _previousCommunity.claimAmount(),\n                _previousCommunity.getInitialMaxClaim(),\n                _previousCommunity.decreaseStep(),\n                _previousCommunity.baseInterval(),\n                _previousCommunity.incrementInterval(),\n                _previousCommunity.minTranche(),\n                _previousCommunity.maxTranche(),\n                _previousCommunity\n            );\n        } else {\n            newCommunityAddress = deployCommunity(\n                _managers,\n                _previousCommunity.claimAmount(),\n                _previousCommunity.maxClaim(),\n                1e16,\n                (_previousCommunity.baseInterval() / 5),\n                (_previousCommunity.incrementInterval() / 5),\n                1e16,\n                5e18,\n                _previousCommunity\n            );\n        }\n\n        require(newCommunityAddress != address(0), \"CommunityAdmin::migrateCommunity: NOT_VALID\");\n\n        if (_isCommunityNew) {\n            uint256 balance = cUSD.balanceOf(address(_previousCommunity));\n            _previousCommunity.transfer(cUSD, newCommunityAddress, balance);\n        }\n\n        communities[newCommunityAddress] = CommunityState.Valid;\n        communityList.add(newCommunityAddress);\n\n        emit CommunityMigrated(_managers, newCommunityAddress, address(_previousCommunity));\n    }\n\n    /**\n     * @notice Adds a new manager to a community\n     *\n     * @param _community address of the community\n     * @param _account address to be added as community manager\n     */\n    function addManagerToCommunity(ICommunity _community, address _account)\n        external\n        override\n        onlyOwnerOrUBICommittee\n    {\n        _community.addManager(_account);\n    }\n\n    /**\n     * @notice Removes an existing community. All community funds are transferred to the treasury\n     *\n     * @param _community address of the community\n     */\n    function removeCommunity(ICommunity _community)\n        external\n        override\n        onlyOwnerOrUBICommittee\n        nonReentrant\n    {\n        require(\n            communities[address(_community)] == CommunityState.Valid,\n            \"CommunityAdmin::removeCommunity: this isn't a valid community\"\n        );\n        communities[address(_community)] = CommunityState.Removed;\n\n        ambassadors.removeCommunity(address(_community));\n        _community.transfer(cUSD, address(treasury), cUSD.balanceOf(address(_community)));\n        emit CommunityRemoved(address(_community));\n    }\n\n    /**\n     * @dev Funds an existing community if it hasn't enough funds\n     */\n    function fundCommunity() external override onlyCommunities {\n        ICommunity _community = ICommunity(msg.sender);\n        uint256 _balance = cUSD.balanceOf(msg.sender);\n        require(\n            _balance < _community.minTranche(),\n            \"CommunityAdmin::fundCommunity: this community has enough funds\"\n        );\n        require(\n            block.number > _community.lastFundRequest() + _community.baseInterval(),\n            \"CommunityAdmin::fundCommunity: this community is not allowed to request yet\"\n        );\n\n        uint256 _trancheAmount = calculateCommunityTrancheAmount(ICommunity(msg.sender));\n\n        if (_trancheAmount > _balance) {\n            uint256 _amount = _trancheAmount - _balance;\n            uint256 _treasurySafetyBalance = cUSD.balanceOf(address(treasury)) /\n                TREASURY_SAFETY_FACTOR;\n            require(\n                _amount <= _treasurySafetyBalance,\n                \"CommunityAdmin::fundCommunity: Not enough funds\"\n            );\n            transferToCommunity(_community, _amount);\n        }\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from  community to an address\n     *\n     * @param _community address of the community\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transferFromCommunity(\n        ICommunity _community,\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _community.transfer(_token, _to, _amount);\n    }\n\n    /** @notice Updates the beneficiary params of a community\n     *\n     * @param _community address of the community\n     * @param _claimAmount  base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim  in total\n     * @param _decreaseStep value decreased from maxClaim each time a is beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     */\n    function updateBeneficiaryParams(\n        ICommunity _community,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external override onlyOwnerOrUBICommittee {\n        _community.updateBeneficiaryParams(\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval\n        );\n    }\n\n    /** @notice Updates params of a community\n     *\n     * @param _community address of the community\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     */\n    function updateCommunityParams(\n        ICommunity _community,\n        uint256 _minTranche,\n        uint256 _maxTranche\n    ) external override onlyOwnerOrUBICommittee {\n        _community.updateCommunityParams(_minTranche, _maxTranche);\n    }\n\n    /**\n     * @notice Updates proxy implementation address of a community\n     *\n     * @param _CommunityMiddleProxy address of the community\n     * @param _newCommunityImplementation address of new implementation contract\n     */\n    function updateProxyImplementation(\n        address _CommunityMiddleProxy,\n        address _newCommunityImplementation\n    ) external override onlyOwnerOrUBICommittee {\n        communityProxyAdmin.upgrade(\n            TransparentUpgradeableProxy(payable(_CommunityMiddleProxy)),\n            _newCommunityImplementation\n        );\n    }\n\n    /**\n     * @notice Updates proxy implementation address of ubi committee\n     *\n     * @param _newUbiCommittee address of new implementation contract\n     */\n    function updateUbiCommittee(IUBICommittee _newUbiCommittee) external override onlyOwner {\n        address oldUbiCommittee = address(ubiCommittee);\n        ubiCommittee = _newUbiCommittee;\n\n        emit UBICommitteeUpdated(oldUbiCommittee, address(_newUbiCommittee));\n    }\n\n    /**\n     * @notice Updates proxy implementation address of ambassadors\n     *\n     * @param _newAmbassadors address of new implementation contract\n     */\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external override onlyOwner {\n        address oldAmbassadors = address(ambassadors);\n        ambassadors = _newAmbassadors;\n\n        emit AmbassadorsUpdated(oldAmbassadors, address(_newAmbassadors));\n    }\n\n    /**\n     * @notice Updates communityMiddleProxy address\n     *\n     * @param _newCommunityMiddleProxy address of new implementation contract\n     */\n    function updateCommunityMiddleProxy(address _newCommunityMiddleProxy)\n        external\n        override\n        onlyOwner\n    {\n        address _oldCommunityMiddleProxy = communityMiddleProxy;\n        communityMiddleProxy = _newCommunityMiddleProxy;\n\n        emit CommunityMiddleProxyUpdated(_oldCommunityMiddleProxy, _newCommunityMiddleProxy);\n    }\n\n    /**\n     * @dev Transfers cUSDs from the treasury to a community\n     *\n     * @param _community address of the community\n     * @param _amount amount of the transaction\n     */\n    function transferToCommunity(ICommunity _community, uint256 _amount) internal nonReentrant {\n        treasury.transfer(cUSD, address(_community), _amount);\n        _community.addTreasuryFunds(_amount);\n\n        emit CommunityFunded(address(_community), _amount);\n    }\n\n    /**\n     * @dev Internal implementation of deploying a new community\n     *\n     * @param _managers addresses of the community managers\n     * @param _claimAmount base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim at in total\n     * @param _decreaseStep value decreased from maxClaim for every beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     * @param _previousCommunity address of the previous community. Used for migrating communities\n     */\n    function deployCommunity(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche,\n        ICommunity _previousCommunity\n    ) internal returns (address) {\n        TransparentUpgradeableProxy _community = new TransparentUpgradeableProxy(\n            address(communityMiddleProxy),\n            address(communityProxyAdmin),\n            \"\"\n        );\n\n        ICommunity(address(_community)).initialize(\n            _managers,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval,\n            _minTranche,\n            _maxTranche,\n            _previousCommunity\n        );\n\n        return address(_community);\n    }\n\n    /** @dev Calculates the tranche amount of a community.\n     *        Enforces the tranche amount to be between community minTranche and maxTranche\n     * @param _community address of the community\n     * @return uint256 the value of the tranche amount\n     */\n    function calculateCommunityTrancheAmount(ICommunity _community)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 _validBeneficiaries = _community.validBeneficiaryCount();\n        uint256 _claimAmount = _community.claimAmount();\n        uint256 _minTranche = _community.minTranche();\n        uint256 _maxTranche = _community.maxTranche();\n\n        uint256 _trancheAmount = _validBeneficiaries * _claimAmount;\n\n        if (_trancheAmount < _minTranche) {\n            _trancheAmount = _minTranche;\n        } else if (_trancheAmount > _maxTranche) {\n            _trancheAmount = _maxTranche;\n        }\n\n        return _trancheAmount;\n    }\n\n    /**\n     * @notice Checks if a community is deployed with the new type of smart contract\n     *\n     * @param _community address of the community\n     * @return bool true if the community is deployed with the new type of smart contract\n     */\n    function isCommunityNewType(ICommunity _community) internal pure returns (bool) {\n        return _community.impactMarketAddress() == address(0);\n    }\n}\n"
    },
    "contracts/community/interfaces/CommunityAdminStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"./ICommunityAdmin.sol\";\nimport \"../../treasury/interfaces/ITreasury.sol\";\n\n/**\n * @title Storage for CommunityAdmin\n * @notice For future upgrades, do not change CommunityAdminStorageV1. Create a new\n * contract which implements CommunityAdminStorageV1 and following the naming convention\n * CommunityAdminStorageVX.\n */\nabstract contract CommunityAdminStorageV1 is ICommunityAdmin {\n    IERC20 public override cUSD;\n    ITreasury public override treasury;\n    ICommunity public override communityImplementation;\n    ProxyAdmin public override communityProxyAdmin;\n\n    mapping(address => CommunityState) public override communities;\n    EnumerableSet.AddressSet internal communityList;\n}\n"
    },
    "contracts/community/interfaces/CommunityAdminStorageV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"./CommunityAdminStorageV1.sol\";\nimport \"../../governor/ubiCommittee/interfaces/IUBICommittee.sol\";\nimport \"../../ambassadors/interfaces/IAmbassadors.sol\";\n\n/**\n * @title Storage for CommunityAdmin\n * @notice For future upgrades, do not change CommunityAdminStorageV1. Create a new\n * contract which implements CommunityAdminStorageV1 and following the naming convention\n * CommunityAdminStorageVX.\n */\nabstract contract CommunityAdminStorageV2 is CommunityAdminStorageV1 {\n    IUBICommittee public override ubiCommittee;\n    IAmbassadors public override ambassadors;\n    address public override communityMiddleProxy;\n}\n"
    },
    "contracts/ambassadors/interfaces/AmbassadorsStorageV1.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./IAmbassadors.sol\";\nimport \"../../community/interfaces/ICommunityAdmin.sol\";\n\n/**\n * @title Storage for Ambassadors\n * @notice For future upgrades, do not change AmbassadorsStorageV1. Create a new\n * contract which implements AmbassadorsStorageV1 and following the naming convention\n * AmbassadorsStorageVX.\n */\nabstract contract AmbassadorsStorageV1 is IAmbassadors {\n    uint256 public ambassadorIndex;\n    uint256 public entityIndex;\n\n    ICommunityAdmin public communityAdmin;\n    // address to index\n    mapping(address => uint256) public ambassadorByAddress;\n    // index to address\n    mapping(uint256 => address) public ambassadorByIndex;\n    // communities an ambassador is reponsible for\n    mapping(uint256 => EnumerableSet.AddressSet) internal ambassadorCommunities;\n    // community address to ambassador index\n    mapping(address => uint256) public communityToAmbassador;\n    // ambassador belongs to entity\n    mapping(uint256 => uint256) public ambassadorToEntity;\n    // entity adding ambassadors\n    mapping(address => uint256) public entityByAddress;\n    // entity adding ambassadors\n    mapping(uint256 => address) public entityByIndex;\n    // number of ambassadors an entity is resposible for\n    mapping(uint256 => uint256) public entityAmbassadors;\n}\n"
    },
    "contracts/ambassadors/AmbassadorsImplementation.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./interfaces/AmbassadorsStorageV1.sol\";\nimport \"../community/interfaces/ICommunityAdmin.sol\";\n\n/**\n * @notice Welcome to Ambassadors contract.\n */\ncontract AmbassadorsImplementation is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    AmbassadorsStorageV1\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /**\n     * @notice Triggered when an entity is added.\n     *\n     * @param entity Address of the entity added\n     *\n     */\n    event EntityAdded(address indexed entity);\n\n    /**\n     * @notice Triggered when an entity is removed.\n     *\n     * @param entity Address of the entity removed\n     *\n     */\n    event EntityRemoved(address indexed entity);\n\n    /**\n     * @notice Triggered when an entity replaced account address.\n     *\n     * @param entityIndex Entity index replacing account address\n     * @param oldAccount Old account address\n     * @param newAccount New account address\n     *\n     */\n    event EntityAccountReplaced(\n        uint256 entityIndex,\n        address indexed oldAccount,\n        address indexed newAccount\n    );\n\n    /**\n     * @notice Triggered when an ambassador is added to an entity.\n     *\n     * @param ambassador Address of the ambassador added\n     * @param entity Address of the entity where the ambassador is added\n     *\n     */\n    event AmbassadorAdded(address indexed ambassador, address indexed entity);\n\n    /**\n     * @notice Triggered when an ambassador is removed.\n     *\n     * @param ambassador Address of the ambassador removed\n     * @param entity Address of the entity where the ambassador is removed\n     *\n     */\n    event AmbassadorRemoved(address indexed ambassador, address indexed entity);\n\n    /**\n     * @notice Triggered when an ambassador is replaced by the entity.\n     *\n     * @param ambassadorIndex Index of the ambassador being replaced\n     * @param entityAccount Address of the entity where ambassador is being replaced\n     * @param oldAmbassador Ambassador's old account address\n     * @param newAmbassador Ambassador's new account address\n     *\n     */\n    event AmbassadorReplaced(\n        uint256 ambassadorIndex,\n        address indexed entityAccount,\n        address indexed oldAmbassador,\n        address indexed newAmbassador\n    );\n\n    /**\n     * @notice Triggered when an ambassador replaces it's own account.\n     *\n     * @param ambassadorIndex Index of the ambassador being replaced\n     * @param entityAccount Address of the entity where ambassador is being replaced\n     * @param oldAccount Ambassador's old account address\n     * @param newAccount Ambassador's new account address\n     *\n     */\n    event AmbassadorAccountReplaced(\n        uint256 ambassadorIndex,\n        address indexed entityAccount,\n        address indexed oldAccount,\n        address indexed newAccount\n    );\n\n    /**\n     * @notice Triggered when an ambassador is transfered to a new entity.\n     *\n     * @param ambassador Ambassador address being replaced\n     * @param oldEntity Entity's old account address\n     * @param newEntity Entity's new account address\n     *\n     */\n    event AmbassadorTransfered(\n        address indexed ambassador,\n        address indexed oldEntity,\n        address indexed newEntity\n    );\n\n    /**\n     * @notice Triggered when a community is transfered from one ambassador to another.\n     *\n     * @param fromAmbassador Ambassador address from which the community is being transfered from\n     * @param toAmbassador Ambassador address to which the community is being transfered to\n     * @param community Community address being transfered\n     *\n     */\n    event AmbassadorToCommunityUpdated(\n        address indexed fromAmbassador,\n        address indexed toAmbassador,\n        address indexed community\n    );\n\n    /**\n     * @notice Triggered when a community is removed.\n     *\n     * @param ambassador Ambassador of the community being removed\n     * @param community Community address being removed\n     *\n     */\n    event CommunityRemoved(address indexed ambassador, address indexed community);\n\n    /**\n     * @notice Enforces sender to be an ambassador\n     */\n    modifier onlyAmbassador() {\n        require(ambassadorByAddress[msg.sender] != 0, \"Ambassador:: ONLY_AMBASSADOR\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be an entity\n     */\n    modifier onlyEntity() {\n        require(entityByAddress[msg.sender] != 0, \"Ambassador:: ONLY_ENTITY\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be an entity or owner\n     */\n    modifier onlyEntityOrOwner() {\n        require(\n            entityByAddress[msg.sender] != 0 || owner() == msg.sender,\n            \"Ambassador:: ONLY_ENTITY_OR_OWNER\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be te community admin contract\n     */\n    modifier onlyCommunityAdmin() {\n        require(address(communityAdmin) == msg.sender, \"Ambassador:: ONLY_COMMUNITY_ADMIN\");\n        _;\n    }\n\n    /**\n     * @notice Used to initialize a new Ambassadors contract\n     *\n     * @param _communityAdmin Address of the community admin contract\n     *\n     */\n    function initialize(ICommunityAdmin _communityAdmin) external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        ambassadorIndex = 1;\n        entityIndex = 1;\n        communityAdmin = _communityAdmin;\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @notice Returns boolean whether an address is ambassador or not.\n     *\n     * @param _ambassador Address of the ambassador\n     * @return Boolean whether an address is ambassador or not\n     */\n    function isAmbassador(address _ambassador) public view override returns (bool) {\n        return ambassadorByAddress[_ambassador] != 0;\n    }\n\n    /**\n     * @notice Returns boolean whether an address is ambassador of a given community.\n     *\n     * @param _ambassador Address of the ambassador\n     * @param _community Address of the community\n     * @return Boolean whether an address is ambassador of a given community or not\n     */\n    function isAmbassadorOf(address _ambassador, address _community)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return ambassadorByAddress[_ambassador] == communityToAmbassador[_community];\n    }\n\n    /**\n     * @notice Returns boolean whether an address is entity reponsible for ambassador of a given community.\n     *\n     * @param _entity Address of the entity\n     * @param _community Address of the community\n     * @return Boolean whether an address is entity reponsible for ambassador of a given community or not\n     */\n    function isEntityOf(address _entity, address _community) public view override returns (bool) {\n        return entityByAddress[_entity] == ambassadorToEntity[communityToAmbassador[_community]];\n    }\n\n    /**\n     * @notice Returns boolean whether an address is ambassador at a given entity.\n     *\n     * @param _ambassador Address of the ambassador\n     * @param _entityAddress Address of the entity\n     * @return Boolean whether an address is ambassador at a given entity or not\n     */\n    function isAmbassadorAt(address _ambassador, address _entityAddress)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return\n            ambassadorToEntity[ambassadorByAddress[_ambassador]] == entityByAddress[_entityAddress];\n    }\n\n    /** Updates the address of the communityAdmin\n     *\n     * @param _newCommunityAdmin address of the new communityAdmin\n     * @dev used only for testing the new community upgrade flow\n     */\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external onlyOwner {\n        communityAdmin = _newCommunityAdmin;\n    }\n\n    /**\n     * @notice Registers an entity.\n     *\n     * @param _entity Address of the entity\n     */\n    function addEntity(address _entity) public override onlyOwner {\n        require(entityByAddress[_entity] == 0, \"Ambassador:: ALREADY_ENTITY\");\n\n        entityByAddress[_entity] = entityIndex;\n        entityByIndex[entityIndex] = _entity;\n        entityIndex++;\n\n        emit EntityAdded(_entity);\n    }\n\n    /**\n     * @notice Removes an entity.\n     *\n     * @param _entity Address of the entity\n     */\n    function removeEntity(address _entity) public override onlyOwner {\n        uint256 entityIndex = entityByAddress[_entity];\n\n        require(entityIndex != 0, \"Ambassador:: NOT_ENTITY\");\n        require(entityAmbassadors[entityIndex] == 0, \"Ambassador:: HAS_AMBASSADORS\");\n\n        entityByIndex[entityIndex] = address(0);\n        entityByAddress[_entity] = 0;\n\n        emit EntityRemoved(_entity);\n    }\n\n    /**\n     * @notice Replace entity account.\n     *\n     * @param _entity Address of the entity\n     * @param _newEntity New entity address\n     */\n    function replaceEntityAccount(address _entity, address _newEntity) external override {\n        uint256 entityIndex = entityByAddress[_entity];\n\n        require(msg.sender == _entity || msg.sender == owner(), \"Ambassador:: NOT_ALLOWED\");\n        require(entityIndex != 0, \"Ambassador:: NOT_ENTITY\");\n\n        entityByIndex[entityIndex] = _newEntity;\n        entityByAddress[_newEntity] = entityByAddress[_entity];\n        entityByAddress[_entity] = 0;\n\n        emit EntityAccountReplaced(entityIndex, _entity, _newEntity);\n    }\n\n    /**\n     * @notice Registers an ambassador.\n     *\n     * @param _ambassador Address of the ambassador\n     */\n    function addAmbassador(address _ambassador) external override onlyEntity {\n        require(!isAmbassador(_ambassador), \"Ambassador:: ALREADY_AMBASSADOR\");\n\n        uint256 entityIndex = entityByAddress[msg.sender];\n\n        ambassadorByAddress[_ambassador] = ambassadorIndex;\n        ambassadorByIndex[ambassadorIndex] = _ambassador;\n        ambassadorToEntity[ambassadorIndex] = entityIndex;\n        entityAmbassadors[entityIndex]++;\n        ambassadorIndex++;\n\n        emit AmbassadorAdded(_ambassador, msg.sender);\n    }\n\n    /**\n     * @notice Removes an ambassador.\n     *\n     * @param _ambassador Address of the ambassador\n     */\n    function removeAmbassador(address _ambassador) external override onlyEntity {\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\n        uint256 entityIndex = entityByAddress[msg.sender];\n\n        require(isAmbassadorAt(_ambassador, msg.sender), \"Ambassador:: NOT_AMBASSADOR\");\n        require(\n            ambassadorCommunities[thisAmbassadorIndex].length() == 0,\n            \"Ambassador:: HAS_COMMUNITIES\"\n        );\n\n        entityAmbassadors[entityIndex]--;\n        ambassadorByAddress[_ambassador] = 0;\n\n        emit AmbassadorRemoved(_ambassador, msg.sender);\n    }\n\n    /**\n     * @notice Replace ambassador account. Called by ambassador.\n     *\n     * @param _ambassador Address of the ambassador\n     * @param _newAmbassador New ambassador address\n     */\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador)\n        external\n        override\n    {\n        require(msg.sender == _ambassador || msg.sender == owner(), \"Ambassador:: NOT_ALLOWED\");\n        require(isAmbassador(_ambassador), \"Ambassador:: NOT_AMBASSADOR\");\n        require(!isAmbassador(_newAmbassador), \"Ambassador:: ALREADY_AMBASSADOR\");\n\n        uint256 thisAmbassadorIndex;\n        address entityAddress;\n        address oldAmbassador;\n        address newAmbassador;\n        (\n            thisAmbassadorIndex,\n            entityAddress,\n            oldAmbassador,\n            newAmbassador\n        ) = _replaceAmbassadorAccountInternal(_ambassador, _newAmbassador);\n\n        emit AmbassadorAccountReplaced(\n            thisAmbassadorIndex,\n            entityAddress,\n            oldAmbassador,\n            newAmbassador\n        );\n    }\n\n    /**\n     * @notice Replaces an ambassador. Called by entity.\n     *\n     * @param _oldAmbassador Address of the ambassador\n     * @param _newAmbassador New ambassador address\n     */\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external override {\n        require(\n            isAmbassadorAt(_oldAmbassador, msg.sender) || msg.sender == owner(),\n            \"Ambassador:: NOT_AMBASSADOR\"\n        );\n        require(!isAmbassador(_newAmbassador), \"Ambassador:: ALREADY_AMBASSADOR\");\n\n        uint256 thisAmbassadorIndex;\n        address entityAddress;\n        address oldAmbassador;\n        address newAmbassador;\n        (\n            thisAmbassadorIndex,\n            entityAddress,\n            oldAmbassador,\n            newAmbassador\n        ) = _replaceAmbassadorAccountInternal(_oldAmbassador, _newAmbassador);\n\n        emit AmbassadorReplaced(thisAmbassadorIndex, entityAddress, oldAmbassador, newAmbassador);\n    }\n\n    /**\n     * @notice Transfers an ambassador to another entity.\n     *\n     * @param _ambassador Address of the ambassador\n     * @param _toEntity Address of the entity\n     * @param _keepCommunities Boolean whether to keep the ambassador's communities or not\n     */\n    function transferAmbassador(\n        address _ambassador,\n        address _toEntity,\n        bool _keepCommunities\n    ) external override onlyEntityOrOwner {\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\n        require(\n            isAmbassadorAt(_ambassador, msg.sender) || msg.sender == owner(),\n            \"Ambassador:: NOT_AMBASSADOR\"\n        );\n        require(\n            ambassadorCommunities[thisAmbassadorIndex].length() == 0 || _keepCommunities == true,\n            \"Ambassador:: HAS_COMMUNITIES\"\n        );\n\n        uint256 entityIndex = ambassadorToEntity[thisAmbassadorIndex];\n        uint256 entityToIndex = entityByAddress[_toEntity];\n\n        ambassadorToEntity[thisAmbassadorIndex] = entityToIndex;\n        entityAmbassadors[entityIndex]--;\n        entityAmbassadors[entityToIndex]++;\n\n        emit AmbassadorTransfered(_ambassador, entityByIndex[entityIndex], _toEntity);\n    }\n\n    /**\n     * @notice Transfers community from ambassador to another ambassador.\n     *\n     * @param _to Address of the ambassador to transfer the community to\n     * @param _community Community address\n     */\n    function transferCommunityToAmbassador(address _to, address _community)\n        external\n        override\n        onlyEntityOrOwner\n    {\n        address _from = ambassadorByIndex[communityToAmbassador[_community]];\n\n        require(isAmbassadorOf(_from, _community), \"Ambassador:: NOT_AMBASSADOR\");\n        require(!isAmbassadorOf(_to, _community), \"Ambassador:: ALREADY_AMBASSADOR\");\n        require(\n            isAmbassadorAt(_from, msg.sender) || msg.sender == owner(),\n            \"Ambassador:: NOT_AMBASSADOR\"\n        );\n        require(\n            isAmbassadorAt(_to, msg.sender) || msg.sender == owner(),\n            \"Ambassador:: NOT_AMBASSADOR\"\n        );\n\n        communityToAmbassador[_community] = ambassadorByAddress[_to];\n        ambassadorCommunities[ambassadorByAddress[_from]].remove(_community);\n        ambassadorCommunities[ambassadorByAddress[_to]].add(_community);\n\n        emit AmbassadorToCommunityUpdated(_from, _to, _community);\n    }\n\n    /**\n     * @notice Sets community to ambassador.\n     *\n     * @param _ambassador Address of the ambassador\n     * @param _community Community address\n     */\n    function setCommunityToAmbassador(address _ambassador, address _community)\n        external\n        override\n        onlyCommunityAdmin\n    {\n        require(isAmbassador(_ambassador), \"Ambassador:: NOT_AMBASSADOR\");\n        require(!isAmbassadorOf(_ambassador, _community), \"Ambassador:: ALREADY_AMBASSADOR\");\n\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\n\n        communityToAmbassador[_community] = thisAmbassadorIndex;\n        ambassadorCommunities[thisAmbassadorIndex].add(_community);\n\n        emit AmbassadorToCommunityUpdated(address(0), _ambassador, _community);\n    }\n\n    /**\n     * @notice Removes community.\n     *\n     * @param _community Community address\n     */\n    function removeCommunity(address _community) external override onlyCommunityAdmin {\n        address _ambassador = ambassadorByIndex[communityToAmbassador[_community]];\n\n        require(isAmbassadorOf(_ambassador, _community), \"Ambassador:: NOT_AMBASSADOR\");\n\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_ambassador];\n\n        communityToAmbassador[_community] = 0;\n        ambassadorCommunities[thisAmbassadorIndex].remove(_community);\n\n        emit CommunityRemoved(_ambassador, _community);\n    }\n\n    /**\n     * @notice Internal function, common to account replacement.\n     *\n     * @param _old Address of the ambassador\n     * @param _new New ambassador address\n     */\n    function _replaceAmbassadorAccountInternal(address _old, address _new)\n        private\n        returns (\n            uint256,\n            address,\n            address,\n            address\n        )\n    {\n        uint256 thisAmbassadorIndex = ambassadorByAddress[_old];\n        uint256 entityIndex = ambassadorToEntity[thisAmbassadorIndex];\n\n        ambassadorByIndex[thisAmbassadorIndex] = _new;\n        ambassadorByAddress[_new] = ambassadorByAddress[_old];\n        ambassadorByAddress[_old] = 0;\n\n        return (thisAmbassadorIndex, entityByIndex[entityIndex], _old, _new);\n    }\n}\n"
    },
    "contracts/community/CommunityImplementation.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./interfaces/ICommunity.sol\";\nimport \"./interfaces/ICommunityLegacy.sol\";\nimport \"./interfaces/ICommunityAdmin.sol\";\nimport \"./interfaces/CommunityStorageV1.sol\";\n\n/**\n * @notice Welcome to the Community contract. For each community\n * there will be one proxy contract deployed by CommunityAdmin.\n * The implementation of the proxy is this contract. This enable\n * us to save tokens on the contract itself, and avoid the problems\n * of having everything in one single contract.\n *Each community has it's own members and and managers.\n */\ncontract CommunityImplementation is\n    Initializable,\n    AccessControlUpgradeable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    CommunityStorageV1\n{\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    bytes32 private constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    uint256 private constant DEFAULT_AMOUNT = 5e16;\n\n    /**\n     * @notice Triggered when a manager has been added\n     *\n     * @param manager           Address of the manager that triggered the event\n     *                          or address of the CommunityAdmin if it's first manager\n     * @param account           Address of the manager that has been added\n     */\n    event ManagerAdded(address indexed manager, address indexed account);\n\n    /**\n     * @notice Triggered when a manager has been removed\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param account           Address of the manager that has been removed\n     */\n    event ManagerRemoved(address indexed manager, address indexed account);\n\n    /**\n     * @notice Triggered when a beneficiary has been added\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been added\n     */\n    event BeneficiaryAdded(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been locked\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been locked\n     */\n    event BeneficiaryLocked(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been unlocked\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been unlocked\n     */\n    event BeneficiaryUnlocked(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has been removed\n     *\n     * @param manager           Address of the manager that triggered the event\n     * @param beneficiary       Address of the beneficiary that has been removed\n     */\n    event BeneficiaryRemoved(address indexed manager, address indexed beneficiary);\n\n    /**\n     * @notice Triggered when a beneficiary has claimed\n     *\n     * @param beneficiary       Address of the beneficiary that has claimed\n     * @param amount            Amount of the claim\n     */\n    event BeneficiaryClaim(address indexed beneficiary, uint256 amount);\n\n    /**\n     * @notice Triggered when a community has been locked\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event CommunityLocked(address indexed manager);\n\n    /**\n     * @notice Triggered when a community has been unlocked\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event CommunityUnlocked(address indexed manager);\n\n    /**\n     * @notice Triggered when a manager has requested funds for community\n     *\n     * @param manager           Address of the manager that triggered the event\n     */\n    event FundsRequested(address indexed manager);\n\n    /**\n     * @notice Triggered when someone has donated cUSD\n     *\n     * @param donor             Address of the donor\n     * @param amount            Amount of the donation\n     */\n    event Donate(address indexed donor, uint256 amount);\n\n    /**\n     * @notice Triggered when a beneficiary from previous community has joined in the current community\n     *\n     * @param beneficiary       Address of the beneficiary\n     */\n    event BeneficiaryJoined(address indexed beneficiary);\n\n    /**\n     * @notice Triggered when beneficiary params has been updated\n     *\n     * @param oldClaimAmount       Old claimAmount value\n     * @param oldMaxClaim          Old maxClaim value\n     * @param oldDecreaseStep      Old decreaseStep value\n     * @param oldBaseInterval      Old baseInterval value\n     * @param oldIncrementInterval Old incrementInterval value\n     * @param newClaimAmount       New claimAmount value\n     * @param newMaxClaim          New maxClaim value\n     * @param newDecreaseStep      New decreaseStep value\n     * @param newBaseInterval      New baseInterval value\n     * @param newIncrementInterval New incrementInterval value\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event BeneficiaryParamsUpdated(\n        uint256 oldClaimAmount,\n        uint256 oldMaxClaim,\n        uint256 oldDecreaseStep,\n        uint256 oldBaseInterval,\n        uint256 oldIncrementInterval,\n        uint256 newClaimAmount,\n        uint256 newMaxClaim,\n        uint256 newDecreaseStep,\n        uint256 newBaseInterval,\n        uint256 newIncrementInterval\n    );\n\n    /**\n     * @notice Triggered when community params has been updated\n     *\n     * @param oldMinTranche        Old minTranche value\n     * @param oldMaxTranche        Old maxTranche value\n     * @param newMinTranche        New minTranche value\n     * @param newMaxTranche        New maxTranche value\n     *\n     * For further information regarding each parameter, see\n     * *Community* smart contract initialize method.\n     */\n    event CommunityParamsUpdated(\n        uint256 oldMinTranche,\n        uint256 oldMaxTranche,\n        uint256 newMinTranche,\n        uint256 newMaxTranche\n    );\n\n    /**\n     * @notice Triggered when communityAdmin has been updated\n     *\n     * @param oldCommunityAdmin   Old communityAdmin address\n     * @param newCommunityAdmin   New communityAdmin address\n     */\n    event CommunityAdminUpdated(\n        address indexed oldCommunityAdmin,\n        address indexed newCommunityAdmin\n    );\n\n    /**\n     * @notice Triggered when previousCommunity has been updated\n     *\n     * @param oldPreviousCommunity   Old previousCommunity address\n     * @param newPreviousCommunity   New previousCommunity address\n     */\n    event PreviousCommunityUpdated(\n        address indexed oldPreviousCommunity,\n        address indexed newPreviousCommunity\n    );\n\n    /**\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\n     *\n     * @param token               ERC20 token address\n     * @param to                  Address of the receiver\n     * @param amount              Amount of the transaction\n     */\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\n\n    /**\n     * @notice Used to initialize a new Community contract\n     *\n     * @param _managers            Community's initial managers.\n     *                             Will be able to add others\n     * @param _claimAmount         Base amount to be claim by the beneficiary\n     * @param _maxClaim            Limit that a beneficiary can claim in total\n     * @param _decreaseStep        Value decreased from maxClaim each time a beneficiary is added\n     * @param _baseInterval        Base interval to start claiming\n     * @param _incrementInterval   Increment interval used in each claim\n     * @param _previousCommunity   Previous smart contract address of community\n     * @param _minTranche          Minimum amount that the community will receive when requesting funds\n     * @param _maxTranche          Maximum amount that the community will receive when requesting funds\n     */\n    function initialize(\n        address[] memory _managers,\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval,\n        uint256 _minTranche,\n        uint256 _maxTranche,\n        ICommunity _previousCommunity\n    ) external override initializer {\n        require(\n            _baseInterval > _incrementInterval,\n            \"Community::initialize: baseInterval must be greater than incrementInterval\"\n        );\n        require(\n            _maxClaim > _claimAmount,\n            \"Community::initialize: maxClaim must be greater than claimAmount\"\n        );\n\n        require(\n            _minTranche <= _maxTranche,\n            \"Community::initialize: minTranche should not be greater than maxTranche\"\n        );\n\n        __AccessControl_init();\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        claimAmount = _claimAmount;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n        maxClaim = _maxClaim;\n        minTranche = _minTranche;\n        maxTranche = _maxTranche;\n        previousCommunity = _previousCommunity;\n        communityAdmin = ICommunityAdmin(msg.sender);\n        decreaseStep = _decreaseStep;\n        locked = false;\n\n        transferOwnership(msg.sender);\n\n        // MANAGER_ROLE is the admin for the MANAGER_ROLE\n        // so every manager is able to add or remove other managers\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\n\n        _setupRole(MANAGER_ROLE, msg.sender);\n        emit ManagerAdded(msg.sender, msg.sender);\n\n        for (uint256 i = 0; i < _managers.length; i++) {\n            addManager(_managers[i]);\n        }\n    }\n\n    /**\n     * @notice Returns the current implementation version\n     */\n    function getVersion() external pure override returns (uint256) {\n        return 2;\n    }\n\n    /**\n     * @notice Enforces sender to be a valid beneficiary\n     */\n    modifier onlyValidBeneficiary() {\n        require(\n            beneficiaries[msg.sender].state == BeneficiaryState.Valid,\n            \"Community: NOT_VALID_BENEFICIARY\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to have manager role\n     */\n    modifier onlyManagers() {\n        require(hasRole(MANAGER_ROLE, msg.sender), \"Community: NOT_MANAGER\");\n        _;\n    }\n\n    /**\n     * @notice Enforces sender to be the community ambassador or entity ambassador responsible\n     */\n    modifier onlyAmbassadorOrEntity() {\n        require(\n            communityAdmin.isAmbassadorOrEntityOfCommunity(address(this), msg.sender),\n            \"Community: NOT_AMBASSADOR_OR_ENTITY\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Returns the cUSD contract address\n     */\n    function cUSD() public view override returns (IERC20) {\n        return communityAdmin.cUSD();\n    }\n\n    /**\n     * @notice Returns the length of the beneficiaryList\n     */\n    function beneficiaryListLength() external view override returns (uint256) {\n        return beneficiaryList.length();\n    }\n\n    /**\n     * @notice Returns an address from the beneficiaryList\n     *\n     * @param index_ index value\n     * @return address of the beneficiary\n     */\n    function beneficiaryListAt(uint256 index_) external view override returns (address) {\n        return beneficiaryList.at(index_);\n    }\n\n    /**\n     * @notice Returns the 0 address\n     * only used for backwards compatibility\n     */\n    function impactMarketAddress() public pure override returns (address) {\n        return address(0);\n    }\n\n    /** Updates the address of the communityAdmin\n     *\n     * @param _newCommunityAdmin address of the new communityAdmin\n     */\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external override onlyOwner {\n        address _oldCommunityAdminAddress = address(communityAdmin);\n        communityAdmin = _newCommunityAdmin;\n\n        addManager(address(communityAdmin));\n\n        emit CommunityAdminUpdated(_oldCommunityAdminAddress, address(_newCommunityAdmin));\n    }\n\n    /** Updates the address of the previousCommunity\n     *\n     * @param _newPreviousCommunity address of the new previousCommunity\n     */\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external override onlyOwner {\n        address _oldPreviousCommunityAddress = address(previousCommunity);\n        previousCommunity = _newPreviousCommunity;\n\n        emit PreviousCommunityUpdated(_oldPreviousCommunityAddress, address(_newPreviousCommunity));\n    }\n\n    /** Updates beneficiary params\n     *\n     * @param _claimAmount  base amount to be claim by the beneficiary\n     * @param _maxClaim limit that a beneficiary can claim  in total\n     * @param _decreaseStep value decreased from maxClaim each time a is beneficiary added\n     * @param _baseInterval base interval to start claiming\n     * @param _incrementInterval increment interval used in each claim\n     */\n    function updateBeneficiaryParams(\n        uint256 _claimAmount,\n        uint256 _maxClaim,\n        uint256 _decreaseStep,\n        uint256 _baseInterval,\n        uint256 _incrementInterval\n    ) external override onlyOwner {\n        require(\n            _baseInterval > _incrementInterval,\n            \"Community::constructor: baseInterval must be greater than incrementInterval\"\n        );\n        require(\n            _maxClaim > _claimAmount,\n            \"Community::constructor: maxClaim must be greater than claimAmount\"\n        );\n\n        uint256 _oldClaimAmount = claimAmount;\n        uint256 _oldMaxClaim = maxClaim;\n        uint256 _oldDecreaseStep = decreaseStep;\n        uint256 _oldBaseInterval = baseInterval;\n        uint256 _oldIncrementInterval = incrementInterval;\n\n        claimAmount = _claimAmount;\n        maxClaim = _maxClaim;\n        decreaseStep = _decreaseStep;\n        baseInterval = _baseInterval;\n        incrementInterval = _incrementInterval;\n\n        emit BeneficiaryParamsUpdated(\n            _oldClaimAmount,\n            _oldMaxClaim,\n            _oldDecreaseStep,\n            _oldBaseInterval,\n            _oldIncrementInterval,\n            _claimAmount,\n            _maxClaim,\n            _decreaseStep,\n            _baseInterval,\n            _incrementInterval\n        );\n    }\n\n    /** @notice Updates params of a community\n     *\n     * @param _minTranche minimum amount that the community will receive when requesting funds\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\n     */\n    function updateCommunityParams(uint256 _minTranche, uint256 _maxTranche)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            _minTranche <= _maxTranche,\n            \"Community::updateCommunityParams: minTranche should not be greater than maxTranche\"\n        );\n\n        uint256 _oldMinTranche = minTranche;\n        uint256 _oldMaxTranche = maxTranche;\n\n        minTranche = _minTranche;\n        maxTranche = _maxTranche;\n\n        emit CommunityParamsUpdated(_oldMinTranche, _oldMaxTranche, _minTranche, _maxTranche);\n    }\n\n    /**\n     * @notice Adds a new manager\n     *\n     * @param _account address of the manager to be added\n     */\n    function addManager(address _account) public override onlyAmbassadorOrEntity {\n        if (!hasRole(MANAGER_ROLE, _account)) {\n            super._grantRole(MANAGER_ROLE, _account);\n            emit ManagerAdded(msg.sender, _account);\n        }\n    }\n\n    /**\n     * @notice Remove an existing manager\n     *\n     * @param _account address of the manager to be removed\n     */\n    function removeManager(address _account) external override onlyAmbassadorOrEntity {\n        require(\n            hasRole(MANAGER_ROLE, _account),\n            \"Community::removeManager: This account doesn't have manager role\"\n        );\n        require(\n            _account != address(communityAdmin),\n            \"Community::removeManager: You are not allow to remove communityAdmin\"\n        );\n        super._revokeRole(MANAGER_ROLE, _account);\n        emit ManagerRemoved(msg.sender, _account);\n    }\n\n    /**\n     * @notice Enforces managers to use addManager method\n     */\n    function grantRole(bytes32, address) public pure override {\n        require(false, \"Community::grantRole: You are not allow to use this method\");\n    }\n\n    /**\n     * @notice Enforces managers to use removeManager method\n     */\n    function revokeRole(bytes32, address) public pure override {\n        require(false, \"Community::revokeRole: You are not allow to use this method\");\n    }\n\n    /**\n     * @notice Adds a new beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be added\n     */\n    function addBeneficiary(address _beneficiaryAddress)\n        external\n        override\n        onlyManagers\n        nonReentrant\n    {\n        require(!locked, \"LOCKED\");\n\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n        require(\n            _beneficiary.state == BeneficiaryState.NONE,\n            \"Community::addBeneficiary: Beneficiary exists\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\n        // solhint-disable-next-line not-rely-on-time\n        _beneficiary.lastClaim = block.number;\n\n        beneficiaryList.add(_beneficiaryAddress);\n\n        // send default amount when adding a new beneficiary\n        cUSD().safeTransfer(_beneficiaryAddress, DEFAULT_AMOUNT);\n\n        emit BeneficiaryAdded(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice Locks a valid beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be locked\n     */\n    function lockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        require(!locked, \"LOCKED\");\n\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Valid,\n            \"Community::lockBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Locked);\n        emit BeneficiaryLocked(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice  Unlocks a locked beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be unlocked\n     */\n    function unlockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        require(!locked, \"LOCKED\");\n\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Locked,\n            \"Community::unlockBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\n        emit BeneficiaryUnlocked(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @notice Remove an existing beneficiary\n     *\n     * @param _beneficiaryAddress address of the beneficiary to be removed\n     */\n    function removeBeneficiary(address _beneficiaryAddress) external override onlyManagers {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.Valid ||\n                _beneficiary.state == BeneficiaryState.Locked,\n            \"Community::removeBeneficiary: NOT_YET\"\n        );\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Removed);\n        emit BeneficiaryRemoved(msg.sender, _beneficiaryAddress);\n    }\n\n    /**\n     * @dev Transfers cUSD to a valid beneficiary\n     */\n    function claim() external override onlyValidBeneficiary nonReentrant {\n        Beneficiary storage _beneficiary = beneficiaries[msg.sender];\n\n        require(!locked, \"LOCKED\");\n        require(claimCooldown(msg.sender) <= block.number, \"Community::claim: NOT_YET\");\n        require(\n            (_beneficiary.claimedAmount + claimAmount) <= maxClaim,\n            \"Community::claim: MAX_CLAIM\"\n        );\n\n        _beneficiary.claimedAmount += claimAmount;\n        _beneficiary.claims++;\n        _beneficiary.lastClaim = block.number;\n\n        cUSD().safeTransfer(msg.sender, claimAmount);\n        emit BeneficiaryClaim(msg.sender, claimAmount);\n    }\n\n    /**\n     * @notice Returns the number of blocks that a beneficiary have to wait between claims\n     *\n     * @param _beneficiaryAddress address of the beneficiary\n     * @return uint256 number of blocks for the lastInterval\n     */\n    function lastInterval(address _beneficiaryAddress) public view override returns (uint256) {\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n        if (_beneficiary.claims == 0) {\n            return 0;\n        }\n        return baseInterval + (_beneficiary.claims - 1) * incrementInterval;\n    }\n\n    /**\n     * @notice Returns the block number when a beneficiary can claim again\n     *\n     * @param _beneficiaryAddress address of the beneficiary\n     * @return uint256 number of block when the beneficiary can claim\n     */\n    function claimCooldown(address _beneficiaryAddress) public view override returns (uint256) {\n        return beneficiaries[_beneficiaryAddress].lastClaim + lastInterval(_beneficiaryAddress);\n    }\n\n    /**\n     * @notice Locks the community\n     */\n    function lock() external override onlyAmbassadorOrEntity {\n        locked = true;\n        emit CommunityLocked(msg.sender);\n    }\n\n    /**\n     * @notice Unlocks the community\n     */\n    function unlock() external override onlyAmbassadorOrEntity {\n        locked = false;\n        emit CommunityUnlocked(msg.sender);\n    }\n\n    /**\n     * @notice Requests treasury funds from the communityAdmin\n     */\n    function requestFunds() external override onlyManagers {\n        require(!locked, \"LOCKED\");\n\n        communityAdmin.fundCommunity();\n\n        lastFundRequest = block.number;\n\n        emit FundsRequested(msg.sender);\n    }\n\n    /**\n     * @notice Transfers cUSDs from donor to this community\n     * Used by donationToCommunity method from DonationMiner contract\n     *\n     * @param _sender address of the sender\n     * @param _amount amount to be donated\n     */\n    function donate(address _sender, uint256 _amount) external override nonReentrant {\n        cUSD().safeTransferFrom(_sender, address(this), _amount);\n        privateFunds += _amount;\n\n        emit Donate(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Increases the treasuryFunds value\n     * Used by communityAdmin after an amount of cUSD are sent from the treasury\n     *\n     * @param _amount amount to be added to treasuryFunds\n     */\n    function addTreasuryFunds(uint256 _amount) external override onlyOwner {\n        treasuryFunds += _amount;\n    }\n\n    /**\n     * @notice Transfers an amount of an ERC20 from this contract to an address\n     *\n     * @param _token address of the ERC20 token\n     * @param _to address of the receiver\n     * @param _amount amount of the transaction\n     */\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external override onlyOwner nonReentrant {\n        _token.safeTransfer(_to, _amount);\n\n        emit TransferERC20(address(_token), _to, _amount);\n    }\n\n    /**\n     * @notice Allows a beneficiary from the previousCommunity to join in this community\n     */\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external override {\n        // no need to check if it's a beneficiary, as the state is copied\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\n\n        require(\n            _beneficiary.state == BeneficiaryState.NONE,\n            \"Community::beneficiaryJoinFromMigrated: Beneficiary exists\"\n        );\n\n        //if the previousCommunity is deployed with the new type of smart contract\n        if (previousCommunity.impactMarketAddress() == address(0)) {\n            (\n                BeneficiaryState _oldBeneficiaryState,\n                uint256 _oldBeneficiaryClaims,\n                uint256 _oldBeneficiaryClaimedAmount,\n                uint256 _oldBeneficiaryLastClaim\n            ) = previousCommunity.beneficiaries(_beneficiaryAddress);\n\n            _changeBeneficiaryState(_beneficiary, _oldBeneficiaryState);\n            _beneficiary.claims = _oldBeneficiaryClaims;\n            _beneficiary.lastClaim = _oldBeneficiaryLastClaim;\n            _beneficiary.claimedAmount = _oldBeneficiaryClaimedAmount;\n        } else {\n            ICommunityLegacy _legacyCommunity = ICommunityLegacy(address(previousCommunity));\n            uint256 _legacyBeneficiaryLastInterval = _legacyCommunity.lastInterval(\n                _beneficiaryAddress\n            );\n            _changeBeneficiaryState(\n                _beneficiary,\n                BeneficiaryState(_legacyCommunity.beneficiaries(_beneficiaryAddress))\n            );\n\n            uint256 _legacyBeneficiaryCooldown = _legacyCommunity.cooldown(_beneficiaryAddress);\n\n            if (\n                _legacyBeneficiaryCooldown >=\n                _legacyBeneficiaryLastInterval + _firstBlockTimestamp()\n            ) {\n                // seconds to blocks conversion\n                _beneficiary.lastClaim =\n                    (_legacyBeneficiaryCooldown -\n                        _legacyBeneficiaryLastInterval -\n                        _firstBlockTimestamp()) /\n                    5;\n            } else {\n                _beneficiary.lastClaim = 0;\n            }\n\n            _beneficiary.claimedAmount = _legacyCommunity.claimed(_beneficiaryAddress);\n\n            uint256 _previousBaseInterval = _legacyCommunity.baseInterval();\n            if (_legacyBeneficiaryLastInterval >= _previousBaseInterval) {\n                _beneficiary.claims =\n                    (_legacyBeneficiaryLastInterval - _previousBaseInterval) /\n                    _legacyCommunity.incrementInterval() +\n                    1;\n            } else {\n                _beneficiary.claims = 0;\n            }\n        }\n\n        beneficiaryList.add(_beneficiaryAddress);\n\n        emit BeneficiaryJoined(_beneficiaryAddress);\n    }\n\n    /**\n     * @notice Returns the initial maxClaim\n     */\n    function getInitialMaxClaim() external view override returns (uint256) {\n        return maxClaim + validBeneficiaryCount * decreaseStep;\n    }\n\n    /**\n     * @notice Changes the state of a beneficiary\n     *\n     * @param _beneficiary address of the beneficiary\n     * @param _newState new state\n     */\n    function _changeBeneficiaryState(Beneficiary storage _beneficiary, BeneficiaryState _newState)\n        internal\n    {\n        if (_beneficiary.state == _newState) {\n            return;\n        }\n\n        if (_newState == BeneficiaryState.Valid) {\n            require(\n                maxClaim - decreaseStep >= claimAmount,\n                \"Community::_changeBeneficiaryState: Max claim too low\"\n            );\n            validBeneficiaryCount++;\n            maxClaim -= decreaseStep;\n        } else if (_beneficiary.state == BeneficiaryState.Valid) {\n            validBeneficiaryCount--;\n            maxClaim += decreaseStep;\n        }\n\n        _beneficiary.state = _newState;\n    }\n\n    function _firstBlockTimestamp() public view returns (uint256) {\n        if (block.chainid == 42220) {\n            //celo mainnet\n            return 1587571205;\n        } else if (block.chainid == 44787) {\n            //alfajores testnet\n            return 1594921556;\n        } else if (block.chainid == 44787) {\n            //baklava testnet\n            return 1593012289;\n        } else {\n            return block.timestamp - block.number; //local\n        }\n    }\n}\n"
    },
    "contracts/ambassadors/AmbassadorsProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract AmbassadorsProxy is TransparentUpgradeableProxy {\n    constructor(address _logic, address _proxyAdmin)\n        TransparentUpgradeableProxy(_logic, _proxyAdmin, \"\")\n    {}\n}\n"
    },
    "contracts/governor/ImpactProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\ncontract ImpactProxyAdmin is ProxyAdmin {}\n"
    },
    "contracts/mocks/token/TokenMock.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\n//used only for testing\ncontract TokenMock is ERC20PresetMinterPauser {\n    constructor(string memory name, string memory symbol) ERC20PresetMinterPauser(name, symbol) {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
