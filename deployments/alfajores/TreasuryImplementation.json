{
  "address": "0x242d75C9B2d79a7B5B70Ea009cDed173D38cE836",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "exchangePath",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountsOut",
          "type": "uint256"
        }
      ],
      "name": "AmountConverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCommunityAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCommunityAdmin",
          "type": "address"
        }
      ],
      "name": "CommunityAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferERC20",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACT",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_uniswapNFTPositionManagerId",
          "type": "uint256"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityAdmin",
      "outputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_exchangePath",
          "type": "bytes"
        }
      ],
      "name": "convertAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationMiner",
      "outputs": [
        {
          "internalType": "contract IDonationMiner",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getConvertedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "_communityAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "isToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpSwap",
      "outputs": [
        {
          "internalType": "contract ITreasuryLpSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "enum ITreasury.LpStrategy",
          "name": "_lpStrategy",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_lpPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpMinLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_uniswapNFTPositionManagerId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_exchangePathToCUSD",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_exchangePathToPACT",
          "type": "bytes"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "enum ITreasury.LpStrategy",
          "name": "lpStrategy",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "lpPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpMinLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uniswapNFTPositionManagerId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "exchangePathToCUSD",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "exchangePathToPACT",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "_newCommunityAdmin",
          "type": "address"
        }
      ],
      "name": "updateCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDonationMiner",
          "name": "_newDonationMiner",
          "type": "address"
        }
      ],
      "name": "updateDonationMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasuryLpSwap",
          "name": "_newLpSwap",
          "type": "address"
        }
      ],
      "name": "updateLpSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_newPACT",
          "type": "address"
        }
      ],
      "name": "updatePACT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useFundsForLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2eb5a0f87317d02b98e7c1b7b5f7180762a5c13081aea783775fc254344cf20",
  "receipt": {
    "to": null,
    "from": "0xa34737409091eBD0726A3Ab5863Fc7Ee9243Edab",
    "contractAddress": "0x242d75C9B2d79a7B5B70Ea009cDed173D38cE836",
    "transactionIndex": 0,
    "gasUsed": "3232964",
    "logsBloom": "0x
    "blockHash": "0x35954a6fd393e4615e7ee618bd8ed40c0d5911703cbc6d7b43cd413b78ef6e53",
    "transactionHash": "0xe2eb5a0f87317d02b98e7c1b7b5f7180762a5c13081aea783775fc254344cf20",
    "logs": [],
    "blockNumber": 17220862,
    "cumulativeGasUsed": "3232964",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "86c3022e3b12214e126013e0ac826021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"exchangePath\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountsOut\",\"type\":\"uint256\"}],\"name\":\"AmountConverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCommunityAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCommunityAdmin\",\"type\":\"address\"}],\"name\":\"CommunityAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniswapNFTPositionManagerId\",\"type\":\"uint256\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAdmin\",\"outputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_exchangePath\",\"type\":\"bytes\"}],\"name\":\"convertAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationMiner\",\"outputs\":[{\"internalType\":\"contract IDonationMiner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getConvertedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"_communityAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSwap\",\"outputs\":[{\"internalType\":\"contract ITreasuryLpSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"enum ITreasury.LpStrategy\",\"name\":\"_lpStrategy\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_lpPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpMinLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniswapNFTPositionManagerId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_exchangePathToCUSD\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_exchangePathToPACT\",\"type\":\"bytes\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"enum ITreasury.LpStrategy\",\"name\":\"lpStrategy\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lpPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpMinLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniswapNFTPositionManagerId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"exchangePathToCUSD\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"exchangePathToPACT\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"_newCommunityAdmin\",\"type\":\"address\"}],\"name\":\"updateCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDonationMiner\",\"name\":\"_newDonationMiner\",\"type\":\"address\"}],\"name\":\"updateDonationMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasuryLpSwap\",\"name\":\"_newLpSwap\",\"type\":\"address\"}],\"name\":\"updateLpSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_newPACT\",\"type\":\"address\"}],\"name\":\"updatePACT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useFundsForLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AmountConverted(address,uint256,uint256,bytes,uint256)\":{\"params\":{\"amountIn\":\"Amount changed\",\"amountOutMin\":\"Minimum amount out\",\"amountsOut\":\"Value of the final amount out\",\"exchangePath\":\"Exchange path\",\"tokenAddress\":\"Address of the token\"}},\"CommunityAdminUpdated(address,address)\":{\"params\":{\"newCommunityAdmin\":\"New communityAdmin address\",\"oldCommunityAdmin\":\"Old communityAdmin address\"}},\"TokenRemoved(address)\":{\"params\":{\"tokenAddress\":\"Address of the token\"}},\"TokenSet(address)\":{\"params\":{\"tokenAddress\":\"Address of the token\"}},\"TransferERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the transaction\",\"to\":\"Address of the receiver\",\"token\":\"ERC20 token address\"}}},\"kind\":\"dev\",\"methods\":{\"collectFees(uint256)\":{\"params\":{\"_uniswapNFTPositionManagerId\":\"is the id of the Uniswap NFT position*\"}},\"convertAmount(address,uint256,uint256,bytes)\":{\"params\":{\"_amountIn\":\"is the amount of the token to convert\",\"_amountOutMin\":\"is used to prevent the transaction from failing if the price of the token changes - 0 for no check\",\"_exchangePath\":\"is the path to use for the swap - empty for the default path*\",\"_tokenAddress\":\"is the address of the token to convert\"}},\"initialize(address)\":{\"params\":{\"_communityAdmin\":\"Address of the CommunityAdmin contract\"}},\"isToken(address)\":{\"params\":{\"_tokenAddress\":\"token address to be checked\"},\"returns\":{\"_0\":\"bool true if the tokenAddress is an accepted token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeToken(address)\":{\"params\":{\"_tokenAddress\":\"address of the token*\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setToken(address,uint256,uint8,uint256,uint256,uint256,bytes,bytes)\":{\"params\":{\"_exchangePathToCUSD\":\"uniswap path to exchange the token to CUSD\",\"_exchangePathToPACT\":\"uniswap path to exchange the token to PACT*\",\"_lpMinLimit\":\"minimum amount of funds that need to be in the treasury (and not to be used for LP)\",\"_lpPercentage\":\"percentage of the funds to be used for LP\",\"_lpStrategy\":\"strategy to use for splitting the LP fees between treasury and buyback\",\"_rate\":\"rate of the token in CUSD\",\"_tokenAddress\":\"address of the token\",\"_uniswapNFTPositionManagerId\":\"id of the NFT position manager\"}},\"tokenListAt(uint256)\":{\"params\":{\"_index\":\"index of the token\"},\"returns\":{\"_0\":\"address of the token\"}},\"tokenListLength()\":{\"returns\":{\"_0\":\"uint256 number of tokens\"}},\"transfer(address,address,uint256)\":{\"params\":{\"_amount\":\"amount of the transaction\",\"_to\":\"address of the receiver\",\"_token\":\"address of the ERC20 token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCommunityAdmin(address)\":{\"params\":{\"_newCommunityAdmin\":\"address of the new CommunityAdmin contract\"}},\"updateDonationMiner(address)\":{\"params\":{\"_newDonationMiner\":\"address of the new DonationMiner contract\"}},\"updateLpSwap(address)\":{\"params\":{\"_newLpSwap\":\"address of the new LpSwap contract\"}},\"updatePACT(address)\":{\"params\":{\"_newPACT\":\"address of the new PACT contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AmountConverted(address,uint256,uint256,bytes,uint256)\":{\"notice\":\"Triggered when a token has been set\"},\"CommunityAdminUpdated(address,address)\":{\"notice\":\"Triggered when CommunityAdmin has been updated\"},\"TokenRemoved(address)\":{\"notice\":\"Triggered when a token has been removed\"},\"TokenSet(address)\":{\"notice\":\"Triggered when a token has been set\"},\"TransferERC20(address,address,uint256)\":{\"notice\":\"Triggered when an amount of an ERC20 has been transferred from this contract to an address\"}},\"kind\":\"user\",\"methods\":{\"collectFees(uint256)\":{\"notice\":\"Collects the fees of a Uniswap NFT position\"},\"convertAmount(address,uint256,uint256,bytes)\":{\"notice\":\"Converts an amount of a token to cUSDs\"},\"getConvertedAmount(address,uint256)\":{\"notice\":\"Gets the amount of cUSDs that can be obtained from a converting the given amount of a token*\"},\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"initialize(address)\":{\"notice\":\"Used to initialize a new Treasury contract\"},\"isToken(address)\":{\"notice\":\"Returns if an address is an accepted token\"},\"removeToken(address)\":{\"notice\":\"Used to remove a token\"},\"setToken(address,uint256,uint8,uint256,uint256,uint256,bytes,bytes)\":{\"notice\":\"Used to set a new token\"},\"tokenListAt(uint256)\":{\"notice\":\"Returns the address of a token from tokenList\"},\"tokenListLength()\":{\"notice\":\"Returns the number of tokens\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers an amount of an ERC20 from this contract to an address\"},\"updateCommunityAdmin(address)\":{\"notice\":\"Updates the CommunityAdmin contract address\"},\"updateDonationMiner(address)\":{\"notice\":\"Updates the DonationMiner contract address\"},\"updateLpSwap(address)\":{\"notice\":\"Updates the LpSwap contract address\"},\"updatePACT(address)\":{\"notice\":\"Updates the PACT contract address\"},\"useFundsForLP()\":{\"notice\":\"Uses part of the funds of a token to add liquidity to the Uniswap pool it is used by the DonationMiner when creating a new epoch it can also been used by the DAO when there are too many funds in the treasury*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/treasury/TreasuryImplementation.sol\":\"TreasuryImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x33b8603bfbef7f33d9308b79c79aa3db7eb19525fd1addd764285e834ca275d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ambassadors/interfaces/IAmbassadors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAmbassadors {\\n    function getVersion() external pure returns(uint256);\\n    function isAmbassador(address _ambassador) external view returns (bool);\\n    function isAmbassadorOf(address _ambassador, address _community) external view returns (bool);\\n    function isEntityOf(address _ambassador, address _entityAddress) external view returns (bool);\\n    function isAmbassadorAt(address _ambassador, address _entityAddress) external view returns (bool);\\n\\n    function addEntity(address _entity) external;\\n    function removeEntity(address _entity) external;\\n    function replaceEntityAccount(address _entity, address _newEntity) external;\\n    function addAmbassador(address _ambassador) external;\\n    function removeAmbassador(address _ambassador) external;\\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador) external;\\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external;\\n    function transferAmbassador(address _ambassador, address _toEntity, bool _keepCommunities) external;\\n    function transferCommunityToAmbassador(address _to, address _community) external;\\n    function setCommunityToAmbassador(address _ambassador, address _community) external;\\n    function removeCommunity(address _community) external;\\n}\\n\",\"keccak256\":\"0x18994047358b59b9925a303741d094f0543574874ff716b740a8165172c6ebf5\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed,\\n        AddressChanged,\\n        Copied  //the beneficiary has been moved in a copy community\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of tokens received\\n                                 //(based on token ratios when there are more than one token)\\n        uint256 lastClaim;       //block number of the last claim\\n        mapping(address => uint256) claimedAmounts;\\n    }\\n\\n    struct TokenUpdates {\\n        address tokenAddress;    //address of the token\\n        uint256 ratio;           //ratio between maxClaim and previous token maxClaim\\n        uint256 startBlock;      //the number of the block from which the this token was \\\"active\\\"\\n    }\\n\\n    function initialize(\\n        address _tokenAddress,\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function getVersion() external pure returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function copyOf() external view returns(ICommunity);\\n    function copies() external view returns(address[] memory);\\n    function originalClaimAmount() external view returns(uint256);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function maxTotalClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function maxBeneficiaries() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function token() external view  returns(IERC20);\\n    function tokenList() external view returns(address[] memory);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address _beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function beneficiaryClaimedAmounts(address _beneficiaryAddress) external view\\n        returns (uint256[] memory claimedAmounts);\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 _index) external view returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function impactMarketAddress() external pure returns (address);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n    function lastFundRequest() external view returns(uint256);\\n    function tokenUpdates(uint256 _index) external view returns (\\n        address tokenAddress,\\n        uint256 ratio,\\n        uint256 startBlock\\n    );\\n    function tokenUpdatesLength() external view returns (uint256);\\n    function isSelfFunding() external view returns (bool);\\n    function setBeneficiaryState(address _beneficiaryAddress, BeneficiaryState _state) external;\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateMaxBeneficiaries(uint256 _newMaxBeneficiaries) external;\\n    function updateToken(\\n        IERC20 _newToken,\\n        bytes calldata _exchangePath,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function donate(address _sender, uint256 _amount) external;\\n    function addTreasuryFunds(uint256 _amount) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function addManager(address _managerAddress) external;\\n    function removeManager(address _managerAddress) external;\\n    function addBeneficiary(address _beneficiaryAddress) external;\\n    function addBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function addBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function copyBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function lockBeneficiary(address _beneficiaryAddress) external;\\n    function lockBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function lockBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function unlockBeneficiary(address _beneficiaryAddress) external;\\n    function unlockBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function unlockBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function removeBeneficiary(address _beneficiaryAddress) external;\\n    function removeBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function removeBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function changeBeneficiaryAddressByManager(address _oldBeneficiaryAddress, address _newBeneficiaryAddress) external;\\n    function changeBeneficiaryAddress(address _newBeneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n    function addCopy(ICommunity _copy) external;\\n    function copyCommunityDetails(ICommunity _originalCommunity) external;\\n}\\n\",\"keccak256\":\"0x5f5a6a5786dbb36456e9beaf5b8d323ea4d063569837f2f8ad879a069740d497\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\\\";\\nimport \\\"../../ambassadors/interfaces/IAmbassadors.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function impactMarketCouncil() external view returns(IImpactMarketCouncil);\\n    function ambassadors() external view returns(IAmbassadors);\\n    function communityMiddleProxy() external view returns(address);\\n    function authorizedWalletAddress() external view returns(address);\\n    function minClaimAmountRatio() external view returns(uint256);\\n    function minClaimAmountRatioPrecision() external view returns(uint256);\\n    function communities(address _community) external view returns(CommunityState);\\n    function communityImplementation() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 _index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n    function treasurySafetyPercentage() external view returns (uint256);\\n    function treasuryMinBalance() external view returns (uint256);\\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity) external view returns (bool);\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateImpactMarketCouncil(IImpactMarketCouncil _newImpactMarketCouncil) external;\\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external;\\n    function updateCommunityMiddleProxy(address _communityMiddleProxy) external;\\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\\n    function updateAuthorizedWalletAddress(address _newSignerAddress) external;\\n    function updateMinClaimAmountRatio(uint256 _newMinClaimAmountRatio) external;\\n    function updateTreasurySafetyPercentage(uint256 _newTreasurySafetyPercentage) external;\\n    function updateTreasuryMinBalance(uint256 _newTreasuryMinBalance) external;\\n    function setCommunityToAmbassador(address _ambassador, ICommunity _communityAddress) external;\\n    function updateBeneficiaryParams(\\n        ICommunity _community,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity _community,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateProxyImplementation(address _communityMiddleProxy, address _newLogic) external;\\n    function updateCommunityToken(\\n        ICommunity _community,\\n        IERC20 _newToken,\\n        bytes memory _exchangePath,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function addCommunity(\\n        address _tokenAddress,\\n        address[] memory _managers,\\n        address _ambassador,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory _managers,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function splitCommunity(\\n        ICommunity _community,\\n        uint256 _numberOfCopies,\\n        address _ambassador,\\n        address[] memory _managers\\n    ) external;\\n    function removeCommunity(ICommunity _community) external;\\n    function fundCommunity() external returns(uint256);\\n    function calculateCommunityTrancheAmount(ICommunity _community) external view returns (uint256);\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function transferFromCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n    function getCommunityProxyImplementation(address _communityProxyAddress) external view returns(address);\\n}\\n\",\"keccak256\":\"0x4d1ccd27233e09f98b6d0d23d98c15c0fafb5bf5ff9983b573412d9151024d73\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/interfaces/IDonationMiner.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"../../community/interfaces/ICommunity.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../staking/interfaces/IStaking.sol\\\";\\n\\ninterface IDonationMiner {\\n    struct RewardPeriod {\\n        //reward tokens created per block\\n        uint256 rewardPerBlock;\\n        //reward tokens from previous periods + reward tokens from this reward period\\n        uint256 rewardAmount;\\n        //block number at which reward period starts\\n        uint256 startBlock;\\n        //block number at which reward period ends\\n        uint256 endBlock;\\n        //total of donations for this rewardPeriod\\n        uint256 donationsAmount;\\n        //amounts donated by every donor in this rewardPeriod\\n        mapping(address => uint256) donorAmounts;\\n        uint256 againstPeriods;\\n        //total stake amount at the end of this rewardPeriod\\n        uint256 stakesAmount;\\n        //ratio between 1 cUSD donated and 1 PACT staked\\n        uint256 stakingDonationRatio;\\n        //true if user has staked/unstaked in this reward period\\n        mapping(address => bool) hasSetStakeAmount;\\n        //stake amount of a user at the end of this reward period;\\n        //if a user doesn't stake/unstake in a reward period,\\n        //              this value will remain 0 (and hasSetStakeAmount will be false)\\n        //if hasNewStakeAmount is false it means the donorStakeAmount\\n        //              is the same as the last reward period where hasSetStakeAmount is true\\n        mapping(address => uint256) donorStakeAmounts;\\n    }\\n\\n    struct Donor {\\n        uint256 lastClaim;  //last reward period index for which the donor has claimed the reward; used until v2\\n        uint256 rewardPeriodsCount; //total number of reward periods in which the donor donated\\n        mapping(uint256 => uint256) rewardPeriods; //list of all reward period ids in which the donor donated\\n        uint256 lastClaimPeriod; //last reward period id for which the donor has claimed the reward\\n    }\\n\\n    struct Donation {\\n        address donor;  //address of the donner\\n        address target;  //address of the receiver (community or treasury)\\n        uint256 rewardPeriod;  //number of the reward period in which the donation was made\\n        uint256 blockNumber;  //number of the block in which the donation was executed\\n        uint256 amount;  //the convertedAmount value\\n        IERC20 token;  //address of the token\\n        uint256 initialAmount;  //number of tokens donated\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function cUSD() external view returns (IERC20);\\n    function PACT() external view returns (IERC20);\\n    function treasury() external view returns (ITreasury);\\n    function staking() external view returns (IStaking);\\n    function rewardPeriodSize() external view returns (uint256);\\n    function decayNumerator() external view returns (uint256);\\n    function decayDenominator() external view returns (uint256);\\n    function stakingDonationRatio() external view returns (uint256);\\n    function communityDonationRatio() external view returns (uint256);\\n    function rewardPeriodCount() external view returns (uint256);\\n    function donationCount() external view returns (uint256);\\n    function rewardPeriods(uint256 _period) external view returns (\\n        uint256 rewardPerBlock,\\n        uint256 rewardAmount,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        uint256 donationsAmount,\\n        uint256 againstPeriods,\\n        uint256 stakesAmount,\\n        uint256 stakingDonationRatio\\n\\n);\\n    function rewardPeriodDonorAmount(uint256 _period, address _donor) external view returns (uint256);\\n    function rewardPeriodDonorStakeAmounts(uint256 _period, address _donor) external view returns (uint256);\\n    function donors(address _donor) external view returns (\\n        uint256 rewardPeriodsCount,\\n        uint256 lastClaim,\\n        uint256 lastClaimPeriod\\n    );\\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex) external view returns (uint256);\\n    function donations(uint256 _index) external view returns (\\n        address donor,\\n        address target,\\n        uint256 rewardPeriod,\\n        uint256 blockNumber,\\n        uint256 amount,\\n        IERC20 token,\\n        uint256 initialAmount\\n    );\\n    function claimDelay() external view returns (uint256);\\n    function againstPeriods() external view returns (uint256);\\n    function updateRewardPeriodParams(\\n        uint256 _newRewardPeriodSize,\\n        uint256 _newDecayNumerator,\\n        uint256 _newDecayDenominator\\n    ) external;\\n    function updateClaimDelay(uint256 _newClaimDelay) external;\\n    function updateStakingDonationRatio(uint256 _newStakingDonationRatio) external;\\n    function updateCommunityDonationRatio(uint256 _newCommunityDonationRatio) external;\\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external;\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateStaking(IStaking _newStaking) external;\\n    function donate(IERC20 _token, uint256 _amount, address _delegateAddress) external;\\n    function donateToCommunity(ICommunity _community, IERC20 _token, uint256 _amount, address _delegateAddress) external;\\n    function claimRewards() external;\\n    function claimRewardsPartial(uint256 _lastPeriodNumber) external;\\n    function stakeRewards() external;\\n    function stakeRewardsPartial(uint256 _lastPeriodNumber) external;\\n    function calculateClaimableRewards(address _donor) external returns (uint256);\\n    function calculateClaimableRewardsByPeriodNumber(address _donor, uint256 _lastPeriodNumber) external returns (uint256);\\n    function estimateClaimableReward(address _donor) external view returns (uint256);\\n    function estimateClaimableRewardAdvance(address _donor) external view returns (uint256);\\n    function estimateClaimableRewardByStaking(address _donor) external view returns (uint256);\\n    function apr(address _stakeholderAddress) external view returns (uint256);\\n    function generalApr() external view returns (uint256);\\n    function lastPeriodsDonations(address _donor) external view returns (uint256 donorAmount, uint256 totalAmount);\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function setStakingAmounts(address _holderAddress, uint256 _holderStakeAmount, uint256 _totalStakesAmount) external;\\n    function currentRewardPeriodNumber() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x6f539fcabb8339c49b3dc043d2f3413c131411d5450f4406adca29569a7b9bd1\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/openzeppelin/IMintableERC20.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IMintableERC20 {\\n    function mint(address _account, uint96 _amount) external;\\n\\n    function burn(address _account, uint96 _amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6a8ca44d8f3ed1a3a8efbb05d249dba811cbab5365c6677f63fe2c50f693391b\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/uniswapV3/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n\\n    function ownerOf(uint256 tokenId) external view returns(address);\\n}\\n\",\"keccak256\":\"0x5ccbdae9208038dc039747d0577fbe454a0a6d8d99d03bfe5b612788bc703759\",\"license\":\"GPL-2.0-or-later\"},\"contracts/externalInterfaces/uniswapV3/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x5bf7d738e4d39ea28a850615d855e1aceeb31b53a89ac2a976fa150ab419f104\",\"license\":\"GPL-2.0-or-later\"},\"contracts/externalInterfaces/uniswapV3/IUniswapRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\n/// @title Router token swapping functionality\\ninterface IUniswapRouter02 {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x00c85ec3078361efd91566a133aa04dedd47feee7534e250f250de36be24fccb\",\"license\":\"Apache-2.0\"},\"contracts/governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\n\\ninterface IImpactMarketCouncil {\\n    struct Proposal {\\n        // Unique id for looking up a proposal\\n        uint256 id;\\n        // Creator of the proposal\\n        address proposer;\\n        // The block at which voting ends: votes must be cast prior to this block\\n        uint256 endBlock;\\n        // Current number of votes in favor of this proposal\\n        uint256 forVotes;\\n        // Current number of votes in opposition to this proposal\\n        uint256 againstVotes;\\n        // Current number of votes for abstaining for this proposal\\n        uint256 abstainVotes;\\n        // Flag marking whether the proposal has been canceled\\n        bool canceled;\\n        // Flag marking whether the proposal has been executed\\n        bool executed;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n        // Whether or not the voter supports the proposal or abstains\\n        uint8 support;\\n        // The number of votes the voter had, which were cast\\n        uint96 votes;\\n    }\\n\\n    /// @notice Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Expired,\\n        Succeeded,\\n        Executed\\n    }\\n}\\n\",\"keccak256\":\"0x9a183c6fc7ec7760170d887fcf026824090dc2f6c4e682b32a4c12ec91fc1667\",\"license\":\"Apache-2.0\"},\"contracts/staking/interfaces/IStaking.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../donationMiner/interfaces/IDonationMiner.sol\\\";\\nimport \\\"../../externalInterfaces/openzeppelin/IMintableERC20.sol\\\";\\n\\ninterface IStaking {\\n    struct Unstake {\\n        uint256 amount;         //amount unstaked\\n        uint256 cooldownBlock;  //first block number that will allow holder to claim this unstake\\n    }\\n\\n    struct Holder {\\n        uint256 amount;          // amount of PACT that are staked by holder\\n        uint256 nextUnstakeId;   //\\n        Unstake[] unstakes;      //list of all unstakes amount\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function updateCooldown(uint256 _newCooldown) external;\\n    function PACT() external view returns (IERC20);\\n    function SPACT() external view returns (IMintableERC20);\\n    function donationMiner() external view returns (IDonationMiner);\\n    function cooldown() external view returns(uint256);\\n    function currentTotalAmount() external view returns(uint256);\\n    function stakeholderAmount(address _holderAddress) external view returns(uint256);\\n    function stakeholder(address _holderAddress) external view returns (uint256 amount, uint256 nextUnstakeId, uint256 unstakeListLength, uint256 unstakedAmount);\\n    function stakeholderUnstakeAt(address _holderAddress, uint256 _unstakeIndex) external view returns (Unstake memory);\\n    function stakeholdersListAt(uint256 _index) external view returns (address);\\n    function stakeholdersListLength() external view returns (uint256);\\n\\n    function stake(address _holder, uint256 _amount) external;\\n    function unstake(uint256 _amount) external;\\n    function claim() external;\\n    function claimPartial(uint256 _lastUnstakeId) external;\\n    function claimAmount(address _holderAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe9fd0aafb94e7a6214a2f6c98d674b2a730efe3a3b3c35722c4f40c62d1aee43\",\"license\":\"Apache-2.0\"},\"contracts/treasury/TreasuryImplementation.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/TreasuryStorageV2.sol\\\";\\n\\ncontract TreasuryImplementation is\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    TreasuryStorageV2\\n{\\n    using SafeERC20Upgradeable for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    /**\\n     * @notice Triggered when CommunityAdmin has been updated\\n     *\\n     * @param oldCommunityAdmin   Old communityAdmin address\\n     * @param newCommunityAdmin   New communityAdmin address\\n     */\\n    event CommunityAdminUpdated(\\n        address indexed oldCommunityAdmin,\\n        address indexed newCommunityAdmin\\n    );\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\\n     *\\n     * @param token               ERC20 token address\\n     * @param to                  Address of the receiver\\n     * @param amount              Amount of the transaction\\n     */\\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a token has been set\\n     *\\n     * @param tokenAddress                      Address of the token\\n     */\\n    event TokenSet(address indexed tokenAddress);\\n\\n    /**\\n     * @notice Triggered when a token has been removed\\n     *\\n     * @param tokenAddress        Address of the token\\n     */\\n    event TokenRemoved(address indexed tokenAddress);\\n\\n    /**\\n     * @notice Triggered when a token has been set\\n     *\\n     * @param tokenAddress           Address of the token\\n     * @param amountIn               Amount changed\\n     * @param amountOutMin           Minimum amount out\\n     * @param exchangePath           Exchange path\\n     * @param amountsOut             Value of the final amount out\\n     */\\n    event AmountConverted(\\n        address indexed tokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes exchangePath,\\n        uint256 amountsOut\\n    );\\n\\n    /**\\n     * @notice Enforces sender to be communityAdmin or owner\\n     */\\n    modifier onlyCommunityAdminOrOwner() {\\n        require(\\n            msg.sender == address(communityAdmin) || msg.sender == owner(),\\n            \\\"Treasury: NOT_COMMUNITY_ADMIN AND NOT_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    //todo: remove this modifier after deployment and testing\\n    /**\\n     * @notice Enforces sender to DAO or impactMarketCouncil\\n     */\\n    modifier onlyOwnerOrImpactMarketCouncil() {\\n        require(\\n            msg.sender == owner() || msg.sender == address(communityAdmin.impactMarketCouncil()),\\n            \\\"Treasury: caller is not the owner nor ImpactMarketCouncil\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be owner or council or donationMiner\\n     */\\n    modifier onlyOwnerOrDonationMiner() {\\n        require(\\n            msg.sender == owner() || msg.sender == address(donationMiner),\\n            \\\"Treasury: caller is not the owner nor donationMiner\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize a new Treasury contract\\n     *\\n     * @param _communityAdmin    Address of the CommunityAdmin contract\\n     */\\n    function initialize(ICommunityAdmin _communityAdmin) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        communityAdmin = _communityAdmin;\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 2;\\n    }\\n\\n    /**\\n     * @notice Returns if an address is an accepted token\\n     *\\n     * @param _tokenAddress token address to be checked\\n     * @return bool true if the tokenAddress is an accepted token\\n     */\\n    function isToken(address _tokenAddress) public view override returns (bool) {\\n        return _tokenList.contains(_tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Returns the address of a token from tokenList\\n     *\\n     * @param _index index of the token\\n     * @return address of the token\\n     */\\n    function tokenListAt(uint256 _index) external view override returns (address) {\\n        return _tokenList.at(_index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens\\n     *\\n     * @return uint256 number of tokens\\n     */\\n    function tokenListLength() external view override returns (uint256) {\\n        return _tokenList.length();\\n    }\\n\\n    /**\\n     * @notice Updates the CommunityAdmin contract address\\n     *\\n     * @param _newCommunityAdmin address of the new CommunityAdmin contract\\n     */\\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin)\\n        external\\n        override\\n        onlyOwnerOrImpactMarketCouncil\\n    {\\n        emit CommunityAdminUpdated(address(communityAdmin), address(_newCommunityAdmin));\\n        communityAdmin = _newCommunityAdmin;\\n    }\\n\\n    /**\\n     * @notice Updates the PACT contract address\\n     *\\n     * @param _newPACT address of the new PACT contract\\n     */\\n    function updatePACT(IERC20 _newPACT) external override onlyOwnerOrImpactMarketCouncil {\\n        PACT = _newPACT;\\n    }\\n\\n    /**\\n     * @notice Updates the DonationMiner contract address\\n     *\\n     * @param _newDonationMiner address of the new DonationMiner contract\\n     */\\n    function updateDonationMiner(IDonationMiner _newDonationMiner)\\n        external\\n        override\\n        onlyOwnerOrImpactMarketCouncil\\n    {\\n        donationMiner = _newDonationMiner;\\n    }\\n\\n    /**\\n     * @notice Updates the LpSwap contract address\\n     *\\n     * @param _newLpSwap address of the new LpSwap contract\\n     */\\n    function updateLpSwap(ITreasuryLpSwap _newLpSwap)\\n        external\\n        override\\n        onlyOwnerOrImpactMarketCouncil\\n    {\\n        lpSwap = _newLpSwap;\\n    }\\n\\n    /**\\n     * @notice Transfers an amount of an ERC20 from this contract to an address\\n     *\\n     * @param _token address of the ERC20 token\\n     * @param _to address of the receiver\\n     * @param _amount amount of the transaction\\n     */\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyCommunityAdminOrOwner nonReentrant {\\n        _token.safeTransfer(_to, _amount);\\n\\n        emit TransferERC20(address(_token), _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Used to set a new token\\n     *\\n     * @param _tokenAddress address of the token\\n     * @param _rate rate of the token in CUSD\\n     * @param _lpStrategy strategy to use for splitting the LP fees between treasury and buyback\\n     * @param _lpPercentage percentage of the funds to be used for LP\\n     * @param _lpMinLimit minimum amount of funds that need to be in the treasury (and not to be used for LP)\\n     * @param _uniswapNFTPositionManagerId id of the NFT position manager\\n     * @param _exchangePathToCUSD uniswap path to exchange the token to CUSD\\n     * @param _exchangePathToPACT uniswap path to exchange the token to PACT\\n     **/\\n    function setToken(\\n        address _tokenAddress,\\n        uint256 _rate,\\n        LpStrategy _lpStrategy,\\n        uint256 _lpPercentage,\\n        uint256 _lpMinLimit,\\n        uint256 _uniswapNFTPositionManagerId,\\n        bytes memory _exchangePathToCUSD,\\n        bytes memory _exchangePathToPACT\\n    ) public override onlyOwnerOrImpactMarketCouncil {\\n        require(_rate > 0, \\\"Treasury::setToken: Invalid rate\\\");\\n\\n        emit TokenSet(_tokenAddress);\\n\\n        tokens[_tokenAddress].rate = _rate;\\n        tokens[_tokenAddress].lpStrategy = _lpStrategy;\\n        tokens[_tokenAddress].lpPercentage = _lpPercentage;\\n        tokens[_tokenAddress].lpMinLimit = _lpMinLimit;\\n\\n        if (_uniswapNFTPositionManagerId > 0) {\\n            require(\\n                lpSwap.uniswapNFTPositionManager().ownerOf(_uniswapNFTPositionManagerId) ==\\n                    address(lpSwap),\\n                \\\"Treasury::setToken: invalid uniswapNFTPositionManagerId\\\"\\n            );\\n            tokens[_tokenAddress].uniswapNFTPositionManagerId = _uniswapNFTPositionManagerId;\\n        }\\n\\n        if (_exchangePathToCUSD.length > 0) {\\n            require(\\n                lpSwap.uniswapQuoter().quoteExactInput(_exchangePathToCUSD, 1e18) > 0,\\n                \\\"Treasury::setToken: invalid exchangePathToCUSD\\\"\\n            );\\n\\n            tokens[_tokenAddress].exchangePathToCUSD = _exchangePathToCUSD;\\n        }\\n\\n        if (_exchangePathToPACT.length > 0) {\\n            require(\\n                lpSwap.uniswapQuoter().quoteExactInput(_exchangePathToPACT, 1e18) > 0,\\n                \\\"Treasury::setToken: invalid exchangePathToPACT\\\"\\n            );\\n\\n            tokens[_tokenAddress].exchangePathToPACT = _exchangePathToPACT;\\n        }\\n\\n        _tokenList.add(_tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Used to remove a token\\n     *\\n     * @param _tokenAddress address of the token\\n     **/\\n    function removeToken(address _tokenAddress) external override onlyOwnerOrImpactMarketCouncil {\\n        require(_tokenList.contains(_tokenAddress), \\\"Treasury::removeToken: this is not a token\\\");\\n\\n        tokens[_tokenAddress].rate = 0;\\n        tokens[_tokenAddress].lpStrategy = LpStrategy.NONE;\\n        tokens[_tokenAddress].lpPercentage = 0;\\n        tokens[_tokenAddress].lpMinLimit = 0;\\n        tokens[_tokenAddress].uniswapNFTPositionManagerId = 0;\\n        delete tokens[_tokenAddress].exchangePathToCUSD;\\n        delete tokens[_tokenAddress].exchangePathToPACT;\\n\\n        _tokenList.remove(_tokenAddress);\\n\\n        emit TokenRemoved(_tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Gets the amount of cUSDs that can be obtained from a converting the given amount of a token\\n     **/\\n    function getConvertedAmount(address _tokenAddress, uint256 _amount)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(isToken(_tokenAddress), \\\"Treasury::getConvertedAmount: this is not a valid token\\\");\\n\\n        Token memory _token = tokens[_tokenAddress];\\n\\n        uint256 _convertedAmount = _token.exchangePathToCUSD.length == 0\\n            ? _amount\\n            : lpSwap.uniswapQuoter().quoteExactInput(_token.exchangePathToCUSD, _amount);\\n\\n        return (_convertedAmount * _token.rate) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a token to cUSDs\\n     *\\n     * @param _tokenAddress is the address of the token to convert\\n     * @param _amountIn is the amount of the token to convert\\n     * @param _amountOutMin is used to prevent the transaction from failing if the price of the token changes - 0 for no check\\n     * @param _exchangePath is the path to use for the swap - empty for the default path\\n     **/\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes memory _exchangePath\\n    ) external override onlyOwnerOrImpactMarketCouncil {\\n        require(\\n            _tokenList.contains(_tokenAddress),\\n            \\\"Treasury::convertAmount: this is not a valid token\\\"\\n        );\\n\\n        if (_exchangePath.length == 0) {\\n            _exchangePath = tokens[_tokenAddress].exchangePathToCUSD;\\n        }\\n\\n        IERC20(_tokenAddress).approve(address(lpSwap.uniswapRouter()), _amountIn);\\n\\n        // Executes the swap.\\n        uint256 _amountOut = lpSwap.uniswapRouter().exactInput(\\n            IUniswapRouter02.ExactInputParams({\\n                path: _exchangePath,\\n                recipient: address(this),\\n                amountIn: _amountIn,\\n                amountOutMinimum: _amountOutMin\\n            })\\n        );\\n\\n        emit AmountConverted(_tokenAddress, _amountIn, _amountOutMin, _exchangePath, _amountOut);\\n    }\\n\\n    /**\\n     * @notice Uses part of the funds of a token to add liquidity to the Uniswap pool\\n     * it is used by the DonationMiner when creating a new epoch\\n     * it can also been used by the DAO when there are too many funds in the treasury\\n     **/\\n    function useFundsForLP() external override onlyOwnerOrDonationMiner {\\n        uint256 _tokenLength = _tokenList.length();\\n\\n        Token memory _token;\\n\\n        for (uint256 _index; _index < _tokenLength; _index++) {\\n            _token = tokens[_tokenList.at(_index)];\\n            if (_token.lpPercentage > 0) {\\n                IERC20 _erc20Token = IERC20(_tokenList.at(_index));\\n                uint256 _balance = _erc20Token.balanceOf(address(this));\\n\\n                if (_balance > _token.lpMinLimit) {\\n                    uint256 _tokenAmountToUseInLp = (_balance * _token.lpPercentage) / 100e18;\\n                    _erc20Token.approve(address(lpSwap), _tokenAmountToUseInLp);\\n                    lpSwap.addToLp(_erc20Token, _tokenAmountToUseInLp);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Collects the fees of a Uniswap NFT position\\n     *\\n     * @param _uniswapNFTPositionManagerId is the id of the Uniswap NFT position\\n     **/\\n    function collectFees(uint256 _uniswapNFTPositionManagerId)\\n        external\\n        override\\n        onlyOwnerOrImpactMarketCouncil\\n    {\\n        (, , address _token0Address, address _token1Address, , , , , , , , ) = lpSwap\\n            .uniswapNFTPositionManager()\\n            .positions(_uniswapNFTPositionManagerId);\\n\\n        require(\\n            _token0Address == address(PACT) || _token1Address == address(PACT),\\n            \\\"Treasury::collectFees invalid uniswapNFTPositionManagerId\\\"\\n        );\\n\\n        (uint256 _amount0, uint256 _amount1) = lpSwap.collectFees(_uniswapNFTPositionManagerId);\\n\\n        IERC20 _erc20Token;\\n        uint256 _pactAmount;\\n        uint256 _tokenAmount;\\n\\n        if (_token0Address == address(PACT)) {\\n            _erc20Token = IERC20(_token1Address);\\n            _pactAmount = _amount0;\\n            _tokenAmount = _amount1;\\n        } else {\\n            _erc20Token = IERC20(_token0Address);\\n            _pactAmount = _amount1;\\n            _tokenAmount = _amount0;\\n        }\\n\\n        Token memory _token = tokens[address(_erc20Token)];\\n\\n        if (_token.lpStrategy == LpStrategy.MainCoin) {\\n            PACT.transfer(DEAD_ADDRESS, _pactAmount);\\n        } else if (_token.lpStrategy == LpStrategy.SecondaryCoin) {\\n            uint256 _pactToBurn;\\n\\n            _erc20Token.approve(address(lpSwap.uniswapRouter()), _tokenAmount);\\n\\n            lpSwap.uniswapRouter().exactInput(\\n                IUniswapRouter02.ExactInputParams({\\n                    path: _token.exchangePathToCUSD,\\n                    recipient: address(this),\\n                    amountIn: _tokenAmount / 2,\\n                    amountOutMinimum: 0\\n                })\\n            );\\n\\n            _pactToBurn = lpSwap.uniswapRouter().exactInput(\\n                IUniswapRouter02.ExactInputParams({\\n                    path: _token.exchangePathToPACT,\\n                    recipient: address(this),\\n                    amountIn: _tokenAmount / 2,\\n                    amountOutMinimum: 0\\n                })\\n            );\\n\\n            PACT.transfer(DEAD_ADDRESS, _pactToBurn + _pactAmount);\\n        } else {\\n            return;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69e8fac8af179be4d7014feed9d112171d8794c5bb10f5819a4b49f60424e246\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"../../treasuryLpSwap/interfaces/ITreasuryLpSwap.sol\\\";\\nimport \\\"../../donationMiner/interfaces/IDonationMiner.sol\\\";\\n\\ninterface ITreasury {\\n    enum LpStrategy {     //strategy to use for splitting the LP fees between treasury and buyback\\n        NONE,             //all funds remains into treasury\\n        MainCoin,         //for UBI coins (like cUSD): UBI coin fees are kept in treasury, PACT fees are used for buyback\\n        SecondaryCoin     //for non UBI coins (like cEUR): half of the fees are swapped to PACT and used for buyback,\\n                          // half of the fees are swapped to cUSD and kept in treasury\\n                          // (PACT fees are used for buyback)\\n    }\\n\\n    struct Token {\\n        uint256 rate;                          //rate of the token in CUSD\\n        LpStrategy lpStrategy;                 //strategy to use for splitting the LP fees between treasury and buyback\\n        uint256 lpPercentage;                  //percentage of the funds to be used for LP\\n        uint256 lpMinLimit;                    //minimum amount of funds that need to be in the treasury (and not to be used for LP)\\n        uint256 uniswapNFTPositionManagerId;   //id of the NFT position manager\\n        bytes exchangePathToCUSD;              //uniswap path to exchange the token to CUSD\\n        bytes exchangePathToPACT;              //uniswap path to exchange the token to PACT\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function lpSwap() external view returns(ITreasuryLpSwap);\\n    function PACT() external view returns (IERC20);\\n    function donationMiner() external view returns (IDonationMiner);\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updateLpSwap(ITreasuryLpSwap _lpSwap) external;\\n    function updatePACT(IERC20 _newPACT) external;\\n    function updateDonationMiner(IDonationMiner _newDonationMiner) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function isToken(address _tokenAddress) external view returns (bool);\\n    function tokenListLength() external view returns (uint256);\\n    function tokenListAt(uint256 _index) external view returns (address);\\n    function tokens(address _tokenAddress) external view returns (\\n        uint256 rate,\\n        LpStrategy lpStrategy,\\n        uint256 lpPercentage,\\n        uint256 lpMinLimit,\\n        uint256 uniswapNFTPositionManagerId,\\n        bytes calldata exchangePathToCUSD,\\n        bytes calldata exchangePathToPACT\\n    );\\n    function setToken(\\n        address _tokenAddress,\\n        uint256 _rate,\\n        LpStrategy _lpStrategy,\\n        uint256 _lpPercentage,\\n        uint256 _lpMinLimit,\\n        uint256 _uniswapNFTPositionManagerId,\\n        bytes memory _exchangePathToCUSD,\\n        bytes memory _exchangePathToPACT\\n    ) external;\\n    function removeToken(address _tokenAddress) external;\\n    function getConvertedAmount(address _tokenAddress, uint256 _amount) external returns (uint256);\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes memory _exchangePath\\n    ) external;\\n    function useFundsForLP() external;\\n    function collectFees(uint256 _uniswapNFTPositionManagerId) external;\\n}\\n\",\"keccak256\":\"0xe8a55fb49f9ab672815df5780d99adb0ac7f75287842e09ee6183447a62ff0f4\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/TreasuryStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/**\\n * @title Storage for Treasury\\n * @notice For future upgrades, do not change TreasuryStorageV1. Create a new\\n * contract which implements TreasuryStorageV1 and following the naming convention\\n * TreasuryStorageVX.\\n */\\nabstract contract TreasuryStorageV1 is ITreasury {\\n    ICommunityAdmin public override communityAdmin;\\n}\\n\",\"keccak256\":\"0x3460ce0d5a8ca53b4d72189a1171c8a6481dd03683d7fc2b0de65e2b13acb227\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/TreasuryStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./TreasuryStorageV1.sol\\\";\\n\\n/**\\n * @title Storage for Treasury\\n * @notice For future upgrades, do not change TreasuryStorageV2. Create a new\\n * contract which implements TreasuryStorageV2 and following the naming convention\\n * TreasuryStorageVX.\\n */\\nabstract contract TreasuryStorageV2 is TreasuryStorageV1 {\\n    IDonationMiner public override donationMiner;\\n    ITreasuryLpSwap public override lpSwap;\\n    mapping(address => Token) public override tokens;\\n    EnumerableSet.AddressSet internal _tokenList;\\n    IERC20 public override PACT;\\n}\\n\",\"keccak256\":\"0xcb42d32a57e396fe3f25f5cc9ffdad4fdf982a978d35de5d4c6e2ac61430c2fa\",\"license\":\"Apache-2.0\"},\"contracts/treasuryLpSwap/interfaces/ITreasuryLpSwap.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../externalInterfaces/uniswapV3/INonfungiblePositionManager.sol\\\";\\nimport \\\"../../externalInterfaces/uniswapV3/IUniswapRouter02.sol\\\";\\nimport \\\"../../externalInterfaces/uniswapV3/IQuoter.sol\\\";\\n\\ninterface ITreasuryLpSwap {\\n    function getVersion() external pure returns(uint256);\\n    function treasury() external view returns(ITreasury);\\n    function uniswapRouter() external view returns(IUniswapRouter02);\\n    function uniswapQuoter() external view returns(IQuoter);\\n    function uniswapNFTPositionManager() external view returns(INonfungiblePositionManager);\\n    function updateTreasury(ITreasury _treasury) external;\\n    function updateUniswapRouter(IUniswapRouter02 _uniswapRouter) external;\\n    function updateUniswapQuoter(IQuoter _uniswapQuoter) external;\\n    function updateUniswapNFTPositionManager(INonfungiblePositionManager _newUniswapNFTPositionManager) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes memory _exchangePath\\n    ) external;\\n    function addToLp(IERC20 _token, uint256 _amount) external;\\n    function collectFees(uint256 _uniswapNFTPositionManagerId) external returns (uint256 amount0, uint256 amount1);\\n    function decreaseLiquidity(uint256 _uniswapNFTPositionManagerId, uint128 _liquidityAmount) external returns (uint256 amount0, uint256 amount1);\\n}\\n\",\"keccak256\":\"0xdebb441bfa2f31e8aab4c53b8172a16d0cbb0580d18fc4d3c3420c4ffe132b67\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613988806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639a552a29116100c3578063d33d4ec61161007c578063d33d4ec6146102bd578063e36d4f3e146102d0578063e4860339146102e3578063eb15d91414610309578063f2b899511461031c578063f2fde38b1461032f57600080fd5b80639a552a2914610256578063b17acdcd1461025e578063beabacc814610271578063c1eda8bb14610284578063c4d66de814610297578063c89fc9a7146102aa57600080fd5b80633b9a0176116101155780633b9a0176146101fc5780635093141f1461020f5780635fa7b584146102175780635fac917a1461022a578063715018a61461023d5780638da5cb5b1461024557600080fd5b80630d8e6e2c1461015d57806319f37361146101735780631bf1cf4114610196578063240bf363146101ab57806332b194b5146101be57806338a2e3e2146101e9575b600080fd5b60025b6040519081526020015b60405180910390f35b610186610181366004613307565b610342565b604051901515815260200161016a565b6101a96101a436600461336a565b610355565b005b6101a96101b9366004613307565b610a14565b6101d16101cc3660046134db565b610b01565b6040516001600160a01b03909116815260200161016a565b6099546101d1906001600160a01b031681565b609d546101d1906001600160a01b031681565b6101a9610b0e565b6101a9610225366004613307565b610f97565b6097546101d1906001600160a01b031681565b6101a9611181565b6033546001600160a01b03166101d1565b6101606111e7565b6101a961026c3660046134db565b6111f8565b6101a961027f36600461349b565b611c43565b6101a961029236600461341a565b611d89565b6101a96102a5366004613307565b6121f3565b6101a96102b8366004613307565b6122d8565b6101a96102cb366004613307565b6123c5565b6098546101d1906001600160a01b031681565b6102f66102f1366004613307565b6124ec565b60405161016a9796959493929190613780565b6101a9610317366004613307565b61263f565b61016061032a36600461333f565b61272c565b6101a961033d366004613307565b612ab2565b600061034f609b83612b7a565b92915050565b6033546001600160a01b03163314806104045750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b757600080fd5b505afa1580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef9190613323565b6001600160a01b0316336001600160a01b0316145b6104295760405162461bcd60e51b81526004016104209061368a565b60405180910390fd5b600087116104795760405162461bcd60e51b815260206004820181905260248201527f54726561737572793a3a736574546f6b656e3a20496e76616c696420726174656044820152606401610420565b6040516001600160a01b038916907fa07c91c183e42229e705a9795a1c06d76528b673788b849597364528c96eefb790600090a26001600160a01b0388166000908152609a6020526040902087815560019081018054889260ff19909116908360028111156104f857634e487b7160e01b600052602160045260246000fd5b02179055506001600160a01b0388166000908152609a602052604090206002810186905560030184905582156106be5760995460408051637da4edf960e11b815290516001600160a01b0390921691829163fb49dbf2916004808301926020929190829003018186803b15801561056e57600080fd5b505afa158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190613323565b6001600160a01b0316636352211e856040518263ffffffff1660e01b81526004016105d391815260200190565b60206040518083038186803b1580156105eb57600080fd5b505afa1580156105ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106239190613323565b6001600160a01b03161461069f5760405162461bcd60e51b815260206004820152603760248201527f54726561737572793a3a736574546f6b656e3a20696e76616c696420756e697360448201527f7761704e4654506f736974696f6e4d616e6167657249640000000000000000006064820152608401610420565b6001600160a01b0388166000908152609a602052604090206004018390555b81511561085e57609954604080516326da51a960e11b815290516000926001600160a01b031691634db4a352916004808301926020929190829003018186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190613323565b6001600160a01b031663cdca175384670de0b6b3a76400006040518363ffffffff1660e01b8152600401610777929190613655565b602060405180830381600087803b15801561079157600080fd5b505af11580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906134f3565b1161082d5760405162461bcd60e51b815260206004820152602e60248201527f54726561737572793a3a736574546f6b656e3a20696e76616c6964206578636860448201526d185b99d954185d1a151bd0d554d160921b6064820152608401610420565b6001600160a01b0388166000908152609a60209081526040909120835161085c9260059092019185019061315c565b505b8051156109fe57609954604080516326da51a960e11b815290516000926001600160a01b031691634db4a352916004808301926020929190829003018186803b1580156108aa57600080fd5b505afa1580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190613323565b6001600160a01b031663cdca175383670de0b6b3a76400006040518363ffffffff1660e01b8152600401610917929190613655565b602060405180830381600087803b15801561093157600080fd5b505af1158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906134f3565b116109cd5760405162461bcd60e51b815260206004820152602e60248201527f54726561737572793a3a736574546f6b656e3a20696e76616c6964206578636860448201526d185b99d954185d1a151bd41050d560921b6064820152608401610420565b6001600160a01b0388166000908152609a6020908152604090912082516109fc9260069092019184019061315c565b505b610a09609b89612b9f565b505050505050505050565b6033546001600160a01b0316331480610ac35750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190613323565b6001600160a01b0316336001600160a01b0316145b610adf5760405162461bcd60e51b81526004016104209061368a565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b600061034f609b83612bb4565b6033546001600160a01b0316331480610b3157506098546001600160a01b031633145b610b995760405162461bcd60e51b815260206004820152603360248201527f54726561737572793a2063616c6c6572206973206e6f7420746865206f776e6560448201527239103737b9103237b730ba34b7b726b4b732b960691b6064820152608401610420565b6000610ba5609b612bc0565b9050610be86040805160e0810190915260008082526020820190815260200160008152602001600081526020016000815260200160608152602001606081525090565b60005b82811015610f9257609a6000610c02609b84612bb4565b6001600160a01b031681526020808201929092526040908101600020815160e08101909252805482526001810154919290919083019060ff166002811115610c5a57634e487b7160e01b600052602160045260246000fd5b6002811115610c7957634e487b7160e01b600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201548152602001600582018054610cab906138bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd7906138bb565b8015610d245780601f10610cf957610100808354040283529160200191610d24565b820191906000526020600020905b815481529060010190602001808311610d0757829003601f168201915b50505050508152602001600682018054610d3d906138bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d69906138bb565b8015610db65780601f10610d8b57610100808354040283529160200191610db6565b820191906000526020600020905b815481529060010190602001808311610d9957829003601f168201915b5050505050815250509150600082604001511115610f80576000610ddb609b83612bb4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610e2057600080fd5b505afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5891906134f3565b90508360600151811115610f7d57600068056bc75e2d63100000856040015183610e829190613855565b610e8c9190613835565b60995460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925084169063095ea7b390604401602060405180830381600087803b158015610edc57600080fd5b505af1158015610ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f14919061347b565b506099546040516328eb619f60e21b81526001600160a01b038581166004830152602482018490529091169063a3ad867c90604401600060405180830381600087803b158015610f6357600080fd5b505af1158015610f77573d6000803e3d6000fd5b50505050505b50505b80610f8a816138f6565b915050610beb565b505050565b6033546001600160a01b03163314806110465750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff957600080fd5b505afa15801561100d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110319190613323565b6001600160a01b0316336001600160a01b0316145b6110625760405162461bcd60e51b81526004016104209061368a565b61106d609b82612b7a565b6110cc5760405162461bcd60e51b815260206004820152602a60248201527f54726561737572793a3a72656d6f7665546f6b656e3a2074686973206973206e60448201526937ba1030903a37b5b2b760b11b6064820152608401610420565b6001600160a01b0381166000908152609a6020526040812081815560018101805460ff19169055600281018290556003810182905560048101829055611117916005909101906131e0565b6001600160a01b0381166000908152609a6020526040812061113e916006909101906131e0565b611149609b82612bca565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b6033546001600160a01b031633146111db5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610420565b6111e56000612bdf565b565b60006111f3609b612bc0565b905090565b6033546001600160a01b03163314806112a75750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561125a57600080fd5b505afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112929190613323565b6001600160a01b0316336001600160a01b0316145b6112c35760405162461bcd60e51b81526004016104209061368a565b600080609960009054906101000a90046001600160a01b03166001600160a01b031663fb49dbf26040518163ffffffff1660e01b815260040160206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190613323565b6001600160a01b03166399fbab88846040518263ffffffff1660e01b815260040161137991815260200190565b6101806040518083038186803b15801561139257600080fd5b505afa1580156113a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ca919061352e565b5050505050505050935093505050609d60009054906101000a90046001600160a01b03166001600160a01b0316826001600160a01b0316148061141a5750609d546001600160a01b038281169116145b61148c5760405162461bcd60e51b815260206004820152603960248201527f54726561737572793a3a636f6c6c6563744665657320696e76616c696420756e60448201527f69737761704e4654506f736974696f6e4d616e616765724964000000000000006064820152608401610420565b60995460405163b17acdcd60e01b81526004810185905260009182916001600160a01b039091169063b17acdcd906024016040805180830381600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150e919061350b565b609d549193509150600090819081906001600160a01b038881169116141561153d575084915083905082611546565b50859150829050835b6001600160a01b0383166000908152609a60209081526040808320815160e08101909252805482526001810154919290919083019060ff16600281111561159d57634e487b7160e01b600052602160045260246000fd5b60028111156115bc57634e487b7160e01b600052602160045260246000fd5b81526020016002820154815260200160038201548152602001600482015481526020016005820180546115ee906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461161a906138bb565b80156116675780601f1061163c57610100808354040283529160200191611667565b820191906000526020600020905b81548152906001019060200180831161164a57829003601f168201915b50505050508152602001600682018054611680906138bb565b80601f01602080910402602001604051908101604052809291908181526020018280546116ac906138bb565b80156116f95780601f106116ce576101008083540402835291602001916116f9565b820191906000526020600020905b8154815290600101906020018083116116dc57829003601f168201915b50505050508152505090506001600281111561172557634e487b7160e01b600052602160045260246000fd5b8160200151600281111561174957634e487b7160e01b600052602160045260246000fd5b14156117db57609d5460405163a9059cbb60e01b815261dead6004820152602481018590526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561179d57600080fd5b505af11580156117b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d5919061347b565b50610a09565b60028160200151600281111561180157634e487b7160e01b600052602160045260246000fd5b1415610a09576000846001600160a01b031663095ea7b3609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561186657600080fd5b505afa15801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613323565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e919061347b565b50609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561196d57600080fd5b505afa158015611981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a59190613323565b6001600160a01b031663b858183f60405180608001604052808560a001518152602001306001600160a01b031681526020016002876119e49190613835565b815260200160008152506040518263ffffffff1660e01b8152600401611a0a9190613732565b602060405180830381600087803b158015611a2457600080fd5b505af1158015611a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5c91906134f3565b50609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611aab57600080fd5b505afa158015611abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae39190613323565b6001600160a01b031663b858183f60405180608001604052808560c001518152602001306001600160a01b03168152602001600287611b229190613835565b815260200160008152506040518263ffffffff1660e01b8152600401611b489190613732565b602060405180830381600087803b158015611b6257600080fd5b505af1158015611b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9a91906134f3565b609d549091506001600160a01b031663a9059cbb61dead611bbb878561381d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c39919061347b565b5050610a09565b50565b6097546001600160a01b0316331480611c6657506033546001600160a01b031633145b611cc65760405162461bcd60e51b815260206004820152602b60248201527f54726561737572793a204e4f545f434f4d4d554e4954595f41444d494e20414e60448201526a22102727aa2fa7aba722a960a91b6064820152608401610420565b60026065541415611d195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610420565b6002606555611d326001600160a01b0384168383612c31565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a895683604051611d7791815260200190565b60405180910390a35050600160655550565b6033546001600160a01b0316331480611e385750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015611deb57600080fd5b505afa158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190613323565b6001600160a01b0316336001600160a01b0316145b611e545760405162461bcd60e51b81526004016104209061368a565b611e5f609b85612b7a565b611ec65760405162461bcd60e51b815260206004820152603260248201527f54726561737572793a3a636f6e76657274416d6f756e743a2074686973206973604482015271103737ba1030903b30b634b2103a37b5b2b760711b6064820152608401610420565b8051611f73576001600160a01b0384166000908152609a602052604090206005018054611ef2906138bb565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1e906138bb565b8015611f6b5780601f10611f4057610100808354040283529160200191611f6b565b820191906000526020600020905b815481529060010190602001808311611f4e57829003601f168201915b505050505090505b836001600160a01b031663095ea7b3609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd057600080fd5b505afa158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120089190613323565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381600087803b15801561205057600080fd5b505af1158015612064573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612088919061347b565b506099546040805163735de9f760e01b815290516000926001600160a01b03169163735de9f7916004808301926020929190829003018186803b1580156120ce57600080fd5b505afa1580156120e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121069190613323565b6040805160808101825284815230602082015280820187905260608101869052905163b858183f60e01b81526001600160a01b03929092169163b858183f9161215191600401613732565b602060405180830381600087803b15801561216b57600080fd5b505af115801561217f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a391906134f3565b9050846001600160a01b03167f8cf0160167000e9c6c54bfc6c2ef2c6895eeecc31fbd147d5d070b4408662b39858585856040516121e494939291906137ed565b60405180910390a25050505050565b600054610100900460ff1661220e5760005460ff1615612212565b303b155b6122755760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610420565b600054610100900460ff16158015612297576000805461ffff19166101011790555b61229f612c83565b6122a7612cba565b609780546001600160a01b0319166001600160a01b03841617905580156122d4576000805461ff00191690555b5050565b6033546001600160a01b03163314806123875750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561233a57600080fd5b505afa15801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190613323565b6001600160a01b0316336001600160a01b0316145b6123a35760405162461bcd60e51b81526004016104209061368a565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314806124745750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561242757600080fd5b505afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190613323565b6001600160a01b0316336001600160a01b0316145b6124905760405162461bcd60e51b81526004016104209061368a565b6097546040516001600160a01b038084169216907fdd8d3b7b0badfc5d636d48e71e28015b4b8554b64d2cffba6f0a90bf7693ec0090600090a3609780546001600160a01b0319166001600160a01b0392909216919091179055565b609a60205260009081526040902080546001820154600283015460038401546004850154600586018054959660ff909516959394929391929161252e906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461255a906138bb565b80156125a75780601f1061257c576101008083540402835291602001916125a7565b820191906000526020600020905b81548152906001019060200180831161258a57829003601f168201915b5050505050908060060180546125bc906138bb565b80601f01602080910402602001604051908101604052809291908181526020018280546125e8906138bb565b80156126355780601f1061260a57610100808354040283529160200191612635565b820191906000526020600020905b81548152906001019060200180831161261857829003601f168201915b5050505050905087565b6033546001600160a01b03163314806126ee5750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156126a157600080fd5b505afa1580156126b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d99190613323565b6001600160a01b0316336001600160a01b0316145b61270a5760405162461bcd60e51b81526004016104209061368a565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b600061273783610342565b6127a95760405162461bcd60e51b815260206004820152603760248201527f54726561737572793a3a676574436f6e766572746564416d6f756e743a20746860448201527f6973206973206e6f7420612076616c696420746f6b656e0000000000000000006064820152608401610420565b6001600160a01b0383166000908152609a60209081526040808320815160e08101909252805482526001810154919290919083019060ff16600281111561280057634e487b7160e01b600052602160045260246000fd5b600281111561281f57634e487b7160e01b600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201548152602001600582018054612851906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461287d906138bb565b80156128ca5780601f1061289f576101008083540402835291602001916128ca565b820191906000526020600020905b8154815290600101906020018083116128ad57829003601f168201915b505050505081526020016006820180546128e3906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461290f906138bb565b801561295c5780601f106129315761010080835404028352916020019161295c565b820191906000526020600020905b81548152906001019060200180831161293f57829003601f168201915b505050505081525050905060008160a0015151600014612a8457609960009054906101000a90046001600160a01b03166001600160a01b0316634db4a3526040518163ffffffff1660e01b815260040160206040518083038186803b1580156129c457600080fd5b505afa1580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190613323565b6001600160a01b031663cdca17538360a00151866040518363ffffffff1660e01b8152600401612a2d929190613655565b602060405180830381600087803b158015612a4757600080fd5b505af1158015612a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7f91906134f3565b612a86565b835b8251909150670de0b6b3a764000090612a9f9083613855565b612aa99190613835565b95945050505050565b6033546001600160a01b03163314612b0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610420565b6001600160a01b038116612b715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610420565b611c4081612bdf565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000612b98836001600160a01b038416612ce9565b6000612b988383612d38565b600061034f825490565b6000612b98836001600160a01b038416612d70565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f92908490612e8d565b600054610100900460ff16612caa5760405162461bcd60e51b8152600401610420906136e7565b612cb2612f5f565b6111e5612f86565b600054610100900460ff16612ce15760405162461bcd60e51b8152600401610420906136e7565b6111e5612fb6565b6000818152600183016020526040812054612d305750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561034f565b50600061034f565b6000826000018281548110612d5d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120548015612e83576000612d94600183613874565b8554909150600090612da890600190613874565b9050818114612e29576000866000018281548110612dd657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612e0757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e4857634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061034f565b600091505061034f565b6000612ee2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612fe49092919063ffffffff16565b805190915015610f925780806020019051810190612f00919061347b565b610f925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610420565b600054610100900460ff166111e55760405162461bcd60e51b8152600401610420906136e7565b600054610100900460ff16612fad5760405162461bcd60e51b8152600401610420906136e7565b6111e533612bdf565b600054610100900460ff16612fdd5760405162461bcd60e51b8152600401610420906136e7565b6001606555565b6060612ff38484600085612ffb565b949350505050565b60608247101561305c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610420565b843b6130aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610420565b600080866001600160a01b031685876040516130c69190613639565b60006040518083038185875af1925050503d8060008114613103576040519150601f19603f3d011682016040523d82523d6000602084013e613108565b606091505b5091509150613118828286613123565b979650505050505050565b60608315613132575081612b98565b8251156131425782518084602001fd5b8160405162461bcd60e51b81526004016104209190613677565b828054613168906138bb565b90600052602060002090601f01602090048101928261318a57600085556131d0565b82601f106131a357805160ff19168380011785556131d0565b828001600101855582156131d0579182015b828111156131d05782518255916020019190600101906131b5565b506131dc929150613216565b5090565b5080546131ec906138bb565b6000825580601f106131fc575050565b601f016020900490600052602060002090810190611c4091905b5b808211156131dc5760008155600101613217565b80516132368161393d565b919050565b600082601f83011261324b578081fd5b813567ffffffffffffffff8082111561326657613266613927565b604051601f8301601f19908116603f0116810190828211818310171561328e5761328e613927565b816040528381528660208588010111156132a6578485fd5b8360208701602083013792830160200193909352509392505050565b8051600281900b811461323657600080fd5b80516fffffffffffffffffffffffffffffffff8116811461323657600080fd5b805162ffffff8116811461323657600080fd5b600060208284031215613318578081fd5b8135612b988161393d565b600060208284031215613334578081fd5b8151612b988161393d565b60008060408385031215613351578081fd5b823561335c8161393d565b946020939093013593505050565b600080600080600080600080610100898b031215613386578384fd5b88356133918161393d565b9750602089013596506040890135600381106133ab578485fd5b9550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff808211156133dc578384fd5b6133e88c838d0161323b565b935060e08b01359150808211156133fd578283fd5b5061340a8b828c0161323b565b9150509295985092959890939650565b6000806000806080858703121561342f578384fd5b843561343a8161393d565b93506020850135925060408501359150606085013567ffffffffffffffff811115613463578182fd5b61346f8782880161323b565b91505092959194509250565b60006020828403121561348c578081fd5b81518015158114612b98578182fd5b6000806000606084860312156134af578081fd5b83356134ba8161393d565b925060208401356134ca8161393d565b929592945050506040919091013590565b6000602082840312156134ec578081fd5b5035919050565b600060208284031215613504578081fd5b5051919050565b6000806040838503121561351d578182fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f031215613550578586fd5b8c516bffffffffffffffffffffffff8116811461356b578687fd5b9b5061357960208e0161322b565b9a5061358760408e0161322b565b995061359560608e0161322b565b98506135a360808e016132f4565b97506135b160a08e016132c2565b96506135bf60c08e016132c2565b95506135cd60e08e016132d4565b94506101008d015193506101208d015192506135ec6101408e016132d4565b91506135fb6101608e016132d4565b90509295989b509295989b509295989b565b6000815180845261362581602086016020860161388b565b601f01601f19169290920160200192915050565b6000825161364b81846020870161388b565b9190910192915050565b604081526000613668604083018561360d565b90508260208301529392505050565b602081526000612b98602083018461360d565b60208082526039908201527f54726561737572793a2063616c6c6572206973206e6f7420746865206f776e6560408201527f72206e6f7220496d706163744d61726b6574436f756e63696c00000000000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208152600082516080602084015261374e60a084018261360d565b905060018060a01b03602085015116604084015260408401516060840152606084015160808401528091505092915050565b8781526000600388106137a157634e487b7160e01b81526021600452602481fd5b87602083015286604083015285606083015284608083015260e060a08301526137cd60e083018561360d565b82810360c08401526137df818561360d565b9a9950505050505050505050565b84815283602082015260806040820152600061380c608083018561360d565b905082606083015295945050505050565b6000821982111561383057613830613911565b500190565b60008261385057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561386f5761386f613911565b500290565b60008282101561388657613886613911565b500390565b60005b838110156138a657818101518382015260200161388e565b838111156138b5576000848401525b50505050565b600181811c908216806138cf57607f821691505b602082108114156138f057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561390a5761390a613911565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c4057600080fdfea264697066735822122094c2990891fd150d94fd3ed858b7cd7283cdc853de720e1b3f9e0c78540f046164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80639a552a29116100c3578063d33d4ec61161007c578063d33d4ec6146102bd578063e36d4f3e146102d0578063e4860339146102e3578063eb15d91414610309578063f2b899511461031c578063f2fde38b1461032f57600080fd5b80639a552a2914610256578063b17acdcd1461025e578063beabacc814610271578063c1eda8bb14610284578063c4d66de814610297578063c89fc9a7146102aa57600080fd5b80633b9a0176116101155780633b9a0176146101fc5780635093141f1461020f5780635fa7b584146102175780635fac917a1461022a578063715018a61461023d5780638da5cb5b1461024557600080fd5b80630d8e6e2c1461015d57806319f37361146101735780631bf1cf4114610196578063240bf363146101ab57806332b194b5146101be57806338a2e3e2146101e9575b600080fd5b60025b6040519081526020015b60405180910390f35b610186610181366004613307565b610342565b604051901515815260200161016a565b6101a96101a436600461336a565b610355565b005b6101a96101b9366004613307565b610a14565b6101d16101cc3660046134db565b610b01565b6040516001600160a01b03909116815260200161016a565b6099546101d1906001600160a01b031681565b609d546101d1906001600160a01b031681565b6101a9610b0e565b6101a9610225366004613307565b610f97565b6097546101d1906001600160a01b031681565b6101a9611181565b6033546001600160a01b03166101d1565b6101606111e7565b6101a961026c3660046134db565b6111f8565b6101a961027f36600461349b565b611c43565b6101a961029236600461341a565b611d89565b6101a96102a5366004613307565b6121f3565b6101a96102b8366004613307565b6122d8565b6101a96102cb366004613307565b6123c5565b6098546101d1906001600160a01b031681565b6102f66102f1366004613307565b6124ec565b60405161016a9796959493929190613780565b6101a9610317366004613307565b61263f565b61016061032a36600461333f565b61272c565b6101a961033d366004613307565b612ab2565b600061034f609b83612b7a565b92915050565b6033546001600160a01b03163314806104045750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b757600080fd5b505afa1580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef9190613323565b6001600160a01b0316336001600160a01b0316145b6104295760405162461bcd60e51b81526004016104209061368a565b60405180910390fd5b600087116104795760405162461bcd60e51b815260206004820181905260248201527f54726561737572793a3a736574546f6b656e3a20496e76616c696420726174656044820152606401610420565b6040516001600160a01b038916907fa07c91c183e42229e705a9795a1c06d76528b673788b849597364528c96eefb790600090a26001600160a01b0388166000908152609a6020526040902087815560019081018054889260ff19909116908360028111156104f857634e487b7160e01b600052602160045260246000fd5b02179055506001600160a01b0388166000908152609a602052604090206002810186905560030184905582156106be5760995460408051637da4edf960e11b815290516001600160a01b0390921691829163fb49dbf2916004808301926020929190829003018186803b15801561056e57600080fd5b505afa158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190613323565b6001600160a01b0316636352211e856040518263ffffffff1660e01b81526004016105d391815260200190565b60206040518083038186803b1580156105eb57600080fd5b505afa1580156105ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106239190613323565b6001600160a01b03161461069f5760405162461bcd60e51b815260206004820152603760248201527f54726561737572793a3a736574546f6b656e3a20696e76616c696420756e697360448201527f7761704e4654506f736974696f6e4d616e6167657249640000000000000000006064820152608401610420565b6001600160a01b0388166000908152609a602052604090206004018390555b81511561085e57609954604080516326da51a960e11b815290516000926001600160a01b031691634db4a352916004808301926020929190829003018186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190613323565b6001600160a01b031663cdca175384670de0b6b3a76400006040518363ffffffff1660e01b8152600401610777929190613655565b602060405180830381600087803b15801561079157600080fd5b505af11580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906134f3565b1161082d5760405162461bcd60e51b815260206004820152602e60248201527f54726561737572793a3a736574546f6b656e3a20696e76616c6964206578636860448201526d185b99d954185d1a151bd0d554d160921b6064820152608401610420565b6001600160a01b0388166000908152609a60209081526040909120835161085c9260059092019185019061315c565b505b8051156109fe57609954604080516326da51a960e11b815290516000926001600160a01b031691634db4a352916004808301926020929190829003018186803b1580156108aa57600080fd5b505afa1580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190613323565b6001600160a01b031663cdca175383670de0b6b3a76400006040518363ffffffff1660e01b8152600401610917929190613655565b602060405180830381600087803b15801561093157600080fd5b505af1158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906134f3565b116109cd5760405162461bcd60e51b815260206004820152602e60248201527f54726561737572793a3a736574546f6b656e3a20696e76616c6964206578636860448201526d185b99d954185d1a151bd41050d560921b6064820152608401610420565b6001600160a01b0388166000908152609a6020908152604090912082516109fc9260069092019184019061315c565b505b610a09609b89612b9f565b505050505050505050565b6033546001600160a01b0316331480610ac35750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190613323565b6001600160a01b0316336001600160a01b0316145b610adf5760405162461bcd60e51b81526004016104209061368a565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b600061034f609b83612bb4565b6033546001600160a01b0316331480610b3157506098546001600160a01b031633145b610b995760405162461bcd60e51b815260206004820152603360248201527f54726561737572793a2063616c6c6572206973206e6f7420746865206f776e6560448201527239103737b9103237b730ba34b7b726b4b732b960691b6064820152608401610420565b6000610ba5609b612bc0565b9050610be86040805160e0810190915260008082526020820190815260200160008152602001600081526020016000815260200160608152602001606081525090565b60005b82811015610f9257609a6000610c02609b84612bb4565b6001600160a01b031681526020808201929092526040908101600020815160e08101909252805482526001810154919290919083019060ff166002811115610c5a57634e487b7160e01b600052602160045260246000fd5b6002811115610c7957634e487b7160e01b600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201548152602001600582018054610cab906138bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd7906138bb565b8015610d245780601f10610cf957610100808354040283529160200191610d24565b820191906000526020600020905b815481529060010190602001808311610d0757829003601f168201915b50505050508152602001600682018054610d3d906138bb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d69906138bb565b8015610db65780601f10610d8b57610100808354040283529160200191610db6565b820191906000526020600020905b815481529060010190602001808311610d9957829003601f168201915b5050505050815250509150600082604001511115610f80576000610ddb609b83612bb4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610e2057600080fd5b505afa158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5891906134f3565b90508360600151811115610f7d57600068056bc75e2d63100000856040015183610e829190613855565b610e8c9190613835565b60995460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925084169063095ea7b390604401602060405180830381600087803b158015610edc57600080fd5b505af1158015610ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f14919061347b565b506099546040516328eb619f60e21b81526001600160a01b038581166004830152602482018490529091169063a3ad867c90604401600060405180830381600087803b158015610f6357600080fd5b505af1158015610f77573d6000803e3d6000fd5b50505050505b50505b80610f8a816138f6565b915050610beb565b505050565b6033546001600160a01b03163314806110465750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff957600080fd5b505afa15801561100d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110319190613323565b6001600160a01b0316336001600160a01b0316145b6110625760405162461bcd60e51b81526004016104209061368a565b61106d609b82612b7a565b6110cc5760405162461bcd60e51b815260206004820152602a60248201527f54726561737572793a3a72656d6f7665546f6b656e3a2074686973206973206e60448201526937ba1030903a37b5b2b760b11b6064820152608401610420565b6001600160a01b0381166000908152609a6020526040812081815560018101805460ff19169055600281018290556003810182905560048101829055611117916005909101906131e0565b6001600160a01b0381166000908152609a6020526040812061113e916006909101906131e0565b611149609b82612bca565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b6033546001600160a01b031633146111db5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610420565b6111e56000612bdf565b565b60006111f3609b612bc0565b905090565b6033546001600160a01b03163314806112a75750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561125a57600080fd5b505afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112929190613323565b6001600160a01b0316336001600160a01b0316145b6112c35760405162461bcd60e51b81526004016104209061368a565b600080609960009054906101000a90046001600160a01b03166001600160a01b031663fb49dbf26040518163ffffffff1660e01b815260040160206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190613323565b6001600160a01b03166399fbab88846040518263ffffffff1660e01b815260040161137991815260200190565b6101806040518083038186803b15801561139257600080fd5b505afa1580156113a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ca919061352e565b5050505050505050935093505050609d60009054906101000a90046001600160a01b03166001600160a01b0316826001600160a01b0316148061141a5750609d546001600160a01b038281169116145b61148c5760405162461bcd60e51b815260206004820152603960248201527f54726561737572793a3a636f6c6c6563744665657320696e76616c696420756e60448201527f69737761704e4654506f736974696f6e4d616e616765724964000000000000006064820152608401610420565b60995460405163b17acdcd60e01b81526004810185905260009182916001600160a01b039091169063b17acdcd906024016040805180830381600087803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150e919061350b565b609d549193509150600090819081906001600160a01b038881169116141561153d575084915083905082611546565b50859150829050835b6001600160a01b0383166000908152609a60209081526040808320815160e08101909252805482526001810154919290919083019060ff16600281111561159d57634e487b7160e01b600052602160045260246000fd5b60028111156115bc57634e487b7160e01b600052602160045260246000fd5b81526020016002820154815260200160038201548152602001600482015481526020016005820180546115ee906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461161a906138bb565b80156116675780601f1061163c57610100808354040283529160200191611667565b820191906000526020600020905b81548152906001019060200180831161164a57829003601f168201915b50505050508152602001600682018054611680906138bb565b80601f01602080910402602001604051908101604052809291908181526020018280546116ac906138bb565b80156116f95780601f106116ce576101008083540402835291602001916116f9565b820191906000526020600020905b8154815290600101906020018083116116dc57829003601f168201915b50505050508152505090506001600281111561172557634e487b7160e01b600052602160045260246000fd5b8160200151600281111561174957634e487b7160e01b600052602160045260246000fd5b14156117db57609d5460405163a9059cbb60e01b815261dead6004820152602481018590526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561179d57600080fd5b505af11580156117b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d5919061347b565b50610a09565b60028160200151600281111561180157634e487b7160e01b600052602160045260246000fd5b1415610a09576000846001600160a01b031663095ea7b3609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561186657600080fd5b505afa15801561187a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189e9190613323565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e919061347b565b50609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561196d57600080fd5b505afa158015611981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a59190613323565b6001600160a01b031663b858183f60405180608001604052808560a001518152602001306001600160a01b031681526020016002876119e49190613835565b815260200160008152506040518263ffffffff1660e01b8152600401611a0a9190613732565b602060405180830381600087803b158015611a2457600080fd5b505af1158015611a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5c91906134f3565b50609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611aab57600080fd5b505afa158015611abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae39190613323565b6001600160a01b031663b858183f60405180608001604052808560c001518152602001306001600160a01b03168152602001600287611b229190613835565b815260200160008152506040518263ffffffff1660e01b8152600401611b489190613732565b602060405180830381600087803b158015611b6257600080fd5b505af1158015611b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9a91906134f3565b609d549091506001600160a01b031663a9059cbb61dead611bbb878561381d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c39919061347b565b5050610a09565b50565b6097546001600160a01b0316331480611c6657506033546001600160a01b031633145b611cc65760405162461bcd60e51b815260206004820152602b60248201527f54726561737572793a204e4f545f434f4d4d554e4954595f41444d494e20414e60448201526a22102727aa2fa7aba722a960a91b6064820152608401610420565b60026065541415611d195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610420565b6002606555611d326001600160a01b0384168383612c31565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a895683604051611d7791815260200190565b60405180910390a35050600160655550565b6033546001600160a01b0316331480611e385750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015611deb57600080fd5b505afa158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190613323565b6001600160a01b0316336001600160a01b0316145b611e545760405162461bcd60e51b81526004016104209061368a565b611e5f609b85612b7a565b611ec65760405162461bcd60e51b815260206004820152603260248201527f54726561737572793a3a636f6e76657274416d6f756e743a2074686973206973604482015271103737ba1030903b30b634b2103a37b5b2b760711b6064820152608401610420565b8051611f73576001600160a01b0384166000908152609a602052604090206005018054611ef2906138bb565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1e906138bb565b8015611f6b5780601f10611f4057610100808354040283529160200191611f6b565b820191906000526020600020905b815481529060010190602001808311611f4e57829003601f168201915b505050505090505b836001600160a01b031663095ea7b3609960009054906101000a90046001600160a01b03166001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd057600080fd5b505afa158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120089190613323565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381600087803b15801561205057600080fd5b505af1158015612064573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612088919061347b565b506099546040805163735de9f760e01b815290516000926001600160a01b03169163735de9f7916004808301926020929190829003018186803b1580156120ce57600080fd5b505afa1580156120e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121069190613323565b6040805160808101825284815230602082015280820187905260608101869052905163b858183f60e01b81526001600160a01b03929092169163b858183f9161215191600401613732565b602060405180830381600087803b15801561216b57600080fd5b505af115801561217f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a391906134f3565b9050846001600160a01b03167f8cf0160167000e9c6c54bfc6c2ef2c6895eeecc31fbd147d5d070b4408662b39858585856040516121e494939291906137ed565b60405180910390a25050505050565b600054610100900460ff1661220e5760005460ff1615612212565b303b155b6122755760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610420565b600054610100900460ff16158015612297576000805461ffff19166101011790555b61229f612c83565b6122a7612cba565b609780546001600160a01b0319166001600160a01b03841617905580156122d4576000805461ff00191690555b5050565b6033546001600160a01b03163314806123875750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561233a57600080fd5b505afa15801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190613323565b6001600160a01b0316336001600160a01b0316145b6123a35760405162461bcd60e51b81526004016104209061368a565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314806124745750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561242757600080fd5b505afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190613323565b6001600160a01b0316336001600160a01b0316145b6124905760405162461bcd60e51b81526004016104209061368a565b6097546040516001600160a01b038084169216907fdd8d3b7b0badfc5d636d48e71e28015b4b8554b64d2cffba6f0a90bf7693ec0090600090a3609780546001600160a01b0319166001600160a01b0392909216919091179055565b609a60205260009081526040902080546001820154600283015460038401546004850154600586018054959660ff909516959394929391929161252e906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461255a906138bb565b80156125a75780601f1061257c576101008083540402835291602001916125a7565b820191906000526020600020905b81548152906001019060200180831161258a57829003601f168201915b5050505050908060060180546125bc906138bb565b80601f01602080910402602001604051908101604052809291908181526020018280546125e8906138bb565b80156126355780601f1061260a57610100808354040283529160200191612635565b820191906000526020600020905b81548152906001019060200180831161261857829003601f168201915b5050505050905087565b6033546001600160a01b03163314806126ee5750609760009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156126a157600080fd5b505afa1580156126b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d99190613323565b6001600160a01b0316336001600160a01b0316145b61270a5760405162461bcd60e51b81526004016104209061368a565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b600061273783610342565b6127a95760405162461bcd60e51b815260206004820152603760248201527f54726561737572793a3a676574436f6e766572746564416d6f756e743a20746860448201527f6973206973206e6f7420612076616c696420746f6b656e0000000000000000006064820152608401610420565b6001600160a01b0383166000908152609a60209081526040808320815160e08101909252805482526001810154919290919083019060ff16600281111561280057634e487b7160e01b600052602160045260246000fd5b600281111561281f57634e487b7160e01b600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201548152602001600582018054612851906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461287d906138bb565b80156128ca5780601f1061289f576101008083540402835291602001916128ca565b820191906000526020600020905b8154815290600101906020018083116128ad57829003601f168201915b505050505081526020016006820180546128e3906138bb565b80601f016020809104026020016040519081016040528092919081815260200182805461290f906138bb565b801561295c5780601f106129315761010080835404028352916020019161295c565b820191906000526020600020905b81548152906001019060200180831161293f57829003601f168201915b505050505081525050905060008160a0015151600014612a8457609960009054906101000a90046001600160a01b03166001600160a01b0316634db4a3526040518163ffffffff1660e01b815260040160206040518083038186803b1580156129c457600080fd5b505afa1580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190613323565b6001600160a01b031663cdca17538360a00151866040518363ffffffff1660e01b8152600401612a2d929190613655565b602060405180830381600087803b158015612a4757600080fd5b505af1158015612a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7f91906134f3565b612a86565b835b8251909150670de0b6b3a764000090612a9f9083613855565b612aa99190613835565b95945050505050565b6033546001600160a01b03163314612b0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610420565b6001600160a01b038116612b715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610420565b611c4081612bdf565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000612b98836001600160a01b038416612ce9565b6000612b988383612d38565b600061034f825490565b6000612b98836001600160a01b038416612d70565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610f92908490612e8d565b600054610100900460ff16612caa5760405162461bcd60e51b8152600401610420906136e7565b612cb2612f5f565b6111e5612f86565b600054610100900460ff16612ce15760405162461bcd60e51b8152600401610420906136e7565b6111e5612fb6565b6000818152600183016020526040812054612d305750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561034f565b50600061034f565b6000826000018281548110612d5d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120548015612e83576000612d94600183613874565b8554909150600090612da890600190613874565b9050818114612e29576000866000018281548110612dd657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612e0757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e4857634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061034f565b600091505061034f565b6000612ee2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612fe49092919063ffffffff16565b805190915015610f925780806020019051810190612f00919061347b565b610f925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610420565b600054610100900460ff166111e55760405162461bcd60e51b8152600401610420906136e7565b600054610100900460ff16612fad5760405162461bcd60e51b8152600401610420906136e7565b6111e533612bdf565b600054610100900460ff16612fdd5760405162461bcd60e51b8152600401610420906136e7565b6001606555565b6060612ff38484600085612ffb565b949350505050565b60608247101561305c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610420565b843b6130aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610420565b600080866001600160a01b031685876040516130c69190613639565b60006040518083038185875af1925050503d8060008114613103576040519150601f19603f3d011682016040523d82523d6000602084013e613108565b606091505b5091509150613118828286613123565b979650505050505050565b60608315613132575081612b98565b8251156131425782518084602001fd5b8160405162461bcd60e51b81526004016104209190613677565b828054613168906138bb565b90600052602060002090601f01602090048101928261318a57600085556131d0565b82601f106131a357805160ff19168380011785556131d0565b828001600101855582156131d0579182015b828111156131d05782518255916020019190600101906131b5565b506131dc929150613216565b5090565b5080546131ec906138bb565b6000825580601f106131fc575050565b601f016020900490600052602060002090810190611c4091905b5b808211156131dc5760008155600101613217565b80516132368161393d565b919050565b600082601f83011261324b578081fd5b813567ffffffffffffffff8082111561326657613266613927565b604051601f8301601f19908116603f0116810190828211818310171561328e5761328e613927565b816040528381528660208588010111156132a6578485fd5b8360208701602083013792830160200193909352509392505050565b8051600281900b811461323657600080fd5b80516fffffffffffffffffffffffffffffffff8116811461323657600080fd5b805162ffffff8116811461323657600080fd5b600060208284031215613318578081fd5b8135612b988161393d565b600060208284031215613334578081fd5b8151612b988161393d565b60008060408385031215613351578081fd5b823561335c8161393d565b946020939093013593505050565b600080600080600080600080610100898b031215613386578384fd5b88356133918161393d565b9750602089013596506040890135600381106133ab578485fd5b9550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff808211156133dc578384fd5b6133e88c838d0161323b565b935060e08b01359150808211156133fd578283fd5b5061340a8b828c0161323b565b9150509295985092959890939650565b6000806000806080858703121561342f578384fd5b843561343a8161393d565b93506020850135925060408501359150606085013567ffffffffffffffff811115613463578182fd5b61346f8782880161323b565b91505092959194509250565b60006020828403121561348c578081fd5b81518015158114612b98578182fd5b6000806000606084860312156134af578081fd5b83356134ba8161393d565b925060208401356134ca8161393d565b929592945050506040919091013590565b6000602082840312156134ec578081fd5b5035919050565b600060208284031215613504578081fd5b5051919050565b6000806040838503121561351d578182fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f031215613550578586fd5b8c516bffffffffffffffffffffffff8116811461356b578687fd5b9b5061357960208e0161322b565b9a5061358760408e0161322b565b995061359560608e0161322b565b98506135a360808e016132f4565b97506135b160a08e016132c2565b96506135bf60c08e016132c2565b95506135cd60e08e016132d4565b94506101008d015193506101208d015192506135ec6101408e016132d4565b91506135fb6101608e016132d4565b90509295989b509295989b509295989b565b6000815180845261362581602086016020860161388b565b601f01601f19169290920160200192915050565b6000825161364b81846020870161388b565b9190910192915050565b604081526000613668604083018561360d565b90508260208301529392505050565b602081526000612b98602083018461360d565b60208082526039908201527f54726561737572793a2063616c6c6572206973206e6f7420746865206f776e6560408201527f72206e6f7220496d706163744d61726b6574436f756e63696c00000000000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208152600082516080602084015261374e60a084018261360d565b905060018060a01b03602085015116604084015260408401516060840152606084015160808401528091505092915050565b8781526000600388106137a157634e487b7160e01b81526021600452602481fd5b87602083015286604083015285606083015284608083015260e060a08301526137cd60e083018561360d565b82810360c08401526137df818561360d565b9a9950505050505050505050565b84815283602082015260806040820152600061380c608083018561360d565b905082606083015295945050505050565b6000821982111561383057613830613911565b500190565b60008261385057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561386f5761386f613911565b500290565b60008282101561388657613886613911565b500390565b60005b838110156138a657818101518382015260200161388e565b838111156138b5576000848401525b50505050565b600181811c908216806138cf57607f821691505b602082108114156138f057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561390a5761390a613911565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611c4057600080fdfea264697066735822122094c2990891fd150d94fd3ed858b7cd7283cdc853de720e1b3f9e0c78540f046164736f6c63430008040033",
  "devdoc": {
    "events": {
      "AmountConverted(address,uint256,uint256,bytes,uint256)": {
        "params": {
          "amountIn": "Amount changed",
          "amountOutMin": "Minimum amount out",
          "amountsOut": "Value of the final amount out",
          "exchangePath": "Exchange path",
          "tokenAddress": "Address of the token"
        }
      },
      "CommunityAdminUpdated(address,address)": {
        "params": {
          "newCommunityAdmin": "New communityAdmin address",
          "oldCommunityAdmin": "Old communityAdmin address"
        }
      },
      "TokenRemoved(address)": {
        "params": {
          "tokenAddress": "Address of the token"
        }
      },
      "TokenSet(address)": {
        "params": {
          "tokenAddress": "Address of the token"
        }
      },
      "TransferERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount of the transaction",
          "to": "Address of the receiver",
          "token": "ERC20 token address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "collectFees(uint256)": {
        "params": {
          "_uniswapNFTPositionManagerId": "is the id of the Uniswap NFT position*"
        }
      },
      "convertAmount(address,uint256,uint256,bytes)": {
        "params": {
          "_amountIn": "is the amount of the token to convert",
          "_amountOutMin": "is used to prevent the transaction from failing if the price of the token changes - 0 for no check",
          "_exchangePath": "is the path to use for the swap - empty for the default path*",
          "_tokenAddress": "is the address of the token to convert"
        }
      },
      "initialize(address)": {
        "params": {
          "_communityAdmin": "Address of the CommunityAdmin contract"
        }
      },
      "isToken(address)": {
        "params": {
          "_tokenAddress": "token address to be checked"
        },
        "returns": {
          "_0": "bool true if the tokenAddress is an accepted token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeToken(address)": {
        "params": {
          "_tokenAddress": "address of the token*"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setToken(address,uint256,uint8,uint256,uint256,uint256,bytes,bytes)": {
        "params": {
          "_exchangePathToCUSD": "uniswap path to exchange the token to CUSD",
          "_exchangePathToPACT": "uniswap path to exchange the token to PACT*",
          "_lpMinLimit": "minimum amount of funds that need to be in the treasury (and not to be used for LP)",
          "_lpPercentage": "percentage of the funds to be used for LP",
          "_lpStrategy": "strategy to use for splitting the LP fees between treasury and buyback",
          "_rate": "rate of the token in CUSD",
          "_tokenAddress": "address of the token",
          "_uniswapNFTPositionManagerId": "id of the NFT position manager"
        }
      },
      "tokenListAt(uint256)": {
        "params": {
          "_index": "index of the token"
        },
        "returns": {
          "_0": "address of the token"
        }
      },
      "tokenListLength()": {
        "returns": {
          "_0": "uint256 number of tokens"
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "_amount": "amount of the transaction",
          "_to": "address of the receiver",
          "_token": "address of the ERC20 token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCommunityAdmin(address)": {
        "params": {
          "_newCommunityAdmin": "address of the new CommunityAdmin contract"
        }
      },
      "updateDonationMiner(address)": {
        "params": {
          "_newDonationMiner": "address of the new DonationMiner contract"
        }
      },
      "updateLpSwap(address)": {
        "params": {
          "_newLpSwap": "address of the new LpSwap contract"
        }
      },
      "updatePACT(address)": {
        "params": {
          "_newPACT": "address of the new PACT contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AmountConverted(address,uint256,uint256,bytes,uint256)": {
        "notice": "Triggered when a token has been set"
      },
      "CommunityAdminUpdated(address,address)": {
        "notice": "Triggered when CommunityAdmin has been updated"
      },
      "TokenRemoved(address)": {
        "notice": "Triggered when a token has been removed"
      },
      "TokenSet(address)": {
        "notice": "Triggered when a token has been set"
      },
      "TransferERC20(address,address,uint256)": {
        "notice": "Triggered when an amount of an ERC20 has been transferred from this contract to an address"
      }
    },
    "kind": "user",
    "methods": {
      "collectFees(uint256)": {
        "notice": "Collects the fees of a Uniswap NFT position"
      },
      "convertAmount(address,uint256,uint256,bytes)": {
        "notice": "Converts an amount of a token to cUSDs"
      },
      "getConvertedAmount(address,uint256)": {
        "notice": "Gets the amount of cUSDs that can be obtained from a converting the given amount of a token*"
      },
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "initialize(address)": {
        "notice": "Used to initialize a new Treasury contract"
      },
      "isToken(address)": {
        "notice": "Returns if an address is an accepted token"
      },
      "removeToken(address)": {
        "notice": "Used to remove a token"
      },
      "setToken(address,uint256,uint8,uint256,uint256,uint256,bytes,bytes)": {
        "notice": "Used to set a new token"
      },
      "tokenListAt(uint256)": {
        "notice": "Returns the address of a token from tokenList"
      },
      "tokenListLength()": {
        "notice": "Returns the number of tokens"
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfers an amount of an ERC20 from this contract to an address"
      },
      "updateCommunityAdmin(address)": {
        "notice": "Updates the CommunityAdmin contract address"
      },
      "updateDonationMiner(address)": {
        "notice": "Updates the DonationMiner contract address"
      },
      "updateLpSwap(address)": {
        "notice": "Updates the LpSwap contract address"
      },
      "updatePACT(address)": {
        "notice": "Updates the PACT contract address"
      },
      "useFundsForLP()": {
        "notice": "Uses part of the funds of a token to add liquidity to the Uniswap pool it is used by the DonationMiner when creating a new epoch it can also been used by the DAO when there are too many funds in the treasury*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 542,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 545,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1370,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 736,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 779,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 35148,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "communityAdmin",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(ICommunityAdmin)13678"
      },
      {
        "astId": 35161,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "donationMiner",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IDonationMiner)17894"
      },
      {
        "astId": 35165,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "lpSwap",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(ITreasuryLpSwap)35986"
      },
      {
        "astId": 35171,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "tokens",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_struct(Token)34982_storage)"
      },
      {
        "astId": 35174,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "_tokenList",
        "offset": 0,
        "slot": "155",
        "type": "t_struct(AddressSet)5505_storage"
      },
      {
        "astId": 35178,
        "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
        "label": "PACT",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IERC20Upgradeable)858"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICommunityAdmin)13678": {
        "encoding": "inplace",
        "label": "contract ICommunityAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(IDonationMiner)17894": {
        "encoding": "inplace",
        "label": "contract IDonationMiner",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)858": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasuryLpSwap)35986": {
        "encoding": "inplace",
        "label": "contract ITreasuryLpSwap",
        "numberOfBytes": "20"
      },
      "t_enum(LpStrategy)34966": {
        "encoding": "inplace",
        "label": "enum ITreasury.LpStrategy",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Token)34982_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITreasury.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)34982_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5505_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5504,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5204_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5199,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5203,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)34982_storage": {
        "encoding": "inplace",
        "label": "struct ITreasury.Token",
        "members": [
          {
            "astId": 34968,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 34971,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "lpStrategy",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(LpStrategy)34966"
          },
          {
            "astId": 34973,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "lpPercentage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 34975,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "lpMinLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 34977,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "uniswapNFTPositionManagerId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 34979,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "exchangePathToCUSD",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          },
          {
            "astId": 34981,
            "contract": "contracts/treasury/TreasuryImplementation.sol:TreasuryImplementation",
            "label": "exchangePathToPACT",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}