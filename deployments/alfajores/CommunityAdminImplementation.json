{
  "address": "0xf822D0D415D36F58FD6188Fe29c081A9174fc4d6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_communityAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_firstManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxClaim",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_baseInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_incrementInterval",
          "type": "uint256"
        }
      ],
      "name": "CommunityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newCommunityAdminHelper",
          "type": "address"
        }
      ],
      "name": "CommunityAdminHelperChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newCommunitMaxTranche",
          "type": "uint256"
        }
      ],
      "name": "CommunityMaxTrancheChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_firstManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_communityAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_previousCommunityAddress",
          "type": "address"
        }
      ],
      "name": "CommunityMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newCommunityMinTranche",
          "type": "uint256"
        }
      ],
      "name": "CommunityMinTrancheChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_communityAddress",
          "type": "address"
        }
      ],
      "name": "CommunityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "firstManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaim_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseInterval_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "incrementInterval_",
          "type": "uint256"
        }
      ],
      "name": "addCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "communityAddress_",
          "type": "address"
        }
      ],
      "name": "communities",
      "outputs": [
        {
          "internalType": "enum ICommunityAdmin.CommunityState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityAdminHelper",
      "outputs": [
        {
          "internalType": "contract ICommunityAdminHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "communityList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityMaxTranche",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityMinTranche",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdminHelper",
          "name": "communityAdminHelper_",
          "type": "address"
        }
      ],
      "name": "initCommunityAdminHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "cUSD_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "communityMinTranche_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "communityMaxTranche_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "firstManager_",
          "type": "address"
        },
        {
          "internalType": "contract ICommunity",
          "name": "previousCommunity_",
          "type": "address"
        },
        {
          "internalType": "contract ICommunityAdminHelper",
          "name": "newCommunityAdminHelper_",
          "type": "address"
        }
      ],
      "name": "migrateCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "community_",
          "type": "address"
        }
      ],
      "name": "removeCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdminHelper",
          "name": "communityAdminHelper_",
          "type": "address"
        }
      ],
      "name": "setCommunityAdminHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCommunityMaxTranche_",
          "type": "uint256"
        }
      ],
      "name": "setCommunityMaxTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCommunityMinTranche_",
          "type": "uint256"
        }
      ],
      "name": "setCommunityMinTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "newTreasury_",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "community_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "erc20_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFromCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x458e04d0f68866a9c27c9d49d374a0d71e7307eb0f82938f4e4e13ffc72d962b",
  "receipt": {
    "to": null,
    "from": "0x2F3340435E283A3d479dF091F913B6EFf96becF5",
    "contractAddress": "0xf822D0D415D36F58FD6188Fe29c081A9174fc4d6",
    "transactionIndex": 4,
    "gasUsed": "3182649",
    "logsBloom": "0x
    "blockHash": "0x0c70be3276623ddf71c842e130ba1cab67ffd3d5bdd2233a2caa384c59a199cc",
    "transactionHash": "0x458e04d0f68866a9c27c9d49d374a0d71e7307eb0f82938f4e4e13ffc72d962b",
    "logs": [],
    "blockNumber": 7634047,
    "cumulativeGasUsed": "3569880",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6bf46383f11fabdc202ffe24b62c453f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_communityAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_incrementInterval\",\"type\":\"uint256\"}],\"name\":\"CommunityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newCommunityAdminHelper\",\"type\":\"address\"}],\"name\":\"CommunityAdminHelperChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newCommunitMaxTranche\",\"type\":\"uint256\"}],\"name\":\"CommunityMaxTrancheChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_communityAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousCommunityAddress\",\"type\":\"address\"}],\"name\":\"CommunityMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newCommunityMinTranche\",\"type\":\"uint256\"}],\"name\":\"CommunityMinTrancheChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_communityAddress\",\"type\":\"address\"}],\"name\":\"CommunityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaim_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseInterval_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incrementInterval_\",\"type\":\"uint256\"}],\"name\":\"addCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityAddress_\",\"type\":\"address\"}],\"name\":\"communities\",\"outputs\":[{\"internalType\":\"enum ICommunityAdmin.CommunityState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAdminHelper\",\"outputs\":[{\"internalType\":\"contract ICommunityAdminHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"communityList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityMaxTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityMinTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdminHelper\",\"name\":\"communityAdminHelper_\",\"type\":\"address\"}],\"name\":\"initCommunityAdminHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"cUSD_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"communityMinTranche_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityMaxTranche_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstManager_\",\"type\":\"address\"},{\"internalType\":\"contract ICommunity\",\"name\":\"previousCommunity_\",\"type\":\"address\"},{\"internalType\":\"contract ICommunityAdminHelper\",\"name\":\"newCommunityAdminHelper_\",\"type\":\"address\"}],\"name\":\"migrateCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"community_\",\"type\":\"address\"}],\"name\":\"removeCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdminHelper\",\"name\":\"communityAdminHelper_\",\"type\":\"address\"}],\"name\":\"setCommunityAdminHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommunityMaxTranche_\",\"type\":\"uint256\"}],\"name\":\"setCommunityMaxTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommunityMinTranche_\",\"type\":\"uint256\"}],\"name\":\"setCommunityMinTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"newTreasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"community_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFromCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCommunity(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Add a new community. Can be used only by an admin. For further information regarding each parameter, see *Community* smart contract constructor.\"},\"initCommunityAdminHelper(address)\":{\"details\":\"Init community factory, used only at deploy time.\"},\"initialize(address,uint256,uint256)\":{\"details\":\"It sets the first admin, which later can add others and add/remove communities.\"},\"migrateCommunity(address,address,address)\":{\"details\":\"Migrate community by deploying a new contract. Can be used only by an admin. For further information regarding each parameter, see *Community* smart contract constructor.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeCommunity(address)\":{\"details\":\"Remove an existing community. Can be used only by an admin.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCommunityAdminHelper(address)\":{\"details\":\"Set the community factory address, if the contract is valid.\"},\"setCommunityMaxTranche(uint256)\":{\"details\":\"Set the community max tranche\"},\"setCommunityMinTranche(uint256)\":{\"details\":\"Set the community min tranche\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Welcome to CommunityAdmin, the main contract. This is an administrative (for now) contract where the admins have control over the list of communities. Being only able to add and remove communities\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/community/CommunityAdminImplementation.sol\":\"CommunityAdminImplementation\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/community/Community.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/ICommunityAdmin.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice Welcome to the Community contract. For each community\\n * there will be one contract like this being deployed by\\n * CommunityAdmin contract. This enable us to save tokens on the\\n * contract itself, and avoid the problems of having everything\\n * in one single contract. Each community has it's own members and\\n * and managers.\\n */\\ncontract Community is ICommunity, AccessControl, Ownable {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    uint256 public constant DEFAULT_AMOUNT = 5e16;\\n    uint256 public constant VERSION = 1;\\n\\n    bool private _locked;\\n    uint256 private _claimAmount;\\n    uint256 private _baseInterval;\\n    uint256 private _incrementInterval;\\n    uint256 private _maxClaim;\\n    uint256 private _validBeneficiaryCount;\\n    uint256 private _treasuryFunds;\\n    uint256 private _privateFunds;\\n    uint256 private _decreaseStep = 1e16;\\n\\n    ICommunity private _previousCommunity;\\n    ICommunityAdmin private _communityAdmin;\\n\\n    mapping(address => Beneficiary) private _beneficiaries;\\n    EnumerableSet.AddressSet private _beneficiaryList;\\n\\n    event ManagerAdded(address indexed _account);\\n    event ManagerRemoved(address indexed _account);\\n    event BeneficiaryAdded(address indexed _account);\\n    event BeneficiaryLocked(address indexed _account);\\n    event BeneficiaryUnlocked(address indexed _account);\\n    event BeneficiaryRemoved(address indexed _account);\\n    event BeneficiaryClaim(address indexed _account, uint256 _amount);\\n    event CommunityEdited(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    );\\n    event CommunityLocked(address indexed _by);\\n    event CommunityUnlocked(address indexed _by);\\n    event MigratedFunds(address indexed _to, uint256 _amount);\\n\\n    /**\\n     * @dev Constructor with custom fields, choosen by the community.\\n     * @param firstManager_ Comminuty's first manager. Will\\n     * be able to add others.\\n     * @param claimAmount_ Base amount to be claim by the benificiary.\\n     * @param maxClaim_ Limit that a beneficiary can claim at once.\\n     * @param baseInterval_ Base interval to start claiming.\\n     * @param incrementInterval_ Increment interval used in each claim.\\n     * @param previousCommunity_ previous smart contract address of community.\\n     */\\n    constructor(\\n        address firstManager_,\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_,\\n        ICommunity previousCommunity_,\\n        ICommunityAdmin communityAdmin_\\n    ) {\\n        require(\\n            baseInterval_ > incrementInterval_,\\n            \\\"Community::constructor: baseInterval must be greater than incrementInterval\\\"\\n        );\\n        require(\\n            maxClaim_ > claimAmount_,\\n            \\\"Community::constructor: maxClaim must be greater than claimAmount\\\"\\n        );\\n\\n        _setupRole(MANAGER_ROLE, firstManager_);\\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\\n        emit ManagerAdded(firstManager_);\\n\\n        _claimAmount = claimAmount_;\\n        _baseInterval = baseInterval_;\\n        _incrementInterval = incrementInterval_;\\n        _maxClaim = maxClaim_;\\n        _previousCommunity = previousCommunity_;\\n        _communityAdmin = communityAdmin_;\\n        _locked = false;\\n\\n        transferOwnership(address(communityAdmin_));\\n    }\\n\\n    modifier onlyValidBeneficiary() {\\n        require(\\n            _beneficiaries[msg.sender].state == BeneficiaryState.Valid,\\n            \\\"Community: NOT_VALID_BENEFICIARY\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManagers() {\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"Community: NOT_MANAGER\\\");\\n        _;\\n    }\\n\\n    function previousCommunity() external view override returns (ICommunity) {\\n        return _previousCommunity;\\n    }\\n\\n    function claimAmount() external view override returns (uint256) {\\n        return _claimAmount;\\n    }\\n\\n    function baseInterval() external view override returns (uint256) {\\n        return _baseInterval;\\n    }\\n\\n    function incrementInterval() external view override returns (uint256) {\\n        return _incrementInterval;\\n    }\\n\\n    function maxClaim() external view override returns (uint256) {\\n        return _maxClaim;\\n    }\\n\\n    function validBeneficiaryCount() external view override returns (uint256) {\\n        return _validBeneficiaryCount;\\n    }\\n\\n    function treasuryFunds() external view override returns (uint256) {\\n        return _treasuryFunds;\\n    }\\n\\n    function privateFunds() external view override returns (uint256) {\\n        return _privateFunds;\\n    }\\n\\n    function communityAdmin() external view override returns (ICommunityAdmin) {\\n        return _communityAdmin;\\n    }\\n\\n    function cUSD() public view override returns (IERC20) {\\n        return _communityAdmin.cUSD();\\n    }\\n\\n    function locked() external view override returns (bool) {\\n        return _locked;\\n    }\\n\\n    function beneficiaries(address beneficiary_)\\n        external\\n        view\\n        override\\n        returns (Beneficiary memory)\\n    {\\n        return _beneficiaries[beneficiary_];\\n    }\\n\\n    function decreaseStep() external view override returns (uint256) {\\n        return _decreaseStep;\\n    }\\n\\n    function beneficiaryList(uint256 index) external view override returns (address) {\\n        return _beneficiaryList.at(index);\\n    }\\n\\n    function beneficiaryListLength() external view override returns (uint256) {\\n        return _beneficiaryList.length();\\n    }\\n\\n    // only used for backwards compatibility\\n    function impactMarketAddress() external pure override returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * @dev Allow community managers to add other managers.\\n     */\\n    function addManager(address _account) external override onlyManagers {\\n        grantRole(MANAGER_ROLE, _account);\\n        emit ManagerAdded(_account);\\n    }\\n\\n    /**\\n     * @dev Allow community managers to remove other managers.\\n     */\\n    function removeManager(address _account) external override onlyManagers {\\n        revokeRole(MANAGER_ROLE, _account);\\n        emit ManagerRemoved(_account);\\n    }\\n\\n    /**\\n     * @dev Allow community managers to add beneficiaries.\\n     */\\n    function addBeneficiary(address beneficiaryAddress_) external override onlyManagers {\\n        Beneficiary storage beneficiary = _beneficiaries[beneficiaryAddress_];\\n        require(beneficiary.state == BeneficiaryState.NONE, \\\"Community::addBeneficiary: NOT_YET\\\");\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Valid);\\n        // solhint-disable-next-line not-rely-on-time\\n        beneficiary.lastClaim = block.timestamp;\\n\\n        // send default amount when adding a new beneficiary\\n        bool success = cUSD().transfer(beneficiaryAddress_, DEFAULT_AMOUNT);\\n        require(success, \\\"Community::addBeneficiary: NOT_ALLOWED\\\");\\n\\n        _beneficiaryList.add(beneficiaryAddress_);\\n\\n        emit BeneficiaryAdded(beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @dev Allow community managers to lock beneficiaries.\\n     */\\n    function lockBeneficiary(address beneficiaryAddress_) external override onlyManagers {\\n        Beneficiary storage beneficiary = _beneficiaries[beneficiaryAddress_];\\n\\n        require(beneficiary.state == BeneficiaryState.Valid, \\\"Community::lockBeneficiary: NOT_YET\\\");\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Locked);\\n        emit BeneficiaryLocked(beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @dev Allow community managers to unlock locked beneficiaries.\\n     */\\n    function unlockBeneficiary(address beneficiaryAddress_) external override onlyManagers {\\n        Beneficiary storage beneficiary = _beneficiaries[beneficiaryAddress_];\\n\\n        require(\\n            beneficiary.state == BeneficiaryState.Locked,\\n            \\\"Community::unlockBeneficiary: NOT_YET\\\"\\n        );\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Valid);\\n        emit BeneficiaryUnlocked(beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @dev Allow community managers to remove beneficiaries.\\n     */\\n    function removeBeneficiary(address beneficiaryAddress_) external override onlyManagers {\\n        Beneficiary storage beneficiary = _beneficiaries[beneficiaryAddress_];\\n\\n        require(\\n            beneficiary.state == BeneficiaryState.Valid ||\\n                beneficiary.state == BeneficiaryState.Locked,\\n            \\\"Community::removeBeneficiary: NOT_YET\\\"\\n        );\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Removed);\\n        emit BeneficiaryRemoved(beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @dev Allow beneficiaries to claim.\\n     */\\n    function claim() external override onlyValidBeneficiary {\\n        Beneficiary storage beneficiary = _beneficiaries[msg.sender];\\n\\n        require(!_locked, \\\"LOCKED\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        require(claimCooldown(msg.sender) <= block.timestamp, \\\"Community::claim: NOT_YET\\\");\\n        require(\\n            (beneficiary.claimedAmount + _claimAmount) <= _maxClaim,\\n            \\\"Community::claim: MAX_CLAIM\\\"\\n        );\\n\\n        beneficiary.claimedAmount += _claimAmount;\\n        beneficiary.claims++;\\n        beneficiary.lastClaim = block.timestamp;\\n\\n        bool success = cUSD().transfer(msg.sender, _claimAmount);\\n        require(success, \\\"Community::claim: NOT_ALLOWED\\\");\\n        emit BeneficiaryClaim(msg.sender, _claimAmount);\\n    }\\n\\n    function lastInterval(address beneficiaryAddress_) public view override returns (uint256) {\\n        Beneficiary storage beneficiary = _beneficiaries[beneficiaryAddress_];\\n        if (beneficiary.claims == 0) {\\n            return 0;\\n        }\\n        return _baseInterval + (beneficiary.claims - 1) * _incrementInterval;\\n    }\\n\\n    function claimCooldown(address beneficiaryAddress_) public view override returns (uint256) {\\n        return _beneficiaries[beneficiaryAddress_].lastClaim + lastInterval(beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @dev Allow community managers to edit community variables.\\n     */\\n    function edit(\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 decreaseStep_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_\\n    ) external override onlyOwner {\\n        require(\\n            baseInterval_ > incrementInterval_,\\n            \\\"Community::constructor: baseInterval must be greater than incrementInterval\\\"\\n        );\\n        require(\\n            maxClaim_ > claimAmount_,\\n            \\\"Community::constructor: maxClaim must be greater than claimAmount\\\"\\n        );\\n\\n        _claimAmount = claimAmount_;\\n        _maxClaim = maxClaim_;\\n        _decreaseStep = decreaseStep_;\\n        _baseInterval = baseInterval_;\\n        _incrementInterval = incrementInterval_;\\n\\n        emit CommunityEdited(\\n            _claimAmount,\\n            _maxClaim,\\n            _decreaseStep,\\n            _baseInterval,\\n            _incrementInterval\\n        );\\n    }\\n\\n    /**\\n     * Allow community managers to lock community claims.\\n     */\\n    function lock() external override onlyManagers {\\n        _locked = true;\\n        emit CommunityLocked(msg.sender);\\n    }\\n\\n    /**\\n     * Allow community managers to unlock community claims.\\n     */\\n    function unlock() external override onlyManagers {\\n        _locked = false;\\n        emit CommunityUnlocked(msg.sender);\\n    }\\n\\n    function requestFunds() external override onlyManagers {\\n        _communityAdmin.fundCommunity();\\n    }\\n\\n    /**\\n     * Migrate funds in current community to new one.\\n     */\\n    function migrateFunds(ICommunity newCommunity_, address newCommunityManager_)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            newCommunity_.hasRole(MANAGER_ROLE, newCommunityManager_) == true,\\n            \\\"Community::migrateFunds: NOT_ALLOWED\\\"\\n        );\\n        require(newCommunity_.previousCommunity() == this, \\\"Community::migrateFunds: NOT_ALLOWED\\\");\\n        uint256 balance = cUSD().balanceOf(address(this));\\n        bool success = cUSD().transfer(address(newCommunity_), balance);\\n        require(success, \\\"Community::migrateFunds: NOT_ALLOWED\\\");\\n        emit MigratedFunds(address(newCommunity_), balance);\\n    }\\n\\n    function donate(address sender_, uint256 amount_) external override {\\n        cUSD().safeTransferFrom(sender_, address(this), amount_);\\n        _privateFunds += amount_;\\n    }\\n\\n    function addTreasuryFunds(uint256 _amount) external override onlyOwner {\\n        _treasuryFunds += _amount;\\n    }\\n\\n    function transferFunds(\\n        IERC20 erc20_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyOwner {\\n        erc20_.safeTransfer(to_, amount_);\\n    }\\n\\n    function beneficiaryJoinFromMigrated() external override {\\n        // no need to check if it's a beneficiary, as the state is copied\\n        Beneficiary storage beneficiary = _beneficiaries[msg.sender];\\n\\n        Beneficiary memory oldBeneficiary = _previousCommunity.beneficiaries(msg.sender);\\n\\n        _changeBeneficiaryState(beneficiary, oldBeneficiary.state);\\n        beneficiary.lastClaim = oldBeneficiary.lastClaim;\\n        beneficiary.claimedAmount = oldBeneficiary.claimedAmount;\\n        beneficiary.claims =\\n            (_previousCommunity.lastInterval(msg.sender) - _baseInterval) /\\n            _incrementInterval +\\n            1;\\n\\n        if (beneficiary.state == BeneficiaryState.NONE) {\\n            _beneficiaryList.add(msg.sender);\\n        }\\n    }\\n\\n    function managerJoinFromMigrated() external override {\\n        require(_previousCommunity.hasRole(MANAGER_ROLE, msg.sender), \\\"NOT_ALLOWED\\\");\\n        grantRole(MANAGER_ROLE, msg.sender);\\n    }\\n\\n    function _changeBeneficiaryState(Beneficiary storage beneficiary, BeneficiaryState newState_)\\n        internal\\n    {\\n        if (beneficiary.state == newState_) {\\n            return;\\n        }\\n\\n        if (newState_ == BeneficiaryState.Valid) {\\n            _validBeneficiaryCount++;\\n            _claimAmount -= _decreaseStep;\\n        } else if (beneficiary.state == BeneficiaryState.Valid) {\\n            _validBeneficiaryCount--;\\n            _claimAmount += _decreaseStep;\\n        }\\n\\n        beneficiary.state = newState_;\\n    }\\n}\\n\",\"keccak256\":\"0xad947a026f95e44f02c259cd2662a02d7aef68668478ef35e9c54ac2538286fb\",\"license\":\"Apache-2.0\"},\"contracts/community/CommunityAdminImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/ICommunityAdminHelper.sol\\\";\\nimport \\\"./Community.sol\\\";\\nimport \\\"./CommunityAdminStorageV1.sol\\\";\\nimport \\\"../token/interfaces/ITreasury.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice Welcome to CommunityAdmin, the main contract. This is an\\n * administrative (for now) contract where the admins have control\\n * over the list of communities. Being only able to add and\\n * remove communities\\n */\\ncontract CommunityAdminImplementation is ICommunityAdmin, CommunityAdminStorageV1, Initializable, OwnableUpgradeable {\\n    uint256 public constant VERSION = 1;\\n\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event CommunityAdded(\\n        address indexed _communityAddress,\\n        address indexed _firstManager,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    );\\n    event CommunityRemoved(address indexed _communityAddress);\\n    event CommunityMigrated(\\n        address indexed _firstManager,\\n        address indexed _communityAddress,\\n        address indexed _previousCommunityAddress\\n    );\\n    event CommunityAdminHelperChanged(address indexed _newCommunityAdminHelper);\\n    event CommunityMinTrancheChanged(uint256 indexed _newCommunityMinTranche);\\n    event CommunityMaxTrancheChanged(uint256 indexed _newCommunitMaxTranche);\\n\\n    modifier onlyCommunities() {\\n        require(_communities[msg.sender] == CommunityState.Valid, \\\"CommunityAdmin: NOT_COMMUNITY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev It sets the first admin, which later can add others\\n     * and add/remove communities.\\n     */\\n    function initialize(\\n        IERC20 cUSD_,\\n        uint256 communityMinTranche_,\\n        uint256 communityMaxTranche_\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        require(\\n            communityMinTranche_ < communityMaxTranche_,\\n            \\\"CommunityAdmin::constructor: communityMinTranche should be less then communityMaxTranche\\\"\\n        );\\n        _cUSD = cUSD_;\\n        _communityMinTranche = communityMinTranche_;\\n        _communityMaxTranche = communityMaxTranche_;\\n    }\\n\\n    function upgrade(address newImplementation) external onlyOwner {\\n        implementation = newImplementation;\\n    }\\n\\n    function cUSD() external view override returns (IERC20) {\\n        return _cUSD;\\n    }\\n\\n    function treasury() external view override returns (ITreasury) {\\n        return _treasury;\\n    }\\n\\n    function communityAdminHelper() external view override returns (ICommunityAdminHelper) {\\n        return _communityAdminHelper;\\n    }\\n\\n    function communities(address communityAddress_)\\n        external\\n        view\\n        override\\n        returns (CommunityState)\\n    {\\n        return _communities[communityAddress_];\\n    }\\n\\n    function communityMinTranche() external view override returns (uint256) {\\n        return _communityMinTranche;\\n    }\\n\\n    function communityMaxTranche() external view override returns (uint256) {\\n        return _communityMaxTranche;\\n    }\\n\\n    function communityList(uint256 index) external view override returns (address) {\\n        return _communityList.at(index);\\n    }\\n\\n    function communityListLength() external view override returns (uint256) {\\n        return _communityList.length();\\n    }\\n\\n    function setTreasury(ITreasury newTreasury_) external override onlyOwner {\\n        _treasury = newTreasury_;\\n    }\\n\\n    /**\\n     * @dev Set the community min tranche\\n     */\\n    function setCommunityMinTranche(uint256 newCommunityMinTranche_) external override onlyOwner {\\n        require(\\n            newCommunityMinTranche_ < _communityMaxTranche,\\n            \\\"CommunityAdmin::setCommunityMinTranche: New communityMinTranche should be less then communityMaxTranche\\\"\\n        );\\n        _communityMinTranche = newCommunityMinTranche_;\\n        emit CommunityMinTrancheChanged(newCommunityMinTranche_);\\n    }\\n\\n    /**\\n     * @dev Set the community max tranche\\n     */\\n    function setCommunityMaxTranche(uint256 newCommunityMaxTranche_) external override onlyOwner {\\n        require(\\n            _communityMinTranche < newCommunityMaxTranche_,\\n            \\\"CommunityAdmin::setCommunityMaxTranche: New communityMaxTranche should be greater then communityMinTranche\\\"\\n        );\\n        _communityMaxTranche = newCommunityMaxTranche_;\\n        emit CommunityMaxTrancheChanged(newCommunityMaxTranche_);\\n    }\\n\\n    /**\\n     * @dev Add a new community. Can be used only by an admin.\\n     * For further information regarding each parameter, see\\n     * *Community* smart contract constructor.\\n     */\\n    function addCommunity(\\n        address firstManager_,\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_\\n    ) external override onlyOwner {\\n        address communityAddress = _communityAdminHelper.deployCommunity(\\n            firstManager_,\\n            claimAmount_,\\n            maxClaim_,\\n            baseInterval_,\\n            incrementInterval_,\\n            ICommunity(address(0))\\n        );\\n        require(communityAddress != address(0), \\\"CommunityAdmin::addCommunity: NOT_VALID\\\");\\n        _communities[communityAddress] = CommunityState.Valid;\\n        _communityList.add(communityAddress);\\n        emit CommunityAdded(\\n            communityAddress,\\n            firstManager_,\\n            claimAmount_,\\n            maxClaim_,\\n            baseInterval_,\\n            incrementInterval_\\n        );\\n\\n        transferToCommunity(ICommunity(communityAddress), _communityMinTranche);\\n    }\\n\\n    /**\\n     * @dev Migrate community by deploying a new contract. Can be used only by an admin.\\n     * For further information regarding each parameter, see\\n     * *Community* smart contract constructor.\\n     */\\n    function migrateCommunity(\\n        address firstManager_,\\n        ICommunity previousCommunity_,\\n        ICommunityAdminHelper newCommunityAdminHelper_\\n    ) external override onlyOwner {\\n        _communities[address(previousCommunity_)] = CommunityState.Removed;\\n        require(\\n            address(previousCommunity_) != address(0),\\n            \\\"CommunityAdmin::migrateCommunity: NOT_VALID\\\"\\n        );\\n        ICommunity community = ICommunity(\\n            newCommunityAdminHelper_.deployCommunity(\\n                firstManager_,\\n                previousCommunity_.claimAmount(),\\n                previousCommunity_.maxClaim(),\\n                previousCommunity_.baseInterval(),\\n                previousCommunity_.incrementInterval(),\\n                previousCommunity_\\n            )\\n        );\\n        require(address(community) != address(0), \\\"CommunityAdmin::migrateCommunity: NOT_VALID\\\");\\n        previousCommunity_.migrateFunds(community, firstManager_);\\n        _communities[address(community)] = CommunityState.Valid;\\n        _communityList.add(address(community));\\n\\n        emit CommunityMigrated(firstManager_, address(community), address(previousCommunity_));\\n    }\\n\\n    /**\\n     * @dev Remove an existing community. Can be used only by an admin.\\n     */\\n    function removeCommunity(ICommunity community_) external override onlyOwner {\\n        _communities[address(community_)] = CommunityState.Removed;\\n        emit CommunityRemoved(address(community_));\\n    }\\n\\n    /**\\n     * @dev Set the community factory address, if the contract is valid.\\n     */\\n    function setCommunityAdminHelper(ICommunityAdminHelper communityAdminHelper_)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            address(communityAdminHelper_.communityAdmin()) == address(this),\\n            \\\"CommunityAdmin::setCommunityAdminHelper: NOT_ALLOWED\\\"\\n        );\\n        _communityAdminHelper = communityAdminHelper_;\\n        emit CommunityAdminHelperChanged(address(communityAdminHelper_));\\n    }\\n\\n    /**\\n     * @dev Init community factory, used only at deploy time.\\n     */\\n    function initCommunityAdminHelper(ICommunityAdminHelper communityAdminHelper_)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            address(communityAdminHelper_) == address(0),\\n            \\\"CommunityAdmin::initCommunityAdminHelper: NOT_VALID\\\"\\n        );\\n        _communityAdminHelper = communityAdminHelper_;\\n        emit CommunityAdminHelperChanged(address(communityAdminHelper_));\\n    }\\n\\n    function fundCommunity() external override onlyCommunities {\\n        require(\\n            _cUSD.balanceOf(msg.sender) <= _communityMinTranche,\\n            \\\"CommunityAdmin::fundCommunity: this community has enough funds\\\"\\n        );\\n        uint256 trancheAmount = _communityAdminHelper.calculateCommunityTrancheAmount(\\n            ICommunity(msg.sender)\\n        );\\n\\n        transferToCommunity(ICommunity(msg.sender), trancheAmount);\\n    }\\n\\n    function transfer(\\n        IERC20 erc20_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyOwner {\\n        erc20_.safeTransfer(to_, amount_);\\n    }\\n\\n    function transferFromCommunity(\\n        ICommunity community_,\\n        IERC20 erc20_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyOwner {\\n        community_.transferFunds(erc20_, to_, amount_);\\n    }\\n\\n    function transferToCommunity(ICommunity community_, uint256 amount_) internal {\\n        _treasury.transfer(_cUSD, address(community_), amount_);\\n        community_.addTreasuryFunds(amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x812da270d8faafd6940fc794a537811ee25c73c5a0ee2f918de443586c2f25ae\",\"license\":\"Apache-2.0\"},\"contracts/community/CommunityAdminStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./interfaces/ICommunityAdminHelper.sol\\\";\\nimport \\\"./Community.sol\\\";\\nimport \\\"../token/interfaces/ITreasury.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract CommunityAdminStorageV1 is ICommunityAdmin {\\n    address internal implementation;\\n\\n    IERC20 internal _cUSD;\\n    ITreasury internal _treasury;\\n    ICommunityAdminHelper internal _communityAdminHelper;\\n    uint256 internal _communityMinTranche;\\n    uint256 internal _communityMaxTranche;\\n\\n    mapping(address => CommunityState) internal _communities;\\n    EnumerableSet.AddressSet internal _communityList;\\n}\\n\",\"keccak256\":\"0x7064673df2f3f94ddfa6265eaad6d2c0e5bcb2aed110468ed65df5290dc58d63\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity is IAccessControl {\\n    enum BeneficiaryState {\\n        NONE,\\n        Valid,\\n        Locked,\\n        Removed\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;\\n        uint256 claims;\\n        uint256 claimedAmount;\\n        uint256 lastClaim;\\n    }\\n\\n    function previousCommunity() external view returns(ICommunity);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address beneficiaryAddress) external view returns(Beneficiary memory);\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryList(uint256 index) external view returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function impactMarketAddress() external pure returns (address);\\n\\n    function migrateFunds(ICommunity newCommunity, address newCommunityManager) external;\\n    function donate(address sender, uint256 amount) external;\\n    function addTreasuryFunds(uint256 amount) external;\\n    function transferFunds(IERC20 token, address to, uint256 amount) external;\\n    function addManager(address managerAddress) external;\\n    function removeManager(address managerAddress) external;\\n    function addBeneficiary(address beneficiaryAddress) external;\\n    function lockBeneficiary(address beneficiaryAddress) external;\\n    function unlockBeneficiary(address beneficiaryAddress) external;\\n    function removeBeneficiary(address beneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address beneficiaryAddress) external view returns (uint256);\\n    function edit(uint256 claimAmount, uint256 maxClaim, uint256 decreaseStep, uint256 baseInterval, uint256 incrementInterval) external;\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated() external;\\n    function managerJoinFromMigrated() external;\\n}\\n\",\"keccak256\":\"0x0541d1a1c2ec97a994b360ed07d02ee6e8752039c5634a524767de83027f6ca4\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"./ICommunityAdminHelper.sol\\\";\\nimport \\\"../../token/interfaces/ITreasury.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed\\n    }\\n\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function communityAdminHelper() external view returns(ICommunityAdminHelper);\\n    function communities(address community) external view returns(CommunityState);\\n    function communityMinTranche() external view returns(uint256);\\n    function communityMaxTranche() external view returns(uint256);\\n    function communityList(uint256 index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n\\n    function setTreasury(ITreasury newTreasury) external;\\n    function setCommunityMinTranche(uint256 newCommunityMinTranche) external;\\n    function setCommunityMaxTranche(uint256 newCommunityMaxTranche) external;\\n    function addCommunity(\\n        address firstManager,\\n        uint256 claimAmount,\\n        uint256 maxClaim,\\n        uint256 baseInterval,\\n        uint256 incrementInterval\\n    ) external;\\n    function migrateCommunity(\\n        address firstManager,\\n        ICommunity previousCommunity,\\n        ICommunityAdminHelper newCommunityAdminHelper\\n    ) external;\\n    function removeCommunity(ICommunity community) external;\\n    function setCommunityAdminHelper(ICommunityAdminHelper communityAdminHelper) external;\\n    function initCommunityAdminHelper(ICommunityAdminHelper communityAdminHelper) external;\\n    function fundCommunity() external;\\n    function transfer(IERC20 erc20, address to, uint256 amount) external;\\n    function transferFromCommunity(ICommunity community, IERC20 erc20, address to, uint256 amount) external;\\n}\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0x875ac534743101d4da64e96493e650cc0adaaf7e7e0a63771c9def913da0c7a5\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdminHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunityAdminHelper {\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function deployCommunity(\\n        address firstManager,\\n        uint256 claimAmount,\\n        uint256 maxClaim,\\n        uint256 baseInterval,\\n        uint256 incrementInterval,\\n        ICommunity previousCommunity\\n    ) external returns(address);\\n    function calculateCommunityTrancheAmount(ICommunity community) external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x1778d01142a5256467d65d80501f3225c2771a97e0ab83c2ff161d405cea81a5\",\"license\":\"Apache-2.0\"},\"contracts/token/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\n\\ninterface ITreasury {\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n//    function owner() external view returns (address);\\n//    function transferOwnership(address newOwner) external;\\n\\n    function setCommunityAdmin(ICommunityAdmin communityAdmin) external;\\n    function transfer(IERC20 token, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4408819888baf2d9ead7788c20965511c849b36ba44c074fa1ba92cffad8d10d\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506138e0806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637f2813d2116100de578063a681b7ba11610097578063f00d096411610071578063f00d0964146103d4578063f0f44260146103f2578063f2fde38b1461040e578063ffa1ad741461042a57610173565b8063a681b7ba1461036c578063beabacc81461039c578063ebb395e9146103b857610173565b80637f2813d2146102ac578063868a7e88146102dc5780638774be9b146102fa5780638da5cb5b146103165780638e30971b14610334578063926345401461035057610173565b8063301fbb3011610130578063301fbb301461021257806331ec5771146102305780635e3473601461024c57806361d027b314610268578063715018a6146102865780637a1ac61e1461029057610173565b80630900f010146101785780630b4afb1b14610194578063174a71d7146101b05780631d2c9359146101ba5780631fccf672146101d6578063255cef69146101f4575b600080fd5b610192600480360381019061018d919061266c565b610448565b005b6101ae60048036038101906101a99190612719565b610507565b005b6101b86107ab565b005b6101d460048036038101906101cf9190612848565b610a09565b005b6101de610afa565b6040516101eb9190612dd7565b60405180910390f35b6101fc610b24565b6040516102099190613061565b60405180910390f35b61021a610b2e565b6040516102279190612d78565b60405180910390f35b61024a600480360381019061024591906127c1565b610b58565b005b61026660048036038101906102619190612982565b610d46565b005b610270610e3d565b60405161027d9190612e29565b60405180910390f35b61028e610e67565b005b6102aa60048036038101906102a59190612902565b610eef565b005b6102c660048036038101906102c1919061266c565b611069565b6040516102d39190612e44565b60405180910390f35b6102e46110bf565b6040516102f19190613061565b60405180910390f35b610314600480360381019061030f91906126c6565b6110c9565b005b61031e61167b565b60405161032b9190612cd3565b60405180910390f35b61034e60048036038101906103499190612982565b6116a5565b005b61036a6004803603810190610365919061281b565b61179c565b005b61038660048036038101906103819190612982565b6118c6565b6040516103939190612cd3565b60405180910390f35b6103b660048036038101906103b191906128af565b6118e3565b005b6103d260048036038101906103cd91906127c1565b61198f565b005b6103dc611b01565b6040516103e99190613061565b60405180910390f35b61040c60048036038101906104079190612955565b611b12565b005b6104286004803603810190610423919061266c565b611bd2565b005b610432611cca565b60405161043f9190613061565b60405180910390f35b610450611ccf565b73ffffffffffffffffffffffffffffffffffffffff1661046e61167b565b73ffffffffffffffffffffffffffffffffffffffff16146104c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bb90612f21565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61050f611ccf565b73ffffffffffffffffffffffffffffffffffffffff1661052d61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90612f21565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638523f311878787878760006040518763ffffffff1660e01b81526004016105eb96959493929190612d17565b602060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612699565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a690612fc1565b60405180910390fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156107125761071161327d565b5b021790555061072b816007611cd790919063ffffffff16565b508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5864130135b8d46c4808bc474964778f56ef5f98402be58df45a515edd08d3048787878760405161078f949392919061307c565b60405180910390a36107a381600454611d07565b505050505050565b600160028111156107bf576107be61327d565b5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561081e5761081d61327d565b5b1461085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590612f41565b60405180910390fd5b600454600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108bc9190612cd3565b60206040518083038186803b1580156108d457600080fd5b505afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c91906129af565b111561094d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094490613041565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1909ef2336040518263ffffffff1660e01b81526004016109aa9190612d93565b60206040518083038186803b1580156109c257600080fd5b505afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa91906129af565b9050610a063382611d07565b50565b610a11611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610a2f61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c90612f21565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16631501bf038484846040518463ffffffff1660e01b8152600401610ac293929190612df2565b600060405180830381600087803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b5050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600554905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b60611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610b7e61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90612f21565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16635fac917a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3157600080fd5b505afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6991906127ee565b73ffffffffffffffffffffffffffffffffffffffff1614610cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb690612fe1565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fa29f0e144018780bcd7a68990ea4b03e96034be4455b71a9b79e66c5a8c06a2e60405160405180910390a250565b610d4e611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610d6c61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db990612f21565b60405180910390fd5b8060045410610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd90612f01565b60405180910390fd5b80600581905550807f99d204dd7ae6365474b11bb0e2750714699dc57fbe2d0b7c1bef72bb42f4405260405160405180910390a250565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e6f611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610e8d61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90612f21565b60405180910390fd5b610eed6000611e29565b565b600960019054906101000a900460ff1680610f175750600960009054906101000a900460ff16155b610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d90612ee1565b60405180910390fd5b6000600960019054906101000a900460ff161590508015610fa8576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b610fb0611eef565b818310610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990613021565b60405180910390fd5b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600481905550816005819055508015611063576000600960016101000a81548160ff0219169083151502179055505b50505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600454905090565b6110d1611ccf565b73ffffffffffffffffffffffffffffffffffffffff166110ef61167b565b73ffffffffffffffffffffffffffffffffffffffff1614611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90612f21565b60405180910390fd5b6002600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156111a8576111a761327d565b5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490612f61565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638523f311858573ffffffffffffffffffffffffffffffffffffffff1663830953ab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba91906129af565b8673ffffffffffffffffffffffffffffffffffffffff1663d4938db36040518163ffffffff1660e01b815260040160206040518083038186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133891906129af565b8773ffffffffffffffffffffffffffffffffffffffff16630e5b7c536040518163ffffffff1660e01b815260040160206040518083038186803b15801561137e57600080fd5b505afa158015611392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b691906129af565b8873ffffffffffffffffffffffffffffffffffffffff1663597be18b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fc57600080fd5b505afa158015611410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143491906129af565b896040518763ffffffff1660e01b815260040161145696959493929190612d17565b602060405180830381600087803b15801561147057600080fd5b505af1158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190612699565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561151a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151190612f61565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16631fe9578e82866040518363ffffffff1660e01b8152600401611555929190612dae565b600060405180830381600087803b15801561156f57600080fd5b505af1158015611583573d6000803e3d6000fd5b505050506001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156115ea576115e961327d565b5b0217905550611603816007611cd790919063ffffffff16565b508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f98c0ae41ed9dcfef204d20409e01d4051eee4da4276aa4b5fa1cb3cf01403d6860405160405180910390a450505050565b6000603c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6116ad611ccf565b73ffffffffffffffffffffffffffffffffffffffff166116cb61167b565b73ffffffffffffffffffffffffffffffffffffffff1614611721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171890612f21565b60405180910390fd5b6005548110611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c90612ec1565b60405180910390fd5b80600481905550807f61d018ca7dd3e2bb8e9a1994153b31c93371ac0e87da1f4dfcfa73e31a332fb160405160405180910390a250565b6117a4611ccf565b73ffffffffffffffffffffffffffffffffffffffff166117c261167b565b73ffffffffffffffffffffffffffffffffffffffff1614611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f90612f21565b60405180910390fd5b6002600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561187b5761187a61327d565b5b02179055508073ffffffffffffffffffffffffffffffffffffffff167fa285b77d62d36ec6881b2cbc019c53874eb061798176f3577f2beab0848d16c660405160405180910390a250565b60006118dc826007611fdd90919063ffffffff16565b9050919050565b6118eb611ccf565b73ffffffffffffffffffffffffffffffffffffffff1661190961167b565b73ffffffffffffffffffffffffffffffffffffffff161461195f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195690612f21565b60405180910390fd5b61198a82828573ffffffffffffffffffffffffffffffffffffffff16611ff79092919063ffffffff16565b505050565b611997611ccf565b73ffffffffffffffffffffffffffffffffffffffff166119b561167b565b73ffffffffffffffffffffffffffffffffffffffff1614611a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0290612f21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7190612f81565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fa29f0e144018780bcd7a68990ea4b03e96034be4455b71a9b79e66c5a8c06a2e60405160405180910390a250565b6000611b0d600761207d565b905090565b611b1a611ccf565b73ffffffffffffffffffffffffffffffffffffffff16611b3861167b565b73ffffffffffffffffffffffffffffffffffffffff1614611b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8590612f21565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611bda611ccf565b73ffffffffffffffffffffffffffffffffffffffff16611bf861167b565b73ffffffffffffffffffffffffffffffffffffffff1614611c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4590612f21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb590612e81565b60405180910390fd5b611cc781611e29565b50565b600181565b600033905090565b6000611cff836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612092565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc8600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b8152600401611d8893929190612df2565b600060405180830381600087803b158015611da257600080fd5b505af1158015611db6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663b809ee82826040518263ffffffff1660e01b8152600401611df39190613061565b600060405180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b505050505050565b6000603c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600960019054906101000a900460ff1680611f175750600960009054906101000a900460ff16155b611f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d90612ee1565b60405180910390fd5b6000600960019054906101000a900460ff161590508015611fa8576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b611fb0612102565b611fb86121e0565b8015611fda576000600960016101000a81548160ff0219169083151502179055505b50565b6000611fec83600001836122ce565b60001c905092915050565b6120788363a9059cbb60e01b8484604051602401612016929190612cee565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b505050565b600061208b826000016123c0565b9050919050565b600061209e83836123d1565b6120f75782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506120fc565b600090505b92915050565b600960019054906101000a900460ff168061212a5750600960009054906101000a900460ff16155b612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216090612ee1565b60405180910390fd5b6000600960019054906101000a900460ff1615905080156121bb576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b80156121dd576000600960016101000a81548160ff0219169083151502179055505b50565b600960019054906101000a900460ff16806122085750600960009054906101000a900460ff16155b612247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223e90612ee1565b60405180910390fd5b6000600960019054906101000a900460ff161590508015612299576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b6122a96122a4611ccf565b611e29565b80156122cb576000600960016101000a81548160ff0219169083151502179055505b50565b60008260000182815481106122e6576122e56132ac565b5b9060005260206000200154905092915050565b600061235b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123f49092919063ffffffff16565b90506000815111156123bb578080602001905181019061237b9190612794565b6123ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b190613001565b60405180910390fd5b5b505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6060612403848460008561240c565b90509392505050565b606082471015612451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244890612ea1565b60405180910390fd5b61245a85612520565b612499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249090612fa1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124c29190612cbc565b60006040518083038185875af1925050503d80600081146124ff576040519150601f19603f3d011682016040523d82523d6000602084013e612504565b606091505b5091509150612514828286612533565b92505050949350505050565b600080823b905060008111915050919050565b6060831561254357829050612593565b6000835111156125565782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258a9190612e5f565b60405180910390fd5b9392505050565b6000813590506125a9816137f2565b92915050565b6000815190506125be816137f2565b92915050565b6000815190506125d381613809565b92915050565b6000813590506125e881613820565b92915050565b6000815190506125fd81613837565b92915050565b6000813590506126128161384e565b92915050565b60008135905061262781613865565b92915050565b60008135905061263c8161387c565b92915050565b60008135905061265181613893565b92915050565b60008151905061266681613893565b92915050565b600060208284031215612682576126816132db565b5b60006126908482850161259a565b91505092915050565b6000602082840312156126af576126ae6132db565b5b60006126bd848285016125af565b91505092915050565b6000806000606084860312156126df576126de6132db565b5b60006126ed8682870161259a565b93505060206126fe86828701612603565b925050604061270f868287016125d9565b9150509250925092565b600080600080600060a08688031215612735576127346132db565b5b60006127438882890161259a565b955050602061275488828901612642565b945050604061276588828901612642565b935050606061277688828901612642565b925050608061278788828901612642565b9150509295509295909350565b6000602082840312156127aa576127a96132db565b5b60006127b8848285016125c4565b91505092915050565b6000602082840312156127d7576127d66132db565b5b60006127e5848285016125d9565b91505092915050565b600060208284031215612804576128036132db565b5b6000612812848285016125ee565b91505092915050565b600060208284031215612831576128306132db565b5b600061283f84828501612603565b91505092915050565b60008060008060808587031215612862576128616132db565b5b600061287087828801612603565b945050602061288187828801612618565b93505060406128928782880161259a565b92505060606128a387828801612642565b91505092959194509250565b6000806000606084860312156128c8576128c76132db565b5b60006128d686828701612618565b93505060206128e78682870161259a565b92505060406128f886828701612642565b9150509250925092565b60008060006060848603121561291b5761291a6132db565b5b600061292986828701612618565b935050602061293a86828701612642565b925050604061294b86828701612642565b9150509250925092565b60006020828403121561296b5761296a6132db565b5b60006129798482850161262d565b91505092915050565b600060208284031215612998576129976132db565b5b60006129a684828501612642565b91505092915050565b6000602082840312156129c5576129c46132db565b5b60006129d384828501612657565b91505092915050565b6129e5816130f3565b82525050565b60006129f6826130c1565b612a0081856130d7565b9350612a1081856020860161324a565b80840191505092915050565b612a25816131a8565b82525050565b612a34816131cc565b82525050565b612a43816131f0565b82525050565b612a5281613214565b82525050565b612a6181613238565b82525050565b6000612a72826130cc565b612a7c81856130e2565b9350612a8c81856020860161324a565b612a95816132e0565b840191505092915050565b6000612aad6026836130e2565b9150612ab8826132f1565b604082019050919050565b6000612ad06026836130e2565b9150612adb82613340565b604082019050919050565b6000612af36067836130e2565b9150612afe8261338f565b608082019050919050565b6000612b16602e836130e2565b9150612b218261342a565b604082019050919050565b6000612b39606a836130e2565b9150612b4482613479565b608082019050919050565b6000612b5c6020836130e2565b9150612b6782613514565b602082019050919050565b6000612b7f601d836130e2565b9150612b8a8261353d565b602082019050919050565b6000612ba2602b836130e2565b9150612bad82613566565b604082019050919050565b6000612bc56033836130e2565b9150612bd0826135b5565b604082019050919050565b6000612be8601d836130e2565b9150612bf382613604565b602082019050919050565b6000612c0b6027836130e2565b9150612c168261362d565b604082019050919050565b6000612c2e6034836130e2565b9150612c398261367c565b604082019050919050565b6000612c51602a836130e2565b9150612c5c826136cb565b604082019050919050565b6000612c746058836130e2565b9150612c7f8261371a565b606082019050919050565b6000612c97603e836130e2565b9150612ca28261378f565b604082019050919050565b612cb68161319e565b82525050565b6000612cc882846129eb565b915081905092915050565b6000602082019050612ce860008301846129dc565b92915050565b6000604082019050612d0360008301856129dc565b612d106020830184612cad565b9392505050565b600060c082019050612d2c60008301896129dc565b612d396020830188612cad565b612d466040830187612cad565b612d536060830186612cad565b612d606080830185612cad565b612d6d60a0830184612a2b565b979650505050505050565b6000602082019050612d8d6000830184612a1c565b92915050565b6000602082019050612da86000830184612a2b565b92915050565b6000604082019050612dc36000830185612a2b565b612dd060208301846129dc565b9392505050565b6000602082019050612dec6000830184612a3a565b92915050565b6000606082019050612e076000830186612a3a565b612e1460208301856129dc565b612e216040830184612cad565b949350505050565b6000602082019050612e3e6000830184612a49565b92915050565b6000602082019050612e596000830184612a58565b92915050565b60006020820190508181036000830152612e798184612a67565b905092915050565b60006020820190508181036000830152612e9a81612aa0565b9050919050565b60006020820190508181036000830152612eba81612ac3565b9050919050565b60006020820190508181036000830152612eda81612ae6565b9050919050565b60006020820190508181036000830152612efa81612b09565b9050919050565b60006020820190508181036000830152612f1a81612b2c565b9050919050565b60006020820190508181036000830152612f3a81612b4f565b9050919050565b60006020820190508181036000830152612f5a81612b72565b9050919050565b60006020820190508181036000830152612f7a81612b95565b9050919050565b60006020820190508181036000830152612f9a81612bb8565b9050919050565b60006020820190508181036000830152612fba81612bdb565b9050919050565b60006020820190508181036000830152612fda81612bfe565b9050919050565b60006020820190508181036000830152612ffa81612c21565b9050919050565b6000602082019050818103600083015261301a81612c44565b9050919050565b6000602082019050818103600083015261303a81612c67565b9050919050565b6000602082019050818103600083015261305a81612c8a565b9050919050565b60006020820190506130766000830184612cad565b92915050565b60006080820190506130916000830187612cad565b61309e6020830186612cad565b6130ab6040830185612cad565b6130b86060830184612cad565b95945050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006130fe8261317e565b9050919050565b60008115159050919050565b600061311c826130f3565b9050919050565b600061312e826130f3565b9050919050565b6000613140826130f3565b9050919050565b6000613152826130f3565b9050919050565b6000613164826130f3565b9050919050565b6000819050613179826137de565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006131b3826131ba565b9050919050565b60006131c58261317e565b9050919050565b60006131d7826131de565b9050919050565b60006131e98261317e565b9050919050565b60006131fb82613202565b9050919050565b600061320d8261317e565b9050919050565b600061321f82613226565b9050919050565b60006132318261317e565b9050919050565b60006132438261316b565b9050919050565b60005b8381101561326857808201518184015260208101905061324d565b83811115613277576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a736574436f6d6d756e6974794d696e5460008201527f72616e6368653a204e657720636f6d6d756e6974794d696e5472616e6368652060208201527f73686f756c64206265206c657373207468656e20636f6d6d756e6974794d617860408201527f5472616e63686500000000000000000000000000000000000000000000000000606082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a736574436f6d6d756e6974794d61785460008201527f72616e6368653a204e657720636f6d6d756e6974794d61785472616e6368652060208201527f73686f756c642062652067726561746572207468656e20636f6d6d756e69747960408201527f4d696e5472616e63686500000000000000000000000000000000000000000000606082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f436f6d6d756e69747941646d696e3a204e4f545f434f4d4d554e495459000000600082015250565b7f436f6d6d756e69747941646d696e3a3a6d696772617465436f6d6d756e69747960008201527f3a204e4f545f56414c4944000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a696e6974436f6d6d756e69747941646d60008201527f696e48656c7065723a204e4f545f56414c494400000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f436f6d6d756e69747941646d696e3a3a616464436f6d6d756e6974793a204e4f60008201527f545f56414c494400000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a736574436f6d6d756e69747941646d6960008201527f6e48656c7065723a204e4f545f414c4c4f574544000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a636f6e7374727563746f723a20636f6d60008201527f6d756e6974794d696e5472616e6368652073686f756c64206265206c6573732060208201527f7468656e20636f6d6d756e6974794d61785472616e6368650000000000000000604082015250565b7f436f6d6d756e69747941646d696e3a3a66756e64436f6d6d756e6974793a207460008201527f68697320636f6d6d756e6974792068617320656e6f7567682066756e64730000602082015250565b600381106137ef576137ee61327d565b5b50565b6137fb816130f3565b811461380657600080fd5b50565b61381281613105565b811461381d57600080fd5b50565b61382981613111565b811461383457600080fd5b50565b61384081613123565b811461384b57600080fd5b50565b61385781613135565b811461386257600080fd5b50565b61386e81613147565b811461387957600080fd5b50565b61388581613159565b811461389057600080fd5b50565b61389c8161319e565b81146138a757600080fd5b5056fea26469706673582212206881998b81fbd0e6d8caf4d14045ce53cd90143458e90f12eb4540238cdf3fd064736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80637f2813d2116100de578063a681b7ba11610097578063f00d096411610071578063f00d0964146103d4578063f0f44260146103f2578063f2fde38b1461040e578063ffa1ad741461042a57610173565b8063a681b7ba1461036c578063beabacc81461039c578063ebb395e9146103b857610173565b80637f2813d2146102ac578063868a7e88146102dc5780638774be9b146102fa5780638da5cb5b146103165780638e30971b14610334578063926345401461035057610173565b8063301fbb3011610130578063301fbb301461021257806331ec5771146102305780635e3473601461024c57806361d027b314610268578063715018a6146102865780637a1ac61e1461029057610173565b80630900f010146101785780630b4afb1b14610194578063174a71d7146101b05780631d2c9359146101ba5780631fccf672146101d6578063255cef69146101f4575b600080fd5b610192600480360381019061018d919061266c565b610448565b005b6101ae60048036038101906101a99190612719565b610507565b005b6101b86107ab565b005b6101d460048036038101906101cf9190612848565b610a09565b005b6101de610afa565b6040516101eb9190612dd7565b60405180910390f35b6101fc610b24565b6040516102099190613061565b60405180910390f35b61021a610b2e565b6040516102279190612d78565b60405180910390f35b61024a600480360381019061024591906127c1565b610b58565b005b61026660048036038101906102619190612982565b610d46565b005b610270610e3d565b60405161027d9190612e29565b60405180910390f35b61028e610e67565b005b6102aa60048036038101906102a59190612902565b610eef565b005b6102c660048036038101906102c1919061266c565b611069565b6040516102d39190612e44565b60405180910390f35b6102e46110bf565b6040516102f19190613061565b60405180910390f35b610314600480360381019061030f91906126c6565b6110c9565b005b61031e61167b565b60405161032b9190612cd3565b60405180910390f35b61034e60048036038101906103499190612982565b6116a5565b005b61036a6004803603810190610365919061281b565b61179c565b005b61038660048036038101906103819190612982565b6118c6565b6040516103939190612cd3565b60405180910390f35b6103b660048036038101906103b191906128af565b6118e3565b005b6103d260048036038101906103cd91906127c1565b61198f565b005b6103dc611b01565b6040516103e99190613061565b60405180910390f35b61040c60048036038101906104079190612955565b611b12565b005b6104286004803603810190610423919061266c565b611bd2565b005b610432611cca565b60405161043f9190613061565b60405180910390f35b610450611ccf565b73ffffffffffffffffffffffffffffffffffffffff1661046e61167b565b73ffffffffffffffffffffffffffffffffffffffff16146104c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bb90612f21565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61050f611ccf565b73ffffffffffffffffffffffffffffffffffffffff1661052d61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90612f21565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638523f311878787878760006040518763ffffffff1660e01b81526004016105eb96959493929190612d17565b602060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190612699565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a690612fc1565b60405180910390fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156107125761071161327d565b5b021790555061072b816007611cd790919063ffffffff16565b508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f5864130135b8d46c4808bc474964778f56ef5f98402be58df45a515edd08d3048787878760405161078f949392919061307c565b60405180910390a36107a381600454611d07565b505050505050565b600160028111156107bf576107be61327d565b5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600281111561081e5761081d61327d565b5b1461085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590612f41565b60405180910390fd5b600454600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108bc9190612cd3565b60206040518083038186803b1580156108d457600080fd5b505afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c91906129af565b111561094d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094490613041565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b1909ef2336040518263ffffffff1660e01b81526004016109aa9190612d93565b60206040518083038186803b1580156109c257600080fd5b505afa1580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa91906129af565b9050610a063382611d07565b50565b610a11611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610a2f61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c90612f21565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16631501bf038484846040518463ffffffff1660e01b8152600401610ac293929190612df2565b600060405180830381600087803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b5050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600554905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b60611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610b7e61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90612f21565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16635fac917a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3157600080fd5b505afa158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6991906127ee565b73ffffffffffffffffffffffffffffffffffffffff1614610cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb690612fe1565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fa29f0e144018780bcd7a68990ea4b03e96034be4455b71a9b79e66c5a8c06a2e60405160405180910390a250565b610d4e611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610d6c61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db990612f21565b60405180910390fd5b8060045410610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd90612f01565b60405180910390fd5b80600581905550807f99d204dd7ae6365474b11bb0e2750714699dc57fbe2d0b7c1bef72bb42f4405260405160405180910390a250565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e6f611ccf565b73ffffffffffffffffffffffffffffffffffffffff16610e8d61167b565b73ffffffffffffffffffffffffffffffffffffffff1614610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90612f21565b60405180910390fd5b610eed6000611e29565b565b600960019054906101000a900460ff1680610f175750600960009054906101000a900460ff16155b610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d90612ee1565b60405180910390fd5b6000600960019054906101000a900460ff161590508015610fa8576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b610fb0611eef565b818310610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990613021565b60405180910390fd5b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600481905550816005819055508015611063576000600960016101000a81548160ff0219169083151502179055505b50505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600454905090565b6110d1611ccf565b73ffffffffffffffffffffffffffffffffffffffff166110ef61167b565b73ffffffffffffffffffffffffffffffffffffffff1614611145576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90612f21565b60405180910390fd5b6002600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156111a8576111a761327d565b5b0217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490612f61565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16638523f311858573ffffffffffffffffffffffffffffffffffffffff1663830953ab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba91906129af565b8673ffffffffffffffffffffffffffffffffffffffff1663d4938db36040518163ffffffff1660e01b815260040160206040518083038186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133891906129af565b8773ffffffffffffffffffffffffffffffffffffffff16630e5b7c536040518163ffffffff1660e01b815260040160206040518083038186803b15801561137e57600080fd5b505afa158015611392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b691906129af565b8873ffffffffffffffffffffffffffffffffffffffff1663597be18b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fc57600080fd5b505afa158015611410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143491906129af565b896040518763ffffffff1660e01b815260040161145696959493929190612d17565b602060405180830381600087803b15801561147057600080fd5b505af1158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190612699565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561151a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151190612f61565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16631fe9578e82866040518363ffffffff1660e01b8152600401611555929190612dae565b600060405180830381600087803b15801561156f57600080fd5b505af1158015611583573d6000803e3d6000fd5b505050506001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360028111156115ea576115e961327d565b5b0217905550611603816007611cd790919063ffffffff16565b508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f98c0ae41ed9dcfef204d20409e01d4051eee4da4276aa4b5fa1cb3cf01403d6860405160405180910390a450505050565b6000603c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6116ad611ccf565b73ffffffffffffffffffffffffffffffffffffffff166116cb61167b565b73ffffffffffffffffffffffffffffffffffffffff1614611721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171890612f21565b60405180910390fd5b6005548110611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c90612ec1565b60405180910390fd5b80600481905550807f61d018ca7dd3e2bb8e9a1994153b31c93371ac0e87da1f4dfcfa73e31a332fb160405160405180910390a250565b6117a4611ccf565b73ffffffffffffffffffffffffffffffffffffffff166117c261167b565b73ffffffffffffffffffffffffffffffffffffffff1614611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f90612f21565b60405180910390fd5b6002600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561187b5761187a61327d565b5b02179055508073ffffffffffffffffffffffffffffffffffffffff167fa285b77d62d36ec6881b2cbc019c53874eb061798176f3577f2beab0848d16c660405160405180910390a250565b60006118dc826007611fdd90919063ffffffff16565b9050919050565b6118eb611ccf565b73ffffffffffffffffffffffffffffffffffffffff1661190961167b565b73ffffffffffffffffffffffffffffffffffffffff161461195f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195690612f21565b60405180910390fd5b61198a82828573ffffffffffffffffffffffffffffffffffffffff16611ff79092919063ffffffff16565b505050565b611997611ccf565b73ffffffffffffffffffffffffffffffffffffffff166119b561167b565b73ffffffffffffffffffffffffffffffffffffffff1614611a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0290612f21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7190612f81565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fa29f0e144018780bcd7a68990ea4b03e96034be4455b71a9b79e66c5a8c06a2e60405160405180910390a250565b6000611b0d600761207d565b905090565b611b1a611ccf565b73ffffffffffffffffffffffffffffffffffffffff16611b3861167b565b73ffffffffffffffffffffffffffffffffffffffff1614611b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8590612f21565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611bda611ccf565b73ffffffffffffffffffffffffffffffffffffffff16611bf861167b565b73ffffffffffffffffffffffffffffffffffffffff1614611c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4590612f21565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb590612e81565b60405180910390fd5b611cc781611e29565b50565b600181565b600033905090565b6000611cff836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612092565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc8600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b8152600401611d8893929190612df2565b600060405180830381600087803b158015611da257600080fd5b505af1158015611db6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663b809ee82826040518263ffffffff1660e01b8152600401611df39190613061565b600060405180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b505050505050565b6000603c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600960019054906101000a900460ff1680611f175750600960009054906101000a900460ff16155b611f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d90612ee1565b60405180910390fd5b6000600960019054906101000a900460ff161590508015611fa8576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b611fb0612102565b611fb86121e0565b8015611fda576000600960016101000a81548160ff0219169083151502179055505b50565b6000611fec83600001836122ce565b60001c905092915050565b6120788363a9059cbb60e01b8484604051602401612016929190612cee565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122f9565b505050565b600061208b826000016123c0565b9050919050565b600061209e83836123d1565b6120f75782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506120fc565b600090505b92915050565b600960019054906101000a900460ff168061212a5750600960009054906101000a900460ff16155b612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216090612ee1565b60405180910390fd5b6000600960019054906101000a900460ff1615905080156121bb576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b80156121dd576000600960016101000a81548160ff0219169083151502179055505b50565b600960019054906101000a900460ff16806122085750600960009054906101000a900460ff16155b612247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223e90612ee1565b60405180910390fd5b6000600960019054906101000a900460ff161590508015612299576001600960016101000a81548160ff0219169083151502179055506001600960006101000a81548160ff0219169083151502179055505b6122a96122a4611ccf565b611e29565b80156122cb576000600960016101000a81548160ff0219169083151502179055505b50565b60008260000182815481106122e6576122e56132ac565b5b9060005260206000200154905092915050565b600061235b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166123f49092919063ffffffff16565b90506000815111156123bb578080602001905181019061237b9190612794565b6123ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b190613001565b60405180910390fd5b5b505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6060612403848460008561240c565b90509392505050565b606082471015612451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244890612ea1565b60405180910390fd5b61245a85612520565b612499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249090612fa1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124c29190612cbc565b60006040518083038185875af1925050503d80600081146124ff576040519150601f19603f3d011682016040523d82523d6000602084013e612504565b606091505b5091509150612514828286612533565b92505050949350505050565b600080823b905060008111915050919050565b6060831561254357829050612593565b6000835111156125565782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258a9190612e5f565b60405180910390fd5b9392505050565b6000813590506125a9816137f2565b92915050565b6000815190506125be816137f2565b92915050565b6000815190506125d381613809565b92915050565b6000813590506125e881613820565b92915050565b6000815190506125fd81613837565b92915050565b6000813590506126128161384e565b92915050565b60008135905061262781613865565b92915050565b60008135905061263c8161387c565b92915050565b60008135905061265181613893565b92915050565b60008151905061266681613893565b92915050565b600060208284031215612682576126816132db565b5b60006126908482850161259a565b91505092915050565b6000602082840312156126af576126ae6132db565b5b60006126bd848285016125af565b91505092915050565b6000806000606084860312156126df576126de6132db565b5b60006126ed8682870161259a565b93505060206126fe86828701612603565b925050604061270f868287016125d9565b9150509250925092565b600080600080600060a08688031215612735576127346132db565b5b60006127438882890161259a565b955050602061275488828901612642565b945050604061276588828901612642565b935050606061277688828901612642565b925050608061278788828901612642565b9150509295509295909350565b6000602082840312156127aa576127a96132db565b5b60006127b8848285016125c4565b91505092915050565b6000602082840312156127d7576127d66132db565b5b60006127e5848285016125d9565b91505092915050565b600060208284031215612804576128036132db565b5b6000612812848285016125ee565b91505092915050565b600060208284031215612831576128306132db565b5b600061283f84828501612603565b91505092915050565b60008060008060808587031215612862576128616132db565b5b600061287087828801612603565b945050602061288187828801612618565b93505060406128928782880161259a565b92505060606128a387828801612642565b91505092959194509250565b6000806000606084860312156128c8576128c76132db565b5b60006128d686828701612618565b93505060206128e78682870161259a565b92505060406128f886828701612642565b9150509250925092565b60008060006060848603121561291b5761291a6132db565b5b600061292986828701612618565b935050602061293a86828701612642565b925050604061294b86828701612642565b9150509250925092565b60006020828403121561296b5761296a6132db565b5b60006129798482850161262d565b91505092915050565b600060208284031215612998576129976132db565b5b60006129a684828501612642565b91505092915050565b6000602082840312156129c5576129c46132db565b5b60006129d384828501612657565b91505092915050565b6129e5816130f3565b82525050565b60006129f6826130c1565b612a0081856130d7565b9350612a1081856020860161324a565b80840191505092915050565b612a25816131a8565b82525050565b612a34816131cc565b82525050565b612a43816131f0565b82525050565b612a5281613214565b82525050565b612a6181613238565b82525050565b6000612a72826130cc565b612a7c81856130e2565b9350612a8c81856020860161324a565b612a95816132e0565b840191505092915050565b6000612aad6026836130e2565b9150612ab8826132f1565b604082019050919050565b6000612ad06026836130e2565b9150612adb82613340565b604082019050919050565b6000612af36067836130e2565b9150612afe8261338f565b608082019050919050565b6000612b16602e836130e2565b9150612b218261342a565b604082019050919050565b6000612b39606a836130e2565b9150612b4482613479565b608082019050919050565b6000612b5c6020836130e2565b9150612b6782613514565b602082019050919050565b6000612b7f601d836130e2565b9150612b8a8261353d565b602082019050919050565b6000612ba2602b836130e2565b9150612bad82613566565b604082019050919050565b6000612bc56033836130e2565b9150612bd0826135b5565b604082019050919050565b6000612be8601d836130e2565b9150612bf382613604565b602082019050919050565b6000612c0b6027836130e2565b9150612c168261362d565b604082019050919050565b6000612c2e6034836130e2565b9150612c398261367c565b604082019050919050565b6000612c51602a836130e2565b9150612c5c826136cb565b604082019050919050565b6000612c746058836130e2565b9150612c7f8261371a565b606082019050919050565b6000612c97603e836130e2565b9150612ca28261378f565b604082019050919050565b612cb68161319e565b82525050565b6000612cc882846129eb565b915081905092915050565b6000602082019050612ce860008301846129dc565b92915050565b6000604082019050612d0360008301856129dc565b612d106020830184612cad565b9392505050565b600060c082019050612d2c60008301896129dc565b612d396020830188612cad565b612d466040830187612cad565b612d536060830186612cad565b612d606080830185612cad565b612d6d60a0830184612a2b565b979650505050505050565b6000602082019050612d8d6000830184612a1c565b92915050565b6000602082019050612da86000830184612a2b565b92915050565b6000604082019050612dc36000830185612a2b565b612dd060208301846129dc565b9392505050565b6000602082019050612dec6000830184612a3a565b92915050565b6000606082019050612e076000830186612a3a565b612e1460208301856129dc565b612e216040830184612cad565b949350505050565b6000602082019050612e3e6000830184612a49565b92915050565b6000602082019050612e596000830184612a58565b92915050565b60006020820190508181036000830152612e798184612a67565b905092915050565b60006020820190508181036000830152612e9a81612aa0565b9050919050565b60006020820190508181036000830152612eba81612ac3565b9050919050565b60006020820190508181036000830152612eda81612ae6565b9050919050565b60006020820190508181036000830152612efa81612b09565b9050919050565b60006020820190508181036000830152612f1a81612b2c565b9050919050565b60006020820190508181036000830152612f3a81612b4f565b9050919050565b60006020820190508181036000830152612f5a81612b72565b9050919050565b60006020820190508181036000830152612f7a81612b95565b9050919050565b60006020820190508181036000830152612f9a81612bb8565b9050919050565b60006020820190508181036000830152612fba81612bdb565b9050919050565b60006020820190508181036000830152612fda81612bfe565b9050919050565b60006020820190508181036000830152612ffa81612c21565b9050919050565b6000602082019050818103600083015261301a81612c44565b9050919050565b6000602082019050818103600083015261303a81612c67565b9050919050565b6000602082019050818103600083015261305a81612c8a565b9050919050565b60006020820190506130766000830184612cad565b92915050565b60006080820190506130916000830187612cad565b61309e6020830186612cad565b6130ab6040830185612cad565b6130b86060830184612cad565b95945050505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006130fe8261317e565b9050919050565b60008115159050919050565b600061311c826130f3565b9050919050565b600061312e826130f3565b9050919050565b6000613140826130f3565b9050919050565b6000613152826130f3565b9050919050565b6000613164826130f3565b9050919050565b6000819050613179826137de565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006131b3826131ba565b9050919050565b60006131c58261317e565b9050919050565b60006131d7826131de565b9050919050565b60006131e98261317e565b9050919050565b60006131fb82613202565b9050919050565b600061320d8261317e565b9050919050565b600061321f82613226565b9050919050565b60006132318261317e565b9050919050565b60006132438261316b565b9050919050565b60005b8381101561326857808201518184015260208101905061324d565b83811115613277576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a736574436f6d6d756e6974794d696e5460008201527f72616e6368653a204e657720636f6d6d756e6974794d696e5472616e6368652060208201527f73686f756c64206265206c657373207468656e20636f6d6d756e6974794d617860408201527f5472616e63686500000000000000000000000000000000000000000000000000606082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a736574436f6d6d756e6974794d61785460008201527f72616e6368653a204e657720636f6d6d756e6974794d61785472616e6368652060208201527f73686f756c642062652067726561746572207468656e20636f6d6d756e69747960408201527f4d696e5472616e63686500000000000000000000000000000000000000000000606082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f436f6d6d756e69747941646d696e3a204e4f545f434f4d4d554e495459000000600082015250565b7f436f6d6d756e69747941646d696e3a3a6d696772617465436f6d6d756e69747960008201527f3a204e4f545f56414c4944000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a696e6974436f6d6d756e69747941646d60008201527f696e48656c7065723a204e4f545f56414c494400000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f436f6d6d756e69747941646d696e3a3a616464436f6d6d756e6974793a204e4f60008201527f545f56414c494400000000000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a736574436f6d6d756e69747941646d6960008201527f6e48656c7065723a204e4f545f414c4c4f574544000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f436f6d6d756e69747941646d696e3a3a636f6e7374727563746f723a20636f6d60008201527f6d756e6974794d696e5472616e6368652073686f756c64206265206c6573732060208201527f7468656e20636f6d6d756e6974794d61785472616e6368650000000000000000604082015250565b7f436f6d6d756e69747941646d696e3a3a66756e64436f6d6d756e6974793a207460008201527f68697320636f6d6d756e6974792068617320656e6f7567682066756e64730000602082015250565b600381106137ef576137ee61327d565b5b50565b6137fb816130f3565b811461380657600080fd5b50565b61381281613105565b811461381d57600080fd5b50565b61382981613111565b811461383457600080fd5b50565b61384081613123565b811461384b57600080fd5b50565b61385781613135565b811461386257600080fd5b50565b61386e81613147565b811461387957600080fd5b50565b61388581613159565b811461389057600080fd5b50565b61389c8161319e565b81146138a757600080fd5b5056fea26469706673582212206881998b81fbd0e6d8caf4d14045ce53cd90143458e90f12eb4540238cdf3fd064736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCommunity(address,uint256,uint256,uint256,uint256)": {
        "details": "Add a new community. Can be used only by an admin. For further information regarding each parameter, see *Community* smart contract constructor."
      },
      "initCommunityAdminHelper(address)": {
        "details": "Init community factory, used only at deploy time."
      },
      "initialize(address,uint256,uint256)": {
        "details": "It sets the first admin, which later can add others and add/remove communities."
      },
      "migrateCommunity(address,address,address)": {
        "details": "Migrate community by deploying a new contract. Can be used only by an admin. For further information regarding each parameter, see *Community* smart contract constructor."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeCommunity(address)": {
        "details": "Remove an existing community. Can be used only by an admin."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCommunityAdminHelper(address)": {
        "details": "Set the community factory address, if the contract is valid."
      },
      "setCommunityMaxTranche(uint256)": {
        "details": "Set the community max tranche"
      },
      "setCommunityMinTranche(uint256)": {
        "details": "Set the community min tranche"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Welcome to CommunityAdmin, the main contract. This is an administrative (for now) contract where the admins have control over the list of communities. Being only able to add and remove communities",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7160,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "implementation",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7163,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_cUSD",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1678"
      },
      {
        "astId": 7166,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITreasury)11153"
      },
      {
        "astId": 7169,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_communityAdminHelper",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICommunityAdminHelper)7579"
      },
      {
        "astId": 7171,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_communityMinTranche",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7173,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_communityMaxTranche",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7178,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_communities",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_enum(CommunityState)7408)"
      },
      {
        "astId": 7181,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_communityList",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)3412_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "60",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "61",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICommunityAdminHelper)7579": {
        "encoding": "inplace",
        "label": "contract ICommunityAdminHelper",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1678": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)11153": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_enum(CommunityState)7408": {
        "encoding": "inplace",
        "label": "enum ICommunityAdmin.CommunityState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(CommunityState)7408)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum ICommunityAdmin.CommunityState)",
        "numberOfBytes": "32",
        "value": "t_enum(CommunityState)7408"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3412_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3411,
            "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3141_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3141_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3136,
            "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3140,
            "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}