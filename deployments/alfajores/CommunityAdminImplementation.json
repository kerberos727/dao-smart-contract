{
  "address": "0xba11EA19864379fAc220154d930B57cA4628Ce6e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "communityAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "managers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxClaim",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreaseStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "incrementInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTranche",
          "type": "uint256"
        }
      ],
      "name": "CommunityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "community",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CommunityFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "managers",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "communityAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousCommunityAddress",
          "type": "address"
        }
      ],
      "name": "CommunityMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "communityAddress",
          "type": "address"
        }
      ],
      "name": "CommunityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCommunityTemplate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCommunityTemplate",
          "type": "address"
        }
      ],
      "name": "CommunityTemplateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "managers_",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaim_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseStep_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseInterval_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "incrementInterval_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTranche_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTranche_",
          "type": "uint256"
        }
      ],
      "name": "addCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "community_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "addManagerToCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "communities",
      "outputs": [
        {
          "internalType": "enum ICommunityAdmin.CommunityState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "communityListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityProxyAdmin",
      "outputs": [
        {
          "internalType": "contract ProxyAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityTemplate",
      "outputs": [
        {
          "internalType": "contract ICommunity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "communityTemplate_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "cUSD_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "managers_",
          "type": "address[]"
        },
        {
          "internalType": "contract ICommunity",
          "name": "previousCommunity_",
          "type": "address"
        }
      ],
      "name": "migrateCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "community_",
          "type": "address"
        }
      ],
      "name": "removeCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "community_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFromCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "community_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxClaim_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decreaseStep_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseInterval_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "incrementInterval_",
          "type": "uint256"
        }
      ],
      "name": "updateBeneficiaryParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "community_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minTranche_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTranche_",
          "type": "uint256"
        }
      ],
      "name": "updateCommunityParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "newCommunityTemplate_",
          "type": "address"
        }
      ],
      "name": "updateCommunityTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "communityProxy_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newCommunityTemplate_",
          "type": "address"
        }
      ],
      "name": "updateProxyImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "newTreasury_",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62d4480641b11a6864d6111b7cf7e9cd769dc69d6326907b3b6e9117d2b4d5fb",
  "receipt": {
    "to": null,
    "from": "0x2F3340435E283A3d479dF091F913B6EFf96becF5",
    "contractAddress": "0xba11EA19864379fAc220154d930B57cA4628Ce6e",
    "transactionIndex": 2,
    "gasUsed": "3739532",
    "logsBloom": "0x
    "blockHash": "0x65698e00ac5678db53a8b930ceb6aafbeaf882e3a4ec8d19eb77891fe7a636d7",
    "transactionHash": "0x62d4480641b11a6864d6111b7cf7e9cd769dc69d6326907b3b6e9117d2b4d5fb",
    "logs": [],
    "blockNumber": 8515946,
    "cumulativeGasUsed": "4116080",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "afcdce682cbb7559134b40b7aecfc117",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"communityAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreaseStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incrementInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTranche\",\"type\":\"uint256\"}],\"name\":\"CommunityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommunityFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"communityAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousCommunityAddress\",\"type\":\"address\"}],\"name\":\"CommunityMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"communityAddress\",\"type\":\"address\"}],\"name\":\"CommunityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCommunityTemplate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCommunityTemplate\",\"type\":\"address\"}],\"name\":\"CommunityTemplateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"managers_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaim_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseStep_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseInterval_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incrementInterval_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTranche_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTranche_\",\"type\":\"uint256\"}],\"name\":\"addCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"community_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"addManagerToCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communities\",\"outputs\":[{\"internalType\":\"enum ICommunityAdmin.CommunityState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"communityListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityProxyAdmin\",\"outputs\":[{\"internalType\":\"contract ProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityTemplate\",\"outputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"communityTemplate_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"cUSD_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"managers_\",\"type\":\"address[]\"},{\"internalType\":\"contract ICommunity\",\"name\":\"previousCommunity_\",\"type\":\"address\"}],\"name\":\"migrateCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"community_\",\"type\":\"address\"}],\"name\":\"removeCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"community_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFromCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"community_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaim_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseStep_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseInterval_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incrementInterval_\",\"type\":\"uint256\"}],\"name\":\"updateBeneficiaryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"community_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTranche_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTranche_\",\"type\":\"uint256\"}],\"name\":\"updateCommunityParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"newCommunityTemplate_\",\"type\":\"address\"}],\"name\":\"updateCommunityTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityProxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCommunityTemplate_\",\"type\":\"address\"}],\"name\":\"updateProxyImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"newTreasury_\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CommunityAdded(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"baseInterval\":\"Value of the baseInterval\",\"claimAmount\":\"Value of the claimAmount\",\"communityAddress\":\"Address of the community that has been added\",\"decreaseStep\":\"Value of the decreaseStep\",\"incrementInterval\":\"Value of the incrementInterval\",\"managers\":\"Addresses of the initial managers\",\"maxClaim\":\"Value of the maxClaim\",\"maxTranche\":\"Value of the maxTranche For further information regarding each parameter, see *Community* smart contract initialize method.\",\"minTranche\":\"Value of the minTranche\"}},\"CommunityFunded(address,uint256)\":{\"params\":{\"amount\":\"Amount of the funding\",\"community\":\"Address of the community\"}},\"CommunityMigrated(address[],address,address)\":{\"params\":{\"communityAddress\":\"New community address\",\"managers\":\"Addresses of the new community's initial managers\",\"previousCommunityAddress\":\"Old community address\"}},\"CommunityRemoved(address)\":{\"params\":{\"communityAddress\":\"Address of the community that has been removed\"}},\"CommunityTemplateUpdated(address,address)\":{\"params\":{\"newCommunityTemplate\":\"New communityTemplate address\",\"oldCommunityTemplate\":\"Old communityTemplate address\"}},\"TransferERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the transaction\",\"to\":\"Address of the receiver\",\"token\":\"ERC20 token address\"}},\"TreasuryUpdated(address,address)\":{\"params\":{\"newTreasury\":\"New treasury address\",\"oldTreasury\":\"Old treasury address\"}}},\"kind\":\"dev\",\"methods\":{\"addCommunity(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"baseInterval_\":\"base interval to start claiming\",\"claimAmount_\":\"base amount to be claim by the beneficiary\",\"decreaseStep_\":\"value decreased from maxClaim for every beneficiary added\",\"incrementInterval_\":\"increment interval used in each claim\",\"managers_\":\"addresses of the community managers\",\"maxClaim_\":\"limit that a beneficiary can claim at in total\",\"maxTranche_\":\"maximum amount that the community will receive when requesting funds\",\"minTranche_\":\"minimum amount that the community will receive when requesting funds\"}},\"addManagerToCommunity(address,address)\":{\"params\":{\"account_\":\"address to be added as community manager\",\"community_\":\"address of the community\"}},\"communityListAt(uint256)\":{\"params\":{\"index\":\"index of the community\"},\"returns\":{\"_0\":\"address of the community\"}},\"communityListLength()\":{\"returns\":{\"_0\":\"uint256 number of communities\"}},\"fundCommunity()\":{\"details\":\"Funds an existing community if it hasn't enough funds\"},\"initialize(address,address)\":{\"params\":{\"cUSD_\":\"Address of the cUSD token\",\"communityTemplate_\":\"Address of the Community implementation                              used for deploying new communities\"}},\"migrateCommunity(address[],address)\":{\"params\":{\"managers_\":\"address of the community managers\",\"previousCommunity_\":\"address of the community to be migrated\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeCommunity(address)\":{\"params\":{\"community_\":\"address of the community\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,address,uint256)\":{\"params\":{\"amount_\":\"amount of the transaction\",\"to_\":\"address of the receiver\",\"token_\":\"address of the ERC20 token\"}},\"transferFromCommunity(address,address,address,uint256)\":{\"params\":{\"amount_\":\"amount of the transaction\",\"community_\":\"address of the community\",\"to_\":\"address of the receiver\",\"token_\":\"address of the ERC20 token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBeneficiaryParams(address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"baseInterval_\":\"base interval to start claiming\",\"claimAmount_\":\"base amount to be claim by the beneficiary\",\"community_\":\"address of the community\",\"decreaseStep_\":\"value decreased from maxClaim each time a is beneficiary added\",\"incrementInterval_\":\"increment interval used in each claim\",\"maxClaim_\":\"limit that a beneficiary can claim  in total\"}},\"updateCommunityParams(address,uint256,uint256)\":{\"params\":{\"community_\":\"address of the community\",\"maxTranche_\":\"maximum amount that the community will receive when requesting funds\",\"minTranche_\":\"minimum amount that the community will receive when requesting funds\"}},\"updateCommunityTemplate(address)\":{\"params\":{\"newCommunityTemplate_\":\"address of the new communityTemplate contract\"}},\"updateProxyImplementation(address,address)\":{\"params\":{\"communityProxy_\":\"address of the community\",\"newCommunityTemplate_\":\"address of new implementation contract\"}},\"updateTreasury(address)\":{\"params\":{\"newTreasury_\":\"address of the new treasury contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CommunityAdded(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggered when a community has been added\"},\"CommunityFunded(address,uint256)\":{\"notice\":\"Triggered when a community has been funded\"},\"CommunityMigrated(address[],address,address)\":{\"notice\":\"Triggered when a community has been migrated\"},\"CommunityRemoved(address)\":{\"notice\":\"Triggered when a community has been removed\"},\"CommunityTemplateUpdated(address,address)\":{\"notice\":\"Triggered when the communityTemplate address has been updated\"},\"TransferERC20(address,address,uint256)\":{\"notice\":\"Triggered when an amount of an ERC20 has been transferred from this contract to an address\"},\"TreasuryUpdated(address,address)\":{\"notice\":\"Triggered when the treasury address has been updated\"}},\"kind\":\"user\",\"methods\":{\"addCommunity(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Adds a new community\"},\"addManagerToCommunity(address,address)\":{\"notice\":\"Adds a new manager to a community\"},\"communityListAt(uint256)\":{\"notice\":\"Returns the address of a community from communityList\"},\"communityListLength()\":{\"notice\":\"Returns the number of communities\"},\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"initialize(address,address)\":{\"notice\":\"Used to initialize a new CommunityAdmin contract\"},\"migrateCommunity(address[],address)\":{\"notice\":\"Migrates a community by deploying a new contract.\"},\"removeCommunity(address)\":{\"notice\":\"Removes an existing community. All community funds are transferred to the treasury\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers an amount of an ERC20 from this contract to an address\"},\"transferFromCommunity(address,address,address,uint256)\":{\"notice\":\"Transfers an amount of an ERC20 from  community to an address\"},\"updateBeneficiaryParams(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Updates the beneficiary params of a community\"},\"updateCommunityParams(address,uint256,uint256)\":{\"notice\":\"Updates params of a community\"},\"updateCommunityTemplate(address)\":{\"notice\":\"Updates the address of the the communityTemplate\"},\"updateProxyImplementation(address,address)\":{\"notice\":\"Updates proxy implementation address of a community\"},\"updateTreasury(address)\":{\"notice\":\"Updates the address of the treasury\"}},\"notice\":\"Welcome to CommunityAdmin, the main contract. This is an administrative (for now) contract where the admins have control over the list of communities. Being only able to add and remove communities\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/community/CommunityAdminImplementation.sol\":\"CommunityAdminImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        require(hasRole(role, account), \\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\");\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x6be2e38d6bdb385b6a84b55f79dd0767794c81354ee34ccabcfd680b159b83be\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8f1503ee5d495997d1bd9675f432e74a299d34c87bdc38647dcc554e76591b41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x478b8ce75e72a4dcf182c95918858fd877ccaf078f16aae3341523cc2e26d5c8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/community/Community.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/ICommunityOld.sol\\\";\\nimport \\\"./interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./interfaces/CommunityStorageV1.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice Welcome to the Community contract. For each community\\n * there will be one proxy contract deployed by CommunityAdmin.\\n * The implementation of the proxy is this contract. This enable\\n * us to save tokens on the contract itself, and avoid the problems\\n * of having everything in one single contract.\\n *Each community has it's own members and and managers.\\n */\\ncontract Community is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    CommunityStorageV1\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 private constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    uint256 private constant DEFAULT_AMOUNT = 5e16;\\n\\n    /**\\n     * @notice Triggered when a manager has been added\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     *                          or address of the CommunityAdmin if it's first manager\\n     * @param account           Address of the manager that has been added\\n     */\\n    event ManagerAdded(address indexed manager, address indexed account);\\n\\n    /**\\n     * @notice Triggered when a manager has been removed\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param account           Address of the manager that has been removed\\n     */\\n    event ManagerRemoved(address indexed manager, address indexed account);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been added\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been added\\n     */\\n    event BeneficiaryAdded(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been locked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been locked\\n     */\\n    event BeneficiaryLocked(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been unlocked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been unlocked\\n     */\\n    event BeneficiaryUnlocked(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been removed\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been removed\\n     */\\n    event BeneficiaryRemoved(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has claimed\\n     *\\n     * @param beneficiary       Address of the beneficiary that has claimed\\n     * @param amount            Amount of the claim\\n     */\\n    event BeneficiaryClaim(address indexed beneficiary, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a community has been locked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     */\\n    event CommunityLocked(address indexed manager);\\n\\n    /**\\n     * @notice Triggered when a community has been unlocked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     */\\n    event CommunityUnlocked(address indexed manager);\\n\\n    /**\\n     * @notice Triggered when a manager has requested funds for community\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     */\\n    event FundsRequested(address indexed manager);\\n\\n    /**\\n     * @notice Triggered when someone has donated cUSD\\n     *\\n     * @param donor             Address of the donor\\n     * @param amount            Amount of the donation\\n     */\\n    event Donate(address indexed donor, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a beneficiary from previous community has joined in the current community\\n     *\\n     * @param beneficiary       Address of the beneficiary\\n     */\\n    event BeneficiaryJoined(address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when beneficiary params has been updated\\n     *\\n     * @param oldClaimAmount       Old claimAmount value\\n     * @param oldMaxClaim          Old maxClaim value\\n     * @param oldDecreaseStep      Old decreaseStep value\\n     * @param oldBaseInterval      Old baseInterval value\\n     * @param oldIncrementInterval Old incrementInterval value\\n     * @param newClaimAmount       New claimAmount value\\n     * @param newMaxClaim          New maxClaim value\\n     * @param newDecreaseStep      New decreaseStep value\\n     * @param newBaseInterval      New baseInterval value\\n     * @param newIncrementInterval New incrementInterval value\\n     *\\n     * For further information regarding each parameter, see\\n     * *Community* smart contract initialize method.\\n     */\\n    event BeneficiaryParamsUpdated(\\n        uint256 oldClaimAmount,\\n        uint256 oldMaxClaim,\\n        uint256 oldDecreaseStep,\\n        uint256 oldBaseInterval,\\n        uint256 oldIncrementInterval,\\n        uint256 newClaimAmount,\\n        uint256 newMaxClaim,\\n        uint256 newDecreaseStep,\\n        uint256 newBaseInterval,\\n        uint256 newIncrementInterval\\n    );\\n\\n    /**\\n     * @notice Triggered when community params has been updated\\n     *\\n     * @param oldMinTranche        Old minTranche value\\n     * @param oldMaxTranche        Old maxTranche value\\n     * @param newMinTranche        New minTranche value\\n     * @param newMaxTranche        New maxTranche value\\n     *\\n     * For further information regarding each parameter, see\\n     * *Community* smart contract initialize method.\\n     */\\n    event CommunityParamsUpdated(\\n        uint256 oldMinTranche,\\n        uint256 oldMaxTranche,\\n        uint256 newMinTranche,\\n        uint256 newMaxTranche\\n    );\\n\\n    /**\\n     * @notice Triggered when communityAdmin has been updated\\n     *\\n     * @param oldCommunityAdmin   Old communityAdmin address\\n     * @param newCommunityAdmin   New communityAdmin address\\n     */\\n    event CommunityAdminUpdated(\\n        address indexed oldCommunityAdmin,\\n        address indexed newCommunityAdmin\\n    );\\n\\n    /**\\n     * @notice Triggered when previousCommunity has been updated\\n     *\\n     * @param oldPreviousCommunity   Old previousCommunity address\\n     * @param newPreviousCommunity   New previousCommunity address\\n     */\\n    event PreviousCommunityUpdated(\\n        address indexed oldPreviousCommunity,\\n        address indexed newPreviousCommunity\\n    );\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\\n     *\\n     * @param token               ERC20 token address\\n     * @param to                  Address of the receiver\\n     * @param amount              Amount of the transaction\\n     */\\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Used to initialize a new Community contract\\n     *\\n     * @param managers_            Community's initial managers.\\n     *                             Will be able to add others\\n     * @param claimAmount_         Base amount to be claim by the beneficiary\\n     * @param maxClaim_            Limit that a beneficiary can claim in total\\n     * @param decreaseStep_        Value decreased from maxClaim each time a beneficiary is added\\n     * @param baseInterval_        Base interval to start claiming\\n     * @param incrementInterval_   Increment interval used in each claim\\n     * @param previousCommunity_   Previous smart contract address of community\\n     * @param minTranche_          Minimum amount that the community will receive when requesting funds\\n     * @param maxTranche_          Maximum amount that the community will receive when requesting funds\\n     */\\n    function initialize(\\n        address[] memory managers_,\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 decreaseStep_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_,\\n        uint256 minTranche_,\\n        uint256 maxTranche_,\\n        ICommunity previousCommunity_\\n    ) external initializer {\\n        require(\\n            baseInterval_ > incrementInterval_,\\n            \\\"Community::initialize: baseInterval must be greater than incrementInterval\\\"\\n        );\\n        require(\\n            maxClaim_ > claimAmount_,\\n            \\\"Community::initialize: maxClaim must be greater than claimAmount\\\"\\n        );\\n\\n        require(\\n            minTranche_ <= maxTranche_,\\n            \\\"Community::initialize: minTranche should not be greater than maxTranche\\\"\\n        );\\n\\n        __AccessControl_init();\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        claimAmount = claimAmount_;\\n        baseInterval = baseInterval_;\\n        incrementInterval = incrementInterval_;\\n        maxClaim = maxClaim_;\\n        minTranche = minTranche_;\\n        maxTranche = maxTranche_;\\n        previousCommunity = previousCommunity_;\\n        communityAdmin = ICommunityAdmin(msg.sender);\\n        decreaseStep = decreaseStep_;\\n        locked = false;\\n\\n        transferOwnership(msg.sender);\\n\\n        // MANAGER_ROLE is the admin for the MANAGER_ROLE\\n        // so every manager is able to add or remove other managers\\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\\n\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n        emit ManagerAdded(msg.sender, msg.sender);\\n\\n        for (uint256 i = 0; i < managers_.length; i++) {\\n            addManager(managers_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be a valid beneficiary\\n     */\\n    modifier onlyValidBeneficiary() {\\n        require(\\n            beneficiaries[msg.sender].state == BeneficiaryState.Valid,\\n            \\\"Community: NOT_VALID_BENEFICIARY\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to have manager role\\n     */\\n    modifier onlyManagers() {\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"Community: NOT_MANAGER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the cUSD contract address\\n     */\\n    function cUSD() public view override returns (IERC20) {\\n        return communityAdmin.cUSD();\\n    }\\n\\n    /**\\n     * @notice Returns the length of the beneficiaryList\\n     */\\n    function beneficiaryListLength() external view override returns (uint256) {\\n        return beneficiaryList.length();\\n    }\\n\\n    /**\\n     * @notice Returns an address from the beneficiaryList\\n     *\\n     * @param index_ index value\\n     * @return address of the beneficiary\\n     */\\n    function beneficiaryListAt(uint256 index_) external view override returns (address) {\\n        return beneficiaryList.at(index_);\\n    }\\n\\n    /**\\n     * @notice Returns the 0 address\\n     * only used for backwards compatibility\\n     */\\n    function impactMarketAddress() public pure override returns (address) {\\n        return address(0);\\n    }\\n\\n    /** Updates the address of the communityAdmin\\n     *\\n     * @param newCommunityAdmin_ address of the new communityAdmin\\n     */\\n    function updateCommunityAdmin(ICommunityAdmin newCommunityAdmin_) external override onlyOwner {\\n        address oldCommunityAdminAddress = address(communityAdmin);\\n        communityAdmin = newCommunityAdmin_;\\n\\n        addManager(address(communityAdmin));\\n\\n        emit CommunityAdminUpdated(oldCommunityAdminAddress, address(newCommunityAdmin_));\\n    }\\n\\n    /** Updates the address of the previousCommunity\\n     *\\n     * @param newPreviousCommunity_ address of the new previousCommunity\\n     */\\n    function updatePreviousCommunity(ICommunity newPreviousCommunity_) external override onlyOwner {\\n        address oldPreviousCommunityAddress = address(previousCommunity);\\n        previousCommunity = newPreviousCommunity_;\\n\\n        emit PreviousCommunityUpdated(oldPreviousCommunityAddress, address(newPreviousCommunity_));\\n    }\\n\\n    /** Updates beneficiary params\\n     *\\n     * @param claimAmount_  base amount to be claim by the beneficiary\\n     * @param maxClaim_ limit that a beneficiary can claim  in total\\n     * @param decreaseStep_ value decreased from maxClaim each time a is beneficiary added\\n     * @param baseInterval_ base interval to start claiming\\n     * @param incrementInterval_ increment interval used in each claim\\n     */\\n    function updateBeneficiaryParams(\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 decreaseStep_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_\\n    ) external override onlyOwner {\\n        require(\\n            baseInterval_ > incrementInterval_,\\n            \\\"Community::constructor: baseInterval must be greater than incrementInterval\\\"\\n        );\\n        require(\\n            maxClaim_ > claimAmount_,\\n            \\\"Community::constructor: maxClaim must be greater than claimAmount\\\"\\n        );\\n\\n        uint256 oldClaimAmount = claimAmount;\\n        uint256 oldMaxClaim = maxClaim;\\n        uint256 oldDecreaseStep = decreaseStep;\\n        uint256 oldBaseInterval = baseInterval;\\n        uint256 oldIncrementInterval = incrementInterval;\\n\\n        claimAmount = claimAmount_;\\n        maxClaim = maxClaim_;\\n        decreaseStep = decreaseStep_;\\n        baseInterval = baseInterval_;\\n        incrementInterval = incrementInterval_;\\n\\n        emit BeneficiaryParamsUpdated(\\n            oldClaimAmount,\\n            oldMaxClaim,\\n            oldDecreaseStep,\\n            oldBaseInterval,\\n            oldIncrementInterval,\\n            claimAmount_,\\n            maxClaim_,\\n            decreaseStep_,\\n            baseInterval_,\\n            incrementInterval_\\n        );\\n    }\\n\\n    /** @notice Updates params of a community\\n     *\\n     * @param minTranche_ minimum amount that the community will receive when requesting funds\\n     * @param maxTranche_ maximum amount that the community will receive when requesting funds\\n     */\\n    function updateCommunityParams(uint256 minTranche_, uint256 maxTranche_)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            minTranche_ <= maxTranche_,\\n            \\\"Community::updateCommunityParams: minTranche should not be greater than maxTranche\\\"\\n        );\\n\\n        uint256 oldMinTranche = minTranche;\\n        uint256 oldMaxTranche = maxTranche;\\n\\n        minTranche = minTranche_;\\n        maxTranche = maxTranche_;\\n\\n        emit CommunityParamsUpdated(oldMinTranche, oldMaxTranche, minTranche_, maxTranche_);\\n    }\\n\\n    /**\\n     * @notice Adds a new manager\\n     *\\n     * @param account_ address of the manager to be added\\n     */\\n    function addManager(address account_) public override onlyManagers {\\n        if (!hasRole(MANAGER_ROLE, account_)) {\\n            super.grantRole(MANAGER_ROLE, account_);\\n            emit ManagerAdded(msg.sender, account_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove an existing manager\\n     *\\n     * @param account_ address of the manager to be removed\\n     */\\n    function removeManager(address account_) external override onlyManagers {\\n        require(\\n            hasRole(MANAGER_ROLE, account_),\\n            \\\"Community::removeManager: This account doesn't have manager role\\\"\\n        );\\n        require(\\n            account_ != address(communityAdmin),\\n            \\\"Community::removeManager: You are not allow to remove communityAdmin\\\"\\n        );\\n        super.revokeRole(MANAGER_ROLE, account_);\\n        emit ManagerRemoved(msg.sender, account_);\\n    }\\n\\n    /**\\n     * @notice Enforces managers to use addManager method\\n     */\\n    function grantRole(bytes32 role, address account) public override {\\n        require(false, \\\"Community::grantRole: You are not allow to use this method\\\");\\n    }\\n\\n    /**\\n     * @notice Enforces managers to use removeManager method\\n     */\\n    function revokeRole(bytes32 role, address account) public override {\\n        require(false, \\\"Community::revokeRole: You are not allow to use this method\\\");\\n    }\\n\\n    /**\\n     * @notice Adds a new beneficiary\\n     *\\n     * @param beneficiaryAddress_ address of the beneficiary to be added\\n     */\\n    function addBeneficiary(address beneficiaryAddress_)\\n        external\\n        override\\n        onlyManagers\\n        nonReentrant\\n    {\\n        Beneficiary storage beneficiary = beneficiaries[beneficiaryAddress_];\\n        require(\\n            beneficiary.state == BeneficiaryState.NONE,\\n            \\\"Community::addBeneficiary: Beneficiary exists\\\"\\n        );\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Valid);\\n        // solhint-disable-next-line not-rely-on-time\\n        beneficiary.lastClaim = block.number;\\n\\n        beneficiaryList.add(beneficiaryAddress_);\\n\\n        // send default amount when adding a new beneficiary\\n        cUSD().safeTransfer(beneficiaryAddress_, DEFAULT_AMOUNT);\\n\\n        emit BeneficiaryAdded(msg.sender, beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @notice Locks a valid beneficiary\\n     *\\n     * @param beneficiaryAddress_ address of the beneficiary to be locked\\n     */\\n    function lockBeneficiary(address beneficiaryAddress_) external override onlyManagers {\\n        Beneficiary storage beneficiary = beneficiaries[beneficiaryAddress_];\\n\\n        require(beneficiary.state == BeneficiaryState.Valid, \\\"Community::lockBeneficiary: NOT_YET\\\");\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Locked);\\n        emit BeneficiaryLocked(msg.sender, beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @notice  Unlocks a locked beneficiary\\n     *\\n     * @param beneficiaryAddress_ address of the beneficiary to be unlocked\\n     */\\n    function unlockBeneficiary(address beneficiaryAddress_) external override onlyManagers {\\n        Beneficiary storage beneficiary = beneficiaries[beneficiaryAddress_];\\n\\n        require(\\n            beneficiary.state == BeneficiaryState.Locked,\\n            \\\"Community::unlockBeneficiary: NOT_YET\\\"\\n        );\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Valid);\\n        emit BeneficiaryUnlocked(msg.sender, beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @notice Remove an existing beneficiary\\n     *\\n     * @param beneficiaryAddress_ address of the beneficiary to be removed\\n     */\\n    function removeBeneficiary(address beneficiaryAddress_) external override onlyManagers {\\n        Beneficiary storage beneficiary = beneficiaries[beneficiaryAddress_];\\n\\n        require(\\n            beneficiary.state == BeneficiaryState.Valid ||\\n                beneficiary.state == BeneficiaryState.Locked,\\n            \\\"Community::removeBeneficiary: NOT_YET\\\"\\n        );\\n        _changeBeneficiaryState(beneficiary, BeneficiaryState.Removed);\\n        emit BeneficiaryRemoved(msg.sender, beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @dev Transfers cUSD to a valid beneficiary\\n     */\\n    function claim() external override onlyValidBeneficiary nonReentrant {\\n        Beneficiary storage beneficiary = beneficiaries[msg.sender];\\n\\n        require(!locked, \\\"LOCKED\\\");\\n        require(claimCooldown(msg.sender) <= block.number, \\\"Community::claim: NOT_YET\\\");\\n        require(\\n            (beneficiary.claimedAmount + claimAmount) <= maxClaim,\\n            \\\"Community::claim: MAX_CLAIM\\\"\\n        );\\n\\n        beneficiary.claimedAmount += claimAmount;\\n        beneficiary.claims++;\\n        beneficiary.lastClaim = block.number;\\n\\n        cUSD().safeTransfer(msg.sender, claimAmount);\\n        emit BeneficiaryClaim(msg.sender, claimAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the number of blocks that a beneficiary have to wait between claims\\n     *\\n     * @param beneficiaryAddress_ address of the beneficiary\\n     * @return uint256 number of blocks for the lastInterval\\n     */\\n    function lastInterval(address beneficiaryAddress_) public view override returns (uint256) {\\n        Beneficiary storage beneficiary = beneficiaries[beneficiaryAddress_];\\n        if (beneficiary.claims == 0) {\\n            return 0;\\n        }\\n        return baseInterval + (beneficiary.claims - 1) * incrementInterval;\\n    }\\n\\n    /**\\n     * @notice Returns the block number when a beneficiary can claim again\\n     *\\n     * @param beneficiaryAddress_ address of the beneficiary\\n     * @return uint256 number of block when the beneficiary can claim\\n     */\\n    function claimCooldown(address beneficiaryAddress_) public view override returns (uint256) {\\n        return beneficiaries[beneficiaryAddress_].lastClaim + lastInterval(beneficiaryAddress_);\\n    }\\n\\n    /**\\n     * @notice Locks the community claims\\n     */\\n    function lock() external override onlyManagers {\\n        locked = true;\\n        emit CommunityLocked(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Unlocks the community claims\\n     */\\n    function unlock() external override onlyManagers {\\n        locked = false;\\n        emit CommunityUnlocked(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Requests treasury funds from the communityAdmin\\n     */\\n    function requestFunds() external override onlyManagers {\\n        communityAdmin.fundCommunity();\\n\\n        emit FundsRequested(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Transfers cUSDs from donor to this community\\n     * Used by donationToCommunity method from DonationMiner contract\\n     *\\n     * @param sender_ address of the sender\\n     * @param amount_ amount to be donated\\n     */\\n    function donate(address sender_, uint256 amount_) external override nonReentrant {\\n        cUSD().safeTransferFrom(sender_, address(this), amount_);\\n        privateFunds += amount_;\\n\\n        emit Donate(msg.sender, amount_);\\n    }\\n\\n    /**\\n     * @notice Increases the treasuryFunds value\\n     * Used by communityAdmin after an amount of cUSD are sent from the treasury\\n     *\\n     * @param amount_ amount to be added to treasuryFunds\\n     */\\n    function addTreasuryFunds(uint256 amount_) external override onlyOwner {\\n        treasuryFunds += amount_;\\n    }\\n\\n    /**\\n     * @notice Transfers an amount of an ERC20 from this contract to an address\\n     *\\n     * @param token_ address of the ERC20 token\\n     * @param to_ address of the receiver\\n     * @param amount_ amount of the transaction\\n     */\\n    function transfer(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyOwner nonReentrant {\\n        token_.safeTransfer(to_, amount_);\\n\\n        emit TransferERC20(address(token_), to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Allows a beneficiary from the previousCommunity to join in this community\\n     */\\n    function beneficiaryJoinFromMigrated() external override {\\n        // no need to check if it's a beneficiary, as the state is copied\\n        Beneficiary storage beneficiary = beneficiaries[msg.sender];\\n\\n        require(\\n            beneficiary.state == BeneficiaryState.NONE,\\n            \\\"Community::beneficiaryJoinFromMigrated: Beneficiary exists\\\"\\n        );\\n\\n        //if the previousCommunity is deployed with the new type of smart contract\\n        if (previousCommunity.impactMarketAddress() == address(0)) {\\n            (\\n                BeneficiaryState oldBeneficiaryState,\\n                uint256 oldBeneficiaryClaims,\\n                uint256 oldBeneficiaryClaimedAmount,\\n                uint256 oldBeneficiaryLastClaim\\n            ) = previousCommunity.beneficiaries(msg.sender);\\n\\n            _changeBeneficiaryState(beneficiary, oldBeneficiaryState);\\n            beneficiary.claims = oldBeneficiaryClaims;\\n            beneficiary.lastClaim = oldBeneficiaryLastClaim;\\n            beneficiary.claimedAmount = oldBeneficiaryClaimedAmount;\\n        } else {\\n            ICommunityOld oldCommunity = ICommunityOld(address(previousCommunity));\\n            uint256 oldBeneficiaryLastInterval = oldCommunity.lastInterval(msg.sender);\\n            _changeBeneficiaryState(\\n                beneficiary,\\n                BeneficiaryState(oldCommunity.beneficiaries(msg.sender))\\n            );\\n\\n            uint256 oldBeneficiaryCooldown = oldCommunity.cooldown(msg.sender);\\n\\n            if (oldBeneficiaryCooldown >= oldBeneficiaryLastInterval + _firstBlockTimestamp()) {\\n                // seconds to blocks conversion\\n                beneficiary.lastClaim =\\n                    (oldBeneficiaryCooldown - oldBeneficiaryLastInterval - _firstBlockTimestamp()) /\\n                    5;\\n            } else {\\n                beneficiary.lastClaim = 0;\\n            }\\n\\n            beneficiary.claimedAmount = oldCommunity.claimed(msg.sender);\\n\\n            uint256 previousBaseInterval = oldCommunity.baseInterval();\\n            if (oldBeneficiaryLastInterval >= previousBaseInterval) {\\n                beneficiary.claims =\\n                    (oldBeneficiaryLastInterval - previousBaseInterval) /\\n                    oldCommunity.incrementInterval() +\\n                    1;\\n            } else {\\n                beneficiary.claims = 0;\\n            }\\n        }\\n\\n        beneficiaryList.add(msg.sender);\\n\\n        emit BeneficiaryJoined(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the initial maxClaim\\n     */\\n    function getInitialMaxClaim() external view override returns (uint256) {\\n        return maxClaim + validBeneficiaryCount * decreaseStep;\\n    }\\n\\n    /**\\n     * @notice Changes the state of a beneficiary\\n     *\\n     * @param beneficiary address of the beneficiary\\n     * @param newState_ new state\\n     */\\n    function _changeBeneficiaryState(Beneficiary storage beneficiary, BeneficiaryState newState_)\\n        internal\\n    {\\n        if (beneficiary.state == newState_) {\\n            return;\\n        }\\n\\n        if (newState_ == BeneficiaryState.Valid) {\\n            require(\\n                maxClaim - decreaseStep >= claimAmount,\\n                \\\"Community::_changeBeneficiaryState: This community has reached the maximum number of valid beneficiaries\\\"\\n            );\\n            validBeneficiaryCount++;\\n            maxClaim -= decreaseStep;\\n        } else if (beneficiary.state == BeneficiaryState.Valid) {\\n            validBeneficiaryCount--;\\n            maxClaim += decreaseStep;\\n        }\\n\\n        beneficiary.state = newState_;\\n    }\\n\\n    function _firstBlockTimestamp() public view returns (uint256) {\\n        if (block.chainid == 42220) {\\n            //celo mainnet\\n            return 1587571205;\\n        } else if (block.chainid == 44787) {\\n            //alfajores testnet\\n            return 1594921556;\\n        } else if (block.chainid == 44787) {\\n            //baklava testnet\\n            return 1593012289;\\n        } else {\\n            return block.timestamp - block.number; //local\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xacb886ffc6b80d773e15fdfcc57a19bb2b0468f9e24e34d033377c3716745263\",\"license\":\"Apache-2.0\"},\"contracts/community/CommunityAdminImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/CommunityAdminStorageV1.sol\\\";\\nimport \\\"./Community.sol\\\";\\nimport \\\"../token/interfaces/ITreasury.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @notice Welcome to CommunityAdmin, the main contract. This is an\\n * administrative (for now) contract where the admins have control\\n * over the list of communities. Being only able to add and\\n * remove communities\\n */\\ncontract CommunityAdminImplementation is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    CommunityAdminStorageV1\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Triggered when a community has been added\\n     *\\n     * @param communityAddress  Address of the community that has been added\\n     * @param managers          Addresses of the initial managers\\n     * @param claimAmount       Value of the claimAmount\\n     * @param maxClaim          Value of the maxClaim\\n     * @param decreaseStep      Value of the decreaseStep\\n     * @param baseInterval      Value of the baseInterval\\n     * @param incrementInterval Value of the incrementInterval\\n     * @param minTranche        Value of the minTranche\\n     * @param maxTranche        Value of the maxTranche\\n     *\\n     * For further information regarding each parameter, see\\n     * *Community* smart contract initialize method.\\n     */\\n    event CommunityAdded(\\n        address indexed communityAddress,\\n        address[] managers,\\n        uint256 claimAmount,\\n        uint256 maxClaim,\\n        uint256 decreaseStep,\\n        uint256 baseInterval,\\n        uint256 incrementInterval,\\n        uint256 minTranche,\\n        uint256 maxTranche\\n    );\\n\\n    /**\\n     * @notice Triggered when a community has been removed\\n     *\\n     * @param communityAddress  Address of the community that has been removed\\n     */\\n    event CommunityRemoved(address indexed communityAddress);\\n\\n    /**\\n     * @notice Triggered when a community has been migrated\\n     *\\n     * @param managers                 Addresses of the new community's initial managers\\n     * @param communityAddress         New community address\\n     * @param previousCommunityAddress Old community address\\n     */\\n    event CommunityMigrated(\\n        address[] managers,\\n        address indexed communityAddress,\\n        address indexed previousCommunityAddress\\n    );\\n\\n    /**\\n     * @notice Triggered when the treasury address has been updated\\n     *\\n     * @param oldTreasury             Old treasury address\\n     * @param newTreasury             New treasury address\\n     */\\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\\n\\n    /**\\n     * @notice Triggered when the communityTemplate address has been updated\\n     *\\n     * @param oldCommunityTemplate    Old communityTemplate address\\n     * @param newCommunityTemplate    New communityTemplate address\\n     */\\n    event CommunityTemplateUpdated(\\n        address indexed oldCommunityTemplate,\\n        address indexed newCommunityTemplate\\n    );\\n\\n    /**\\n     * @notice Triggered when a community has been funded\\n     *\\n     * @param community           Address of the community\\n     * @param amount              Amount of the funding\\n     */\\n    event CommunityFunded(address indexed community, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\\n     *\\n     * @param token               ERC20 token address\\n     * @param to                  Address of the receiver\\n     * @param amount              Amount of the transaction\\n     */\\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Enforces sender to be a valid community\\n     */\\n    modifier onlyCommunities() {\\n        require(communities[msg.sender] == CommunityState.Valid, \\\"CommunityAdmin: NOT_COMMUNITY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize a new CommunityAdmin contract\\n     *\\n     * @param communityTemplate_    Address of the Community implementation\\n     *                              used for deploying new communities\\n     * @param cUSD_                 Address of the cUSD token\\n     */\\n    function initialize(ICommunity communityTemplate_, IERC20 cUSD_) external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        communityTemplate = communityTemplate_;\\n        cUSD = cUSD_;\\n\\n        communityProxyAdmin = new ProxyAdmin();\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns the address of a community from communityList\\n     *\\n     * @param index index of the community\\n     * @return address of the community\\n     */\\n    function communityListAt(uint256 index) external view override returns (address) {\\n        return communityList.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of communities\\n     *\\n     * @return uint256 number of communities\\n     */\\n    function communityListLength() external view override returns (uint256) {\\n        return communityList.length();\\n    }\\n\\n    /**\\n     * @notice Updates the address of the treasury\\n     *\\n     * @param newTreasury_ address of the new treasury contract\\n     */\\n    function updateTreasury(ITreasury newTreasury_) external override onlyOwner {\\n        address oldTreasuryAddress = address(treasury);\\n        treasury = newTreasury_;\\n\\n        emit TreasuryUpdated(oldTreasuryAddress, address(newTreasury_));\\n    }\\n\\n    /**\\n     * @notice Updates the address of the the communityTemplate\\n     *\\n     * @param newCommunityTemplate_ address of the new communityTemplate contract\\n     */\\n    function updateCommunityTemplate(ICommunity newCommunityTemplate_) external override onlyOwner {\\n        address oldCommunityTemplateAddress = address(communityTemplate);\\n        communityTemplate = newCommunityTemplate_;\\n\\n        emit CommunityTemplateUpdated(oldCommunityTemplateAddress, address(newCommunityTemplate_));\\n    }\\n\\n    /**\\n     * @notice Adds a new community\\n     *\\n     * @param managers_ addresses of the community managers\\n     * @param claimAmount_ base amount to be claim by the beneficiary\\n     * @param maxClaim_ limit that a beneficiary can claim at in total\\n     * @param decreaseStep_ value decreased from maxClaim for every beneficiary added\\n     * @param baseInterval_ base interval to start claiming\\n     * @param incrementInterval_ increment interval used in each claim\\n     * @param minTranche_ minimum amount that the community will receive when requesting funds\\n     * @param maxTranche_ maximum amount that the community will receive when requesting funds\\n     */\\n    function addCommunity(\\n        address[] memory managers_,\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 decreaseStep_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_,\\n        uint256 minTranche_,\\n        uint256 maxTranche_\\n    ) external override onlyOwner {\\n        address communityAddress = deployCommunity(\\n            managers_,\\n            claimAmount_,\\n            maxClaim_,\\n            decreaseStep_,\\n            baseInterval_,\\n            incrementInterval_,\\n            minTranche_,\\n            maxTranche_,\\n            ICommunity(address(0))\\n        );\\n        require(communityAddress != address(0), \\\"CommunityAdmin::addCommunity: NOT_VALID\\\");\\n        communities[communityAddress] = CommunityState.Valid;\\n        communityList.add(communityAddress);\\n\\n        emit CommunityAdded(\\n            communityAddress,\\n            managers_,\\n            claimAmount_,\\n            maxClaim_,\\n            decreaseStep_,\\n            baseInterval_,\\n            incrementInterval_,\\n            minTranche_,\\n            maxTranche_\\n        );\\n\\n        transferToCommunity(ICommunity(communityAddress), minTranche_);\\n    }\\n\\n    /**\\n     * @notice Migrates a community by deploying a new contract.\\n     *\\n     * @param managers_ address of the community managers\\n     * @param previousCommunity_ address of the community to be migrated\\n     */\\n    function migrateCommunity(address[] memory managers_, ICommunity previousCommunity_)\\n        external\\n        override\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(\\n            communities[address(previousCommunity_)] != CommunityState.Migrated,\\n            \\\"CommunityAdmin::migrateCommunity: this community has been migrated\\\"\\n        );\\n\\n        communities[address(previousCommunity_)] = CommunityState.Migrated;\\n\\n        bool isCommunityNew = isCommunityNewType(previousCommunity_);\\n\\n        address newCommunityAddress;\\n        if (isCommunityNew) {\\n            newCommunityAddress = deployCommunity(\\n                managers_,\\n                previousCommunity_.claimAmount(),\\n                previousCommunity_.getInitialMaxClaim(),\\n                previousCommunity_.decreaseStep(),\\n                previousCommunity_.baseInterval(),\\n                previousCommunity_.incrementInterval(),\\n                previousCommunity_.minTranche(),\\n                previousCommunity_.maxTranche(),\\n                previousCommunity_\\n            );\\n        } else {\\n            newCommunityAddress = deployCommunity(\\n                managers_,\\n                previousCommunity_.claimAmount(),\\n                previousCommunity_.maxClaim(),\\n                1e16,\\n                (previousCommunity_.baseInterval() / 5),\\n                (previousCommunity_.incrementInterval() / 5),\\n                1e16,\\n                5e18,\\n                previousCommunity_\\n            );\\n        }\\n\\n        require(newCommunityAddress != address(0), \\\"CommunityAdmin::migrateCommunity: NOT_VALID\\\");\\n\\n        if (isCommunityNew) {\\n            uint256 balance = cUSD.balanceOf(address(previousCommunity_));\\n            previousCommunity_.transfer(cUSD, newCommunityAddress, balance);\\n        }\\n\\n        communities[newCommunityAddress] = CommunityState.Valid;\\n        communityList.add(newCommunityAddress);\\n\\n        emit CommunityMigrated(managers_, newCommunityAddress, address(previousCommunity_));\\n    }\\n\\n    /**\\n     * @notice Adds a new manager to a community\\n     *\\n     * @param community_ address of the community\\n     * @param account_ address to be added as community manager\\n     */\\n    function addManagerToCommunity(ICommunity community_, address account_)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        community_.addManager(account_);\\n    }\\n\\n    /**\\n     * @notice Removes an existing community. All community funds are transferred to the treasury\\n     *\\n     * @param community_ address of the community\\n     */\\n    function removeCommunity(ICommunity community_) external override onlyOwner nonReentrant {\\n        require(\\n            communities[address(community_)] == CommunityState.Valid,\\n            \\\"CommunityAdmin::removeCommunity: this isn't a valid community\\\"\\n        );\\n        communities[address(community_)] = CommunityState.Removed;\\n\\n        community_.transfer(cUSD, address(treasury), cUSD.balanceOf(address(community_)));\\n        emit CommunityRemoved(address(community_));\\n    }\\n\\n    /**\\n     * @dev Funds an existing community if it hasn't enough funds\\n     */\\n    function fundCommunity() external override onlyCommunities {\\n        ICommunity community = ICommunity(msg.sender);\\n        uint256 balance = cUSD.balanceOf(msg.sender);\\n        require(\\n            balance < community.minTranche(),\\n            \\\"CommunityAdmin::fundCommunity: this community has enough funds\\\"\\n        );\\n\\n        uint256 trancheAmount = calculateCommunityTrancheAmount(ICommunity(msg.sender));\\n\\n        if (trancheAmount > balance) {\\n            transferToCommunity(community, trancheAmount - balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers an amount of an ERC20 from this contract to an address\\n     *\\n     * @param token_ address of the ERC20 token\\n     * @param to_ address of the receiver\\n     * @param amount_ amount of the transaction\\n     */\\n    function transfer(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyOwner nonReentrant {\\n        token_.safeTransfer(to_, amount_);\\n\\n        emit TransferERC20(address(token_), to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Transfers an amount of an ERC20 from  community to an address\\n     *\\n     * @param community_ address of the community\\n     * @param token_ address of the ERC20 token\\n     * @param to_ address of the receiver\\n     * @param amount_ amount of the transaction\\n     */\\n    function transferFromCommunity(\\n        ICommunity community_,\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyOwner nonReentrant {\\n        community_.transfer(token_, to_, amount_);\\n    }\\n\\n    /** @notice Updates the beneficiary params of a community\\n     *\\n     * @param community_ address of the community\\n     * @param claimAmount_  base amount to be claim by the beneficiary\\n     * @param maxClaim_ limit that a beneficiary can claim  in total\\n     * @param decreaseStep_ value decreased from maxClaim each time a is beneficiary added\\n     * @param baseInterval_ base interval to start claiming\\n     * @param incrementInterval_ increment interval used in each claim\\n     */\\n    function updateBeneficiaryParams(\\n        ICommunity community_,\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 decreaseStep_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_\\n    ) external override onlyOwner {\\n        community_.updateBeneficiaryParams(\\n            claimAmount_,\\n            maxClaim_,\\n            decreaseStep_,\\n            baseInterval_,\\n            incrementInterval_\\n        );\\n    }\\n\\n    /** @notice Updates params of a community\\n     *\\n     * @param community_ address of the community\\n     * @param minTranche_ minimum amount that the community will receive when requesting funds\\n     * @param maxTranche_ maximum amount that the community will receive when requesting funds\\n     */\\n    function updateCommunityParams(\\n        ICommunity community_,\\n        uint256 minTranche_,\\n        uint256 maxTranche_\\n    ) external override onlyOwner {\\n        community_.updateCommunityParams(minTranche_, maxTranche_);\\n    }\\n\\n    /**\\n     * @notice Updates proxy implementation address of a community\\n     *\\n     * @param communityProxy_ address of the community\\n     * @param newCommunityTemplate_ address of new implementation contract\\n     */\\n    function updateProxyImplementation(address communityProxy_, address newCommunityTemplate_)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        communityProxyAdmin.upgrade(\\n            TransparentUpgradeableProxy(payable(communityProxy_)),\\n            newCommunityTemplate_\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers cUSDs from the treasury to a community\\n     *\\n     * @param community_ address of the community\\n     * @param amount_ amount of the transaction\\n     */\\n    function transferToCommunity(ICommunity community_, uint256 amount_) internal nonReentrant {\\n        treasury.transfer(cUSD, address(community_), amount_);\\n        community_.addTreasuryFunds(amount_);\\n\\n        emit CommunityFunded(address(community_), amount_);\\n    }\\n\\n    /**\\n     * @dev Internal implementation of deploying a new community\\n     *\\n     * @param managers_ addresses of the community managers\\n     * @param claimAmount_ base amount to be claim by the beneficiary\\n     * @param maxClaim_ limit that a beneficiary can claim at in total\\n     * @param decreaseStep_ value decreased from maxClaim for every beneficiary added\\n     * @param baseInterval_ base interval to start claiming\\n     * @param incrementInterval_ increment interval used in each claim\\n     * @param minTranche_ minimum amount that the community will receive when requesting funds\\n     * @param maxTranche_ maximum amount that the community will receive when requesting funds\\n     * @param previousCommunity_ address of the previous community. Used for migrating communities\\n     */\\n    function deployCommunity(\\n        address[] memory managers_,\\n        uint256 claimAmount_,\\n        uint256 maxClaim_,\\n        uint256 decreaseStep_,\\n        uint256 baseInterval_,\\n        uint256 incrementInterval_,\\n        uint256 minTranche_,\\n        uint256 maxTranche_,\\n        ICommunity previousCommunity_\\n    ) internal returns (address) {\\n        TransparentUpgradeableProxy community = new TransparentUpgradeableProxy(\\n            address(communityTemplate),\\n            address(communityProxyAdmin),\\n            abi.encodeWithSignature(\\n                \\\"initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)\\\",\\n                managers_,\\n                claimAmount_,\\n                maxClaim_,\\n                decreaseStep_,\\n                baseInterval_,\\n                incrementInterval_,\\n                minTranche_,\\n                maxTranche_,\\n                address(previousCommunity_)\\n            )\\n        );\\n\\n        return address(community);\\n    }\\n\\n    /** @dev Calculates the tranche amount of a community.\\n     *        Enforces the tranche amount to be between community minTranche and maxTranche\\n     * @param community_ address of the community\\n     * @return uint256 the value of the tranche amount\\n     */\\n    function calculateCommunityTrancheAmount(ICommunity community_)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 validBeneficiaries = community_.validBeneficiaryCount();\\n        uint256 claimAmount = community_.claimAmount();\\n        uint256 treasuryFunds = community_.treasuryFunds();\\n        uint256 privateFunds = community_.privateFunds();\\n        uint256 minTranche = community_.minTranche();\\n        uint256 maxTranche = community_.maxTranche();\\n\\n        // `treasuryFunds` can't be zero.\\n        // Otherwise, migrated communities will have zero.\\n        treasuryFunds = treasuryFunds > 0 ? treasuryFunds : 1e18;\\n\\n        uint256 trancheAmount = (validBeneficiaries *\\n            claimAmount *\\n            (treasuryFunds + privateFunds)) / treasuryFunds;\\n\\n        if (trancheAmount < minTranche) {\\n            trancheAmount = minTranche;\\n        } else if (trancheAmount > maxTranche) {\\n            trancheAmount = maxTranche;\\n        }\\n\\n        return trancheAmount;\\n    }\\n\\n    /**\\n     * @notice Checks if a community is deployed with the new type of smart contract\\n     *\\n     * @param community_ address of the community\\n     * @return bool true if the community is deployed with the new type of smart contract\\n     */\\n    function isCommunityNewType(ICommunity community_) internal view returns (bool) {\\n        return community_.impactMarketAddress() == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xaf0dd69268491b4bd31545bdf7c11fda53481c62f2223e9710a6992712227762\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/CommunityAdminStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\nimport \\\"../../token/interfaces/ITreasury.sol\\\";\\n\\n/**\\n * @title Storage for CommunityAdmin\\n * @notice For future upgrades, do not change CommunityAdminStorageV1. Create a new\\n * contract which implements CommunityAdminStorageV1 and following the naming convention\\n * CommunityAdminStorageVX.\\n */\\nabstract contract CommunityAdminStorageV1 is ICommunityAdmin {\\n    IERC20 public override cUSD;\\n    ITreasury public override treasury;\\n    ICommunity public override communityTemplate;\\n    ProxyAdmin public override communityProxyAdmin;\\n\\n    mapping(address => CommunityState) public override communities;\\n    EnumerableSet.AddressSet internal communityList;\\n}\\n\",\"keccak256\":\"0xd39287abe55ea9ca27a9d9580bccb124c8ebe898b9f34da4a9d1f648fe2f1b5e\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/CommunityStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\n/**\\n * @title Storage for Community\\n * @notice For future upgrades, do not change CommunityStorageV1. Create a new\\n * contract which implements CommunityStorageV1 and following the naming convention\\n * CommunityStorageVX.\\n */\\nabstract contract CommunityStorageV1 is ICommunity {\\n    bool public override locked;\\n    uint256 public override claimAmount;\\n    uint256 public override baseInterval;\\n    uint256 public override incrementInterval;\\n    uint256 public override maxClaim;\\n    uint256 public override validBeneficiaryCount;\\n    uint256 public override treasuryFunds;\\n    uint256 public override privateFunds;\\n    uint256 public override decreaseStep;\\n    uint256 public override minTranche;\\n    uint256 public override maxTranche;\\n\\n    ICommunity public override previousCommunity;\\n    ICommunityAdmin public override communityAdmin;\\n\\n    mapping(address => Beneficiary) public override beneficiaries;\\n    EnumerableSet.AddressSet internal beneficiaryList;\\n}\\n\",\"keccak256\":\"0xf33a4d45fa88b3efd902ecf1c97ff175daf57a10e6e10148f116e5a1eda17098\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of cUSD received\\n        uint256 lastClaim;       //block number of the last claim\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 index) external view returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function impactMarketAddress() external pure returns (address);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n\\n    function updateCommunityAdmin(ICommunityAdmin communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 claimAmount,\\n        uint256 maxClaim,\\n        uint256 decreaseStep,\\n        uint256 baseInterval,\\n        uint256 incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 minTranche,\\n        uint256 maxTranche\\n    ) external;\\n    function donate(address sender, uint256 amount) external;\\n    function addTreasuryFunds(uint256 amount) external;\\n    function transfer(IERC20 token, address to, uint256 amount) external;\\n    function addManager(address managerAddress) external;\\n    function removeManager(address managerAddress) external;\\n    function addBeneficiary(address beneficiaryAddress) external;\\n    function lockBeneficiary(address beneficiaryAddress) external;\\n    function unlockBeneficiary(address beneficiaryAddress) external;\\n    function removeBeneficiary(address beneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated() external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaac362f625c34b879d94c4fb354bcce01dc866212068c4db6910fda8e85fa573\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../token/interfaces/ITreasury.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function communities(address community) external view returns(CommunityState);\\n    function communityTemplate() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n\\n    function updateTreasury(ITreasury newTreasury) external;\\n    function updateCommunityTemplate(ICommunity communityTemplate_) external;\\n    function updateBeneficiaryParams(\\n        ICommunity community,\\n        uint256 claimAmount,\\n        uint256 maxClaim,\\n        uint256 decreaseStep,\\n        uint256 baseInterval,\\n        uint256 incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity community,\\n        uint256 minTranche,\\n        uint256 maxTranche\\n    ) external;\\n    function updateProxyImplementation(address communityProxy, address newLogic) external;\\n    function addCommunity(\\n        address[] memory managers,\\n        uint256 claimAmount,\\n        uint256 maxClaim,\\n        uint256 decreaseStep,\\n        uint256 baseInterval,\\n        uint256 incrementInterval,\\n        uint256 minTranche,\\n        uint256 maxTranche\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory managers,\\n        ICommunity previousCommunity\\n    ) external;\\n    function addManagerToCommunity(ICommunity community_, address account_) external;\\n    function removeCommunity(ICommunity community) external;\\n    function fundCommunity() external;\\n    function transfer(IERC20 token, address to, uint256 amount) external;\\n    function transferFromCommunity(ICommunity community, IERC20 token, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xaf06d43e91563f549febc678d8535ed59acbab146f4a9cce3fc4d696cb258a35\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityOld.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface ICommunityOld {\\n    function cooldown(address account) external returns(uint256);\\n    function lastInterval(address account) external returns(uint256);\\n    function claimed(address account) external returns(uint256);\\n    function beneficiaries(address account) external returns(uint256);\\n    function claimAmount() external returns(uint256);\\n    function baseInterval() external returns(uint256);\\n    function incrementInterval() external returns(uint256);\\n    function maxClaim() external returns(uint256);\\n    function previousCommunityContract() external returns(address);\\n    function impactMarketAddress() external returns(address);\\n    function cUSDAddress() external returns(address);\\n    function locked() external returns(bool);\\n    function addManager(address account) external;\\n    function removeManager(address account) external;\\n    function addBeneficiary(address account) external;\\n    function lockBeneficiary(address account) external;\\n    function unlockBeneficiary(address account) external;\\n    function removeBeneficiary(address account) external;\\n    function claim() external;\\n    function edit(uint256 claimAmount, uint256 maxClaim, uint256 baseInterval, uint256 incrementInterval) external;\\n    function lock() external;\\n    function unlock() external;\\n    function migrateFunds(address newCommunity, address newCommunityManager) external;\\n}\\n\",\"keccak256\":\"0x1491a863c6b60c1713ea33bfaab2ef51f58df3d2195c4e07863de3b9390acf17\",\"license\":\"Apache-2.0\"},\"contracts/token/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\n\\ninterface ITreasury {\\n    function getVersion() external returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function updateCommunityAdmin(ICommunityAdmin communityAdmin) external;\\n    function transfer(IERC20 token, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x37f9c0a082204ecfef399117b6c3702f9273a36e24bfc519386f56791842c32c\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001755760003560e01c806371582c0311620000d3578063926345401162000086578063926345401462000328578063a4937c51146200033f578063add9b3801462000356578063beabacc8146200036a578063f00d09641462000381578063f2fde38b146200038b57600080fd5b806371582c0314620002855780637f2813d2146200029c5780637f51bb1f14620002d157806381449efe14620002e85780638da5cb5b14620002ff5780638e2d90db146200031157600080fd5b80631fccf672116200012c5780631fccf672146200020e578063372a8f4d146200022257806339f539a21462000239578063485cc955146200025057806361d027b31462000267578063715018a6146200027b57600080fd5b8063016a0416146200017a578063082f3cac14620001ab5780630be826c314620001c45780630d8e6e2c14620001db578063174a71d714620001ed5780631d2c935914620001f7575b600080fd5b609a546200018e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001c2620001bc36600462002781565b620003a2565b005b620001c2620001d5366004620026e0565b62000458565b60015b604051908152602001620001a2565b620001c2620004e7565b620001c262000208366004620026f3565b62000711565b6097546200018e906001600160a01b031681565b6200018e6200023336600462002814565b620007da565b620001c26200024a366004620025bd565b620007ef565b620001c262000261366004620026e0565b62000857565b6098546200018e906001600160a01b031681565b620001c26200095a565b620001c2620002963660046200257f565b62000995565b620002c2620002ad3660046200257f565b609b6020526000908152604090205460ff1681565b604051620001a29190620029f3565b620001c2620002e23660046200257f565b62000a14565b620001c2620002f93660046200274a565b62000a93565b6033546001600160a01b03166200018e565b620001c262000322366004620025fa565b62000b28565b620001c2620003393660046200257f565b620013c4565b620001c26200035036600462002645565b6200160b565b6099546200018e906001600160a01b031681565b620001c26200037b366004620027cf565b62001751565b620001de62001817565b620001c26200039c3660046200257f565b6200182a565b6033546001600160a01b03163314620003d85760405162461bcd60e51b8152600401620003cf9062002a7f565b60405180910390fd5b604051632fd7910360e01b815260048101869052602481018590526044810184905260648101839052608481018290526001600160a01b03871690632fd791039060a401600060405180830381600087803b1580156200043757600080fd5b505af11580156200044c573d6000803e3d6000fd5b50505050505050505050565b6033546001600160a01b03163314620004855760405162461bcd60e51b8152600401620003cf9062002a7f565b6040516316830bbd60e11b81526001600160a01b038281166004830152831690632d06177a906024015b600060405180830381600087803b158015620004ca57600080fd5b505af1158015620004df573d6000803e3d6000fd5b505050505050565b6001336000908152609b602052604090205460ff1660038111156200051c57634e487b7160e01b600052602160045260246000fd5b146200056b5760405162461bcd60e51b815260206004820152601d60248201527f436f6d6d756e69747941646d696e3a204e4f545f434f4d4d554e4954590000006044820152606401620003cf565b6097546040516370a0823160e01b81523360048201819052916000916001600160a01b03909116906370a082319060240160206040518083038186803b158015620005b557600080fd5b505afa158015620005ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f091906200282d565b9050816001600160a01b031663dd4414bb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062c57600080fd5b505afa15801562000641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200066791906200282d565b8110620006dd5760405162461bcd60e51b815260206004820152603e60248201527f436f6d6d756e69747941646d696e3a3a66756e64436f6d6d756e6974793a207460448201527f68697320636f6d6d756e6974792068617320656e6f7567682066756e647300006064820152608401620003cf565b6000620006ea33620018cc565b9050818111156200070c576200070c8362000706848462002b49565b62001c1d565b505050565b6033546001600160a01b031633146200073e5760405162461bcd60e51b8152600401620003cf9062002a7f565b60026065541415620007645760405162461bcd60e51b8152600401620003cf9062002ab4565b60026065556040516317d5759960e31b81526001600160a01b0385169063beabacc8906200079b90869086908690600401620029cf565b600060405180830381600087803b158015620007b657600080fd5b505af1158015620007cb573d6000803e3d6000fd5b50506001606555505050505050565b6000620007e9609c8362001d5f565b92915050565b6033546001600160a01b031633146200081c5760405162461bcd60e51b8152600401620003cf9062002a7f565b609a5460405163266a23b160e21b81526001600160a01b0384811660048301528381166024830152909116906399a88ec490604401620004af565b600054610100900460ff168062000871575060005460ff16155b620008905760405162461bcd60e51b8152600401620003cf9062002a31565b600054610100900460ff16158015620008b3576000805461ffff19166101011790555b620008bd62001d74565b620008c762001df9565b609980546001600160a01b038086166001600160a01b03199283161790925560978054928516929091169190911790556040516200090590620024a0565b604051809103906000f08015801562000922573d6000803e3d6000fd5b50609a80546001600160a01b0319166001600160a01b039290921691909117905580156200070c576000805461ff0019169055505050565b6033546001600160a01b03163314620009875760405162461bcd60e51b8152600401620003cf9062002a7f565b62000993600062001e5f565b565b6033546001600160a01b03163314620009c25760405162461bcd60e51b8152600401620003cf9062002a7f565b609980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe86060109e6eea418a51a5ed2ba7e250e72fcff0b9387082351310b5df38359890600090a35050565b6033546001600160a01b0316331462000a415760405162461bcd60e51b8152600401620003cf9062002a7f565b609880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a90600090a35050565b6033546001600160a01b0316331462000ac05760405162461bcd60e51b8152600401620003cf9062002a7f565b604051630644b36d60e21b815260048101839052602481018290526001600160a01b03841690631912cdb490604401600060405180830381600087803b15801562000b0a57600080fd5b505af115801562000b1f573d6000803e3d6000fd5b50505050505050565b6033546001600160a01b0316331462000b555760405162461bcd60e51b8152600401620003cf9062002a7f565b6002606554141562000b7b5760405162461bcd60e51b8152600401620003cf9062002ab4565b600260655560036001600160a01b0382166000908152609b602052604090205460ff16600381111562000bbe57634e487b7160e01b600052602160045260246000fd5b141562000c3f5760405162461bcd60e51b815260206004820152604260248201527f436f6d6d756e69747941646d696e3a3a6d696772617465436f6d6d756e69747960448201527f3a207468697320636f6d6d756e69747920686173206265656e206d6967726174606482015261195960f21b608482015260a401620003cf565b6001600160a01b0381166000908152609b60205260408120805460ff1916600317905562000c6d8262001eb1565b90506000811562000fbf5762000fb784846001600160a01b031663830953ab6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cb757600080fd5b505afa15801562000ccc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cf291906200282d565b856001600160a01b03166378ba280f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000d2c57600080fd5b505afa15801562000d41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d6791906200282d565b866001600160a01b031663c51fab3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000da157600080fd5b505afa15801562000db6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ddc91906200282d565b876001600160a01b0316630e5b7c536040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e1657600080fd5b505afa15801562000e2b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5191906200282d565b886001600160a01b031663597be18b6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e8b57600080fd5b505afa15801562000ea0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec691906200282d565b896001600160a01b031663dd4414bb6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f0057600080fd5b505afa15801562000f15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f3b91906200282d565b8a6001600160a01b0316632b2711176040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f7557600080fd5b505afa15801562000f8a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fb091906200282d565b8b62001f42565b9050620011d7565b620011d484846001600160a01b031663830953ab6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ffe57600080fd5b505afa15801562001013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200103991906200282d565b856001600160a01b031663d4938db36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200107357600080fd5b505afa15801562001088573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010ae91906200282d565b662386f26fc100006005886001600160a01b0316630e5b7c536040518163ffffffff1660e01b815260040160206040518083038186803b158015620010f257600080fd5b505afa15801562001107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200112d91906200282d565b62001139919062002b06565b6005896001600160a01b031663597be18b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200117557600080fd5b505afa1580156200118a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011b091906200282d565b620011bc919062002b06565b662386f26fc10000674563918244f400008b62001f42565b90505b6001600160a01b038116620012435760405162461bcd60e51b815260206004820152602b60248201527f436f6d6d756e69747941646d696e3a3a6d696772617465436f6d6d756e69747960448201526a0e881393d517d59053125160aa1b6064820152608401620003cf565b81156200133b576097546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b1580156200129157600080fd5b505afa158015620012a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012cc91906200282d565b6097546040516317d5759960e31b81529192506001600160a01b038087169263beabacc8926200130592169086908690600401620029cf565b600060405180830381600087803b1580156200132057600080fd5b505af115801562001335573d6000803e3d6000fd5b50505050505b6001600160a01b0381166000908152609b60205260409020805460ff191660011790556200136b609c8262001ff0565b50826001600160a01b0316816001600160a01b03167f1c73dbd6259eae88a71a197a742361367d2811051b3de2b22953065b876247af86604051620013b191906200290e565b60405180910390a3505060016065555050565b6033546001600160a01b03163314620013f15760405162461bcd60e51b8152600401620003cf9062002a7f565b60026065541415620014175760405162461bcd60e51b8152600401620003cf9062002ab4565b600260655560016001600160a01b0382166000908152609b602052604090205460ff1660038111156200145a57634e487b7160e01b600052602160045260246000fd5b14620014cf5760405162461bcd60e51b815260206004820152603d60248201527f436f6d6d756e69747941646d696e3a3a72656d6f7665436f6d6d756e6974793a60448201527f20746869732069736e277420612076616c696420636f6d6d756e6974790000006064820152608401620003cf565b6001600160a01b038181166000818152609b602052604090819020805460ff1916600217905560975460985491516370a0823160e01b815260048101849052929363beabacc89391811692169082906370a082319060240160206040518083038186803b1580156200154057600080fd5b505afa15801562001555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200157b91906200282d565b6040518463ffffffff1660e01b81526004016200159b93929190620029cf565b600060405180830381600087803b158015620015b657600080fd5b505af1158015620015cb573d6000803e3d6000fd5b50506040516001600160a01b03841692507fa285b77d62d36ec6881b2cbc019c53874eb061798176f3577f2beab0848d16c69150600090a2506001606555565b6033546001600160a01b03163314620016385760405162461bcd60e51b8152600401620003cf9062002a7f565b60006200164e8989898989898989600062001f42565b90506001600160a01b038116620016b85760405162461bcd60e51b815260206004820152602760248201527f436f6d6d756e69747941646d696e3a3a616464436f6d6d756e6974793a204e4f6044820152661517d59053125160ca1b6064820152608401620003cf565b6001600160a01b0381166000908152609b60205260409020805460ff19166001179055620016e8609c8262001ff0565b50806001600160a01b03167fd975f7d7350dc54e14ea0400bad2e29483d76cb8810f36f1f520d5c44c1dcf028a8a8a8a8a8a8a8a6040516200173298979695949392919062002923565b60405180910390a262001746818462001c1d565b505050505050505050565b6033546001600160a01b031633146200177e5760405162461bcd60e51b8152600401620003cf9062002a7f565b60026065541415620017a45760405162461bcd60e51b8152600401620003cf9062002ab4565b6002606555620017bf6001600160a01b038416838362002007565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a8956836040516200180591815260200190565b60405180910390a35050600160655550565b600062001825609c6200205b565b905090565b6033546001600160a01b03163314620018575760405162461bcd60e51b8152600401620003cf9062002a7f565b6001600160a01b038116620018be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003cf565b620018c98162001e5f565b50565b600080826001600160a01b031663431a801a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200190957600080fd5b505afa1580156200191e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200194491906200282d565b90506000836001600160a01b031663830953ab6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200198257600080fd5b505afa15801562001997573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019bd91906200282d565b90506000846001600160a01b0316639c01a4016040518163ffffffff1660e01b815260040160206040518083038186803b158015620019fb57600080fd5b505afa15801562001a10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a3691906200282d565b90506000856001600160a01b031663d6dbd9726040518163ffffffff1660e01b815260040160206040518083038186803b15801562001a7457600080fd5b505afa15801562001a89573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001aaf91906200282d565b90506000866001600160a01b031663dd4414bb6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001aed57600080fd5b505afa15801562001b02573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b2891906200282d565b90506000876001600160a01b0316632b2711176040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b6657600080fd5b505afa15801562001b7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ba191906200282d565b90506000841162001bbb57670de0b6b3a764000062001bbd565b835b935060008462001bce858262002aeb565b62001bda888a62002b27565b62001be6919062002b27565b62001bf2919062002b06565b90508281101562001c0557508162001c11565b8181111562001c115750805b98975050505050505050565b6002606554141562001c435760405162461bcd60e51b8152600401620003cf9062002ab4565b60026065556098546097546040516317d5759960e31b81526001600160a01b039283169263beabacc89262001c829291169086908690600401620029cf565b600060405180830381600087803b15801562001c9d57600080fd5b505af115801562001cb2573d6000803e3d6000fd5b5050604051635c04f74160e11b8152600481018490526001600160a01b038516925063b809ee829150602401600060405180830381600087803b15801562001cf957600080fd5b505af115801562001d0e573d6000803e3d6000fd5b50505050816001600160a01b03167f1e951788684f9b9e5c219261ce05daaa0f58ead974c796e6311b1da4c8657af18260405162001d4e91815260200190565b60405180910390a250506001606555565b600062001d6d838362002066565b9392505050565b600054610100900460ff168062001d8e575060005460ff16155b62001dad5760405162461bcd60e51b8152600401620003cf9062002a31565b600054610100900460ff1615801562001dd0576000805461ffff19166101011790555b62001dda6200209f565b62001de46200210f565b8015620018c9576000805461ff001916905550565b600054610100900460ff168062001e13575060005460ff16155b62001e325760405162461bcd60e51b8152600401620003cf9062002a31565b600054610100900460ff1615801562001e55576000805461ffff19166101011790555b62001de462002176565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806001600160a01b0316826001600160a01b031663c041fdc56040518163ffffffff1660e01b815260040160206040518083038186803b15801562001ef757600080fd5b505afa15801562001f0c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f3291906200259e565b6001600160a01b03161492915050565b609954609a5460405160009283926001600160a01b039182169291169062001f7f908e908e908e908e908e908e908e908e908e9060240162002970565b60408051601f198184030181529181526020820180516001600160e01b03166308278d4960e41b1790525162001fb590620024ae565b62001fc393929190620028d7565b604051809103906000f08015801562001fe0573d6000803e3d6000fd5b509b9a5050505050505050505050565b600062001d6d836001600160a01b038416620021ec565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526200070c9084906200223e565b6000620007e9825490565b60008260000182815481106200208c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600054610100900460ff1680620020b9575060005460ff16155b620020d85760405162461bcd60e51b8152600401620003cf9062002a31565b600054610100900460ff1615801562001de4576000805461ffff19166101011790558015620018c9576000805461ff001916905550565b600054610100900460ff168062002129575060005460ff16155b620021485760405162461bcd60e51b8152600401620003cf9062002a31565b600054610100900460ff161580156200216b576000805461ffff19166101011790555b62001de43362001e5f565b600054610100900460ff168062002190575060005460ff16155b620021af5760405162461bcd60e51b8152600401620003cf9062002a31565b600054610100900460ff16158015620021d2576000805461ffff19166101011790555b60016065558015620018c9576000805461ff001916905550565b60008181526001830160205260408120546200223557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620007e9565b506000620007e9565b600062002295826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620023179092919063ffffffff16565b8051909150156200070c5780806020019051810190620022b69190620026be565b6200070c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620003cf565b606062002328848460008562002330565b949350505050565b606082471015620023935760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620003cf565b843b620023e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620003cf565b600080866001600160a01b03168587604051620024019190620028b9565b60006040518083038185875af1925050503d806000811462002440576040519150601f19603f3d011682016040523d82523d6000602084013e62002445565b606091505b50915091506200245782828662002462565b979650505050505050565b606083156200247357508162001d6d565b825115620024845782518084602001fd5b8160405162461bcd60e51b8152600401620003cf919062002a1c565b6107978062002bd983390190565b610f2f806200337083390190565b8035620024c98162002bc2565b919050565b600082601f830112620024df578081fd5b8135602067ffffffffffffffff80831115620024ff57620024ff62002bac565b8260051b604051601f19603f8301168101818110848211171562002527576200252762002bac565b6040528481528381019250868401828801850189101562002546578687fd5b8692505b8583101562002573576200255e81620024bc565b8452928401926001929092019184016200254a565b50979650505050505050565b60006020828403121562002591578081fd5b813562001d6d8162002bc2565b600060208284031215620025b0578081fd5b815162001d6d8162002bc2565b60008060408385031215620025d0578081fd5b8235620025dd8162002bc2565b91506020830135620025ef8162002bc2565b809150509250929050565b600080604083850312156200260d578182fd5b823567ffffffffffffffff81111562002624578283fd5b6200263285828601620024ce565b9250506020830135620025ef8162002bc2565b600080600080600080600080610100898b03121562002662578384fd5b883567ffffffffffffffff81111562002679578485fd5b620026878b828c01620024ce565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e0013595509350505050565b600060208284031215620026d0578081fd5b8151801515811462001d6d578182fd5b60008060408385031215620025d0578182fd5b6000806000806080858703121562002709578384fd5b8435620027168162002bc2565b93506020850135620027288162002bc2565b925060408501356200273a8162002bc2565b9396929550929360600135925050565b6000806000606084860312156200275f578283fd5b83356200276c8162002bc2565b95602085013595506040909401359392505050565b60008060008060008060c087890312156200279a578182fd5b8635620027a78162002bc2565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b600080600060608486031215620027e4578081fd5b8335620027f18162002bc2565b92506020840135620028038162002bc2565b929592945050506040919091013590565b60006020828403121562002826578081fd5b5035919050565b6000602082840312156200283f578081fd5b5051919050565b6000815180845260208085019450808401835b83811015620028805781516001600160a01b03168752958201959082019060010162002859565b509495945050505050565b60008151808452620028a581602086016020860162002b63565b601f01601f19169290920160200192915050565b60008251620028cd81846020870162002b63565b9190910192915050565b6001600160a01b0384811682528316602082015260606040820181905260009062002905908301846200288b565b95945050505050565b60208152600062001d6d602083018462002846565b6000610100808352620029398184018c62002846565b602084019a909a52505060408101969096526060860194909452608085019290925260a084015260c083015260e090910152919050565b6000610120808352620029868184018d62002846565b602084019b909b52505060408101979097526060870195909552608086019390935260a085019190915260c084015260e08301526001600160a01b031661010090910152919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602081016004831062002a1657634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600062001d6d60208301846200288b565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111562002b015762002b0162002b96565b500190565b60008262002b2257634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161562002b445762002b4462002b96565b500290565b60008282101562002b5e5762002b5e62002b96565b500390565b60005b8381101562002b8057818101518382015260200162002b66565b8381111562002b90576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620018c957600080fdfe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107198061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b3660046104d8565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610517565b610254565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461054f565b6102de565b34801561013057600080fd5b506100d161013f366004610517565b61036f565b34801561015057600080fd5b506100d161015f3660046104d8565b6103c7565b34801561017057600080fd5b506100a061017f3660046104d8565b610462565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d91906104fb565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610683565b60405180910390fd5b6102526000610488565b565b6000546001600160a01b0316331461027e5760405162461bcd60e51b815260040161023f90610683565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102c257600080fd5b505af11580156102d6573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103085760405162461bcd60e51b815260040161023f90610683565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906103389086908690600401610620565b6000604051808303818588803b15801561035157600080fd5b505af1158015610365573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103995760405162461bcd60e51b815260040161023f90610683565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102a8565b6000546001600160a01b031633146103f15760405162461bcd60e51b815260040161023f90610683565b6001600160a01b0381166104565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b61045f81610488565b50565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104e9578081fd5b81356104f4816106ce565b9392505050565b60006020828403121561050c578081fd5b81516104f4816106ce565b60008060408385031215610529578081fd5b8235610534816106ce565b91506020830135610544816106ce565b809150509250929050565b600080600060608486031215610563578081fd5b833561056e816106ce565b9250602084013561057e816106ce565b9150604084013567ffffffffffffffff8082111561059a578283fd5b818601915086601f8301126105ad578283fd5b8135818111156105bf576105bf6106b8565b604051601f8201601f19908116603f011681019083821181831017156105e7576105e76106b8565b816040528281528960208487010111156105ff578586fd5b82602086016020830137856020848301015280955050505050509250925092565b60018060a01b0383168152600060206040818401528351806040850152825b8181101561065b5785810183015185820160600152820161063f565b8181111561066c5783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461045f57600080fdfea26469706673582212205f4d7f691c4a3b94f3266c05a262cf24cf73442ba70a05b265157ced258fcdcc64736f6c63430008040033608060405260405162000f2f38038062000f2f8339810160408190526200002691620004da565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd62000609565b60008051602062000ee8833981519152146200008157634e487b7160e01b600052600160045260246000fd5b6200008f82826000620000ff565b50620000bf905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000609565b60008051602062000ec883398151915214620000eb57634e487b7160e01b600052600160045260246000fd5b620000f6826200013c565b50505062000672565b6200010a8362000197565b600082511180620001185750805b156200013757620001358383620001d960201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200016762000208565b604080516001600160a01b03928316815291841660208301520160405180910390a1620001948162000241565b50565b620001a281620002f6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606062000201838360405180606001604052806027815260200162000f086027913962000399565b9392505050565b60006200023260008051602062000ec883398151915260001b6200047660201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002ac5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002d560008051602062000ec883398151915260001b6200047660201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200030c816200047960201b6200028c1760201c565b620003705760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620002a3565b80620002d560008051602062000ee883398151915260001b6200047660201b620002081760201c565b6060833b620003fa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620002a3565b600080856001600160a01b031685604051620004179190620005b6565b600060405180830381855af49150503d806000811462000454576040519150601f19603f3d011682016040523d82523d6000602084013e62000459565b606091505b5090925090506200046c8282866200047f565b9695505050505050565b90565b3b151590565b606083156200049057508162000201565b825115620004a15782518084602001fd5b8160405162461bcd60e51b8152600401620002a39190620005d4565b80516001600160a01b0381168114620004d557600080fd5b919050565b600080600060608486031215620004ef578283fd5b620004fa84620004bd565b92506200050a60208501620004bd565b60408501519092506001600160401b038082111562000527578283fd5b818601915086601f8301126200053b578283fd5b8151818111156200055057620005506200065c565b604051601f8201601f19908116603f011681019083821181831017156200057b576200057b6200065c565b8160405282815289602084870101111562000594578586fd5b620005a78360208301602088016200062d565b80955050505050509250925092565b60008251620005ca8184602087016200062d565b9190910192915050565b6020815260008251806020840152620005f58160408501602087016200062d565b601f01601f19169190910160400192915050565b6000828210156200062857634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156200064a57818101518382015260200162000630565b83811115620001355750506000910152565b634e487b7160e01b600052604160045260246000fd5b61084680620006826000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106d6565b610118565b61005b6100933660046106f0565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106d6565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610392565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610392915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103bd565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107ea60279139610411565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104e5565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039b8361050d565b6000825111806103a85750805b156101c3576103b78383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e661035f565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161054d565b6060833b6104705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b03168560405161048b919061076e565b600060405180830381855af49150503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b50915091506104db8282866105f6565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610383565b6105168161062f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105b25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610605575081610285565b8251156106155782518084602001fd5b8160405162461bcd60e51b8152600401610328919061078a565b803b6106935760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105d5565b80356001600160a01b03811681146106d157600080fd5b919050565b6000602082840312156106e7578081fd5b610285826106ba565b600080600060408486031215610704578182fd5b61070d846106ba565b9250602084013567ffffffffffffffff80821115610729578384fd5b818601915086601f83011261073c578384fd5b81358181111561074a578485fd5b87602082850101111561075b578485fd5b6020830194508093505050509250925092565b600082516107808184602087016107bd565b9190910192915050565b60208152600082518060208401526107a98160408501602087016107bd565b601f01601f19169190910160400192915050565b60005b838110156107d85781810151838201526020016107c0565b838111156103b7575050600091015256fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a838bd4a71878fccbb77b8ac881f33b9ecf6757b4dfaca998931362c4501c4dc64736f6c63430008040033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122072a9f82600c4af236fa4b95e8778e81a9301e41546ac4dc5afd4c3d313a2799664736f6c63430008040033",
  "devdoc": {
    "events": {
      "CommunityAdded(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "baseInterval": "Value of the baseInterval",
          "claimAmount": "Value of the claimAmount",
          "communityAddress": "Address of the community that has been added",
          "decreaseStep": "Value of the decreaseStep",
          "incrementInterval": "Value of the incrementInterval",
          "managers": "Addresses of the initial managers",
          "maxClaim": "Value of the maxClaim",
          "maxTranche": "Value of the maxTranche For further information regarding each parameter, see *Community* smart contract initialize method.",
          "minTranche": "Value of the minTranche"
        }
      },
      "CommunityFunded(address,uint256)": {
        "params": {
          "amount": "Amount of the funding",
          "community": "Address of the community"
        }
      },
      "CommunityMigrated(address[],address,address)": {
        "params": {
          "communityAddress": "New community address",
          "managers": "Addresses of the new community's initial managers",
          "previousCommunityAddress": "Old community address"
        }
      },
      "CommunityRemoved(address)": {
        "params": {
          "communityAddress": "Address of the community that has been removed"
        }
      },
      "CommunityTemplateUpdated(address,address)": {
        "params": {
          "newCommunityTemplate": "New communityTemplate address",
          "oldCommunityTemplate": "Old communityTemplate address"
        }
      },
      "TransferERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount of the transaction",
          "to": "Address of the receiver",
          "token": "ERC20 token address"
        }
      },
      "TreasuryUpdated(address,address)": {
        "params": {
          "newTreasury": "New treasury address",
          "oldTreasury": "Old treasury address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addCommunity(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "baseInterval_": "base interval to start claiming",
          "claimAmount_": "base amount to be claim by the beneficiary",
          "decreaseStep_": "value decreased from maxClaim for every beneficiary added",
          "incrementInterval_": "increment interval used in each claim",
          "managers_": "addresses of the community managers",
          "maxClaim_": "limit that a beneficiary can claim at in total",
          "maxTranche_": "maximum amount that the community will receive when requesting funds",
          "minTranche_": "minimum amount that the community will receive when requesting funds"
        }
      },
      "addManagerToCommunity(address,address)": {
        "params": {
          "account_": "address to be added as community manager",
          "community_": "address of the community"
        }
      },
      "communityListAt(uint256)": {
        "params": {
          "index": "index of the community"
        },
        "returns": {
          "_0": "address of the community"
        }
      },
      "communityListLength()": {
        "returns": {
          "_0": "uint256 number of communities"
        }
      },
      "fundCommunity()": {
        "details": "Funds an existing community if it hasn't enough funds"
      },
      "initialize(address,address)": {
        "params": {
          "cUSD_": "Address of the cUSD token",
          "communityTemplate_": "Address of the Community implementation                              used for deploying new communities"
        }
      },
      "migrateCommunity(address[],address)": {
        "params": {
          "managers_": "address of the community managers",
          "previousCommunity_": "address of the community to be migrated"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeCommunity(address)": {
        "params": {
          "community_": "address of the community"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount_": "amount of the transaction",
          "to_": "address of the receiver",
          "token_": "address of the ERC20 token"
        }
      },
      "transferFromCommunity(address,address,address,uint256)": {
        "params": {
          "amount_": "amount of the transaction",
          "community_": "address of the community",
          "to_": "address of the receiver",
          "token_": "address of the ERC20 token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBeneficiaryParams(address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "baseInterval_": "base interval to start claiming",
          "claimAmount_": "base amount to be claim by the beneficiary",
          "community_": "address of the community",
          "decreaseStep_": "value decreased from maxClaim each time a is beneficiary added",
          "incrementInterval_": "increment interval used in each claim",
          "maxClaim_": "limit that a beneficiary can claim  in total"
        }
      },
      "updateCommunityParams(address,uint256,uint256)": {
        "params": {
          "community_": "address of the community",
          "maxTranche_": "maximum amount that the community will receive when requesting funds",
          "minTranche_": "minimum amount that the community will receive when requesting funds"
        }
      },
      "updateCommunityTemplate(address)": {
        "params": {
          "newCommunityTemplate_": "address of the new communityTemplate contract"
        }
      },
      "updateProxyImplementation(address,address)": {
        "params": {
          "communityProxy_": "address of the community",
          "newCommunityTemplate_": "address of new implementation contract"
        }
      },
      "updateTreasury(address)": {
        "params": {
          "newTreasury_": "address of the new treasury contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CommunityAdded(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Triggered when a community has been added"
      },
      "CommunityFunded(address,uint256)": {
        "notice": "Triggered when a community has been funded"
      },
      "CommunityMigrated(address[],address,address)": {
        "notice": "Triggered when a community has been migrated"
      },
      "CommunityRemoved(address)": {
        "notice": "Triggered when a community has been removed"
      },
      "CommunityTemplateUpdated(address,address)": {
        "notice": "Triggered when the communityTemplate address has been updated"
      },
      "TransferERC20(address,address,uint256)": {
        "notice": "Triggered when an amount of an ERC20 has been transferred from this contract to an address"
      },
      "TreasuryUpdated(address,address)": {
        "notice": "Triggered when the treasury address has been updated"
      }
    },
    "kind": "user",
    "methods": {
      "addCommunity(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Adds a new community"
      },
      "addManagerToCommunity(address,address)": {
        "notice": "Adds a new manager to a community"
      },
      "communityListAt(uint256)": {
        "notice": "Returns the address of a community from communityList"
      },
      "communityListLength()": {
        "notice": "Returns the number of communities"
      },
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "initialize(address,address)": {
        "notice": "Used to initialize a new CommunityAdmin contract"
      },
      "migrateCommunity(address[],address)": {
        "notice": "Migrates a community by deploying a new contract."
      },
      "removeCommunity(address)": {
        "notice": "Removes an existing community. All community funds are transferred to the treasury"
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfers an amount of an ERC20 from this contract to an address"
      },
      "transferFromCommunity(address,address,address,uint256)": {
        "notice": "Transfers an amount of an ERC20 from  community to an address"
      },
      "updateBeneficiaryParams(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Updates the beneficiary params of a community"
      },
      "updateCommunityParams(address,uint256,uint256)": {
        "notice": "Updates params of a community"
      },
      "updateCommunityTemplate(address)": {
        "notice": "Updates the address of the the communityTemplate"
      },
      "updateProxyImplementation(address,address)": {
        "notice": "Updates proxy implementation address of a community"
      },
      "updateTreasury(address)": {
        "notice": "Updates the address of the treasury"
      }
    },
    "notice": "Welcome to CommunityAdmin, the main contract. This is an administrative (for now) contract where the admins have control over the list of communities. Being only able to add and remove communities",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 546,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 549,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 800,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 713,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 756,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9583,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "cUSD",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IERC20)3205"
      },
      {
        "astId": 9587,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "treasury",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ITreasury)17685"
      },
      {
        "astId": 9591,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "communityTemplate",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(ICommunity)9913"
      },
      {
        "astId": 9595,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "communityProxyAdmin",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ProxyAdmin)2324"
      },
      {
        "astId": 9601,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "communities",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_enum(CommunityState)9924)"
      },
      {
        "astId": 9604,
        "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
        "label": "communityList",
        "offset": 0,
        "slot": "156",
        "type": "t_struct(AddressSet)5070_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICommunity)9913": {
        "encoding": "inplace",
        "label": "contract ICommunity",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3205": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)17685": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_contract(ProxyAdmin)2324": {
        "encoding": "inplace",
        "label": "contract ProxyAdmin",
        "numberOfBytes": "20"
      },
      "t_enum(CommunityState)9924": {
        "encoding": "inplace",
        "label": "enum ICommunityAdmin.CommunityState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(CommunityState)9924)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum ICommunityAdmin.CommunityState)",
        "numberOfBytes": "32",
        "value": "t_enum(CommunityState)9924"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5070_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5069,
            "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4799_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4799_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4794,
            "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4798,
            "contract": "contracts/community/CommunityAdminImplementation.sol:CommunityAdminImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}