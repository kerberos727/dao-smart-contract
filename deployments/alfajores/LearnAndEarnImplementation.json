{
  "address": "0xf8F7FFC74027984337430F140BC9E7697f4D7f26",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "levelId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LevelFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "levelId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum ILearnAndEarn.LevelState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "LevelStateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "levelId",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fundRecipient",
          "type": "address"
        }
      ],
      "name": "cancelLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_levelIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_signatures",
          "type": "bytes[]"
        }
      ],
      "name": "claimRewardForLevels",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityAdmin",
      "outputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signerWalletAddress",
          "type": "address"
        },
        {
          "internalType": "contract ICommunityAdmin",
          "name": "_communityAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "levelClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "levelListAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levelListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "levels",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "enum ILearnAndEarn.LevelState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelId",
          "type": "uint256"
        }
      ],
      "name": "pauseLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelId",
          "type": "uint256"
        }
      ],
      "name": "unpauseLevel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "_newCommunityAdmin",
          "type": "address"
        }
      ],
      "name": "updateCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSignerWalletAddress",
          "type": "address"
        }
      ],
      "name": "updateSignerWalletAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x01eae2ac5bc659cc7fcc513cfd4e2f0ff5ce9a232b9538bc41a5f29aa45821ef",
  "receipt": {
    "to": null,
    "from": "0xa34737409091eBD0726A3Ab5863Fc7Ee9243Edab",
    "contractAddress": "0xf8F7FFC74027984337430F140BC9E7697f4D7f26",
    "transactionIndex": 3,
    "gasUsed": "2021463",
    "logsBloom": "0x
    "blockHash": "0xd1b7f5d06e6ebb1dc8cca70a3377d9376a030167f0e00651c1ca646c348c1a24",
    "transactionHash": "0x01eae2ac5bc659cc7fcc513cfd4e2f0ff5ce9a232b9538bc41a5f29aa45821ef",
    "logs": [],
    "blockNumber": 15235589,
    "cumulativeGasUsed": "2556304",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3f50bf71fc86d36741326eb3b3f872a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"levelId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LevelFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"levelId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum ILearnAndEarn.LevelState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"LevelStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"levelId\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fundRecipient\",\"type\":\"address\"}],\"name\":\"cancelLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_levelIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"claimRewardForLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAdmin\",\"outputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerWalletAddress\",\"type\":\"address\"},{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"_communityAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"levelClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"levelListAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"enum ILearnAndEarn.LevelState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelId\",\"type\":\"uint256\"}],\"name\":\"pauseLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelId\",\"type\":\"uint256\"}],\"name\":\"unpauseLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"_newCommunityAdmin\",\"type\":\"address\"}],\"name\":\"updateCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSignerWalletAddress\",\"type\":\"address\"}],\"name\":\"updateSignerWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"LevelFunded(uint256,address,uint256)\":{\"params\":{\"amount\":\"Amount of the fund\",\"levelId\":\"Id of the level\",\"sender\":\"Address of the sender\"}},\"LevelStateChanged(uint256,uint8)\":{\"params\":{\"levelId\":\"Id of the level\",\"state\":\"New state of the level\"}},\"RewardClaimed(address,uint256)\":{\"params\":{\"beneficiary\":\"address of the beneficiary to be rewarded\",\"levelId\":\"the id of the level\"}}},\"kind\":\"dev\",\"methods\":{\"addLevel(uint256,address)\":{\"params\":{\"_levelId\":\"the id of the level\",\"_token\":\"the token used for reward\"}},\"cancelLevel(uint256,address)\":{\"params\":{\"_fundRecipient\":\"the address of the recipient who will receive the funds allocated for this level\",\"_levelId\":\"id of the level\"}},\"claimRewardForLevels(address,uint256[],uint256[],bytes[])\":{\"params\":{\"_beneficiary\":\"address of the beneficiary to be rewarded\",\"_levelIds\":\"the ids of the levels\",\"_rewardAmounts\":\"the amounts of the tokens to be send to the beneficiary as reward for each level\",\"_signatures\":\"the signatures from the backend\"}},\"fundLevel(uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to be funded\",\"_levelId\":\"the id of the level\"}},\"initialize(address,address)\":{\"params\":{\"_signerWalletAddress\":\"Address of the backend wallet\"}},\"levelClaims(uint256,address)\":{\"params\":{\"_beneficiary\":\"address of the beneficiary\",\"_levelId\":\"id of the level\"},\"returns\":{\"_0\":\"reward amount claimed by the beneficiary for a level\"}},\"levelListAt(uint256)\":{\"params\":{\"_index\":\"index of the level\"},\"returns\":{\"_0\":\"id of the level\"}},\"levelListLength()\":{\"returns\":{\"_0\":\"uint256 number of levels\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"pauseLevel(uint256)\":{\"params\":{\"_levelId\":\"id of the level\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"},\"unpauseLevel(uint256)\":{\"params\":{\"_levelId\":\"id of the level\"}},\"updateCommunityAdmin(address)\":{\"params\":{\"_newCommunityAdmin\":\"address of the new CommunityAdmin contract\"}},\"updateSignerWalletAddress(address)\":{\"params\":{\"_newSignerWalletAddress\":\"address of the new backend wallet\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LevelFunded(uint256,address,uint256)\":{\"notice\":\"Triggered when a level has been funded\"},\"LevelStateChanged(uint256,uint8)\":{\"notice\":\"Triggered when a level state has been changed\"},\"RewardClaimed(address,uint256)\":{\"notice\":\"Triggered when a reward has been claimed\"}},\"kind\":\"user\",\"methods\":{\"addLevel(uint256,address)\":{\"notice\":\"Adds a new level\"},\"cancelLevel(uint256,address)\":{\"notice\":\"Cancels a level\"},\"claimRewardForLevels(address,uint256[],uint256[],bytes[])\":{\"notice\":\"Allows beneficiaries to claim the reward for a list of levels using a signature\"},\"fundLevel(uint256,uint256)\":{\"notice\":\"Funds a level\"},\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"initialize(address,address)\":{\"notice\":\"Used to initialize a new CommunityAdmin contract\"},\"levelClaims(uint256,address)\":{\"notice\":\"Returns the reward amount claimed by a beneficiary for a level\"},\"levelListAt(uint256)\":{\"notice\":\"Returns the id of a level from levelList\"},\"levelListLength()\":{\"notice\":\"Returns the number of levels\"},\"pauseLevel(uint256)\":{\"notice\":\"Pauses a level\"},\"unpauseLevel(uint256)\":{\"notice\":\"Unpauses a level\"},\"updateCommunityAdmin(address)\":{\"notice\":\"Updates the CommunityAdmin contract address\"},\"updateSignerWalletAddress(address)\":{\"notice\":\"Updates the address of the backend wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/learnAndEarn/LearnAndEarnImplementation.sol\":\"LearnAndEarnImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x33b8603bfbef7f33d9308b79c79aa3db7eb19525fd1addd764285e834ca275d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ambassadors/interfaces/IAmbassadors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAmbassadors {\\n    function getVersion() external pure returns(uint256);\\n    function isAmbassador(address _ambassador) external view returns (bool);\\n    function isAmbassadorOf(address _ambassador, address _community) external view returns (bool);\\n    function isEntityOf(address _ambassador, address _entityAddress) external view returns (bool);\\n    function isAmbassadorAt(address _ambassador, address _entityAddress) external view returns (bool);\\n\\n    function addEntity(address _entity) external;\\n    function removeEntity(address _entity) external;\\n    function replaceEntityAccount(address _entity, address _newEntity) external;\\n    function addAmbassador(address _ambassador) external;\\n    function removeAmbassador(address _ambassador) external;\\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador) external;\\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external;\\n    function transferAmbassador(address _ambassador, address _toEntity, bool _keepCommunities) external;\\n    function transferCommunityToAmbassador(address _to, address _community) external;\\n    function setCommunityToAmbassador(address _ambassador, address _community) external;\\n    function removeCommunity(address _community) external;\\n}\\n\",\"keccak256\":\"0x18994047358b59b9925a303741d094f0543574874ff716b740a8165172c6ebf5\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed,\\n        AddressChanged,\\n        Copied  //the beneficiary has been moved in a copy community\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of tokens received\\n                                 //(based on token ratios when there are more than one token)\\n        uint256 lastClaim;       //block number of the last claim\\n        mapping(address => uint256) claimedAmounts;\\n    }\\n\\n    struct TokenUpdates {\\n        address tokenAddress;    //address of the token\\n        uint256 ratio;           //ratio between maxClaim and previous token maxClaim\\n        uint256 startBlock;      //the number of the block from which the this token was \\\"active\\\"\\n    }\\n\\n    function initialize(\\n        address _tokenAddress,\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function getVersion() external pure returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function copyOf() external view returns(ICommunity);\\n    function copies() external view returns(address[] memory);\\n    function originalClaimAmount() external view returns(uint256);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function maxTotalClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function maxBeneficiaries() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function token() external view  returns(IERC20);\\n    function tokenList() external view returns(address[] memory);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address _beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function beneficiaryClaimedAmounts(address _beneficiaryAddress) external view\\n        returns (uint256[] memory claimedAmounts);\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 _index) external view returns (address);\\n    function impactMarketAddress() external pure returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n    function lastFundRequest() external view returns(uint256);\\n    function tokenUpdates(uint256 _index) external view returns (\\n        address tokenAddress,\\n        uint256 ratio,\\n        uint256 startBlock\\n    );\\n    function tokenUpdatesLength() external view returns (uint256);\\n    function isSelfFunding() external view returns (bool);\\n    function setBeneficiaryState(address _beneficiaryAddress, BeneficiaryState _state) external;\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateMaxBeneficiaries(uint256 _newMaxBeneficiaries) external;\\n    function updateToken(\\n        IERC20 _newToken,\\n        address[] calldata _exchangePath,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function donate(address _sender, uint256 _amount) external;\\n    function addTreasuryFunds(uint256 _amount) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function addManager(address _managerAddress) external;\\n    function removeManager(address _managerAddress) external;\\n    function addBeneficiary(address _beneficiaryAddress) external;\\n    function addBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function addBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function copyBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function lockBeneficiary(address _beneficiaryAddress) external;\\n    function lockBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function lockBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function unlockBeneficiary(address _beneficiaryAddress) external;\\n    function unlockBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function unlockBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function removeBeneficiary(address _beneficiaryAddress) external;\\n    function removeBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function removeBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function changeBeneficiaryAddressByManager(address _oldBeneficiaryAddress, address _newBeneficiaryAddress) external;\\n    function changeBeneficiaryAddress(address _newBeneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n    function addCopy(ICommunity _copy) external;\\n    function copyCommunityDetails(ICommunity _originalCommunity) external;\\n}\\n\",\"keccak256\":\"0x4fc6761473d092fefa3b5ea636141421fa43f9f91cde5ad037fe4900af09bdbf\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\\\";\\nimport \\\"../../ambassadors/interfaces/IAmbassadors.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function impactMarketCouncil() external view returns(IImpactMarketCouncil);\\n    function ambassadors() external view returns(IAmbassadors);\\n    function communityMiddleProxy() external view returns(address);\\n    function authorizedWalletAddress() external view returns(address);\\n    function minClaimAmountRatio() external view returns(uint256);\\n    function minClaimAmountRatioPrecision() external view returns(uint256);\\n    function communities(address _community) external view returns(CommunityState);\\n    function communityImplementation() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 _index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n    function treasurySafetyPercentage() external view returns (uint256);\\n    function treasuryMinBalance() external view returns (uint256);\\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity) external view returns (bool);\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateImpactMarketCouncil(IImpactMarketCouncil _newImpactMarketCouncil) external;\\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external;\\n    function updateCommunityMiddleProxy(address _communityMiddleProxy) external;\\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\\n    function updateAuthorizedWalletAddress(address _newSignerAddress) external;\\n    function updateMinClaimAmountRatio(uint256 _newMinClaimAmountRatio) external;\\n    function updateTreasurySafetyPercentage(uint256 _newTreasurySafetyPercentage) external;\\n    function updateTreasuryMinBalance(uint256 _newTreasuryMinBalance) external;\\n    function setCommunityToAmbassador(address _ambassador, ICommunity _communityAddress) external;\\n    function updateBeneficiaryParams(\\n        ICommunity _community,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity _community,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateProxyImplementation(address _communityMiddleProxy, address _newLogic) external;\\n    function updateCommunityToken(\\n        ICommunity _community,\\n        IERC20 _newToken,\\n        address[] memory _exchangePath,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function addCommunity(\\n        address _tokenAddress,\\n        address[] memory _managers,\\n        address _ambassador,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory _managers,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function splitCommunity(\\n        ICommunity _community,\\n        uint256 _numberOfCopies,\\n        address _ambassador,\\n        address[] memory _managers\\n    ) external;\\n    function removeCommunity(ICommunity _community) external;\\n    function fundCommunity() external;\\n    function calculateCommunityTrancheAmount(ICommunity _community) external view returns (uint256);\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function transferFromCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n    function getCommunityProxyImplementation(address _communityProxyAddress) external view returns(address);\\n}\\n\",\"keccak256\":\"0xc4552a4929cd85956168227ccb89215025eff84fb4fcf8002ad923517a9546fd\",\"license\":\"Apache-2.0\"},\"contracts/governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\n\\ninterface IImpactMarketCouncil {\\n    //\\n}\\n\",\"keccak256\":\"0xf882b16cf7612ec887ab2a513d05b318deed39e3dfa0ea7875980ff49921f874\",\"license\":\"Apache-2.0\"},\"contracts/learnAndEarn/LearnAndEarnImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interfaces/ILearnAndEarn.sol\\\";\\nimport \\\"./interfaces/LearnAndEarnStorageV1.sol\\\";\\n\\ncontract LearnAndEarnImplementation is\\n    Initializable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    LearnAndEarnStorageV1\\n{\\n    using SafeERC20Upgradeable for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * @notice Triggered when a level has been funded\\n     *\\n     * @param levelId           Id of the level\\n     * @param sender            Address of the sender\\n     * @param amount            Amount of the fund\\n     */\\n    event LevelFunded(uint256 indexed levelId, address indexed sender, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a level state has been changed\\n     *\\n     * @param levelId           Id of the level\\n     * @param state             New state of the level\\n     */\\n    event LevelStateChanged(uint256 indexed levelId, LevelState indexed state);\\n\\n    /**\\n     * @notice Triggered when a reward has been claimed\\n     *\\n     * @param beneficiary    address of the beneficiary to be rewarded\\n     * @param levelId       the id of the level\\n     */\\n    event RewardClaimed(address indexed beneficiary, uint256 indexed levelId);\\n\\n    /**\\n     * @notice Enforces sender to be a valid community\\n     */\\n    modifier onlyOwnerOrImpactMarketCouncil() {\\n        require(\\n            msg.sender == owner() || msg.sender == address(communityAdmin.impactMarketCouncil()),\\n            \\\"LearnAndEarn: caller is not the owner nor ImpactMarketCouncil\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize a new CommunityAdmin contract\\n     *\\n     * @param _signerWalletAddress    Address of the backend wallet\\n     */\\n    function initialize(address _signerWalletAddress, ICommunityAdmin _communityAdmin)\\n        external\\n        initializer\\n    {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init_unchained();\\n\\n        signerWalletAddress = _signerWalletAddress;\\n        communityAdmin = _communityAdmin;\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns the id of a level from levelList\\n     *\\n     * @param _index index of the level\\n     * @return id of the level\\n     */\\n    function levelListAt(uint256 _index) external view override returns (uint256) {\\n        return _levelList.at(_index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of levels\\n     *\\n     * @return uint256 number of levels\\n     */\\n    function levelListLength() external view override returns (uint256) {\\n        return _levelList.length();\\n    }\\n\\n    /**\\n     * @notice Returns the reward amount claimed by a beneficiary for a level\\n     *\\n     * @param _levelId id of the level\\n     * @param _beneficiary address of the beneficiary\\n     * @return reward amount claimed by the beneficiary for a level\\n     */\\n    function levelClaims(uint256 _levelId, address _beneficiary)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return levels[_levelId].claims[_beneficiary];\\n    }\\n\\n    /**\\n     * @dev Pauses the contract\\n     */\\n    function pause() public onlyOwnerOrImpactMarketCouncil {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() public onlyOwnerOrImpactMarketCouncil {\\n        _unpause();\\n    }\\n\\n    /** Updates the address of the backend wallet\\n     *\\n     * @param _newSignerWalletAddress address of the new backend wallet\\n     */\\n    function updateSignerWalletAddress(address _newSignerWalletAddress)\\n        external\\n        override\\n        onlyOwnerOrImpactMarketCouncil\\n    {\\n        signerWalletAddress = _newSignerWalletAddress;\\n    }\\n\\n    /**\\n     * @notice Updates the CommunityAdmin contract address\\n     *\\n     * @param _newCommunityAdmin address of the new CommunityAdmin contract\\n     */\\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external override onlyOwner {\\n        communityAdmin = _newCommunityAdmin;\\n    }\\n\\n    /**\\n     * @notice Adds a new level\\n     *\\n     * @param _levelId    the id of the level\\n     * @param _token      the token used for reward\\n     */\\n    function addLevel(uint256 _levelId, IERC20 _token)\\n        external\\n        override\\n        onlyOwnerOrImpactMarketCouncil\\n    {\\n        require(\\n            levels[_levelId].state == LevelState.Invalid,\\n            \\\"LearnAndLearn::addLevel: Invalid level id\\\"\\n        );\\n\\n        levels[_levelId].state = LevelState.Valid;\\n        levels[_levelId].token = _token;\\n\\n        _levelList.add(_levelId);\\n\\n        emit LevelStateChanged(_levelId, LevelState.Valid);\\n    }\\n\\n    /**\\n     * @notice Pauses a level\\n     *\\n     * @param _levelId id of the level\\n     */\\n    function pauseLevel(uint256 _levelId) external override onlyOwnerOrImpactMarketCouncil {\\n        Level storage _level = levels[_levelId];\\n\\n        require(_level.state == LevelState.Valid, \\\"LearnAndEarn::pauseLevel: Invalid level id\\\");\\n\\n        _level.state = LevelState.Paused;\\n\\n        emit LevelStateChanged(_levelId, LevelState.Paused);\\n    }\\n\\n    /**\\n     * @notice Unpauses a level\\n     *\\n     * @param _levelId id of the level\\n     */\\n    function unpauseLevel(uint256 _levelId) external override onlyOwnerOrImpactMarketCouncil {\\n        Level storage _level = levels[_levelId];\\n\\n        require(_level.state == LevelState.Paused, \\\"LearnAndEarn::unpauseLevel: Invalid level id\\\");\\n\\n        _level.state = LevelState.Valid;\\n\\n        emit LevelStateChanged(_levelId, LevelState.Valid);\\n    }\\n\\n    /**\\n     * @notice Cancels a level\\n     *\\n     * @param _levelId id of the level\\n     * @param _fundRecipient the address of the recipient who will receive the funds allocated for this level\\n     */\\n    function cancelLevel(uint256 _levelId, address _fundRecipient)\\n        external\\n        override\\n        onlyOwnerOrImpactMarketCouncil\\n    {\\n        Level storage _level = levels[_levelId];\\n\\n        require(\\n            _level.state == LevelState.Valid || _level.state == LevelState.Paused,\\n            \\\"LearnAndEarn::cancelLevel: Invalid level id\\\"\\n        );\\n\\n        _level.state = LevelState.Canceled;\\n        uint256 _levelBalance = _level.balance;\\n        _level.balance = 0;\\n\\n        _level.token.safeTransfer(_fundRecipient, _levelBalance);\\n\\n        emit LevelStateChanged(_levelId, LevelState.Canceled);\\n    }\\n\\n    /**\\n     * @notice Funds a level\\n     *\\n     * @param _levelId   the id of the level\\n     * @param _amount the amount to be funded\\n     */\\n    function fundLevel(uint256 _levelId, uint256 _amount) external override {\\n        Level storage _level = levels[_levelId];\\n\\n        require(\\n            _level.state == LevelState.Valid || _level.state == LevelState.Paused,\\n            \\\"LearnAndEarn::fundLevel: Invalid level id\\\"\\n        );\\n\\n        _level.token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        _level.balance += _amount;\\n\\n        emit LevelFunded(_levelId, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Allows beneficiaries to claim the reward for a list of levels using a signature\\n     *\\n     * @param _beneficiary     address of the beneficiary to be rewarded\\n     * @param _levelIds        the ids of the levels\\n     * @param _rewardAmounts   the amounts of the tokens to be send to the beneficiary as reward for each level\\n     * @param _signatures      the signatures from the backend\\n     */\\n    function claimRewardForLevels(\\n        address _beneficiary,\\n        uint256[] calldata _levelIds,\\n        uint256[] calldata _rewardAmounts,\\n        bytes[] calldata _signatures\\n    ) external override {\\n        Level storage _level;\\n\\n        require(\\n            _levelIds.length == _rewardAmounts.length && _levelIds.length == _signatures.length,\\n            \\\"LearnAndEarn::claimRewardForLevels: Invalid data\\\"\\n        );\\n\\n        uint256 _index;\\n        bytes32 _messageHash;\\n\\n        for (_index = 0; _index < _levelIds.length; _index++) {\\n            _level = levels[_levelIds[_index]];\\n\\n            require(\\n                _level.state == LevelState.Valid,\\n                \\\"LearnAndEarn::claimRewardForLevels: Invalid level id\\\"\\n            );\\n\\n            //if the beneficiary has already claimed the reward for this level,\\n            // or if the rewardAmount is 0, skip this level\\n            if (_level.claims[_beneficiary] > 0 || _rewardAmounts[_index] == 0) {\\n                continue;\\n            }\\n\\n            _messageHash = keccak256(\\n                abi.encode(_beneficiary, _levelIds[_index], _rewardAmounts[_index])\\n            );\\n\\n            require(\\n                signerWalletAddress ==\\n                    _messageHash.toEthSignedMessageHash().recover(_signatures[_index]),\\n                \\\"LearnAndEarn::claimRewardForLevels: Invalid signature\\\"\\n            );\\n\\n            _level.claims[_beneficiary] = _rewardAmounts[_index];\\n\\n            require(\\n                _level.balance >= _rewardAmounts[_index],\\n                \\\"LearnAndEarn::claimRewardForLevels: Level doesn't have enough funds\\\"\\n            );\\n\\n            _level.token.safeTransfer(_beneficiary, _rewardAmounts[_index]);\\n            _level.balance -= _rewardAmounts[_index];\\n\\n            emit RewardClaimed(_beneficiary, _levelIds[_index]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a06c29b5940c71e57021d50da5b75a1e52f7141d17de86f48e6e194f6ee06b4\",\"license\":\"Apache-2.0\"},\"contracts/learnAndEarn/interfaces/ILearnAndEarn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\n\\ninterface ILearnAndEarn {\\n    enum LevelState {\\n        Invalid,\\n        Valid,\\n        Paused,\\n        Canceled\\n    }\\n\\n    struct Level {\\n        IERC20 token;\\n        uint256 balance;\\n        LevelState state;\\n        mapping(address => uint256) claims;    // the reward amount claimed by beneficiaries for this level\\n    }\\n\\n    function getVersion() external pure returns (uint256);\\n    function signerWalletAddress() external view returns(address);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function levelListLength() external view returns (uint256);\\n    function levelListAt(uint256 _index) external view returns (uint256);\\n    function levels(uint256 _levelId)\\n        external view returns ( IERC20 token, uint256 balance, LevelState state);\\n    function levelClaims(\\n        uint256 _levelId,\\n        address _beneficiary\\n    ) external view returns (uint256);\\n    function updateSignerWalletAddress(address _newSignerAddress) external;\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function addLevel(uint256 _levelId, IERC20 _token) external;\\n    function fundLevel(uint256 _levelId, uint256 _amount) external;\\n    function pauseLevel(uint256 _levelId) external;\\n    function unpauseLevel(uint256 _levelId) external;\\n    function cancelLevel(uint256 _levelId, address _fundRecipient) external;\\n    function claimRewardForLevels(\\n        address _beneficiary,\\n        uint256[] calldata _levelIds,\\n        uint256[] calldata _rewardAmounts,\\n        bytes[] calldata _signatures\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9266c6f92b499ee6ec583d287e516f70a2c7f8749f0d228b5e1daed955490e4f\",\"license\":\"Apache-2.0\"},\"contracts/learnAndEarn/interfaces/LearnAndEarnStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./ILearnAndEarn.sol\\\";\\n\\n/**\\n * @title Storage for LearnAndEarn\\n * @notice For future upgrades, do not change LearnAndEarnStorageV1. Create a new\\n * contract which implements LearnAndEarnStorageV1 and following the naming convention\\n * LearnAndEarnStorageVX.\\n */\\nabstract contract LearnAndEarnStorageV1 is ILearnAndEarn {\\n    address public override signerWalletAddress;\\n    ICommunityAdmin public override communityAdmin;\\n    EnumerableSet.UintSet internal _levelList;\\n    mapping(uint256 => Level) public override levels;\\n}\\n\",\"keccak256\":\"0x314488efba8f9511a9e3ed8541beab76489e495fd9c95d4dbbecd7de997f1e32\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\ninterface ITreasury {\\n    struct Token {\\n        uint256 rate;\\n        address[] exchangePath;\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function uniswapRouter() external view returns(IUniswapV2Router);\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updateUniswapRouter(IUniswapV2Router _uniswapRouter) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function isToken(address _tokenAddress) external view returns (bool);\\n    function tokenListLength() external view returns (uint256);\\n    function tokenListAt(uint256 _index) external view returns (address);\\n    function tokens(address _tokenAddress) external view returns (uint256 rate, address[] memory exchangePath);\\n    function setToken(address _tokenAddress, uint256 _rate, address[] calldata _exchangePath) external;\\n    function removeToken(address _tokenAddress) external;\\n    function getConvertedAmount(address _tokenAddress, uint256 _amount) external view returns (uint256);\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] memory _exchangePath,\\n        uint256 _deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf6337bae44d111efee8edc831b1dd11379e5c5b11dff89404a4d4eecf83bc156\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address tokenA, address tokenB) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a12eebf4cf3741e1b1a30a4315096ae6d545af2e07a92e544d05739ceb811e9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061239b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063af2bc4381161007c578063af2bc43814610269578063b2596a671461027c578063b53fe8a5146102c7578063d33d4ec6146102da578063ec6f0245146102ed578063f2fde38b1461030057600080fd5b8063715018a6146102225780638456cb591461022a578063886b7767146102325780638da5cb5b146102455780639f2b30cf1461025657600080fd5b80633833a5fd1161010a5780633833a5fd146101a05780633f4ba83a146101b3578063485cc955146101bb5780635c975abb146101ce5780635fac917a146101e45780636a896a651461020f57600080fd5b80630b4a76a6146101475780630d8e6e2c1461015c5780630dca76671461017257806318a1d32f1461017a5780632effa6b51461018d575b600080fd5b61015a6101553660046120cf565b610313565b005b60015b6040519081526020015b60405180910390f35b61015f61044a565b61015a6101883660046120ab565b61045b565b61015a61019b366004612093565b610651565b61015a6101ae366004612093565b6107f2565b61015a61096c565b61015a6101c936600461201f565b610a41565b60335460ff166040519015158152602001610169565b60ca546101f7906001600160a01b031681565b6040516001600160a01b039091168152602001610169565b61015a61021d3660046120ab565b610b44565b61015a610ced565b61015a610d21565b61015f6102403660046120ab565b610df4565b6065546001600160a01b03166101f7565b60c9546101f7906001600160a01b031681565b61015a610277366004611f5a565b610e21565b6102b861028a366004612093565b60cd602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b6040516101699392919061210c565b61015a6102d5366004611f76565b610f0e565b61015a6102e8366004611f5a565b611406565b61015f6102fb366004612093565b611452565b61015a61030e366004611f5a565b61145f565b600082815260cd602052604090206001600282015460ff16600381111561034a57634e487b7160e01b600052602160045260246000fd5b148061037b575060028082015460ff16600381111561037957634e487b7160e01b600052602160045260246000fd5b145b6103de5760405162461bcd60e51b815260206004820152602960248201527f4c6561726e416e644561726e3a3a66756e644c6576656c3a20496e76616c6964604482015268081b195d995b081a5960ba1b60648201526084015b60405180910390fd5b80546103f5906001600160a01b03163330856114fa565b8181600101600082825461040991906122a4565b9091555050604051828152339084907f2696a4597f56434a70ba48071ab5cd017c463335fae57a7dfa522bf0344266c19060200160405180910390a3505050565b600061045660cb61156b565b905090565b6065546001600160a01b031633148061050a575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156104bd57600080fd5b505afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190612077565b6001600160a01b0316336001600160a01b0316145b6105265760405162461bcd60e51b81526004016103d590612182565b600082815260cd602052604090206001600282015460ff16600381111561055d57634e487b7160e01b600052602160045260246000fd5b148061058e575060028082015460ff16600381111561058c57634e487b7160e01b600052602160045260246000fd5b145b6105ee5760405162461bcd60e51b815260206004820152602b60248201527f4c6561726e416e644561726e3a3a63616e63656c4c6576656c3a20496e76616c60448201526a1a59081b195d995b081a5960aa1b60648201526084016103d5565b60028101805460ff191660031790556001810180546000909155815461061e906001600160a01b03168483611575565b600360405185907fd0f7851c679986391b7a6be75abf87357c7efad81350b7a10a256a22e729292f90600090a350505050565b6065546001600160a01b0316331480610700575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b357600080fd5b505afa1580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190612077565b6001600160a01b0316336001600160a01b0316145b61071c5760405162461bcd60e51b81526004016103d590612182565b600081815260cd602052604090206001600282015460ff16600381111561075357634e487b7160e01b600052602160045260246000fd5b146107b35760405162461bcd60e51b815260206004820152602a60248201527f4c6561726e416e644561726e3a3a70617573654c6576656c3a20496e76616c6960448201526919081b195d995b081a5960b21b60648201526084016103d5565b6002818101805460ff1916821790555b60405183907fd0f7851c679986391b7a6be75abf87357c7efad81350b7a10a256a22e729292f90600090a35050565b6065546001600160a01b03163314806108a1575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c9190612077565b6001600160a01b0316336001600160a01b0316145b6108bd5760405162461bcd60e51b81526004016103d590612182565b600081815260cd6020526040902060028082015460ff1660038111156108f357634e487b7160e01b600052602160045260246000fd5b146109555760405162461bcd60e51b815260206004820152602c60248201527f4c6561726e416e644561726e3a3a756e70617573654c6576656c3a20496e766160448201526b1b1a59081b195d995b081a5960a21b60648201526084016103d5565b60028101805460ff191660019081179091556107c3565b6065546001600160a01b0316331480610a1b575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190612077565b6001600160a01b0316336001600160a01b0316145b610a375760405162461bcd60e51b81526004016103d590612182565b610a3f6115a5565b565b600054610100900460ff16610a5c5760005460ff1615610a60565b303b155b610ac35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d5565b600054610100900460ff16158015610ae5576000805461ffff19166101011790555b610aed611638565b610af561166f565b610afd61169e565b60c980546001600160a01b038086166001600160a01b03199283161790925560ca8054928516929091169190911790558015610b3f576000805461ff00191690555b505050565b6065546001600160a01b0316331480610bf3575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190612077565b6001600160a01b0316336001600160a01b0316145b610c0f5760405162461bcd60e51b81526004016103d590612182565b600082815260cd602052604081206002015460ff166003811115610c4357634e487b7160e01b600052602160045260246000fd5b14610ca25760405162461bcd60e51b815260206004820152602960248201527f4c6561726e416e644c6561726e3a3a6164644c6576656c3a20496e76616c6964604482015268081b195d995b081a5960ba1b60648201526084016103d5565b600082815260cd6020526040902060028101805460ff1916600117905580546001600160a01b0383166001600160a01b0319909116179055610ce560cb836116d1565b5060016107c3565b6065546001600160a01b03163314610d175760405162461bcd60e51b81526004016103d5906121df565b610a3f60006116e4565b6065546001600160a01b0316331480610dd0575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190612077565b6001600160a01b0316336001600160a01b0316145b610dec5760405162461bcd60e51b81526004016103d590612182565b610a3f611736565b600082815260cd602090815260408083206001600160a01b03851684526003019091529020545b92915050565b6065546001600160a01b0316331480610ed0575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8357600080fd5b505afa158015610e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebb9190612077565b6001600160a01b0316336001600160a01b0316145b610eec5760405162461bcd60e51b81526004016103d590612182565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b60008584148015610f1e57508582145b610f715760405162461bcd60e51b8152602060048201526030602482015260008051602061234683398151915260448201526f6c733a20496e76616c6964206461746160801b60648201526084016103d5565b6000805b878210156113fa5760cd60008a8a85818110610fa157634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020925060016003811115610fd957634e487b7160e01b600052602160045260246000fd5b600284015460ff16600381111561100057634e487b7160e01b600052602160045260246000fd5b146110585760405162461bcd60e51b815260206004820152603460248201526000805160206123468339815191526044820152731b1cce88125b9d985b1a59081b195d995b081a5960621b60648201526084016103d5565b6001600160a01b038a1660009081526003840160205260409020541515806110a6575086868381811061109b57634e487b7160e01b600052603260045260246000fd5b905060200201356000145b156110b0576113e8565b898989848181106110d157634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106110f857634e487b7160e01b600052603260045260246000fd5b9050602002013560405160200161112d939291906001600160a01b039390931683526020830191909152604082015260600190565b6040516020818303038152906040528051906020012090506111c085858481811061116857634e487b7160e01b600052603260045260246000fd5b905060200281019061117a919061225f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111ba92508591506117b19050565b90611804565b60c9546001600160a01b039081169116146112295760405162461bcd60e51b815260206004820152603560248201526000805160206123468339815191526044820152746c733a20496e76616c6964207369676e617475726560581b60648201526084016103d5565b86868381811061124957634e487b7160e01b600052603260045260246000fd5b6001600160a01b038d1660009081526003870160209081526040909120910292909201359091555086868381811061129157634e487b7160e01b600052603260045260246000fd5b905060200201358360010154101561130b5760405162461bcd60e51b8152602060048201526043602482015260008051602061234683398151915260448201527f6c733a204c6576656c20646f65736e2774206861766520656e6f7567682066756064820152626e647360e81b608482015260a4016103d5565b61134a8a88888581811061132f57634e487b7160e01b600052603260045260246000fd5b87546001600160a01b03169392602090910201359050611575565b86868381811061136a57634e487b7160e01b600052603260045260246000fd5b9050602002013583600101600082825461138491906122bc565b9091555089905088838181106113aa57634e487b7160e01b600052603260045260246000fd5b905060200201358a6001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f724160405160405180910390a35b816113f2816122ff565b925050610f75565b50505050505050505050565b6065546001600160a01b031633146114305760405162461bcd60e51b81526004016103d5906121df565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e1b60cb83611828565b6065546001600160a01b031633146114895760405162461bcd60e51b81526004016103d5906121df565b6001600160a01b0381166114ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d5565b6114f7816116e4565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526115659085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611834565b50505050565b6000610e1b825490565b6040516001600160a01b038316602482015260448101829052610b3f90849063a9059cbb60e01b9060640161152e565b60335460ff166115ee5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103d5565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff1661165f5760405162461bcd60e51b81526004016103d590612214565b611667611906565b610a3f61192d565b600054610100900460ff166116965760405162461bcd60e51b81526004016103d590612214565b610a3f61195d565b600054610100900460ff166116c55760405162461bcd60e51b81526004016103d590612214565b6033805460ff19169055565b60006116dd838361198b565b9392505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff161561177c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103d5565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861161b3390565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600080600061181385856119da565b9150915061182081611a4a565b509392505050565b60006116dd8383611c4b565b6000611889826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c839092919063ffffffff16565b805190915015610b3f57808060200190518101906118a79190612057565b610b3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d5565b600054610100900460ff16610a3f5760405162461bcd60e51b81526004016103d590612214565b600054610100900460ff166119545760405162461bcd60e51b81526004016103d590612214565b610a3f336116e4565b600054610100900460ff166119845760405162461bcd60e51b81526004016103d590612214565b6001609755565b60008181526001830160205260408120546119d257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e1b565b506000610e1b565b600080825160411415611a115760208301516040840151606085015160001a611a0587828585611c9a565b94509450505050611a43565b825160401415611a3b5760208301516040840151611a30868383611d87565b935093505050611a43565b506000905060025b9250929050565b6000816004811115611a6c57634e487b7160e01b600052602160045260246000fd5b1415611a755750565b6001816004811115611a9757634e487b7160e01b600052602160045260246000fd5b1415611ae55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103d5565b6002816004811115611b0757634e487b7160e01b600052602160045260246000fd5b1415611b555760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103d5565b6003816004811115611b7757634e487b7160e01b600052602160045260246000fd5b1415611bd05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103d5565b6004816004811115611bf257634e487b7160e01b600052602160045260246000fd5b14156114f75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103d5565b6000826000018281548110611c7057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6060611c928484600085611db6565b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611cd15750600090506003611d7e565b8460ff16601b14158015611ce957508460ff16601c14155b15611cfa5750600090506004611d7e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d4e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d7757600060019250925050611d7e565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01611da887828885611c9a565b935093505050935093915050565b606082471015611e175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d5565b843b611e655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d5565b600080866001600160a01b03168587604051611e8191906120f0565b60006040518083038185875af1925050503d8060008114611ebe576040519150601f19603f3d011682016040523d82523d6000602084013e611ec3565b606091505b5091509150611ed3828286611ede565b979650505050505050565b60608315611eed5750816116dd565b825115611efd5782518084602001fd5b8160405162461bcd60e51b81526004016103d5919061214f565b60008083601f840112611f28578182fd5b50813567ffffffffffffffff811115611f3f578182fd5b6020830191508360208260051b8501011115611a4357600080fd5b600060208284031215611f6b578081fd5b81356116dd81612330565b60008060008060008060006080888a031215611f90578283fd5b8735611f9b81612330565b9650602088013567ffffffffffffffff80821115611fb7578485fd5b611fc38b838c01611f17565b909850965060408a0135915080821115611fdb578485fd5b611fe78b838c01611f17565b909650945060608a0135915080821115611fff578384fd5b5061200c8a828b01611f17565b989b979a50959850939692959293505050565b60008060408385031215612031578182fd5b823561203c81612330565b9150602083013561204c81612330565b809150509250929050565b600060208284031215612068578081fd5b815180151581146116dd578182fd5b600060208284031215612088578081fd5b81516116dd81612330565b6000602082840312156120a4578081fd5b5035919050565b600080604083850312156120bd578182fd5b82359150602083013561204c81612330565b600080604083850312156120e1578182fd5b50508035926020909101359150565b600082516121028184602087016122d3565b9190910192915050565b6001600160a01b038416815260208101839052606081016004831061214157634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b602081526000825180602084015261216e8160408501602087016122d3565b601f01601f19169190910160400192915050565b6020808252603d908201527f4c6561726e416e644561726e3a2063616c6c6572206973206e6f74207468652060408201527f6f776e6572206e6f7220496d706163744d61726b6574436f756e63696c000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000808335601e19843603018112612275578283fd5b83018035915067ffffffffffffffff82111561228f578283fd5b602001915036819003821315611a4357600080fd5b600082198211156122b7576122b761231a565b500190565b6000828210156122ce576122ce61231a565b500390565b60005b838110156122ee5781810151838201526020016122d6565b838111156115655750506000910152565b60006000198214156123135761231361231a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146114f757600080fdfe4c6561726e416e644561726e3a3a636c61696d526577617264466f724c657665a264697066735822122016e3ec4ad79529df3b7f642f895d9af72f0d3b50541f0b3380fc184b7a4e243864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063af2bc4381161007c578063af2bc43814610269578063b2596a671461027c578063b53fe8a5146102c7578063d33d4ec6146102da578063ec6f0245146102ed578063f2fde38b1461030057600080fd5b8063715018a6146102225780638456cb591461022a578063886b7767146102325780638da5cb5b146102455780639f2b30cf1461025657600080fd5b80633833a5fd1161010a5780633833a5fd146101a05780633f4ba83a146101b3578063485cc955146101bb5780635c975abb146101ce5780635fac917a146101e45780636a896a651461020f57600080fd5b80630b4a76a6146101475780630d8e6e2c1461015c5780630dca76671461017257806318a1d32f1461017a5780632effa6b51461018d575b600080fd5b61015a6101553660046120cf565b610313565b005b60015b6040519081526020015b60405180910390f35b61015f61044a565b61015a6101883660046120ab565b61045b565b61015a61019b366004612093565b610651565b61015a6101ae366004612093565b6107f2565b61015a61096c565b61015a6101c936600461201f565b610a41565b60335460ff166040519015158152602001610169565b60ca546101f7906001600160a01b031681565b6040516001600160a01b039091168152602001610169565b61015a61021d3660046120ab565b610b44565b61015a610ced565b61015a610d21565b61015f6102403660046120ab565b610df4565b6065546001600160a01b03166101f7565b60c9546101f7906001600160a01b031681565b61015a610277366004611f5a565b610e21565b6102b861028a366004612093565b60cd602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b6040516101699392919061210c565b61015a6102d5366004611f76565b610f0e565b61015a6102e8366004611f5a565b611406565b61015f6102fb366004612093565b611452565b61015a61030e366004611f5a565b61145f565b600082815260cd602052604090206001600282015460ff16600381111561034a57634e487b7160e01b600052602160045260246000fd5b148061037b575060028082015460ff16600381111561037957634e487b7160e01b600052602160045260246000fd5b145b6103de5760405162461bcd60e51b815260206004820152602960248201527f4c6561726e416e644561726e3a3a66756e644c6576656c3a20496e76616c6964604482015268081b195d995b081a5960ba1b60648201526084015b60405180910390fd5b80546103f5906001600160a01b03163330856114fa565b8181600101600082825461040991906122a4565b9091555050604051828152339084907f2696a4597f56434a70ba48071ab5cd017c463335fae57a7dfa522bf0344266c19060200160405180910390a3505050565b600061045660cb61156b565b905090565b6065546001600160a01b031633148061050a575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156104bd57600080fd5b505afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190612077565b6001600160a01b0316336001600160a01b0316145b6105265760405162461bcd60e51b81526004016103d590612182565b600082815260cd602052604090206001600282015460ff16600381111561055d57634e487b7160e01b600052602160045260246000fd5b148061058e575060028082015460ff16600381111561058c57634e487b7160e01b600052602160045260246000fd5b145b6105ee5760405162461bcd60e51b815260206004820152602b60248201527f4c6561726e416e644561726e3a3a63616e63656c4c6576656c3a20496e76616c60448201526a1a59081b195d995b081a5960aa1b60648201526084016103d5565b60028101805460ff191660031790556001810180546000909155815461061e906001600160a01b03168483611575565b600360405185907fd0f7851c679986391b7a6be75abf87357c7efad81350b7a10a256a22e729292f90600090a350505050565b6065546001600160a01b0316331480610700575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b357600080fd5b505afa1580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190612077565b6001600160a01b0316336001600160a01b0316145b61071c5760405162461bcd60e51b81526004016103d590612182565b600081815260cd602052604090206001600282015460ff16600381111561075357634e487b7160e01b600052602160045260246000fd5b146107b35760405162461bcd60e51b815260206004820152602a60248201527f4c6561726e416e644561726e3a3a70617573654c6576656c3a20496e76616c6960448201526919081b195d995b081a5960b21b60648201526084016103d5565b6002818101805460ff1916821790555b60405183907fd0f7851c679986391b7a6be75abf87357c7efad81350b7a10a256a22e729292f90600090a35050565b6065546001600160a01b03163314806108a1575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c9190612077565b6001600160a01b0316336001600160a01b0316145b6108bd5760405162461bcd60e51b81526004016103d590612182565b600081815260cd6020526040902060028082015460ff1660038111156108f357634e487b7160e01b600052602160045260246000fd5b146109555760405162461bcd60e51b815260206004820152602c60248201527f4c6561726e416e644561726e3a3a756e70617573654c6576656c3a20496e766160448201526b1b1a59081b195d995b081a5960a21b60648201526084016103d5565b60028101805460ff191660019081179091556107c3565b6065546001600160a01b0316331480610a1b575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190612077565b6001600160a01b0316336001600160a01b0316145b610a375760405162461bcd60e51b81526004016103d590612182565b610a3f6115a5565b565b600054610100900460ff16610a5c5760005460ff1615610a60565b303b155b610ac35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d5565b600054610100900460ff16158015610ae5576000805461ffff19166101011790555b610aed611638565b610af561166f565b610afd61169e565b60c980546001600160a01b038086166001600160a01b03199283161790925560ca8054928516929091169190911790558015610b3f576000805461ff00191690555b505050565b6065546001600160a01b0316331480610bf3575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190612077565b6001600160a01b0316336001600160a01b0316145b610c0f5760405162461bcd60e51b81526004016103d590612182565b600082815260cd602052604081206002015460ff166003811115610c4357634e487b7160e01b600052602160045260246000fd5b14610ca25760405162461bcd60e51b815260206004820152602960248201527f4c6561726e416e644c6561726e3a3a6164644c6576656c3a20496e76616c6964604482015268081b195d995b081a5960ba1b60648201526084016103d5565b600082815260cd6020526040902060028101805460ff1916600117905580546001600160a01b0383166001600160a01b0319909116179055610ce560cb836116d1565b5060016107c3565b6065546001600160a01b03163314610d175760405162461bcd60e51b81526004016103d5906121df565b610a3f60006116e4565b6065546001600160a01b0316331480610dd0575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190612077565b6001600160a01b0316336001600160a01b0316145b610dec5760405162461bcd60e51b81526004016103d590612182565b610a3f611736565b600082815260cd602090815260408083206001600160a01b03851684526003019091529020545b92915050565b6065546001600160a01b0316331480610ed0575060ca60009054906101000a90046001600160a01b03166001600160a01b031663502791b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8357600080fd5b505afa158015610e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebb9190612077565b6001600160a01b0316336001600160a01b0316145b610eec5760405162461bcd60e51b81526004016103d590612182565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b60008584148015610f1e57508582145b610f715760405162461bcd60e51b8152602060048201526030602482015260008051602061234683398151915260448201526f6c733a20496e76616c6964206461746160801b60648201526084016103d5565b6000805b878210156113fa5760cd60008a8a85818110610fa157634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020925060016003811115610fd957634e487b7160e01b600052602160045260246000fd5b600284015460ff16600381111561100057634e487b7160e01b600052602160045260246000fd5b146110585760405162461bcd60e51b815260206004820152603460248201526000805160206123468339815191526044820152731b1cce88125b9d985b1a59081b195d995b081a5960621b60648201526084016103d5565b6001600160a01b038a1660009081526003840160205260409020541515806110a6575086868381811061109b57634e487b7160e01b600052603260045260246000fd5b905060200201356000145b156110b0576113e8565b898989848181106110d157634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106110f857634e487b7160e01b600052603260045260246000fd5b9050602002013560405160200161112d939291906001600160a01b039390931683526020830191909152604082015260600190565b6040516020818303038152906040528051906020012090506111c085858481811061116857634e487b7160e01b600052603260045260246000fd5b905060200281019061117a919061225f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506111ba92508591506117b19050565b90611804565b60c9546001600160a01b039081169116146112295760405162461bcd60e51b815260206004820152603560248201526000805160206123468339815191526044820152746c733a20496e76616c6964207369676e617475726560581b60648201526084016103d5565b86868381811061124957634e487b7160e01b600052603260045260246000fd5b6001600160a01b038d1660009081526003870160209081526040909120910292909201359091555086868381811061129157634e487b7160e01b600052603260045260246000fd5b905060200201358360010154101561130b5760405162461bcd60e51b8152602060048201526043602482015260008051602061234683398151915260448201527f6c733a204c6576656c20646f65736e2774206861766520656e6f7567682066756064820152626e647360e81b608482015260a4016103d5565b61134a8a88888581811061132f57634e487b7160e01b600052603260045260246000fd5b87546001600160a01b03169392602090910201359050611575565b86868381811061136a57634e487b7160e01b600052603260045260246000fd5b9050602002013583600101600082825461138491906122bc565b9091555089905088838181106113aa57634e487b7160e01b600052603260045260246000fd5b905060200201358a6001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f724160405160405180910390a35b816113f2816122ff565b925050610f75565b50505050505050505050565b6065546001600160a01b031633146114305760405162461bcd60e51b81526004016103d5906121df565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610e1b60cb83611828565b6065546001600160a01b031633146114895760405162461bcd60e51b81526004016103d5906121df565b6001600160a01b0381166114ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d5565b6114f7816116e4565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526115659085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611834565b50505050565b6000610e1b825490565b6040516001600160a01b038316602482015260448101829052610b3f90849063a9059cbb60e01b9060640161152e565b60335460ff166115ee5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103d5565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff1661165f5760405162461bcd60e51b81526004016103d590612214565b611667611906565b610a3f61192d565b600054610100900460ff166116965760405162461bcd60e51b81526004016103d590612214565b610a3f61195d565b600054610100900460ff166116c55760405162461bcd60e51b81526004016103d590612214565b6033805460ff19169055565b60006116dd838361198b565b9392505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff161561177c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103d5565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861161b3390565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600080600061181385856119da565b9150915061182081611a4a565b509392505050565b60006116dd8383611c4b565b6000611889826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c839092919063ffffffff16565b805190915015610b3f57808060200190518101906118a79190612057565b610b3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d5565b600054610100900460ff16610a3f5760405162461bcd60e51b81526004016103d590612214565b600054610100900460ff166119545760405162461bcd60e51b81526004016103d590612214565b610a3f336116e4565b600054610100900460ff166119845760405162461bcd60e51b81526004016103d590612214565b6001609755565b60008181526001830160205260408120546119d257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e1b565b506000610e1b565b600080825160411415611a115760208301516040840151606085015160001a611a0587828585611c9a565b94509450505050611a43565b825160401415611a3b5760208301516040840151611a30868383611d87565b935093505050611a43565b506000905060025b9250929050565b6000816004811115611a6c57634e487b7160e01b600052602160045260246000fd5b1415611a755750565b6001816004811115611a9757634e487b7160e01b600052602160045260246000fd5b1415611ae55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103d5565b6002816004811115611b0757634e487b7160e01b600052602160045260246000fd5b1415611b555760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103d5565b6003816004811115611b7757634e487b7160e01b600052602160045260246000fd5b1415611bd05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103d5565b6004816004811115611bf257634e487b7160e01b600052602160045260246000fd5b14156114f75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103d5565b6000826000018281548110611c7057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6060611c928484600085611db6565b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611cd15750600090506003611d7e565b8460ff16601b14158015611ce957508460ff16601c14155b15611cfa5750600090506004611d7e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d4e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d7757600060019250925050611d7e565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01611da887828885611c9a565b935093505050935093915050565b606082471015611e175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103d5565b843b611e655760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d5565b600080866001600160a01b03168587604051611e8191906120f0565b60006040518083038185875af1925050503d8060008114611ebe576040519150601f19603f3d011682016040523d82523d6000602084013e611ec3565b606091505b5091509150611ed3828286611ede565b979650505050505050565b60608315611eed5750816116dd565b825115611efd5782518084602001fd5b8160405162461bcd60e51b81526004016103d5919061214f565b60008083601f840112611f28578182fd5b50813567ffffffffffffffff811115611f3f578182fd5b6020830191508360208260051b8501011115611a4357600080fd5b600060208284031215611f6b578081fd5b81356116dd81612330565b60008060008060008060006080888a031215611f90578283fd5b8735611f9b81612330565b9650602088013567ffffffffffffffff80821115611fb7578485fd5b611fc38b838c01611f17565b909850965060408a0135915080821115611fdb578485fd5b611fe78b838c01611f17565b909650945060608a0135915080821115611fff578384fd5b5061200c8a828b01611f17565b989b979a50959850939692959293505050565b60008060408385031215612031578182fd5b823561203c81612330565b9150602083013561204c81612330565b809150509250929050565b600060208284031215612068578081fd5b815180151581146116dd578182fd5b600060208284031215612088578081fd5b81516116dd81612330565b6000602082840312156120a4578081fd5b5035919050565b600080604083850312156120bd578182fd5b82359150602083013561204c81612330565b600080604083850312156120e1578182fd5b50508035926020909101359150565b600082516121028184602087016122d3565b9190910192915050565b6001600160a01b038416815260208101839052606081016004831061214157634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b602081526000825180602084015261216e8160408501602087016122d3565b601f01601f19169190910160400192915050565b6020808252603d908201527f4c6561726e416e644561726e3a2063616c6c6572206973206e6f74207468652060408201527f6f776e6572206e6f7220496d706163744d61726b6574436f756e63696c000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000808335601e19843603018112612275578283fd5b83018035915067ffffffffffffffff82111561228f578283fd5b602001915036819003821315611a4357600080fd5b600082198211156122b7576122b761231a565b500190565b6000828210156122ce576122ce61231a565b500390565b60005b838110156122ee5781810151838201526020016122d6565b838111156115655750506000910152565b60006000198214156123135761231361231a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146114f757600080fdfe4c6561726e416e644561726e3a3a636c61696d526577617264466f724c657665a264697066735822122016e3ec4ad79529df3b7f642f895d9af72f0d3b50541f0b3380fc184b7a4e243864736f6c63430008040033",
  "devdoc": {
    "events": {
      "LevelFunded(uint256,address,uint256)": {
        "params": {
          "amount": "Amount of the fund",
          "levelId": "Id of the level",
          "sender": "Address of the sender"
        }
      },
      "LevelStateChanged(uint256,uint8)": {
        "params": {
          "levelId": "Id of the level",
          "state": "New state of the level"
        }
      },
      "RewardClaimed(address,uint256)": {
        "params": {
          "beneficiary": "address of the beneficiary to be rewarded",
          "levelId": "the id of the level"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLevel(uint256,address)": {
        "params": {
          "_levelId": "the id of the level",
          "_token": "the token used for reward"
        }
      },
      "cancelLevel(uint256,address)": {
        "params": {
          "_fundRecipient": "the address of the recipient who will receive the funds allocated for this level",
          "_levelId": "id of the level"
        }
      },
      "claimRewardForLevels(address,uint256[],uint256[],bytes[])": {
        "params": {
          "_beneficiary": "address of the beneficiary to be rewarded",
          "_levelIds": "the ids of the levels",
          "_rewardAmounts": "the amounts of the tokens to be send to the beneficiary as reward for each level",
          "_signatures": "the signatures from the backend"
        }
      },
      "fundLevel(uint256,uint256)": {
        "params": {
          "_amount": "the amount to be funded",
          "_levelId": "the id of the level"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_signerWalletAddress": "Address of the backend wallet"
        }
      },
      "levelClaims(uint256,address)": {
        "params": {
          "_beneficiary": "address of the beneficiary",
          "_levelId": "id of the level"
        },
        "returns": {
          "_0": "reward amount claimed by the beneficiary for a level"
        }
      },
      "levelListAt(uint256)": {
        "params": {
          "_index": "index of the level"
        },
        "returns": {
          "_0": "id of the level"
        }
      },
      "levelListLength()": {
        "returns": {
          "_0": "uint256 number of levels"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "pauseLevel(uint256)": {
        "params": {
          "_levelId": "id of the level"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      },
      "unpauseLevel(uint256)": {
        "params": {
          "_levelId": "id of the level"
        }
      },
      "updateCommunityAdmin(address)": {
        "params": {
          "_newCommunityAdmin": "address of the new CommunityAdmin contract"
        }
      },
      "updateSignerWalletAddress(address)": {
        "params": {
          "_newSignerWalletAddress": "address of the new backend wallet"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LevelFunded(uint256,address,uint256)": {
        "notice": "Triggered when a level has been funded"
      },
      "LevelStateChanged(uint256,uint8)": {
        "notice": "Triggered when a level state has been changed"
      },
      "RewardClaimed(address,uint256)": {
        "notice": "Triggered when a reward has been claimed"
      }
    },
    "kind": "user",
    "methods": {
      "addLevel(uint256,address)": {
        "notice": "Adds a new level"
      },
      "cancelLevel(uint256,address)": {
        "notice": "Cancels a level"
      },
      "claimRewardForLevels(address,uint256[],uint256[],bytes[])": {
        "notice": "Allows beneficiaries to claim the reward for a list of levels using a signature"
      },
      "fundLevel(uint256,uint256)": {
        "notice": "Funds a level"
      },
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "initialize(address,address)": {
        "notice": "Used to initialize a new CommunityAdmin contract"
      },
      "levelClaims(uint256,address)": {
        "notice": "Returns the reward amount claimed by a beneficiary for a level"
      },
      "levelListAt(uint256)": {
        "notice": "Returns the id of a level from levelList"
      },
      "levelListLength()": {
        "notice": "Returns the number of levels"
      },
      "pauseLevel(uint256)": {
        "notice": "Pauses a level"
      },
      "unpauseLevel(uint256)": {
        "notice": "Unpauses a level"
      },
      "updateCommunityAdmin(address)": {
        "notice": "Updates the CommunityAdmin contract address"
      },
      "updateSignerWalletAddress(address)": {
        "notice": "Updates the address of the backend wallet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 542,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 545,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1370,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 630,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 721,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 736,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 779,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 24144,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "signerWalletAddress",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 24148,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "communityAdmin",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(ICommunityAdmin)15207"
      },
      {
        "astId": 24151,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "_levelList",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(UintSet)5662_storage"
      },
      {
        "astId": 24157,
        "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
        "label": "levels",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_struct(Level)24026_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICommunityAdmin)15207": {
        "encoding": "inplace",
        "label": "contract ICommunityAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)858": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(LevelState)24013": {
        "encoding": "inplace",
        "label": "enum ILearnAndEarn.LevelState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Level)24026_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILearnAndEarn.Level)",
        "numberOfBytes": "32",
        "value": "t_struct(Level)24026_storage"
      },
      "t_struct(Level)24026_storage": {
        "encoding": "inplace",
        "label": "struct ILearnAndEarn.Level",
        "members": [
          {
            "astId": 24016,
            "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Upgradeable)858"
          },
          {
            "astId": 24018,
            "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
            "label": "balance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24021,
            "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
            "label": "state",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(LevelState)24013"
          },
          {
            "astId": 24025,
            "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
            "label": "claims",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)5204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5199,
            "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5203,
            "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)5662_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5661,
            "contract": "contracts/learnAndEarn/LearnAndEarnImplementation.sol:LearnAndEarnImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5204_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}