{
  "address": "0xDB3c66969439C92aF83c7A89C75DE75DE413D53A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAgainstPeriods",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAgainstPeriods",
          "type": "uint256"
        }
      ],
      "name": "AgainstPeriodsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldClaimDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClaimDelay",
          "type": "uint256"
        }
      ],
      "name": "ClaimDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "donationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegateAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "DonationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardPeriod",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimedPartial",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRewardPeriodSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDecayNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDecayDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardPeriodSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDecayNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDecayDenominator",
          "type": "uint256"
        }
      ],
      "name": "RewardPeriodParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardPeriod",
          "type": "uint256"
        }
      ],
      "name": "RewardStakedPartial",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStakingDonationRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStakingDonationRatio",
          "type": "uint256"
        }
      ],
      "name": "StakingDonationRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldStaking",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newStaking",
          "type": "address"
        }
      ],
      "name": "StakingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "againstPeriods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donorAddress",
          "type": "address"
        }
      ],
      "name": "calculateClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDonorStakeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lastPeriodNumber",
          "type": "uint256"
        }
      ],
      "name": "calculateClaimableRewardsByPeriodNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDonorStakeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lastPeriodNumber",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsPartial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_delegateAddress",
          "type": "address"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "_community",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_delegateAddress",
          "type": "address"
        }
      ],
      "name": "donateToCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donations",
      "outputs": [
        {
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPeriodIndex",
          "type": "uint256"
        }
      ],
      "name": "donorRewardPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "donors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPeriodsCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donorAddress",
          "type": "address"
        }
      ],
      "name": "estimateClaimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_cUSD",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_PACT",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_firstRewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPeriodSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startingBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decayNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decayDenominator",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donor",
          "type": "address"
        }
      ],
      "name": "lastPeriodsDonations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPeriodCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_donor",
          "type": "address"
        }
      ],
      "name": "rewardPeriodDonorAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_donor",
          "type": "address"
        }
      ],
      "name": "rewardPeriodDonorStakeAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPeriodSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPeriods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationsAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstPeriods",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakesAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingDonationRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_holderAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        }
      ],
      "name": "setStakingAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lastPeriodNumber",
          "type": "uint256"
        }
      ],
      "name": "stakeRewardsPartial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingDonationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newAgainstPeriods",
          "type": "uint256"
        }
      ],
      "name": "updateAgainstPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newClaimDelay",
          "type": "uint256"
        }
      ],
      "name": "updateClaimDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRewardPeriodSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newDecayNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newDecayDenominator",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPeriodParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStaking",
          "name": "_newStaking",
          "type": "address"
        }
      ],
      "name": "updateStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newStakingDonationRatio",
          "type": "uint256"
        }
      ],
      "name": "updateStakingDonationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x11dec6205178c6d7329c80cc095104fdd6abcf2c9178e228fc1936d2f4b18d1d",
  "receipt": {
    "to": null,
    "from": "0xa34737409091eBD0726A3Ab5863Fc7Ee9243Edab",
    "contractAddress": "0xDB3c66969439C92aF83c7A89C75DE75DE413D53A",
    "transactionIndex": 1,
    "gasUsed": "2942172",
    "logsBloom": "0x
    "blockHash": "0xec3e62b63d3fad5c6adaa73f9ba66c9753a03043d6beb112354da688a44d67cf",
    "transactionHash": "0x11dec6205178c6d7329c80cc095104fdd6abcf2c9178e228fc1936d2f4b18d1d",
    "logs": [],
    "blockNumber": 11054652,
    "cumulativeGasUsed": "3033034",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "210918c9d1afa182817bd3d30ce90349",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAgainstPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAgainstPeriods\",\"type\":\"uint256\"}],\"name\":\"AgainstPeriodsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldClaimDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClaimDelay\",\"type\":\"uint256\"}],\"name\":\"ClaimDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"donationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"DonationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardPeriod\",\"type\":\"uint256\"}],\"name\":\"RewardClaimedPartial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardPeriodSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDecayNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDecayDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPeriodSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDecayNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDecayDenominator\",\"type\":\"uint256\"}],\"name\":\"RewardPeriodParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardPeriod\",\"type\":\"uint256\"}],\"name\":\"RewardStakedPartial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStakingDonationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakingDonationRatio\",\"type\":\"uint256\"}],\"name\":\"StakingDonationRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldStaking\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStaking\",\"type\":\"address\"}],\"name\":\"StakingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"againstPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donorAddress\",\"type\":\"address\"}],\"name\":\"calculateClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDonorStakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lastPeriodNumber\",\"type\":\"uint256\"}],\"name\":\"calculateClaimableRewardsByPeriodNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDonorStakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastPeriodNumber\",\"type\":\"uint256\"}],\"name\":\"claimRewardsPartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_delegateAddress\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"_community\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_delegateAddress\",\"type\":\"address\"}],\"name\":\"donateToCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPeriodIndex\",\"type\":\"uint256\"}],\"name\":\"donorRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPeriodsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donorAddress\",\"type\":\"address\"}],\"name\":\"estimateClaimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cUSD\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_PACT\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_firstRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPeriodSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decayNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decayDenominator\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"lastPeriodsDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriodCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"rewardPeriodDonorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"rewardPeriodDonorStakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriodSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDonationRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_holderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"setStakingAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastPeriodNumber\",\"type\":\"uint256\"}],\"name\":\"stakeRewardsPartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingDonationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAgainstPeriods\",\"type\":\"uint256\"}],\"name\":\"updateAgainstPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newClaimDelay\",\"type\":\"uint256\"}],\"name\":\"updateClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRewardPeriodSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDecayNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDecayDenominator\",\"type\":\"uint256\"}],\"name\":\"updateRewardPeriodParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"_newStaking\",\"type\":\"address\"}],\"name\":\"updateStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakingDonationRatio\",\"type\":\"uint256\"}],\"name\":\"updateStakingDonationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AgainstPeriodsUpdated(uint256,uint256)\":{\"params\":{\"newAgainstPeriods\":\"New againstPeriods value\",\"oldAgainstPeriods\":\"Old againstPeriods value\"}},\"ClaimDelayUpdated(uint256,uint256)\":{\"params\":{\"newClaimDelay\":\"New claimDelay value\",\"oldClaimDelay\":\"Old claimDelay value\"}},\"DonationAdded(uint256,address,uint256,address,uint256,address)\":{\"params\":{\"amount\":\"Number of token donated\",\"delegateAddress\":\"Address of the delegate\",\"donationId\":\"Id of the donation\",\"target\":\"Address of the receiver (community or treasury)                          or address of the DonationMiner contract otherwise\",\"token\":\"Address of the token after conversion\"}},\"RewardClaimed(address,uint256)\":{\"params\":{\"amount\":\"Value of the reward\",\"donor\":\"Address of the donner\"}},\"RewardClaimedPartial(address,uint256,uint256)\":{\"params\":{\"amount\":\"Value of the reward\",\"donor\":\"Address of the donner\",\"lastRewardPeriod\":\"Number of the last reward period for witch the claim was made\"}},\"RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"newDecayDenominator\":\"New decayDenominator value For further information regarding each parameter, see *DonationMiner* smart contract initialize method.\",\"newDecayNumerator\":\"New decayNumerator value\",\"newRewardPeriodSize\":\"New rewardPeriodSize value\",\"oldDecayDenominator\":\"Old decayDenominator value\",\"oldDecayNumerator\":\"Old decayNumerator value\",\"oldRewardPeriodSize\":\"Old rewardPeriodSize value\"}},\"RewardStaked(address,uint256)\":{\"params\":{\"amount\":\"Value of the reward\",\"donor\":\"Address of the donner\"}},\"RewardStakedPartial(address,uint256,uint256)\":{\"params\":{\"amount\":\"Value of the reward\",\"donor\":\"Address of the donner\",\"lastRewardPeriod\":\"Number of the last reward period for witch tha stake was made\"}},\"StakingDonationRatioUpdated(uint256,uint256)\":{\"params\":{\"newStakingDonationRatio\":\"New stakingDonationRatio value\",\"oldStakingDonationRatio\":\"Old stakingDonationRatio value\"}},\"StakingUpdated(address,address)\":{\"params\":{\"newStaking\":\"New staking address\",\"oldStaking\":\"Old staking address\"}},\"TransferERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the transaction\",\"to\":\"Address of the receiver\",\"token\":\"ERC20 token address\"}},\"TreasuryUpdated(address,address)\":{\"params\":{\"newTreasury\":\"New treasury address\",\"oldTreasury\":\"Old treasury address\"}}},\"kind\":\"dev\",\"methods\":{\"calculateClaimableRewards(address)\":{\"params\":{\"_donorAddress\":\"address of the donor\"},\"returns\":{\"claimAmount\":\"uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\",\"lastDonorStakeAmount\":\"uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\"}},\"calculateClaimableRewardsByPeriodNumber(address,uint256)\":{\"params\":{\"_donorAddress\":\"address of the donor\",\"_lastPeriodNumber\":\"last reward period number to be computed\"},\"returns\":{\"claimAmount\":\"uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\",\"lastDonorStakeAmount\":\"uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\"}},\"donate(address,uint256,address)\":{\"params\":{\"_amount\":\"Amount of cUSD tokens to deposit.\",\"_delegateAddress\":\"the address that will claim the reward for the donation\",\"_token\":\"address of the token\"}},\"donateToCommunity(address,address,uint256,address)\":{\"details\":\"Transfers tokens to the community contract\",\"params\":{\"_amount\":\"amount of cUSD tokens to deposit\",\"_community\":\"address of the community\",\"_delegateAddress\":\"the address that will claim the reward for the donation\",\"_token\":\"address of the token\"}},\"donorRewardPeriod(address,uint256)\":{\"params\":{\"_donor\":\"address of the donor\",\"_rewardPeriodIndex\":\"index of the reward period\"},\"returns\":{\"_0\":\"uint256 number of the reward period\"}},\"estimateClaimableReward(address)\":{\"params\":{\"_donorAddress\":\"address of the donor\"},\"returns\":{\"_0\":\"uint256 reward that donor will receive in current reward period if there isn't another donation\"}},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_PACT\":\"Address of the PACT Token\",\"_cUSD\":\"Address of the cUSD token\",\"_decayDenominator\":\"Decay denominator used for calculating the new reward per block based on the previous reward per block\",\"_decayNumerator\":\"Decay numerator used for calculating the new reward per block based on the previous reward per block\",\"_firstRewardPerBlock\":\"Number of PACTs given for each block                              from the first reward period\",\"_rewardPeriodSize\":\"Number of blocks of the reward period\",\"_startingBlock\":\"First block of the first reward period\",\"_treasury\":\"Address of the Treasury\"}},\"lastPeriodsDonations(address)\":{\"details\":\"Calculate all donations on the last X epochs as well as everyone else in the same period.\",\"params\":{\"_donor\":\"address of the donor\"},\"returns\":{\"_0\":\"uint256, uint256 sum of all donor's and everyone else donations\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardPeriodDonorAmount(uint256,address)\":{\"params\":{\"_donor\":\"address of the donor\",\"_period\":\"number of the reward period\"},\"returns\":{\"_0\":\"uint256 amount of cUSD donated by the user in this reward period\"}},\"rewardPeriodDonorStakeAmounts(uint256,address)\":{\"params\":{\"_donor\":\"address of the donor\",\"_period\":\"reward period number\"},\"returns\":{\"_0\":\"uint256 amount of PACT staked by a user at the and of the reward period\"}},\"transfer(address,address,uint256)\":{\"params\":{\"_amount\":\"amount of the transaction\",\"_to\":\"address of the receiver\",\"_token\":\"address of the ERC20 token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAgainstPeriods(uint256)\":{\"params\":{\"_newAgainstPeriods\":\"Number of reward periods for the backward computation\"}},\"updateClaimDelay(uint256)\":{\"params\":{\"_newClaimDelay\":\"Number of reward periods a donor has to wait after                            a donation until he will be able to claim his reward\"}},\"updateRewardPeriodParams(uint256,uint256,uint256)\":{\"params\":{\"_newDecayDenominator\":\"value of new decayDenominator\",\"_newDecayNumerator\":\"value of new decayNumerator\",\"_newRewardPeriodSize\":\"value of new rewardPeriodSize\"}},\"updateStaking(address)\":{\"params\":{\"_newStaking\":\"address of new Staking contract\"}},\"updateStakingDonationRatio(uint256)\":{\"params\":{\"_newStakingDonationRatio\":\"Number of tokens that need to be staked to be counted as 1 PACT donated\"}},\"updateTreasury(address)\":{\"params\":{\"_newTreasury\":\"address of new treasury_ contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AgainstPeriodsUpdated(uint256,uint256)\":{\"notice\":\"Triggered when the againstPeriods value has been updated\"},\"ClaimDelayUpdated(uint256,uint256)\":{\"notice\":\"Triggered when the claimDelay value has been updated\"},\"DonationAdded(uint256,address,uint256,address,uint256,address)\":{\"notice\":\"Triggered when a donation has been added\"},\"RewardClaimed(address,uint256)\":{\"notice\":\"Triggered when a donor has claimed his reward\"},\"RewardClaimedPartial(address,uint256,uint256)\":{\"notice\":\"Triggered when a donor has claimed his reward\"},\"RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggered when reward period params have been updated\"},\"RewardStaked(address,uint256)\":{\"notice\":\"Triggered when a donor has staked his reward\"},\"RewardStakedPartial(address,uint256,uint256)\":{\"notice\":\"Triggered when a donor has staked his reward\"},\"StakingDonationRatioUpdated(uint256,uint256)\":{\"notice\":\"Triggered when the stakingDonationRatio value has been updated\"},\"StakingUpdated(address,address)\":{\"notice\":\"Triggered when the staking address has been updated\"},\"TransferERC20(address,address,uint256)\":{\"notice\":\"Triggered when an amount of an ERC20 has been transferred from this contract to an address\"},\"TreasuryUpdated(address,address)\":{\"notice\":\"Triggered when the treasury address has been updated\"}},\"kind\":\"user\",\"methods\":{\"calculateClaimableRewards(address)\":{\"notice\":\"Calculates the rewards from ended reward periods of a donor\"},\"calculateClaimableRewardsByPeriodNumber(address,uint256)\":{\"notice\":\"Calculates the rewards from ended reward periods of a donor\"},\"claimRewards()\":{\"notice\":\"Transfers to the sender the rewards\"},\"claimRewardsPartial(uint256)\":{\"notice\":\"Transfers to the sender the rewards\"},\"donate(address,uint256,address)\":{\"notice\":\"Transfers cUSD tokens to the treasury contract\"},\"donorRewardPeriod(address,uint256)\":{\"notice\":\"Returns a reward period number from a donor reward period list\"},\"estimateClaimableReward(address)\":{\"notice\":\"Calculates the estimate reward of a donor for current reward period\"},\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used to initialize a new DonationMiner contract\"},\"rewardPeriodDonorAmount(uint256,address)\":{\"notice\":\"Returns the amount of cUSD donated by a user in a reward period\"},\"rewardPeriodDonorStakeAmounts(uint256,address)\":{\"notice\":\"Returns the amount of PACT staked by a user at the and of the reward period\"},\"stakeRewards()\":{\"notice\":\"Stakes the reward\"},\"stakeRewardsPartial(uint256)\":{\"notice\":\"Stakes the reward\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers an amount of an ERC20 from this contract to an address\"},\"updateAgainstPeriods(uint256)\":{\"notice\":\"Updates againstPeriods value\"},\"updateClaimDelay(uint256)\":{\"notice\":\"Updates claimDelay value\"},\"updateRewardPeriodParams(uint256,uint256,uint256)\":{\"notice\":\"Updates reward period default params\"},\"updateStaking(address)\":{\"notice\":\"Updates Staking address\"},\"updateStakingDonationRatio(uint256)\":{\"notice\":\"Updates stakingDonationRatio value\"},\"updateTreasury(address)\":{\"notice\":\"Updates Treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/donationMiner/DonationMinerImplementation.sol\":\"DonationMinerImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x33b8603bfbef7f33d9308b79c79aa3db7eb19525fd1addd764285e834ca275d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ambassadors/interfaces/IAmbassadors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAmbassadors {\\n    function getVersion() external returns(uint256);\\n    function isAmbassador(address _ambassador) external view returns (bool);\\n    function isAmbassadorOf(address _ambassador, address _community) external view returns (bool);\\n    function isEntityOf(address _ambassador, address _entityAddress) external view returns (bool);\\n    function isAmbassadorAt(address _ambassador, address _entityAddress) external view returns (bool);\\n\\n    function addEntity(address _entity) external;\\n    function removeEntity(address _entity) external;\\n    function replaceEntityAccount(address _entity, address _newEntity) external;\\n    function addAmbassador(address _ambassador) external;\\n    function removeAmbassador(address _ambassador) external;\\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador) external;\\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external;\\n    function transferAmbassador(address _ambassador, address _toEntity, bool _keepCommunities) external;\\n    function transferCommunityToAmbassador(address _to, address _community) external;\\n    function setCommunityToAmbassador(address _ambassador, address _community) external;\\n    function removeCommunity(address _community) external;\\n}\\n\",\"keccak256\":\"0xc65f840a3ae4f30e3a579e6113080334b31300c40b56596aeb77eaed67702133\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of cUSD received\\n        uint256 lastClaim;       //block number of the last claim\\n    }\\n\\n    function initialize(\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function getVersion() external returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address _beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 _index) external view returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function impactMarketAddress() external pure returns (address);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n    function lastFundRequest() external view returns(uint256);\\n\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function donate(address _sender, uint256 _amount) external;\\n    function addTreasuryFunds(uint256 _amount) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function addManager(address _managerAddress) external;\\n    function removeManager(address _managerAddress) external;\\n    function addBeneficiary(address _beneficiaryAddress) external;\\n    function lockBeneficiary(address _beneficiaryAddress) external;\\n    function unlockBeneficiary(address _beneficiaryAddress) external;\\n    function removeBeneficiary(address _beneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x26196a4ed9b1b04cebfd283cadcf6f02297e4c44a38a77e8f561a5698ce57a55\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../governor/ubiCommittee/interfaces/IUBICommittee.sol\\\";\\nimport \\\"../../ambassadors/interfaces/IAmbassadors.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function ubiCommittee() external view returns(IUBICommittee);\\n    function ambassadors() external view returns(IAmbassadors);\\n    function communityMiddleProxy() external view returns(address);\\n    function communities(address _community) external view returns(CommunityState);\\n    function communityImplementation() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 _index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity) external view returns (bool);\\n\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateUbiCommittee(IUBICommittee _newUbiCommittee) external;\\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external;\\n    function updateCommunityMiddleProxy(address _communityMiddleProxy) external;\\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\\n    function updateBeneficiaryParams(\\n        ICommunity _community,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity _community,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateProxyImplementation(address _CommunityMiddleProxy, address _newLogic) external;\\n    function addCommunity(\\n        address[] memory _managers,\\n        address _ambassador,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory _managers,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function addManagerToCommunity(ICommunity _community_, address _account_) external;\\n    function removeCommunity(ICommunity _community) external;\\n    function fundCommunity() external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function transferFromCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaa04e37f5615545fdafe80789a45e9a2770e8ec1e9b841a9641227cae9b9c799\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/DonationMinerImplementation.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/DonationMinerStorageV4.sol\\\";\\n\\ncontract DonationMinerImplementation is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DonationMinerStorageV4\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant COMMUNITY_DONATION_RATIO = 2;\\n\\n    /**\\n     * @notice Triggered when a donation has been added\\n     *\\n     * @param donationId        Id of the donation\\n     * @param delegateAddress   Address of the delegate\\n     * @param amount            Value of the donation\\n     * @param token             Address of the token after conversion\\n     * @param amount            Number of token donated\\n     * @param target            Address of the receiver (community or treasury)\\n     *                          or address of the DonationMiner contract otherwise\\n     */\\n    event DonationAdded(\\n        uint256 indexed donationId,\\n        address indexed delegateAddress,\\n        uint256 amount,\\n        address token,\\n        uint256 initialAmount,\\n        address indexed target\\n    );\\n\\n    /**\\n     * @notice Triggered when a donor has claimed his reward\\n     *\\n     * @param donor             Address of the donner\\n     * @param amount            Value of the reward\\n     */\\n    event RewardClaimed(address indexed donor, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a donor has claimed his reward\\n     *\\n     * @param donor             Address of the donner\\n     * @param amount            Value of the reward\\n     * @param lastRewardPeriod  Number of the last reward period for witch the claim was made\\n     */\\n    event RewardClaimedPartial(address indexed donor, uint256 amount, uint256 lastRewardPeriod);\\n\\n    /**\\n     * @notice Triggered when a donor has staked his reward\\n     *\\n     * @param donor             Address of the donner\\n     * @param amount            Value of the reward\\n     */\\n    event RewardStaked(address indexed donor, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a donor has staked his reward\\n     *\\n     * @param donor             Address of the donner\\n     * @param amount            Value of the reward\\n     * @param lastRewardPeriod  Number of the last reward period for witch tha stake was made\\n     */\\n    event RewardStakedPartial(address indexed donor, uint256 amount, uint256 lastRewardPeriod);\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\\n     *\\n     * @param token               ERC20 token address\\n     * @param to                  Address of the receiver\\n     * @param amount              Amount of the transaction\\n     */\\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when reward period params have been updated\\n     *\\n     * @param oldRewardPeriodSize   Old rewardPeriodSize value\\n     * @param oldDecayNumerator     Old decayNumerator value\\n     * @param oldDecayDenominator   Old decayDenominator value\\n     * @param newRewardPeriodSize   New rewardPeriodSize value\\n     * @param newDecayNumerator     New decayNumerator value\\n     * @param newDecayDenominator   New decayDenominator value\\n     *\\n     * For further information regarding each parameter, see\\n     * *DonationMiner* smart contract initialize method.\\n     */\\n    event RewardPeriodParamsUpdated(\\n        uint256 oldRewardPeriodSize,\\n        uint256 oldDecayNumerator,\\n        uint256 oldDecayDenominator,\\n        uint256 newRewardPeriodSize,\\n        uint256 newDecayNumerator,\\n        uint256 newDecayDenominator\\n    );\\n\\n    /**\\n     * @notice Triggered when the claimDelay value has been updated\\n     *\\n     * @param oldClaimDelay            Old claimDelay value\\n     * @param newClaimDelay            New claimDelay value\\n     */\\n    event ClaimDelayUpdated(uint256 oldClaimDelay, uint256 newClaimDelay);\\n\\n    /**\\n     * @notice Triggered when the stakingDonationRatio value has been updated\\n     *\\n     * @param oldStakingDonationRatio            Old stakingDonationRatio value\\n     * @param newStakingDonationRatio            New stakingDonationRatio value\\n     */\\n    event StakingDonationRatioUpdated(\\n        uint256 oldStakingDonationRatio,\\n        uint256 newStakingDonationRatio\\n    );\\n\\n    /**\\n     * @notice Triggered when the againstPeriods value has been updated\\n     *\\n     * @param oldAgainstPeriods            Old againstPeriods value\\n     * @param newAgainstPeriods            New againstPeriods value\\n     */\\n    event AgainstPeriodsUpdated(uint256 oldAgainstPeriods, uint256 newAgainstPeriods);\\n\\n    /**\\n     * @notice Triggered when the treasury address has been updated\\n     *\\n     * @param oldTreasury             Old treasury address\\n     * @param newTreasury             New treasury address\\n     */\\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\\n\\n    /**\\n     * @notice Triggered when the staking address has been updated\\n     *\\n     * @param oldStaking             Old staking address\\n     * @param newStaking             New staking address\\n     */\\n    event StakingUpdated(address indexed oldStaking, address indexed newStaking);\\n\\n    /**\\n     * @notice Enforces beginning rewardPeriod has started\\n     */\\n    modifier whenStarted() {\\n        require(block.number >= rewardPeriods[1].startBlock, \\\"DonationMiner: ERR_NOT_STARTED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be Staking contract\\n     */\\n    modifier onlyStaking() {\\n        require(msg.sender == address(staking), \\\"DonationMiner: NOT_STAKING\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize a new DonationMiner contract\\n     *\\n     * @param _cUSD                 Address of the cUSD token\\n     * @param _PACT                 Address of the PACT Token\\n     * @param _treasury             Address of the Treasury\\n     * @param _firstRewardPerBlock  Number of PACTs given for each block\\n     *                              from the first reward period\\n     * @param _rewardPeriodSize     Number of blocks of the reward period\\n     * @param _startingBlock        First block of the first reward period\\n     * @param _decayNumerator       Decay numerator used for calculating\\n                                    the new reward per block based on\\n                                    the previous reward per block\\n     * @param _decayDenominator     Decay denominator used for calculating\\n                                    the new reward per block based on\\n                                    the previous reward per block\\n     */\\n    function initialize(\\n        IERC20 _cUSD,\\n        IERC20 _PACT,\\n        ITreasury _treasury,\\n        uint256 _firstRewardPerBlock,\\n        uint256 _rewardPeriodSize,\\n        uint256 _startingBlock,\\n        uint256 _decayNumerator,\\n        uint256 _decayDenominator\\n    ) public initializer {\\n        require(address(_cUSD) != address(0), \\\"DonationMiner::initialize: cUSD address not set\\\");\\n        require(address(_PACT) != address(0), \\\"DonationMiner::initialize: PACT address not set\\\");\\n        require(address(_treasury) != address(0), \\\"DonationMiner::initialize: treasury_ not set\\\");\\n        require(\\n            _firstRewardPerBlock != 0,\\n            \\\"DonationMiner::initialize: firstRewardPerBlock not set!\\\"\\n        );\\n        require(_startingBlock != 0, \\\"DonationMiner::initialize: startingRewardPeriod not set!\\\");\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        cUSD = _cUSD;\\n        PACT = _PACT;\\n        treasury = _treasury;\\n        rewardPeriodSize = _rewardPeriodSize;\\n        decayNumerator = _decayNumerator;\\n        decayDenominator = _decayDenominator;\\n\\n        rewardPeriodCount = 1;\\n        initFirstPeriod(_startingBlock, _firstRewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 4;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of cUSD donated by a user in a reward period\\n     *\\n     * @param _period number of the reward period\\n     * @param _donor address of the donor\\n     * @return uint256 amount of cUSD donated by the user in this reward period\\n     */\\n    function rewardPeriodDonorAmount(uint256 _period, address _donor)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return rewardPeriods[_period].donorAmounts[_donor];\\n    }\\n\\n    /**\\n     * @notice Returns the amount of PACT staked by a user at the and of the reward period\\n     *\\n     * @param _period reward period number\\n     * @param _donor address of the donor\\n     * @return uint256 amount of PACT staked by a user at the and of the reward period\\n     */\\n    function rewardPeriodDonorStakeAmounts(uint256 _period, address _donor)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return rewardPeriods[_period].donorStakeAmounts[_donor];\\n    }\\n\\n    /**\\n     * @notice Returns a reward period number from a donor reward period list\\n     *\\n     * @param _donor address of the donor\\n     * @param _rewardPeriodIndex index of the reward period\\n     * @return uint256 number of the reward period\\n     */\\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return donors[_donor].rewardPeriods[_rewardPeriodIndex];\\n    }\\n\\n    /**\\n     * @notice Updates reward period default params\\n     *\\n     * @param _newRewardPeriodSize value of new rewardPeriodSize\\n     * @param _newDecayNumerator value of new decayNumerator\\n     * @param _newDecayDenominator value of new decayDenominator\\n     */\\n    function updateRewardPeriodParams(\\n        uint256 _newRewardPeriodSize,\\n        uint256 _newDecayNumerator,\\n        uint256 _newDecayDenominator\\n    ) external override onlyOwner {\\n        initializeRewardPeriods();\\n\\n        uint256 _oldRewardPeriodSize = rewardPeriodSize;\\n        uint256 _oldDecayNumerator = decayNumerator;\\n        uint256 _oldDecayDenominator = decayDenominator;\\n\\n        rewardPeriodSize = _newRewardPeriodSize;\\n        decayNumerator = _newDecayNumerator;\\n        decayDenominator = _newDecayDenominator;\\n\\n        emit RewardPeriodParamsUpdated(\\n            _oldRewardPeriodSize,\\n            _oldDecayNumerator,\\n            _oldDecayDenominator,\\n            _newRewardPeriodSize,\\n            _newDecayNumerator,\\n            _newDecayDenominator\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates claimDelay value\\n     *\\n     * @param _newClaimDelay      Number of reward periods a donor has to wait after\\n     *                            a donation until he will be able to claim his reward\\n     */\\n    function updateClaimDelay(uint256 _newClaimDelay) external override onlyOwner {\\n        uint256 _oldClaimDelay = claimDelay;\\n        claimDelay = _newClaimDelay;\\n\\n        emit ClaimDelayUpdated(_oldClaimDelay, _newClaimDelay);\\n    }\\n\\n    /**\\n     * @notice Updates stakingDonationRatio value\\n     *\\n     * @param _newStakingDonationRatio    Number of tokens that need to be staked to be counted as 1 PACT donated\\n     */\\n    function updateStakingDonationRatio(uint256 _newStakingDonationRatio)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 _oldStakingDonationRatio = stakingDonationRatio;\\n        stakingDonationRatio = _newStakingDonationRatio;\\n\\n        emit StakingDonationRatioUpdated(_oldStakingDonationRatio, _newStakingDonationRatio);\\n    }\\n\\n    /**\\n     * @notice Updates againstPeriods value\\n     *\\n     * @param _newAgainstPeriods      Number of reward periods for the backward computation\\n     */\\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external override onlyOwner {\\n        initializeRewardPeriods();\\n\\n        uint256 _oldAgainstPeriods = againstPeriods;\\n        againstPeriods = _newAgainstPeriods;\\n\\n        emit AgainstPeriodsUpdated(_oldAgainstPeriods, _newAgainstPeriods);\\n    }\\n\\n    /**\\n     * @notice Updates Treasury address\\n     *\\n     * @param _newTreasury address of new treasury_ contract\\n     */\\n    function updateTreasury(ITreasury _newTreasury) external override onlyOwner {\\n        address _oldTreasuryAddress = address(treasury);\\n        treasury = _newTreasury;\\n\\n        emit TreasuryUpdated(_oldTreasuryAddress, address(_newTreasury));\\n    }\\n\\n    /**\\n     * @notice Updates Staking address\\n     *\\n     * @param _newStaking address of new Staking contract\\n     */\\n    function updateStaking(IStaking _newStaking) external override onlyOwner {\\n        address _oldStakingAddress = address(staking);\\n        staking = _newStaking;\\n\\n        emit StakingUpdated(_oldStakingAddress, address(_newStaking));\\n    }\\n\\n    /**\\n     * @notice Transfers cUSD tokens to the treasury contract\\n     *\\n     * @param _token address of the token\\n     * @param _amount Amount of cUSD tokens to deposit.\\n     * @param _delegateAddress the address that will claim the reward for the donation\\n     */\\n    function donate(\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _delegateAddress\\n    ) external override whenNotPaused whenStarted nonReentrant {\\n        require(\\n            _token == cUSD || treasury.isToken(address(_token)),\\n            \\\"DonationMiner::donate: Invalid token\\\"\\n        );\\n\\n        _token.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        _addDonation(_delegateAddress, _token, _amount, address(treasury));\\n    }\\n\\n    /**\\n     * @dev Transfers tokens to the community contract\\n     *\\n     * @param _community address of the community\\n     * @param _token address of the token\\n     * @param _amount amount of cUSD tokens to deposit\\n     * @param _delegateAddress the address that will claim the reward for the donation\\n     */\\n    function donateToCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        uint256 _amount,\\n        address _delegateAddress\\n    ) external override whenNotPaused whenStarted nonReentrant {\\n        ICommunityAdmin _communityAdmin = treasury.communityAdmin();\\n        require(\\n            _communityAdmin.communities(address(_community)) ==\\n                ICommunityAdmin.CommunityState.Valid,\\n            \\\"DonationMiner::donateToCommunity: This is not a valid community address\\\"\\n        );\\n\\n        require(\\n            address(_token) == address(_community.cUSD()),\\n            \\\"DonationMiner::donateToCommunity: Invalid token\\\"\\n        );\\n\\n        _community.donate(msg.sender, _amount);\\n        _addDonation(_delegateAddress, _token, _amount, address(_community));\\n    }\\n\\n    /**\\n     * @dev Calculate all donations on the last X epochs as well as everyone\\n     * else in the same period.\\n     *\\n     * @param _donor address of the donor\\n     * @return uint256, uint256 sum of all donor's and everyone else donations\\n     */\\n    function lastPeriodsDonations(address _donor)\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 _donorValue = 0;\\n        uint256 _everyoneValue = 0;\\n        uint256 _startPeriod = rewardPeriodCount > againstPeriods ? rewardPeriodCount - againstPeriods : 0;\\n        for (uint256 i = _startPeriod; i <= rewardPeriodCount; i++) {\\n            _everyoneValue += rewardPeriods[i].donationsAmount;\\n            _donorValue += rewardPeriods[i].donorAmounts[_donor];\\n        }\\n        return (_donorValue, _everyoneValue);\\n    }\\n\\n    /**\\n     * @notice Transfers to the sender the rewards\\n     */\\n    function claimRewards() external override whenNotPaused whenStarted nonReentrant {\\n        uint256 _claimAmount = _computeRewardsByPeriodNumber(msg.sender, _getLastClaimablePeriod());\\n\\n        PACT.safeTransfer(msg.sender, _claimAmount);\\n\\n        emit RewardClaimed(msg.sender, _claimAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers to the sender the rewards\\n     */\\n    function claimRewardsPartial(uint256 _lastPeriodNumber)\\n        external\\n        override\\n        whenNotPaused\\n        whenStarted\\n        nonReentrant\\n    {\\n        require(\\n            _lastPeriodNumber <= _getLastClaimablePeriod(),\\n            \\\"DonationMiner::claimRewardsPartial: This reward period isn't claimable yet\\\"\\n        );\\n\\n        uint256 _claimAmount = _computeRewardsByPeriodNumber(msg.sender, _lastPeriodNumber);\\n\\n        PACT.safeTransfer(msg.sender, _claimAmount);\\n\\n        emit RewardClaimedPartial(msg.sender, _claimAmount, _lastPeriodNumber);\\n    }\\n\\n    /**\\n     * @notice Stakes the reward\\n     */\\n    function stakeRewards() external override whenNotPaused whenStarted nonReentrant {\\n        initializeRewardPeriods();\\n\\n        uint256 _stakeAmount = _computeRewardsByPeriodNumber(msg.sender, rewardPeriodCount - 1);\\n\\n        PACT.approve(address(staking), _stakeAmount);\\n        staking.stake(msg.sender, _stakeAmount);\\n\\n        emit RewardStaked(msg.sender, _stakeAmount);\\n    }\\n\\n    /**\\n     * @notice Stakes the reward\\n     */\\n    function stakeRewardsPartial(uint256 _lastPeriodNumber)\\n        external\\n        override\\n        whenNotPaused\\n        whenStarted\\n        nonReentrant\\n    {\\n        initializeRewardPeriods();\\n\\n        require(\\n            _lastPeriodNumber < rewardPeriodCount,\\n            \\\"DonationMiner::stakeRewardsPartial: This reward period isn't claimable yet\\\"\\n        );\\n\\n        uint256 _stakeAmount = _computeRewardsByPeriodNumber(msg.sender, _lastPeriodNumber);\\n\\n        PACT.approve(address(staking), _stakeAmount);\\n        staking.stake(msg.sender, _stakeAmount);\\n\\n        emit RewardStaked(msg.sender, _stakeAmount);\\n    }\\n\\n    /**\\n     * @notice Calculates the rewards from ended reward periods of a donor\\n     *\\n     * @param _donorAddress address of the donor\\n     * @param _lastPeriodNumber last reward period number to be computed\\n     * @return claimAmount uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\\n     * @return lastDonorStakeAmount uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\\n     */\\n    function calculateClaimableRewardsByPeriodNumber(\\n        address _donorAddress,\\n        uint256 _lastPeriodNumber\\n    ) external view override returns (uint256 claimAmount, uint256 lastDonorStakeAmount) {\\n        uint256 _maxRewardPeriod;\\n\\n        if (rewardPeriods[rewardPeriodCount].endBlock < block.number) {\\n            _maxRewardPeriod =\\n                (block.number - rewardPeriods[rewardPeriodCount].endBlock) /\\n                rewardPeriodSize;\\n            _maxRewardPeriod += rewardPeriodCount;\\n        } else {\\n            _maxRewardPeriod = rewardPeriodCount - 1;\\n        }\\n\\n        require(\\n            _lastPeriodNumber <= _maxRewardPeriod,\\n            \\\"DonationMiner::calculateClaimableRewardsByPeriodNumber: This reward period isn't available yet\\\"\\n        );\\n\\n        return _calculateRewardByPeriodNumber(_donorAddress, _lastPeriodNumber);\\n    }\\n\\n    /**\\n     * @notice Calculates the rewards from ended reward periods of a donor\\n     *\\n     * @param _donorAddress address of the donor\\n     * @return claimAmount uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\\n     * @return lastDonorStakeAmount uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\\n     */\\n    function calculateClaimableRewards(address _donorAddress)\\n        external\\n        view\\n        override\\n        returns (uint256 claimAmount, uint256 lastDonorStakeAmount)\\n    {\\n        uint256 _maxRewardPeriod;\\n\\n        if (rewardPeriods[rewardPeriodCount].endBlock < block.number) {\\n            _maxRewardPeriod =\\n                (block.number - rewardPeriods[rewardPeriodCount].endBlock) /\\n                rewardPeriodSize;\\n            _maxRewardPeriod += rewardPeriodCount;\\n        } else {\\n            _maxRewardPeriod = rewardPeriodCount - 1;\\n        }\\n\\n        return _calculateRewardByPeriodNumber(_donorAddress, _maxRewardPeriod);\\n    }\\n\\n    /**\\n     * @notice Calculates the estimate reward of a donor for current reward period\\n     *\\n     * @param _donorAddress address of the donor\\n     * @return uint256 reward that donor will receive in current reward period if there isn't another donation\\n     */\\n    function estimateClaimableReward(address _donorAddress)\\n        external\\n        view\\n        override\\n        whenStarted\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        if (!isCurrentRewardPeriodInitialized()) {\\n            return 0;\\n        }\\n\\n        RewardPeriod storage _lastRewardPeriod = rewardPeriods[rewardPeriodCount];\\n\\n        uint256 _totalAmount;\\n        uint256 _donorAmount;\\n        uint256 _claimAmount;\\n\\n        uint256 _startPeriod = (rewardPeriodCount > againstPeriods)\\n            ? rewardPeriodCount - againstPeriods\\n            : 0;\\n\\n        (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\\n            _donorAddress,\\n            _startPeriod,\\n            rewardPeriodCount\\n        );\\n\\n        _claimAmount += (_lastRewardPeriod.rewardAmount * _donorAmount) / _totalAmount;\\n\\n        return _claimAmount;\\n    }\\n\\n    /**\\n     * @notice Calculates the number of PACTs given for each block in current reward period\\n     *\\n     * @return uint256 current reward per block\\n     */\\n    function calculateRewardPerBlock() internal view returns (uint256) {\\n        return\\n            (rewardPeriods[rewardPeriodCount - 1].rewardPerBlock * decayNumerator) /\\n            decayDenominator;\\n    }\\n\\n    /**\\n     * @notice Transfers an amount of an ERC20 from this contract to an address\\n     *\\n     * @param _token address of the ERC20 token\\n     * @param _to address of the receiver\\n     * @param _amount amount of the transaction\\n     */\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner nonReentrant {\\n        _token.safeTransfer(_to, _amount);\\n\\n        emit TransferERC20(address(_token), _to, _amount);\\n    }\\n\\n    function setStakingAmounts(\\n        address _holderAddress,\\n        uint256 _holderAmount,\\n        uint256 _totalAmount\\n    ) external override whenNotPaused whenStarted onlyStaking {\\n        initializeRewardPeriods();\\n\\n        RewardPeriod storage _rewardPeriod = rewardPeriods[rewardPeriodCount];\\n        _rewardPeriod.hasSetStakeAmount[_holderAddress] = true;\\n        _rewardPeriod.donorStakeAmounts[_holderAddress] = _holderAmount;\\n        _rewardPeriod.stakesAmount = _totalAmount;\\n\\n        Donor storage _donor = donors[_holderAddress];\\n        //if user hasn't made any donation/staking\\n        //set _donor.lastClaimPeriod to be previous reward period\\n        //to not calculate reward for epochs 1 to rewardPeriodsCount -1\\n        if (_donor.lastClaimPeriod == 0 && _donor.rewardPeriodsCount == 0) {\\n            _donor.lastClaimPeriod = rewardPeriodCount - 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Initializes all reward periods that haven't been initialized yet until the current one.\\n     *         The first donor in a reward period will pay for that operation.\\n     */\\n    function initializeRewardPeriods() internal {\\n        RewardPeriod storage _lastPeriod = rewardPeriods[rewardPeriodCount];\\n\\n        while (_lastPeriod.endBlock < block.number) {\\n            rewardPeriodCount++;\\n            RewardPeriod storage _newPeriod = rewardPeriods[rewardPeriodCount];\\n            _newPeriod.againstPeriods = againstPeriods;\\n            _newPeriod.startBlock = _lastPeriod.endBlock + 1;\\n            _newPeriod.endBlock = _newPeriod.startBlock + rewardPeriodSize - 1;\\n            _newPeriod.rewardPerBlock = calculateRewardPerBlock();\\n            _newPeriod.stakesAmount = _lastPeriod.stakesAmount;\\n            _newPeriod.stakingDonationRatio = stakingDonationRatio;\\n            uint256 _rewardAmount = rewardPeriodSize * _newPeriod.rewardPerBlock;\\n\\n            uint256 _startPeriod = (rewardPeriodCount - 1 > _lastPeriod.againstPeriods)\\n                ? rewardPeriodCount - 1 - _lastPeriod.againstPeriods\\n                : 1;\\n\\n            if (!hasDonationOrStake(_startPeriod, rewardPeriodCount - 1)) {\\n                _rewardAmount += _lastPeriod.rewardAmount;\\n            }\\n            _newPeriod.rewardAmount = _rewardAmount;\\n            _lastPeriod = _newPeriod;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new donation in donations list\\n     *\\n     * @param _delegateAddress address of the wallet that will claim the reward\\n     * @param _initialAmount amount of the donation\\n     * @param _target address of the receiver (community or treasury)\\n     */\\n    function _addDonation(\\n        address _delegateAddress,\\n        IERC20 _token,\\n        uint256 _initialAmount,\\n        address _target\\n    ) internal {\\n        initializeRewardPeriods();\\n\\n        donationCount++;\\n        Donation storage _donation = donations[donationCount];\\n        _donation.donor = _delegateAddress;\\n        _donation.target = _target;\\n        _donation.blockNumber = block.number;\\n        _donation.rewardPeriod = rewardPeriodCount;\\n        _donation.token = _token;\\n        _donation.initialAmount = _initialAmount;\\n\\n        if (_target == address(treasury)) {\\n            _donation.amount = (_token == cUSD)\\n                ? _initialAmount\\n                : treasury.getConvertedAmount(address(_token), _initialAmount);\\n        } else {\\n            _donation.amount = _initialAmount / COMMUNITY_DONATION_RATIO;\\n        }\\n\\n        updateRewardPeriodAmounts(rewardPeriodCount, _delegateAddress, _donation.amount);\\n        addCurrentRewardPeriodToDonor(_delegateAddress);\\n\\n        emit DonationAdded(\\n            donationCount,\\n            _delegateAddress,\\n            _donation.amount,\\n            address(_token),\\n            _initialAmount,\\n            _target\\n        );\\n    }\\n\\n    /**\\n     * @notice Adds the current reward period number to a donor's list only if it hasn't been added yet\\n     *\\n     * @param _donorAddress address of the donor\\n     */\\n    function addCurrentRewardPeriodToDonor(address _donorAddress) internal {\\n        Donor storage _donor = donors[_donorAddress];\\n        uint256 _lastDonorRewardPeriod = _donor.rewardPeriods[_donor.rewardPeriodsCount];\\n\\n        //ensures that the current reward period number hasn't been added in the donor's list\\n        if (_lastDonorRewardPeriod != rewardPeriodCount) {\\n            _donor.rewardPeriodsCount++;\\n            _donor.rewardPeriods[_donor.rewardPeriodsCount] = rewardPeriodCount;\\n        }\\n\\n        //if user hasn't made any donation/staking\\n        //set _donor.lastClaimPeriod to be previous reward period\\n        //to not calculate reward for epochs 1 to rewardPeriodsCount -1\\n        if (_donor.lastClaimPeriod == 0 && _donor.rewardPeriodsCount == 0) {\\n            _donor.lastClaimPeriod = rewardPeriodCount - 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the amounts of a reward period\\n     *\\n     * @param _rewardPeriodNumber number of the reward period\\n     * @param _donorAddress address of the donor\\n     * @param _amount amount to be added\\n     */\\n    function updateRewardPeriodAmounts(\\n        uint256 _rewardPeriodNumber,\\n        address _donorAddress,\\n        uint256 _amount\\n    ) internal {\\n        RewardPeriod storage _currentPeriod = rewardPeriods[_rewardPeriodNumber];\\n        _currentPeriod.donationsAmount += _amount;\\n        _currentPeriod.donorAmounts[_donorAddress] += _amount;\\n    }\\n\\n    /**\\n     * @notice Checks if current reward period has been initialized\\n     *\\n     * @return bool true if current reward period has been initialized\\n     */\\n    function isCurrentRewardPeriodInitialized() internal view returns (bool) {\\n        return rewardPeriods[rewardPeriodCount].endBlock >= block.number;\\n    }\\n\\n    function _calculateDonorIntervalAmounts(\\n        address _donorAddress,\\n        uint256 _startPeriod,\\n        uint256 _endPeriod\\n    ) internal view returns (uint256, uint256) {\\n        uint256 _donorAmount;\\n        uint256 _totalAmount;\\n        uint256 _index;\\n        for (_index = _startPeriod; _index <= _endPeriod; _index++) {\\n            RewardPeriod storage _rewardPeriod = rewardPeriods[_index];\\n            _donorAmount += _rewardPeriod.donorAmounts[_donorAddress];\\n            _totalAmount += _rewardPeriod.donationsAmount;\\n        }\\n        return (_donorAmount, _totalAmount);\\n    }\\n\\n    function _getLastClaimablePeriod() internal returns (uint256) {\\n        initializeRewardPeriods();\\n\\n        return rewardPeriodCount > claimDelay + 1 ? rewardPeriodCount - 1 - claimDelay : 0;\\n    }\\n\\n    /**\\n     * @notice Computes the rewards\\n     */\\n    function _computeRewardsByPeriodNumber(address _donorAddress, uint256 _lastPeriodNumber)\\n        internal\\n        returns (uint256)\\n    {\\n        Donor storage _donor = donors[_donorAddress];\\n        uint256 _claimAmount;\\n        uint256 _lastDonorStakeAmount;\\n\\n        (_claimAmount, _lastDonorStakeAmount) = _calculateRewardByPeriodNumber(\\n            _donorAddress,\\n            _lastPeriodNumber\\n        );\\n\\n        if (_donor.lastClaimPeriod < _lastPeriodNumber) {\\n            _donor.lastClaimPeriod = _lastPeriodNumber;\\n        }\\n\\n        rewardPeriods[_lastPeriodNumber].donorStakeAmounts[_donorAddress] = _lastDonorStakeAmount;\\n\\n        if (_claimAmount == 0) {\\n            return _claimAmount;\\n        }\\n\\n        if (_claimAmount > PACT.balanceOf(address(this))) {\\n            _claimAmount = PACT.balanceOf(address(this));\\n        }\\n\\n        return _claimAmount;\\n    }\\n\\n    /**\\n     * @notice Calculates the reward for a donor starting with his last reward period claimed\\n     *\\n     * @param _donorAddress address of the donor\\n     * @param _lastPeriodNumber last reward period number to be computed\\n     * @return _claimAmount uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber\\n     * @return _lastDonorStakeAmount uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber\\n     */\\n    function _calculateRewardByPeriodNumber(address _donorAddress, uint256 _lastPeriodNumber)\\n        internal\\n        view\\n        returns (uint256 _claimAmount, uint256 _lastDonorStakeAmount)\\n    {\\n        Donor storage _donor = donors[_donorAddress];\\n\\n        // _index is the last reward period number for which the donor claimed his reward\\n        uint256 _index = _donor.lastClaimPeriod + 1;\\n\\n        // this is only used for the transition from V2 to V3\\n        // we have to be sure a user is not able to claim for a epoch that he's claimed\\n        //      so, if the _donor.lastClaimPeriod hasn't been set yet,\\n        //      we will start from _donor.rewardPeriods[_donor.lastClaim]\\n        if (_index == 1) {\\n            _index = _donor.rewardPeriods[_donor.lastClaim] + 1;\\n        }\\n\\n        uint256 _donorAmount;\\n        uint256 _totalAmount;\\n        uint256 _rewardAmount;\\n        uint256 _stakesAmount;\\n        uint256 _stakingDonationRatio;\\n\\n        //first time _previousRewardPeriod must be rewardPeriods[0] in order to have:\\n        //_currentRewardPeriod.againstPeriods = _currentRewardPeriod.againstPeriods - _previousRewardPeriod.againstPeriods\\n        RewardPeriod storage _previousRewardPeriod = rewardPeriods[0];\\n        RewardPeriod storage _currentRewardPeriod = rewardPeriods[_index];\\n        RewardPeriod storage _expiredRewardPeriod = rewardPeriods[0];\\n\\n        //we save the stake amount of a donor at the end of each claim,\\n        //so rewardPeriods[_index - 1].donorStakeAmounts[_donorAddress] is the amount staked by the donor at his last claim\\n        _lastDonorStakeAmount = rewardPeriods[_index - 1].donorStakeAmounts[_donorAddress];\\n\\n        while (_index <= _lastPeriodNumber) {\\n            if (_currentRewardPeriod.startBlock > 0) {\\n                // this case is used to calculate the reward for periods that have been initialized yet\\n\\n                if (_currentRewardPeriod.againstPeriods == 0) {\\n                    _donorAmount = _currentRewardPeriod.donorAmounts[_donorAddress];\\n                    _totalAmount = _currentRewardPeriod.donationsAmount;\\n                } else if (\\n                    _previousRewardPeriod.againstPeriods == _currentRewardPeriod.againstPeriods\\n                ) {\\n                    if (_index > _currentRewardPeriod.againstPeriods + 1) {\\n                        _expiredRewardPeriod = rewardPeriods[\\n                            _index - 1 - _currentRewardPeriod.againstPeriods\\n                        ];\\n                        _donorAmount -= _expiredRewardPeriod.donorAmounts[_donorAddress];\\n                        _totalAmount -= _expiredRewardPeriod.donationsAmount;\\n                    }\\n\\n                    _donorAmount += _currentRewardPeriod.donorAmounts[_donorAddress];\\n                    _totalAmount += _currentRewardPeriod.donationsAmount;\\n                } else {\\n                    if (_index > _currentRewardPeriod.againstPeriods) {\\n                        (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\\n                            _donorAddress,\\n                            _index - _currentRewardPeriod.againstPeriods,\\n                            _index\\n                        );\\n                    } else {\\n                        (_donorAmount, _totalAmount) = _calculateDonorIntervalAmounts(\\n                            _donorAddress,\\n                            0,\\n                            _index\\n                        );\\n                    }\\n                }\\n\\n                _rewardAmount = _currentRewardPeriod.rewardAmount;\\n                _stakesAmount = _currentRewardPeriod.stakesAmount;\\n                _stakingDonationRatio = _currentRewardPeriod.stakingDonationRatio > 0\\n                    ? _currentRewardPeriod.stakingDonationRatio\\n                    : 1;\\n            } else {\\n                // this case is used to calculate the reward for periods that have not been initialized yet\\n                // E.g. calculateClaimableRewardsByPeriodNumber & calculateClaimableRewards\\n                // this step can be reached only after calculating the reward for periods that have been initialized\\n\\n                if (_index > againstPeriods + 1) {\\n                    _expiredRewardPeriod = rewardPeriods[_index - 1 - againstPeriods];\\n\\n                    //we already know that _donorAmount >= _expiredRewardPeriod.donorAmounts[_donorAddress]\\n                    //because _donorAmount is a sum of some donorAmounts, including _expiredRewardPeriod.donorAmounts[_donorAddress]\\n                    _donorAmount -= _expiredRewardPeriod.donorAmounts[_donorAddress];\\n                    //we already know that _totalAmount >= _expiredRewardPeriod.donationsAmount\\n                    //because _totalAmount is a sum of some donationsAmounts, including _expiredRewardPeriod.donationsAmount\\n                    _totalAmount -= _expiredRewardPeriod.donationsAmount;\\n                }\\n\\n                _donorAmount += _currentRewardPeriod.donorAmounts[_donorAddress];\\n                _totalAmount += _currentRewardPeriod.donationsAmount;\\n                _rewardAmount = (_rewardAmount * decayNumerator) / decayDenominator;\\n            }\\n\\n            if (_currentRewardPeriod.hasSetStakeAmount[_donorAddress]) {\\n                _lastDonorStakeAmount = _currentRewardPeriod.donorStakeAmounts[_donorAddress];\\n            }\\n\\n            if (_donorAmount + _lastDonorStakeAmount > 0) {\\n                _claimAmount +=\\n                    (_rewardAmount *\\n                        (_donorAmount * _stakingDonationRatio + _lastDonorStakeAmount)) /\\n                    (_totalAmount * _stakingDonationRatio + _stakesAmount);\\n            }\\n\\n            _index++;\\n\\n            _previousRewardPeriod = _currentRewardPeriod;\\n            _currentRewardPeriod = rewardPeriods[_index];\\n        }\\n\\n        return (_claimAmount, _lastDonorStakeAmount);\\n    }\\n\\n    /**\\n     * @notice Initializes the first reward period\\n     *\\n     * @param _startingBlock first block\\n     * @param _firstRewardPerBlock initial reward per block\\n     */\\n    function initFirstPeriod(uint256 _startingBlock, uint256 _firstRewardPerBlock) internal {\\n        RewardPeriod storage _firstPeriod = rewardPeriods[1];\\n        _firstPeriod.startBlock = _startingBlock;\\n        _firstPeriod.endBlock = _startingBlock + rewardPeriodSize - 1;\\n        _firstPeriod.rewardPerBlock = _firstRewardPerBlock;\\n        _firstPeriod.rewardAmount = _firstRewardPerBlock * rewardPeriodSize;\\n    }\\n\\n    /**\\n     * @notice Checks if there is any donation or stake between _startPeriod and _endPeriod\\n     *\\n     * @return bool true if there is any donation or stake\\n     */\\n    function hasDonationOrStake(uint256 _startPeriod, uint256 _endPeriod)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        while (_startPeriod <= _endPeriod) {\\n            if (\\n                rewardPeriods[_startPeriod].donationsAmount +\\n                    rewardPeriods[_startPeriod].stakesAmount >\\n                0\\n            ) {\\n                return true;\\n            }\\n            _startPeriod++;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x66db86d48654a3372a5f14dd5593968b49cec2bb07c98c50b7785f9fee31ce7f\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/interfaces/DonationMinerStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDonationMiner.sol\\\";\\n\\n/**\\n * @title Storage for DonationMiner\\n * @notice For future upgrades, do not change DonationMinerStorageV1. Create a new\\n * contract which implements DonationMinerStorageV1 and following the naming convention\\n * DonationMinerStorageVX.\\n */\\nabstract contract DonationMinerStorageV1 is IDonationMiner {\\n    IERC20 public override cUSD;\\n    IERC20 public override PACT;\\n    ITreasury public override treasury;\\n    uint256 public override rewardPeriodSize;\\n    uint256 public override donationCount;\\n    uint256 public override rewardPeriodCount;\\n    uint256 public override decayNumerator;\\n    uint256 public override decayDenominator;\\n\\n    mapping(uint256 => Donation) public override donations;\\n    mapping(uint256 => RewardPeriod) public override rewardPeriods;\\n    mapping(address => Donor) public override donors;\\n}\\n\",\"keccak256\":\"0xbb465fff32060d6983c67534b070186f30c3262aa00455369e04956e0b16b8aa\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/interfaces/DonationMinerStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./DonationMinerStorageV1.sol\\\";\\n\\n/**\\n * @title Storage for DonationMiner\\n * @notice For future upgrades, do not change DonationMinerStorageV2. Create a new\\n * contract which implements DonationMinerStorageV2 and following the naming convention\\n * DonationMinerStorageVX.\\n */\\nabstract contract DonationMinerStorageV2 is DonationMinerStorageV1 {\\n    uint256 public override claimDelay;\\n}\\n\",\"keccak256\":\"0xa1ab0931c25fe01eea23794d2e8eded1a8ea3523e563a14ac95b36d2f6374504\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/interfaces/DonationMinerStorageV3.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./DonationMinerStorageV2.sol\\\";\\n\\n/**\\n * @title Storage for DonationMiner\\n * @notice For future upgrades, do not change DonationMinerStorageV3. Create a new\\n * contract which implements DonationMinerStorageV3 and following the naming convention\\n * DonationMinerStorageVX.\\n */\\nabstract contract DonationMinerStorageV3 is DonationMinerStorageV2 {\\n    uint256 public override againstPeriods;\\n}\\n\",\"keccak256\":\"0x8759a40a183f4feba5130873eb13de6791c2d649a358e216beb93b0fe0a5c6fd\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/interfaces/DonationMinerStorageV4.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./DonationMinerStorageV3.sol\\\";\\n\\n/**\\n * @title Storage for DonationMiner\\n * @notice For future upgrades, do not change DonationMinerStorageV4. Create a new\\n * contract which implements DonationMinerStorageV4 and following the naming convention\\n * DonationMinerStorageVX.\\n */\\nabstract contract DonationMinerStorageV4 is DonationMinerStorageV3 {\\n    IStaking public override staking;\\n    //ratio between 1 cUSD donated and 1 PACT staked\\n    uint256 public override stakingDonationRatio;\\n}\\n\",\"keccak256\":\"0x50c66797b7e8a464ab2253fc0b950792d99857b81f6211c95ce64cb1fee461d8\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/interfaces/IDonationMiner.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../staking/interfaces/IStaking.sol\\\";\\n\\ninterface IDonationMiner {\\n    struct RewardPeriod {\\n        //reward tokens created per block\\n        uint256 rewardPerBlock;\\n        //reward tokens from previous periods + reward tokens from this reward period\\n        uint256 rewardAmount;\\n        //block number at which reward period starts\\n        uint256 startBlock;\\n        //block number at which reward period ends\\n        uint256 endBlock;\\n        //total of donations for this rewardPeriod\\n        uint256 donationsAmount;\\n        //amounts donated by every donor in this rewardPeriod\\n        mapping(address => uint256) donorAmounts;\\n        uint256 againstPeriods;\\n        //total stake amount at the end of this rewardPeriod\\n        uint256 stakesAmount;\\n        //ratio between 1 cUSD donated and 1 PACT staked\\n        uint256 stakingDonationRatio;\\n        //true if user has staked/unstaked in this reward period\\n        mapping(address => bool) hasSetStakeAmount;\\n        //stake amount of a user at the end of this reward period;\\n        //if a user doesn't stake/unstake in a reward period,\\n        //              this value will remain 0 (and hasSetStakeAmount will be false)\\n        //if hasNewStakeAmount is false it means the donorStakeAmount\\n        //              is the same as the last reward period where hasSetStakeAmount is true\\n        mapping(address => uint256) donorStakeAmounts;\\n    }\\n\\n    struct Donor {\\n        uint256 lastClaim;  //last reward period index for which the donor has claimed the reward; used until v2\\n        uint256 rewardPeriodsCount; //total number of reward periods in which the donor donated\\n        mapping(uint256 => uint256) rewardPeriods; //list of all reward period ids in which the donor donated\\n        uint256 lastClaimPeriod; //last reward period id for which the donor has claimed the reward\\n    }\\n\\n    struct Donation {\\n        address donor;  //address of the donner\\n        address target;  //address of the receiver (community or treasury)\\n        uint256 rewardPeriod;  //number of the reward period in which the donation was made\\n        uint256 blockNumber;  //number of the block in which the donation was executed\\n        uint256 amount;  //the convertedAmount value\\n        IERC20 token;  //address of the token\\n        uint256 initialAmount;  //number of tokens donated\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function cUSD() external view returns (IERC20);\\n    function PACT() external view returns (IERC20);\\n    function treasury() external view returns (ITreasury);\\n    function staking() external view returns (IStaking);\\n    function rewardPeriodSize() external view returns (uint256);\\n    function decayNumerator() external view returns (uint256);\\n    function decayDenominator() external view returns (uint256);\\n    function stakingDonationRatio() external view returns (uint256);\\n    function rewardPeriodCount() external view returns (uint256);\\n    function donationCount() external view returns (uint256);\\n    function rewardPeriods(uint256 _period) external view returns (\\n        uint256 rewardPerBlock,\\n        uint256 rewardAmount,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        uint256 donationsAmount,\\n        uint256 againstPeriods,\\n        uint256 stakesAmount,\\n        uint256 stakingDonationRatio\\n\\n);\\n    function rewardPeriodDonorAmount(uint256 _period, address _donor) external view returns (uint256);\\n    function rewardPeriodDonorStakeAmounts(uint256 _period, address _donor) external view returns (uint256);\\n    function donors(address _donor) external view returns (\\n        uint256 rewardPeriodsCount,\\n        uint256 lastClaim,\\n        uint256 lastClaimPeriod\\n    );\\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex) external view returns (uint256);\\n    function donations(uint256 _index) external view returns (\\n        address donor,\\n        address target,\\n        uint256 rewardPeriod,\\n        uint256 blockNumber,\\n        uint256 amount,\\n        IERC20 token,\\n        uint256 tokenPrice\\n    );\\n    function claimDelay() external view returns (uint256);\\n    function againstPeriods() external view returns (uint256);\\n    function updateRewardPeriodParams(\\n        uint256 _newRewardPeriodSize,\\n        uint256 _newDecayNumerator,\\n        uint256 _newDecayDenominator\\n    ) external;\\n    function updateClaimDelay(uint256 _newClaimDelay) external;\\n    function updateStakingDonationRatio(uint256 _newStakingDonationRatio) external;\\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external;\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateStaking(IStaking _newStaking) external;\\n    function donate(IERC20 _token, uint256 _amount, address _delegateAddress) external;\\n    function donateToCommunity(ICommunity _community, IERC20 _token, uint256 _amount, address _delegateAddress) external;\\n    function lastPeriodsDonations(address _donor) external view returns (uint256, uint256);\\n    function claimRewards() external;\\n    function claimRewardsPartial(uint256 _lastPeriodNumber) external;\\n    function stakeRewards() external;\\n    function stakeRewardsPartial(uint256 _lastPeriodNumber) external;\\n    function calculateClaimableRewards(address _donor) external returns (uint256 claimAmount, uint256 lastDonorStakeAmount);\\n    function calculateClaimableRewardsByPeriodNumber(address _donor, uint256 _lastPeriodNumber) external returns (uint256 claimAmount, uint256 lastDonorStakeAmount);\\n    function estimateClaimableReward(address _donor) external view returns (uint256);\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function setStakingAmounts(address _holderAddress, uint256 _holderStakeAmount, uint256 _totalStakesAmount) external;\\n}\\n\",\"keccak256\":\"0x29d18deb13e94b013502ad745ee189ad835f0d5d3abbbb28acd2490d21624317\",\"license\":\"Apache-2.0\"},\"contracts/governor/ubiCommittee/interfaces/IUBICommittee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"./ICommunity.sol\\\";\\n// import \\\"../../treasury/interfaces/ITreasury.sol\\\";\\n// import \\\"../../governance/interfaces/IUBICommittee.sol\\\";\\n\\ninterface IUBICommittee {\\n    //\\n}\\n\",\"keccak256\":\"0x1a2e34ba0542587a3c615310e3beb76770e95ad358213e4a917f7a3b76014305\",\"license\":\"Apache-2.0\"},\"contracts/staking/interfaces/IStaking.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../donationMiner/interfaces/IDonationMiner.sol\\\";\\nimport \\\"../../token/interfaces/IMintableToken.sol\\\";\\n\\ninterface IStaking {\\n    struct Unstake {\\n        uint256 amount;         //amount unstaked\\n        uint256 cooldownBlock;  //first block number that will allow holder to claim this unstake\\n    }\\n\\n    struct Holder {\\n        uint256 amount;          // amount of PACT that are staked by holder\\n        uint256 nextUnstakeId;   //\\n        Unstake[] unstakes;      //list of all unstakes amount\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function PACT() external view returns (IERC20);\\n    function SPACT() external view returns (IMintableToken);\\n    function donationMiner() external view returns (IDonationMiner);\\n    function cooldown() external returns(uint256);\\n    function currentTotalAmount() external returns(uint256);\\n    function stakeholderAmount(address _holderAddress) external view returns(uint256);\\n    function stakeholdersListAt(uint256 _index) external view returns (address);\\n    function stakeholdersListLength() external view returns (uint256);\\n\\n    function stake(address _holder, uint256 _amount) external;\\n    function unstake(uint256 _amount) external;\\n    function claim() external;\\n}\\n\",\"keccak256\":\"0x579e18049b9bef4dd98da815b0c66442e6b625ed4f01ffada6e8f83d012286c3\",\"license\":\"Apache-2.0\"},\"contracts/token/interfaces/IMintableToken.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IMintableToken {\\n    function mint(address _account, uint96 _amount) external;\\n    function burn(address _account, uint96 _amount) external;\\n}\\n\",\"keccak256\":\"0xd10989482c0fad009f9a9fa8aada5ce7d87e4b9a44943bc2031964bf5bdfa04c\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\ninterface ITreasury {\\n    struct Token {\\n        uint256 rate;\\n        address[] exchangePath;\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function uniswapRouter() external view returns(IUniswapV2Router);\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updateUniswapRouter(IUniswapV2Router _uniswapRouter) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function isToken(address _tokenAddress) external view returns (bool);\\n    function tokenListLength() external view returns (uint256);\\n    function tokenListAt(uint256 _index) external view returns (address);\\n    function tokens(address _tokenAddress) external view returns (uint256 rate, address[] memory exchangePath);\\n    function setToken(address _tokenAddress, uint256 _rate, address[] calldata _exchangePath) external;\\n    function removeToken(address _tokenAddress) external;\\n    function getConvertedAmount(address _tokenAddress, uint256 _amount) external view returns (uint256);\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] memory _exchangePath,\\n        uint256 _deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28f21d39880e3ef9bcd2422b109ac6fdc2eab02a65d3d28f154afbf2ed8b7599\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address tokenA, address tokenB) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a12eebf4cf3741e1b1a30a4315096ae6d545af2e07a92e544d05739ceb811e9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061343f806100206000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c806392ade29911610146578063cd75000c116100c3578063e247b8d811610087578063e247b8d8146105dd578063e48508df146105f0578063ed409ff314610603578063f2fde38b1461060c578063f8626af81461061f578063fef4af86146106bd57600080fd5b8063cd75000c14610562578063cf42879514610575578063cf9d0b5f146105af578063de8f41ba146105b7578063df8fa430146105ca57600080fd5b8063ad3e48c51161010a578063ad3e48c5146104d6578063beabacc8146104e9578063c38474c0146104fc578063c89d1a8e14610505578063ca0cdea81461051857600080fd5b806392ade29914610495578063a345f38d1461049e578063a4b01bf5146104b1578063a70e940b146104c4578063ac9e0388146104cd57600080fd5b80634cf088d9116101df578063715018a6116101a3578063715018a6146103a25780637f51bb1f146103aa578063821787ec146103bd5780638252097d146103e55780638901e985146104715780638da5cb5b1461048457600080fd5b80634cf088d91461034057806359d0bfff146103535780635c975abb1461036657806361d027b31461037c5780636cc40c2c1461038f57600080fd5b80632abfab4d116102265780632abfab4d146102cf5780632bef5eef146102d8578063372500ab146102eb5780633b9a0176146102f35780633ddec5311461030657600080fd5b806307ea4e57146102635780630d1e9b4a1461027f5780630d8e6e2c146102945780631c8ec2991461029b5780631fccf672146102a4575b600080fd5b61026c60cf5481565b6040519081526020015b60405180910390f35b61029261028d3660046130b8565b6106d0565b005b600461026c565b61026c60d45481565b60c9546102b7906001600160a01b031681565b6040516001600160a01b039091168152602001610276565b61026c60cd5481565b61026c6102e6366004613148565b61088a565b6102926108b7565b60ca546102b7906001600160a01b031681565b61026c610314366004612f15565b6001600160a01b0391909116600090815260d36020908152604080832093835260029093019052205490565b60d6546102b7906001600160a01b031681565b610292610361366004612fb0565b6109a6565b60655460ff166040519015158152602001610276565b60cb546102b7906001600160a01b031681565b61029261039d366004613118565b610d27565b610292610f77565b6102926103b8366004612ef9565b610fad565b6103d06103cb366004612f15565b611029565b60408051928352602083019190915201610276565b6104366103f3366004613118565b60d2602052600090815260409020805460018201546002830154600384015460048501546006860154600787015460089097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610276565b61029261047f366004613118565b611150565b6033546001600160a01b03166102b7565b61026c60d05481565b6102926104ac366004612ef9565b6111c0565b6102926104bf366004613118565b61123c565b61026c60d55481565b61026c60d75481565b6102926104e4366004612f40565b6112ac565b6102926104f7366004613002565b6113ee565b61026c60ce5481565b61026c610513366004612ef9565b6114ab565b610547610526366004612ef9565b60d36020526000908152604090208054600182015460039092015490919083565b60408051938452602084019290925290820152606001610276565b6103d0610570366004612ef9565b6115ab565b61026c610583366004613148565b600082815260d2602090815260408083206001600160a01b0385168452600a0190915290205492915050565b610292611634565b6102926105c5366004613118565b6117f6565b6102926105d8366004613042565b611968565b6102926105eb366004613118565b611cc9565b6102926105fe366004613177565b611d31565b61026c60cc5481565b61029261061a366004612ef9565b611ddd565b61067961062d366004613118565b60d16020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696948616959394929391929091169087565b604080516001600160a01b03988916815296881660208801528601949094526060850192909252608084015290921660a082015260c081019190915260e001610276565b6103d06106cb366004612ef9565b611e78565b60655460ff16156106fc5760405162461bcd60e51b81526004016106f390613228565b60405180910390fd5b600160005260d26020526000805160206133ea833981519152544310156107355760405162461bcd60e51b81526004016106f3906131f1565b600260975414156107585760405162461bcd60e51b81526004016106f3906132d2565b600260975560c9546001600160a01b03848116911614806107f1575060cb546040516319f3736160e01b81526001600160a01b038581166004830152909116906319f373619060240160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190612f74565b6108495760405162461bcd60e51b8152602060048201526024808201527f446f6e6174696f6e4d696e65723a3a646f6e6174653a20496e76616c6964207460448201526337b5b2b760e11b60648201526084016106f3565b60cb54610865906001600160a01b038581169133911685611f1e565b60cb54610880908290859085906001600160a01b0316611f8f565b5050600160975550565b600082815260d2602090815260408083206001600160a01b03851684526005019091529020545b92915050565b60655460ff16156108da5760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156109135760405162461bcd60e51b81526004016106f3906131f1565b600260975414156109365760405162461bcd60e51b81526004016106f3906132d2565b6002609755600061094e33610949612151565b612198565b60ca54909150610968906001600160a01b03163383612315565b60405181815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241906020015b60405180910390a2506001609755565b60655460ff16156109c95760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea83398151915254431015610a025760405162461bcd60e51b81526004016106f3906131f1565b60026097541415610a255760405162461bcd60e51b81526004016106f3906132d2565b600260975560cb5460408051632fd648bd60e11b815290516000926001600160a01b031691635fac917a916004808301926020929190829003018186803b158015610a6f57600080fd5b505afa158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190612f94565b90506001604051633f9409e960e11b81526001600160a01b038781166004830152831690637f2813d29060240160206040518083038186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906130f9565b6003811115610b4357634e487b7160e01b600052602160045260246000fd5b14610bc65760405162461bcd60e51b815260206004820152604760248201527f446f6e6174696f6e4d696e65723a3a646f6e617465546f436f6d6d756e69747960448201527f3a2054686973206973206e6f7420612076616c696420636f6d6d756e697479206064820152666164647265737360c81b608482015260a4016106f3565b846001600160a01b0316631fccf6726040518163ffffffff1660e01b815260040160206040518083038186803b158015610bff57600080fd5b505afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c379190612f94565b6001600160a01b0316846001600160a01b031614610caf5760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a646f6e617465546f436f6d6d756e69747960448201526e1d1024b73b30b634b2103a37b5b2b760891b60648201526084016106f3565b60405163e69d849d60e01b8152336004820152602481018490526001600160a01b0386169063e69d849d90604401600060405180830381600087803b158015610cf757600080fd5b505af1158015610d0b573d6000803e3d6000fd5b50505050610d1b82858588611f8f565b50506001609755505050565b60655460ff1615610d4a5760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea83398151915254431015610d835760405162461bcd60e51b81526004016106f3906131f1565b60026097541415610da65760405162461bcd60e51b81526004016106f3906132d2565b6002609755610db361234a565b60ce548110610e3d5760405162461bcd60e51b815260206004820152604a60248201527f446f6e6174696f6e4d696e65723a3a7374616b6552657761726473506172746960448201527f616c3a20546869732072657761726420706572696f642069736e277420636c616064820152691a5b58589b19481e595d60b21b608482015260a4016106f3565b6000610e493383612198565b60ca5460d65460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015610e9b57600080fd5b505af1158015610eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed39190612f74565b5060d6546040516356e4bb9760e11b8152336004820152602481018390526001600160a01b039091169063adc9772e90604401600060405180830381600087803b158015610f2057600080fd5b505af1158015610f34573d6000803e3d6000fd5b50506040518381523392507f7d3a0ab251dfd8c04c691239edd99d2c124cce6971cebc4c2ed96a378d13d50091506020015b60405180910390a250506001609755565b6033546001600160a01b03163314610fa15760405162461bcd60e51b81526004016106f390613252565b610fab6000612477565b565b6033546001600160a01b03163314610fd75760405162461bcd60e51b81526004016106f390613252565b60cb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a90600090a35050565b60ce54600090815260d260205260408120600301548190819043111561108c5760cc5460ce54600090815260d2602052604090206003015461106b9043613360565b6110759190613321565b905060ce54816110859190613309565b905061109e565b600160ce5461109b9190613360565b90505b8084111561113a5760405162461bcd60e51b815260206004820152605e60248201527f446f6e6174696f6e4d696e65723a3a63616c63756c617465436c61696d61626c60448201527f65526577617264734279506572696f644e756d6265723a20546869732072657760648201527f61726420706572696f642069736e277420617661696c61626c65207965740000608482015260a4016106f3565b61114485856124c9565b92509250509250929050565b6033546001600160a01b0316331461117a5760405162461bcd60e51b81526004016106f390613252565b60d780549082905560408051828152602081018490527fb7ce19da4d8265c844e0fa744e3429c62104c793f8ecb52d1b418b47eb9f855591015b60405180910390a15050565b6033546001600160a01b031633146111ea5760405162461bcd60e51b81526004016106f390613252565b60d680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fcfa056eb826b2a28817aa38ccb94f12ba8a1309598f7ea19bef6fd67fe04b61e90600090a35050565b6033546001600160a01b031633146112665760405162461bcd60e51b81526004016106f390613252565b61126e61234a565b60d580549082905560408051828152602081018490527fd6a28c11ae992e0014e83eaaa6f0023a04c0787848134e8b4e43f44b7d7d8e3091016111b4565b60655460ff16156112cf5760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156113085760405162461bcd60e51b81526004016106f3906131f1565b60d6546001600160a01b031633146113625760405162461bcd60e51b815260206004820152601a60248201527f446f6e6174696f6e4d696e65723a204e4f545f5354414b494e4700000000000060448201526064016106f3565b61136a61234a565b60ce54600090815260d2602090815260408083206001600160a01b0387168452600981018352818420805460ff19166001179055600a810183528184208690556007810185905560d390925290912060038101541580156113cd57506001810154155b156113e757600160ce546113e19190613360565b60038201555b5050505050565b6033546001600160a01b031633146114185760405162461bcd60e51b81526004016106f390613252565b6002609754141561143b5760405162461bcd60e51b81526004016106f3906132d2565b60026097556114546001600160a01b0384168383612315565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a89568360405161149991815260200190565b60405180910390a35050600160975550565b6001600090815260d26020526000805160206133ea833981519152544310156114e65760405162461bcd60e51b81526004016106f3906131f1565b60655460ff16156115095760405162461bcd60e51b81526004016106f390613228565b60ce54600090815260d2602052604090206003015443111561152d57506000919050565b60ce54600081815260d26020526040812060d554909282918291829110611555576000611565565b60d55460ce546115659190613360565b9050611574878260ce546128ef565b6001870154909550909350849061158c908590613341565b6115969190613321565b6115a09083613309565b979650505050505050565b60ce54600090815260d260205260408120600301548190819043111561160e5760cc5460ce54600090815260d260205260409020600301546115ed9043613360565b6115f79190613321565b905060ce54816116079190613309565b9050611620565b600160ce5461161d9190613360565b90505b61162a84826124c9565b9250925050915091565b60655460ff16156116575760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156116905760405162461bcd60e51b81526004016106f3906131f1565b600260975414156116b35760405162461bcd60e51b81526004016106f3906132d2565b60026097556116c061234a565b60006116d533600160ce546109499190613360565b60ca5460d65460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b15801561172757600080fd5b505af115801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f9190612f74565b5060d6546040516356e4bb9760e11b8152336004820152602481018390526001600160a01b039091169063adc9772e90604401600060405180830381600087803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b50506040518381523392507f7d3a0ab251dfd8c04c691239edd99d2c124cce6971cebc4c2ed96a378d13d5009150602001610996565b60655460ff16156118195760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156118525760405162461bcd60e51b81526004016106f3906131f1565b600260975414156118755760405162461bcd60e51b81526004016106f3906132d2565b6002609755611882612151565b81111561190a5760405162461bcd60e51b815260206004820152604a60248201527f446f6e6174696f6e4d696e65723a3a636c61696d52657761726473506172746960448201527f616c3a20546869732072657761726420706572696f642069736e277420636c616064820152691a5b58589b19481e595d60b21b608482015260a4016106f3565b60006119163383612198565b60ca54909150611930906001600160a01b03163383612315565b604080518281526020810184905233917f2233b4bbf378b3d984acd0e36cea96f66bc81012a683e81929ed96df5287ba3d9101610f66565b600054610100900460ff166119835760005460ff1615611987565b303b155b6119ea5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f3565b600054610100900460ff16158015611a0c576000805461ffff19166101011790555b6001600160a01b038916611a7a5760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20635553442060448201526e1859191c995cdcc81b9bdd081cd95d608a1b60648201526084016106f3565b6001600160a01b038816611ae85760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20504143542060448201526e1859191c995cdcc81b9bdd081cd95d608a1b60648201526084016106f3565b6001600160a01b038716611b535760405162461bcd60e51b815260206004820152602c60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20747265617360448201526b1d5c9e57c81b9bdd081cd95d60a21b60648201526084016106f3565b85611bc65760405162461bcd60e51b815260206004820152603760248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20666972737460448201527f526577617264506572426c6f636b206e6f74207365742100000000000000000060648201526084016106f3565b83611c395760405162461bcd60e51b815260206004820152603860248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20737461727460448201527f696e67526577617264506572696f64206e6f742073657421000000000000000060648201526084016106f3565b611c41612964565b611c4961299b565b611c516129d2565b60c980546001600160a01b03808c166001600160a01b03199283161790925560ca80548b841690831617905560cb8054928a169290911691909117905560cc85905560cf83905560d0829055600160ce55611cac8487612a01565b8015611cbe576000805461ff00191690555b505050505050505050565b6033546001600160a01b03163314611cf35760405162461bcd60e51b81526004016106f390613252565b60d480549082905560408051828152602081018490527f7625e5482008771a414881eb4c957803f2ab46e99e6da60df6e1310f0f009fec91016111b4565b6033546001600160a01b03163314611d5b5760405162461bcd60e51b81526004016106f390613252565b611d6361234a565b60cc805460cf805460d080549488905591869055908490556040805183815260208101839052908101849052606081018790526080810186905260a08101859052919290917f8fb29c6ced5ce51696c08668df816fab7e60c674a6c36e167d5df9b8a5f499849060c00160405180910390a1505050505050565b6033546001600160a01b03163314611e075760405162461bcd60e51b81526004016106f390613252565b6001600160a01b038116611e6c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106f3565b611e7581612477565b50565b600080600080600060d55460ce5411611e92576000611ea2565b60d55460ce54611ea29190613360565b9050805b60ce548111611f1257600081815260d26020526040902060040154611ecb9084613309565b600082815260d2602090815260408083206001600160a01b038c168452600501909152902054909350611efe9085613309565b935080611f0a816133a3565b915050611ea6565b50919590945092505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611f899085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a78565b50505050565b611f9761234a565b60cd8054906000611fa7836133a3565b909155505060cd54600090815260d16020526040902080546001600160a01b038087166001600160a01b0319928316178355600183018054858316908416811790915543600385015560ce5460028501556005840180548884169416939093179092556006830185905560cb541614156120c55760c9546001600160a01b038581169116146120b95760cb5460405163f2b8995160e01b81526001600160a01b038681166004830152602482018690529091169063f2b899519060440160206040518083038186803b15801561207c57600080fd5b505afa158015612090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b49190613130565b6120bb565b825b60048201556120d6565b6120d0600284613321565b60048201555b6120e760ce54868360040154612b4a565b6120f085612ba7565b60cd546004820154604080519182526001600160a01b03878116602084015290820186905280851692908816917f3d2fa2b84d5f2000d605401d563ba60e2e44f62701fdbe9f9101c59b3c215f299060600160405180910390a45050505050565b600061215b61234a565b60d454612169906001613309565b60ce54116121775750600090565b60d454600160ce546121899190613360565b6121939190613360565b905090565b6001600160a01b038216600090815260d36020526040812081806121bc86866124c9565b600385015491935091508511156121d557600383018590555b600085815260d2602090815260408083206001600160a01b038a168452600a0190915290208190558161220c575091506108b19050565b60ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561224f57600080fd5b505afa158015612263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122879190613130565b82111561230c5760ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156122d157600080fd5b505afa1580156122e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123099190613130565b91505b50949350505050565b6040516001600160a01b03831660248201526044810182905261234590849063a9059cbb60e01b90606401611f52565b505050565b60ce54600090815260d2602052604090205b4381600301541015611e755760ce8054906000612378836133a3565b909155505060ce54600090815260d26020526040902060d554600682015560038201546123a6906001613309565b6002820181905560cc546001916123bd9190613309565b6123c79190613360565b60038201556123d4612c40565b8082556007808401549083015560d754600883015560cc546000916123f891613341565b905060008360060154600160ce546124109190613360565b1161241c57600161243a565b8360060154600160ce546124309190613360565b61243a9190613360565b905061245481600160ce5461244f9190613360565b612c81565b61246a5760018401546124679083613309565b91505b506001820155905061235c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600090815260d360205260408120600381015482919082906124f6906001613309565b90508060011415612522578154600090815260028301602052604090205461251f906001613309565b90505b60d26020819052600082815260408120818052909182918291829182917f20791b593a776a2631a28f4a3f62a14ad18db22add38130c4f4a8fdfa4639885919082908461257060018c613360565b8152602001908152602001600020600a0160008f6001600160a01b03166001600160a01b03168152602001908152602001600020549a505b8c89116128de576002820154156127395760068201546125ec576001600160a01b038e1660009081526005830160205260409020546004830154909850965061270b565b8160060154836006015414156126c957600682015461260c906001613309565b89111561268b5760d26000836006015460018c6126299190613360565b6126339190613360565b815260200190815260200160002090508060050160008f6001600160a01b03166001600160a01b0316815260200190815260200160002054886126769190613360565b97508060040154876126889190613360565b96505b6001600160a01b038e1660009081526005830160205260409020546126b09089613309565b97508160040154876126c29190613309565b965061270b565b81600601548911156126f9576126ef8e83600601548b6126e99190613360565b8b6128ef565b909850965061270b565b6127058e60008b6128ef565b90985096505b8160010154955081600701549450600082600801541161272c576001612732565b81600801545b935061281b565b60d554612747906001613309565b8911156127c45760d2600060d55460018c6127629190613360565b61276c9190613360565b815260200190815260200160002090508060050160008f6001600160a01b03166001600160a01b0316815260200190815260200160002054886127af9190613360565b97508060040154876127c19190613360565b96505b6001600160a01b038e1660009081526005830160205260409020546127e99089613309565b97508160040154876127fb9190613309565b965060d05460cf548761280e9190613341565b6128189190613321565b95505b6001600160a01b038e16600090815260098301602052604090205460ff161561285c576001600160a01b038e166000908152600a830160205260409020549a505b60006128688c8a613309565b11156128b957846128798589613341565b6128839190613309565b8b61288e868b613341565b6128989190613309565b6128a29088613341565b6128ac9190613321565b6128b6908d613309565b9b505b886128c3816133a3565b600081815260d260205260409020909a509293506125a89050565b505050505050505050509250929050565b6000808080855b85811161295757600081815260d2602090815260408083206001600160a01b038c168452600581019092529091205461292f9085613309565b93508060040154836129419190613309565b925050808061294f906133a3565b9150506128f6565b5090969095509350505050565b600054610100900460ff1661298b5760405162461bcd60e51b81526004016106f390613287565b612993612cd7565b610fab612cfe565b600054610100900460ff166129c25760405162461bcd60e51b81526004016106f390613287565b6129ca612cd7565b610fab612d2e565b600054610100900460ff166129f95760405162461bcd60e51b81526004016106f390613287565b610fab612d61565b6001600081905260d26020526000805160206133ea83398151915283905560cc547fb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f359190612a4f9085613309565b612a599190613360565b600382015581815560cc54612a6e9083613341565b6001909101555050565b6000612acd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d8f9092919063ffffffff16565b8051909150156123455780806020019051810190612aeb9190612f74565b6123455760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f3565b600083815260d26020526040812060048101805491928492612b6d908490613309565b90915550506001600160a01b038316600090815260058201602052604081208054849290612b9c908490613309565b909155505050505050565b6001600160a01b038116600090815260d36020908152604080832060018101548452600281019092529091205460ce548114612c0e57600182018054906000612bef836133a3565b909155505060ce54600183015460009081526002840160205260409020555b6003820154158015612c2257506001820154155b1561234557600160ce54612c369190613360565b6003830155505050565b600060d05460cf5460d26000600160ce54612c5b9190613360565b815260200190815260200160002060000154612c779190613341565b6121939190613321565b60005b818311612cce57600083815260d2602052604081206007810154600490910154612cae9190613309565b1115612cbc575060016108b1565b82612cc6816133a3565b935050612c84565b50600092915050565b600054610100900460ff16610fab5760405162461bcd60e51b81526004016106f390613287565b600054610100900460ff16612d255760405162461bcd60e51b81526004016106f390613287565b610fab33612477565b600054610100900460ff16612d555760405162461bcd60e51b81526004016106f390613287565b6065805460ff19169055565b600054610100900460ff16612d885760405162461bcd60e51b81526004016106f390613287565b6001609755565b6060612d9e8484600085612da8565b90505b9392505050565b606082471015612e095760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f3565b843b612e575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f3565b600080866001600160a01b03168587604051612e7391906131a2565b60006040518083038185875af1925050503d8060008114612eb0576040519150601f19603f3d011682016040523d82523d6000602084013e612eb5565b606091505b50915091506115a082828660608315612ecf575081612da1565b825115612edf5782518084602001fd5b8160405162461bcd60e51b81526004016106f391906131be565b600060208284031215612f0a578081fd5b8135612da1816133d4565b60008060408385031215612f27578081fd5b8235612f32816133d4565b946020939093013593505050565b600080600060608486031215612f54578081fd5b8335612f5f816133d4565b95602085013595506040909401359392505050565b600060208284031215612f85578081fd5b81518015158114612da1578182fd5b600060208284031215612fa5578081fd5b8151612da1816133d4565b60008060008060808587031215612fc5578081fd5b8435612fd0816133d4565b93506020850135612fe0816133d4565b9250604085013591506060850135612ff7816133d4565b939692955090935050565b600080600060608486031215613016578283fd5b8335613021816133d4565b92506020840135613031816133d4565b929592945050506040919091013590565b600080600080600080600080610100898b03121561305e578384fd5b8835613069816133d4565b97506020890135613079816133d4565b96506040890135613089816133d4565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b6000806000606084860312156130cc578283fd5b83356130d7816133d4565b92506020840135915060408401356130ee816133d4565b809150509250925092565b60006020828403121561310a578081fd5b815160048110612da1578182fd5b600060208284031215613129578081fd5b5035919050565b600060208284031215613141578081fd5b5051919050565b6000806040838503121561315a578182fd5b82359150602083013561316c816133d4565b809150509250929050565b60008060006060848603121561318b578081fd5b505081359360208301359350604090920135919050565b600082516131b4818460208701613377565b9190910192915050565b60208152600082518060208401526131dd816040850160208701613377565b601f01601f19169190910160400192915050565b6020808252601e908201527f446f6e6174696f6e4d696e65723a204552525f4e4f545f535441525445440000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561331c5761331c6133be565b500190565b60008261333c57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561335b5761335b6133be565b500290565b600082821015613372576133726133be565b500390565b60005b8381101561339257818101518382015260200161337a565b83811115611f895750506000910152565b60006000198214156133b7576133b76133be565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611e7557600080fdfeb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f37a264697066735822122055afc40014182fc4af69e26fc1efd14cffb11e97167a55cea622cfd841d9abd764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c806392ade29911610146578063cd75000c116100c3578063e247b8d811610087578063e247b8d8146105dd578063e48508df146105f0578063ed409ff314610603578063f2fde38b1461060c578063f8626af81461061f578063fef4af86146106bd57600080fd5b8063cd75000c14610562578063cf42879514610575578063cf9d0b5f146105af578063de8f41ba146105b7578063df8fa430146105ca57600080fd5b8063ad3e48c51161010a578063ad3e48c5146104d6578063beabacc8146104e9578063c38474c0146104fc578063c89d1a8e14610505578063ca0cdea81461051857600080fd5b806392ade29914610495578063a345f38d1461049e578063a4b01bf5146104b1578063a70e940b146104c4578063ac9e0388146104cd57600080fd5b80634cf088d9116101df578063715018a6116101a3578063715018a6146103a25780637f51bb1f146103aa578063821787ec146103bd5780638252097d146103e55780638901e985146104715780638da5cb5b1461048457600080fd5b80634cf088d91461034057806359d0bfff146103535780635c975abb1461036657806361d027b31461037c5780636cc40c2c1461038f57600080fd5b80632abfab4d116102265780632abfab4d146102cf5780632bef5eef146102d8578063372500ab146102eb5780633b9a0176146102f35780633ddec5311461030657600080fd5b806307ea4e57146102635780630d1e9b4a1461027f5780630d8e6e2c146102945780631c8ec2991461029b5780631fccf672146102a4575b600080fd5b61026c60cf5481565b6040519081526020015b60405180910390f35b61029261028d3660046130b8565b6106d0565b005b600461026c565b61026c60d45481565b60c9546102b7906001600160a01b031681565b6040516001600160a01b039091168152602001610276565b61026c60cd5481565b61026c6102e6366004613148565b61088a565b6102926108b7565b60ca546102b7906001600160a01b031681565b61026c610314366004612f15565b6001600160a01b0391909116600090815260d36020908152604080832093835260029093019052205490565b60d6546102b7906001600160a01b031681565b610292610361366004612fb0565b6109a6565b60655460ff166040519015158152602001610276565b60cb546102b7906001600160a01b031681565b61029261039d366004613118565b610d27565b610292610f77565b6102926103b8366004612ef9565b610fad565b6103d06103cb366004612f15565b611029565b60408051928352602083019190915201610276565b6104366103f3366004613118565b60d2602052600090815260409020805460018201546002830154600384015460048501546006860154600787015460089097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610276565b61029261047f366004613118565b611150565b6033546001600160a01b03166102b7565b61026c60d05481565b6102926104ac366004612ef9565b6111c0565b6102926104bf366004613118565b61123c565b61026c60d55481565b61026c60d75481565b6102926104e4366004612f40565b6112ac565b6102926104f7366004613002565b6113ee565b61026c60ce5481565b61026c610513366004612ef9565b6114ab565b610547610526366004612ef9565b60d36020526000908152604090208054600182015460039092015490919083565b60408051938452602084019290925290820152606001610276565b6103d0610570366004612ef9565b6115ab565b61026c610583366004613148565b600082815260d2602090815260408083206001600160a01b0385168452600a0190915290205492915050565b610292611634565b6102926105c5366004613118565b6117f6565b6102926105d8366004613042565b611968565b6102926105eb366004613118565b611cc9565b6102926105fe366004613177565b611d31565b61026c60cc5481565b61029261061a366004612ef9565b611ddd565b61067961062d366004613118565b60d16020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696948616959394929391929091169087565b604080516001600160a01b03988916815296881660208801528601949094526060850192909252608084015290921660a082015260c081019190915260e001610276565b6103d06106cb366004612ef9565b611e78565b60655460ff16156106fc5760405162461bcd60e51b81526004016106f390613228565b60405180910390fd5b600160005260d26020526000805160206133ea833981519152544310156107355760405162461bcd60e51b81526004016106f3906131f1565b600260975414156107585760405162461bcd60e51b81526004016106f3906132d2565b600260975560c9546001600160a01b03848116911614806107f1575060cb546040516319f3736160e01b81526001600160a01b038581166004830152909116906319f373619060240160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190612f74565b6108495760405162461bcd60e51b8152602060048201526024808201527f446f6e6174696f6e4d696e65723a3a646f6e6174653a20496e76616c6964207460448201526337b5b2b760e11b60648201526084016106f3565b60cb54610865906001600160a01b038581169133911685611f1e565b60cb54610880908290859085906001600160a01b0316611f8f565b5050600160975550565b600082815260d2602090815260408083206001600160a01b03851684526005019091529020545b92915050565b60655460ff16156108da5760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156109135760405162461bcd60e51b81526004016106f3906131f1565b600260975414156109365760405162461bcd60e51b81526004016106f3906132d2565b6002609755600061094e33610949612151565b612198565b60ca54909150610968906001600160a01b03163383612315565b60405181815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241906020015b60405180910390a2506001609755565b60655460ff16156109c95760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea83398151915254431015610a025760405162461bcd60e51b81526004016106f3906131f1565b60026097541415610a255760405162461bcd60e51b81526004016106f3906132d2565b600260975560cb5460408051632fd648bd60e11b815290516000926001600160a01b031691635fac917a916004808301926020929190829003018186803b158015610a6f57600080fd5b505afa158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190612f94565b90506001604051633f9409e960e11b81526001600160a01b038781166004830152831690637f2813d29060240160206040518083038186803b158015610aec57600080fd5b505afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906130f9565b6003811115610b4357634e487b7160e01b600052602160045260246000fd5b14610bc65760405162461bcd60e51b815260206004820152604760248201527f446f6e6174696f6e4d696e65723a3a646f6e617465546f436f6d6d756e69747960448201527f3a2054686973206973206e6f7420612076616c696420636f6d6d756e697479206064820152666164647265737360c81b608482015260a4016106f3565b846001600160a01b0316631fccf6726040518163ffffffff1660e01b815260040160206040518083038186803b158015610bff57600080fd5b505afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c379190612f94565b6001600160a01b0316846001600160a01b031614610caf5760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a646f6e617465546f436f6d6d756e69747960448201526e1d1024b73b30b634b2103a37b5b2b760891b60648201526084016106f3565b60405163e69d849d60e01b8152336004820152602481018490526001600160a01b0386169063e69d849d90604401600060405180830381600087803b158015610cf757600080fd5b505af1158015610d0b573d6000803e3d6000fd5b50505050610d1b82858588611f8f565b50506001609755505050565b60655460ff1615610d4a5760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea83398151915254431015610d835760405162461bcd60e51b81526004016106f3906131f1565b60026097541415610da65760405162461bcd60e51b81526004016106f3906132d2565b6002609755610db361234a565b60ce548110610e3d5760405162461bcd60e51b815260206004820152604a60248201527f446f6e6174696f6e4d696e65723a3a7374616b6552657761726473506172746960448201527f616c3a20546869732072657761726420706572696f642069736e277420636c616064820152691a5b58589b19481e595d60b21b608482015260a4016106f3565b6000610e493383612198565b60ca5460d65460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b158015610e9b57600080fd5b505af1158015610eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed39190612f74565b5060d6546040516356e4bb9760e11b8152336004820152602481018390526001600160a01b039091169063adc9772e90604401600060405180830381600087803b158015610f2057600080fd5b505af1158015610f34573d6000803e3d6000fd5b50506040518381523392507f7d3a0ab251dfd8c04c691239edd99d2c124cce6971cebc4c2ed96a378d13d50091506020015b60405180910390a250506001609755565b6033546001600160a01b03163314610fa15760405162461bcd60e51b81526004016106f390613252565b610fab6000612477565b565b6033546001600160a01b03163314610fd75760405162461bcd60e51b81526004016106f390613252565b60cb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a90600090a35050565b60ce54600090815260d260205260408120600301548190819043111561108c5760cc5460ce54600090815260d2602052604090206003015461106b9043613360565b6110759190613321565b905060ce54816110859190613309565b905061109e565b600160ce5461109b9190613360565b90505b8084111561113a5760405162461bcd60e51b815260206004820152605e60248201527f446f6e6174696f6e4d696e65723a3a63616c63756c617465436c61696d61626c60448201527f65526577617264734279506572696f644e756d6265723a20546869732072657760648201527f61726420706572696f642069736e277420617661696c61626c65207965740000608482015260a4016106f3565b61114485856124c9565b92509250509250929050565b6033546001600160a01b0316331461117a5760405162461bcd60e51b81526004016106f390613252565b60d780549082905560408051828152602081018490527fb7ce19da4d8265c844e0fa744e3429c62104c793f8ecb52d1b418b47eb9f855591015b60405180910390a15050565b6033546001600160a01b031633146111ea5760405162461bcd60e51b81526004016106f390613252565b60d680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fcfa056eb826b2a28817aa38ccb94f12ba8a1309598f7ea19bef6fd67fe04b61e90600090a35050565b6033546001600160a01b031633146112665760405162461bcd60e51b81526004016106f390613252565b61126e61234a565b60d580549082905560408051828152602081018490527fd6a28c11ae992e0014e83eaaa6f0023a04c0787848134e8b4e43f44b7d7d8e3091016111b4565b60655460ff16156112cf5760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156113085760405162461bcd60e51b81526004016106f3906131f1565b60d6546001600160a01b031633146113625760405162461bcd60e51b815260206004820152601a60248201527f446f6e6174696f6e4d696e65723a204e4f545f5354414b494e4700000000000060448201526064016106f3565b61136a61234a565b60ce54600090815260d2602090815260408083206001600160a01b0387168452600981018352818420805460ff19166001179055600a810183528184208690556007810185905560d390925290912060038101541580156113cd57506001810154155b156113e757600160ce546113e19190613360565b60038201555b5050505050565b6033546001600160a01b031633146114185760405162461bcd60e51b81526004016106f390613252565b6002609754141561143b5760405162461bcd60e51b81526004016106f3906132d2565b60026097556114546001600160a01b0384168383612315565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a89568360405161149991815260200190565b60405180910390a35050600160975550565b6001600090815260d26020526000805160206133ea833981519152544310156114e65760405162461bcd60e51b81526004016106f3906131f1565b60655460ff16156115095760405162461bcd60e51b81526004016106f390613228565b60ce54600090815260d2602052604090206003015443111561152d57506000919050565b60ce54600081815260d26020526040812060d554909282918291829110611555576000611565565b60d55460ce546115659190613360565b9050611574878260ce546128ef565b6001870154909550909350849061158c908590613341565b6115969190613321565b6115a09083613309565b979650505050505050565b60ce54600090815260d260205260408120600301548190819043111561160e5760cc5460ce54600090815260d260205260409020600301546115ed9043613360565b6115f79190613321565b905060ce54816116079190613309565b9050611620565b600160ce5461161d9190613360565b90505b61162a84826124c9565b9250925050915091565b60655460ff16156116575760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156116905760405162461bcd60e51b81526004016106f3906131f1565b600260975414156116b35760405162461bcd60e51b81526004016106f3906132d2565b60026097556116c061234a565b60006116d533600160ce546109499190613360565b60ca5460d65460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b15801561172757600080fd5b505af115801561173b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175f9190612f74565b5060d6546040516356e4bb9760e11b8152336004820152602481018390526001600160a01b039091169063adc9772e90604401600060405180830381600087803b1580156117ac57600080fd5b505af11580156117c0573d6000803e3d6000fd5b50506040518381523392507f7d3a0ab251dfd8c04c691239edd99d2c124cce6971cebc4c2ed96a378d13d5009150602001610996565b60655460ff16156118195760405162461bcd60e51b81526004016106f390613228565b600160005260d26020526000805160206133ea833981519152544310156118525760405162461bcd60e51b81526004016106f3906131f1565b600260975414156118755760405162461bcd60e51b81526004016106f3906132d2565b6002609755611882612151565b81111561190a5760405162461bcd60e51b815260206004820152604a60248201527f446f6e6174696f6e4d696e65723a3a636c61696d52657761726473506172746960448201527f616c3a20546869732072657761726420706572696f642069736e277420636c616064820152691a5b58589b19481e595d60b21b608482015260a4016106f3565b60006119163383612198565b60ca54909150611930906001600160a01b03163383612315565b604080518281526020810184905233917f2233b4bbf378b3d984acd0e36cea96f66bc81012a683e81929ed96df5287ba3d9101610f66565b600054610100900460ff166119835760005460ff1615611987565b303b155b6119ea5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f3565b600054610100900460ff16158015611a0c576000805461ffff19166101011790555b6001600160a01b038916611a7a5760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20635553442060448201526e1859191c995cdcc81b9bdd081cd95d608a1b60648201526084016106f3565b6001600160a01b038816611ae85760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20504143542060448201526e1859191c995cdcc81b9bdd081cd95d608a1b60648201526084016106f3565b6001600160a01b038716611b535760405162461bcd60e51b815260206004820152602c60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20747265617360448201526b1d5c9e57c81b9bdd081cd95d60a21b60648201526084016106f3565b85611bc65760405162461bcd60e51b815260206004820152603760248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20666972737460448201527f526577617264506572426c6f636b206e6f74207365742100000000000000000060648201526084016106f3565b83611c395760405162461bcd60e51b815260206004820152603860248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20737461727460448201527f696e67526577617264506572696f64206e6f742073657421000000000000000060648201526084016106f3565b611c41612964565b611c4961299b565b611c516129d2565b60c980546001600160a01b03808c166001600160a01b03199283161790925560ca80548b841690831617905560cb8054928a169290911691909117905560cc85905560cf83905560d0829055600160ce55611cac8487612a01565b8015611cbe576000805461ff00191690555b505050505050505050565b6033546001600160a01b03163314611cf35760405162461bcd60e51b81526004016106f390613252565b60d480549082905560408051828152602081018490527f7625e5482008771a414881eb4c957803f2ab46e99e6da60df6e1310f0f009fec91016111b4565b6033546001600160a01b03163314611d5b5760405162461bcd60e51b81526004016106f390613252565b611d6361234a565b60cc805460cf805460d080549488905591869055908490556040805183815260208101839052908101849052606081018790526080810186905260a08101859052919290917f8fb29c6ced5ce51696c08668df816fab7e60c674a6c36e167d5df9b8a5f499849060c00160405180910390a1505050505050565b6033546001600160a01b03163314611e075760405162461bcd60e51b81526004016106f390613252565b6001600160a01b038116611e6c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106f3565b611e7581612477565b50565b600080600080600060d55460ce5411611e92576000611ea2565b60d55460ce54611ea29190613360565b9050805b60ce548111611f1257600081815260d26020526040902060040154611ecb9084613309565b600082815260d2602090815260408083206001600160a01b038c168452600501909152902054909350611efe9085613309565b935080611f0a816133a3565b915050611ea6565b50919590945092505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611f899085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a78565b50505050565b611f9761234a565b60cd8054906000611fa7836133a3565b909155505060cd54600090815260d16020526040902080546001600160a01b038087166001600160a01b0319928316178355600183018054858316908416811790915543600385015560ce5460028501556005840180548884169416939093179092556006830185905560cb541614156120c55760c9546001600160a01b038581169116146120b95760cb5460405163f2b8995160e01b81526001600160a01b038681166004830152602482018690529091169063f2b899519060440160206040518083038186803b15801561207c57600080fd5b505afa158015612090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b49190613130565b6120bb565b825b60048201556120d6565b6120d0600284613321565b60048201555b6120e760ce54868360040154612b4a565b6120f085612ba7565b60cd546004820154604080519182526001600160a01b03878116602084015290820186905280851692908816917f3d2fa2b84d5f2000d605401d563ba60e2e44f62701fdbe9f9101c59b3c215f299060600160405180910390a45050505050565b600061215b61234a565b60d454612169906001613309565b60ce54116121775750600090565b60d454600160ce546121899190613360565b6121939190613360565b905090565b6001600160a01b038216600090815260d36020526040812081806121bc86866124c9565b600385015491935091508511156121d557600383018590555b600085815260d2602090815260408083206001600160a01b038a168452600a0190915290208190558161220c575091506108b19050565b60ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561224f57600080fd5b505afa158015612263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122879190613130565b82111561230c5760ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156122d157600080fd5b505afa1580156122e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123099190613130565b91505b50949350505050565b6040516001600160a01b03831660248201526044810182905261234590849063a9059cbb60e01b90606401611f52565b505050565b60ce54600090815260d2602052604090205b4381600301541015611e755760ce8054906000612378836133a3565b909155505060ce54600090815260d26020526040902060d554600682015560038201546123a6906001613309565b6002820181905560cc546001916123bd9190613309565b6123c79190613360565b60038201556123d4612c40565b8082556007808401549083015560d754600883015560cc546000916123f891613341565b905060008360060154600160ce546124109190613360565b1161241c57600161243a565b8360060154600160ce546124309190613360565b61243a9190613360565b905061245481600160ce5461244f9190613360565b612c81565b61246a5760018401546124679083613309565b91505b506001820155905061235c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600090815260d360205260408120600381015482919082906124f6906001613309565b90508060011415612522578154600090815260028301602052604090205461251f906001613309565b90505b60d26020819052600082815260408120818052909182918291829182917f20791b593a776a2631a28f4a3f62a14ad18db22add38130c4f4a8fdfa4639885919082908461257060018c613360565b8152602001908152602001600020600a0160008f6001600160a01b03166001600160a01b03168152602001908152602001600020549a505b8c89116128de576002820154156127395760068201546125ec576001600160a01b038e1660009081526005830160205260409020546004830154909850965061270b565b8160060154836006015414156126c957600682015461260c906001613309565b89111561268b5760d26000836006015460018c6126299190613360565b6126339190613360565b815260200190815260200160002090508060050160008f6001600160a01b03166001600160a01b0316815260200190815260200160002054886126769190613360565b97508060040154876126889190613360565b96505b6001600160a01b038e1660009081526005830160205260409020546126b09089613309565b97508160040154876126c29190613309565b965061270b565b81600601548911156126f9576126ef8e83600601548b6126e99190613360565b8b6128ef565b909850965061270b565b6127058e60008b6128ef565b90985096505b8160010154955081600701549450600082600801541161272c576001612732565b81600801545b935061281b565b60d554612747906001613309565b8911156127c45760d2600060d55460018c6127629190613360565b61276c9190613360565b815260200190815260200160002090508060050160008f6001600160a01b03166001600160a01b0316815260200190815260200160002054886127af9190613360565b97508060040154876127c19190613360565b96505b6001600160a01b038e1660009081526005830160205260409020546127e99089613309565b97508160040154876127fb9190613309565b965060d05460cf548761280e9190613341565b6128189190613321565b95505b6001600160a01b038e16600090815260098301602052604090205460ff161561285c576001600160a01b038e166000908152600a830160205260409020549a505b60006128688c8a613309565b11156128b957846128798589613341565b6128839190613309565b8b61288e868b613341565b6128989190613309565b6128a29088613341565b6128ac9190613321565b6128b6908d613309565b9b505b886128c3816133a3565b600081815260d260205260409020909a509293506125a89050565b505050505050505050509250929050565b6000808080855b85811161295757600081815260d2602090815260408083206001600160a01b038c168452600581019092529091205461292f9085613309565b93508060040154836129419190613309565b925050808061294f906133a3565b9150506128f6565b5090969095509350505050565b600054610100900460ff1661298b5760405162461bcd60e51b81526004016106f390613287565b612993612cd7565b610fab612cfe565b600054610100900460ff166129c25760405162461bcd60e51b81526004016106f390613287565b6129ca612cd7565b610fab612d2e565b600054610100900460ff166129f95760405162461bcd60e51b81526004016106f390613287565b610fab612d61565b6001600081905260d26020526000805160206133ea83398151915283905560cc547fb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f359190612a4f9085613309565b612a599190613360565b600382015581815560cc54612a6e9083613341565b6001909101555050565b6000612acd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d8f9092919063ffffffff16565b8051909150156123455780806020019051810190612aeb9190612f74565b6123455760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f3565b600083815260d26020526040812060048101805491928492612b6d908490613309565b90915550506001600160a01b038316600090815260058201602052604081208054849290612b9c908490613309565b909155505050505050565b6001600160a01b038116600090815260d36020908152604080832060018101548452600281019092529091205460ce548114612c0e57600182018054906000612bef836133a3565b909155505060ce54600183015460009081526002840160205260409020555b6003820154158015612c2257506001820154155b1561234557600160ce54612c369190613360565b6003830155505050565b600060d05460cf5460d26000600160ce54612c5b9190613360565b815260200190815260200160002060000154612c779190613341565b6121939190613321565b60005b818311612cce57600083815260d2602052604081206007810154600490910154612cae9190613309565b1115612cbc575060016108b1565b82612cc6816133a3565b935050612c84565b50600092915050565b600054610100900460ff16610fab5760405162461bcd60e51b81526004016106f390613287565b600054610100900460ff16612d255760405162461bcd60e51b81526004016106f390613287565b610fab33612477565b600054610100900460ff16612d555760405162461bcd60e51b81526004016106f390613287565b6065805460ff19169055565b600054610100900460ff16612d885760405162461bcd60e51b81526004016106f390613287565b6001609755565b6060612d9e8484600085612da8565b90505b9392505050565b606082471015612e095760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f3565b843b612e575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f3565b600080866001600160a01b03168587604051612e7391906131a2565b60006040518083038185875af1925050503d8060008114612eb0576040519150601f19603f3d011682016040523d82523d6000602084013e612eb5565b606091505b50915091506115a082828660608315612ecf575081612da1565b825115612edf5782518084602001fd5b8160405162461bcd60e51b81526004016106f391906131be565b600060208284031215612f0a578081fd5b8135612da1816133d4565b60008060408385031215612f27578081fd5b8235612f32816133d4565b946020939093013593505050565b600080600060608486031215612f54578081fd5b8335612f5f816133d4565b95602085013595506040909401359392505050565b600060208284031215612f85578081fd5b81518015158114612da1578182fd5b600060208284031215612fa5578081fd5b8151612da1816133d4565b60008060008060808587031215612fc5578081fd5b8435612fd0816133d4565b93506020850135612fe0816133d4565b9250604085013591506060850135612ff7816133d4565b939692955090935050565b600080600060608486031215613016578283fd5b8335613021816133d4565b92506020840135613031816133d4565b929592945050506040919091013590565b600080600080600080600080610100898b03121561305e578384fd5b8835613069816133d4565b97506020890135613079816133d4565b96506040890135613089816133d4565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b6000806000606084860312156130cc578283fd5b83356130d7816133d4565b92506020840135915060408401356130ee816133d4565b809150509250925092565b60006020828403121561310a578081fd5b815160048110612da1578182fd5b600060208284031215613129578081fd5b5035919050565b600060208284031215613141578081fd5b5051919050565b6000806040838503121561315a578182fd5b82359150602083013561316c816133d4565b809150509250929050565b60008060006060848603121561318b578081fd5b505081359360208301359350604090920135919050565b600082516131b4818460208701613377565b9190910192915050565b60208152600082518060208401526131dd816040850160208701613377565b601f01601f19169190910160400192915050565b6020808252601e908201527f446f6e6174696f6e4d696e65723a204552525f4e4f545f535441525445440000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561331c5761331c6133be565b500190565b60008261333c57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561335b5761335b6133be565b500290565b600082821015613372576133726133be565b500390565b60005b8381101561339257818101518382015260200161337a565b83811115611f895750506000910152565b60006000198214156133b7576133b76133be565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611e7557600080fdfeb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f37a264697066735822122055afc40014182fc4af69e26fc1efd14cffb11e97167a55cea622cfd841d9abd764736f6c63430008040033",
  "devdoc": {
    "events": {
      "AgainstPeriodsUpdated(uint256,uint256)": {
        "params": {
          "newAgainstPeriods": "New againstPeriods value",
          "oldAgainstPeriods": "Old againstPeriods value"
        }
      },
      "ClaimDelayUpdated(uint256,uint256)": {
        "params": {
          "newClaimDelay": "New claimDelay value",
          "oldClaimDelay": "Old claimDelay value"
        }
      },
      "DonationAdded(uint256,address,uint256,address,uint256,address)": {
        "params": {
          "amount": "Number of token donated",
          "delegateAddress": "Address of the delegate",
          "donationId": "Id of the donation",
          "target": "Address of the receiver (community or treasury)                          or address of the DonationMiner contract otherwise",
          "token": "Address of the token after conversion"
        }
      },
      "RewardClaimed(address,uint256)": {
        "params": {
          "amount": "Value of the reward",
          "donor": "Address of the donner"
        }
      },
      "RewardClaimedPartial(address,uint256,uint256)": {
        "params": {
          "amount": "Value of the reward",
          "donor": "Address of the donner",
          "lastRewardPeriod": "Number of the last reward period for witch the claim was made"
        }
      },
      "RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "newDecayDenominator": "New decayDenominator value For further information regarding each parameter, see *DonationMiner* smart contract initialize method.",
          "newDecayNumerator": "New decayNumerator value",
          "newRewardPeriodSize": "New rewardPeriodSize value",
          "oldDecayDenominator": "Old decayDenominator value",
          "oldDecayNumerator": "Old decayNumerator value",
          "oldRewardPeriodSize": "Old rewardPeriodSize value"
        }
      },
      "RewardStaked(address,uint256)": {
        "params": {
          "amount": "Value of the reward",
          "donor": "Address of the donner"
        }
      },
      "RewardStakedPartial(address,uint256,uint256)": {
        "params": {
          "amount": "Value of the reward",
          "donor": "Address of the donner",
          "lastRewardPeriod": "Number of the last reward period for witch tha stake was made"
        }
      },
      "StakingDonationRatioUpdated(uint256,uint256)": {
        "params": {
          "newStakingDonationRatio": "New stakingDonationRatio value",
          "oldStakingDonationRatio": "Old stakingDonationRatio value"
        }
      },
      "StakingUpdated(address,address)": {
        "params": {
          "newStaking": "New staking address",
          "oldStaking": "Old staking address"
        }
      },
      "TransferERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount of the transaction",
          "to": "Address of the receiver",
          "token": "ERC20 token address"
        }
      },
      "TreasuryUpdated(address,address)": {
        "params": {
          "newTreasury": "New treasury address",
          "oldTreasury": "Old treasury address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateClaimableRewards(address)": {
        "params": {
          "_donorAddress": "address of the donor"
        },
        "returns": {
          "claimAmount": "uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber",
          "lastDonorStakeAmount": "uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber"
        }
      },
      "calculateClaimableRewardsByPeriodNumber(address,uint256)": {
        "params": {
          "_donorAddress": "address of the donor",
          "_lastPeriodNumber": "last reward period number to be computed"
        },
        "returns": {
          "claimAmount": "uint256 sum of all donor's rewards that has not been claimed until _lastPeriodNumber",
          "lastDonorStakeAmount": "uint256 number of PACTs that are staked by the donor at the end of _lastPeriodNumber"
        }
      },
      "donate(address,uint256,address)": {
        "params": {
          "_amount": "Amount of cUSD tokens to deposit.",
          "_delegateAddress": "the address that will claim the reward for the donation",
          "_token": "address of the token"
        }
      },
      "donateToCommunity(address,address,uint256,address)": {
        "details": "Transfers tokens to the community contract",
        "params": {
          "_amount": "amount of cUSD tokens to deposit",
          "_community": "address of the community",
          "_delegateAddress": "the address that will claim the reward for the donation",
          "_token": "address of the token"
        }
      },
      "donorRewardPeriod(address,uint256)": {
        "params": {
          "_donor": "address of the donor",
          "_rewardPeriodIndex": "index of the reward period"
        },
        "returns": {
          "_0": "uint256 number of the reward period"
        }
      },
      "estimateClaimableReward(address)": {
        "params": {
          "_donorAddress": "address of the donor"
        },
        "returns": {
          "_0": "uint256 reward that donor will receive in current reward period if there isn't another donation"
        }
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_PACT": "Address of the PACT Token",
          "_cUSD": "Address of the cUSD token",
          "_decayDenominator": "Decay denominator used for calculating the new reward per block based on the previous reward per block",
          "_decayNumerator": "Decay numerator used for calculating the new reward per block based on the previous reward per block",
          "_firstRewardPerBlock": "Number of PACTs given for each block                              from the first reward period",
          "_rewardPeriodSize": "Number of blocks of the reward period",
          "_startingBlock": "First block of the first reward period",
          "_treasury": "Address of the Treasury"
        }
      },
      "lastPeriodsDonations(address)": {
        "details": "Calculate all donations on the last X epochs as well as everyone else in the same period.",
        "params": {
          "_donor": "address of the donor"
        },
        "returns": {
          "_0": "uint256, uint256 sum of all donor's and everyone else donations"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardPeriodDonorAmount(uint256,address)": {
        "params": {
          "_donor": "address of the donor",
          "_period": "number of the reward period"
        },
        "returns": {
          "_0": "uint256 amount of cUSD donated by the user in this reward period"
        }
      },
      "rewardPeriodDonorStakeAmounts(uint256,address)": {
        "params": {
          "_donor": "address of the donor",
          "_period": "reward period number"
        },
        "returns": {
          "_0": "uint256 amount of PACT staked by a user at the and of the reward period"
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "_amount": "amount of the transaction",
          "_to": "address of the receiver",
          "_token": "address of the ERC20 token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAgainstPeriods(uint256)": {
        "params": {
          "_newAgainstPeriods": "Number of reward periods for the backward computation"
        }
      },
      "updateClaimDelay(uint256)": {
        "params": {
          "_newClaimDelay": "Number of reward periods a donor has to wait after                            a donation until he will be able to claim his reward"
        }
      },
      "updateRewardPeriodParams(uint256,uint256,uint256)": {
        "params": {
          "_newDecayDenominator": "value of new decayDenominator",
          "_newDecayNumerator": "value of new decayNumerator",
          "_newRewardPeriodSize": "value of new rewardPeriodSize"
        }
      },
      "updateStaking(address)": {
        "params": {
          "_newStaking": "address of new Staking contract"
        }
      },
      "updateStakingDonationRatio(uint256)": {
        "params": {
          "_newStakingDonationRatio": "Number of tokens that need to be staked to be counted as 1 PACT donated"
        }
      },
      "updateTreasury(address)": {
        "params": {
          "_newTreasury": "address of new treasury_ contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AgainstPeriodsUpdated(uint256,uint256)": {
        "notice": "Triggered when the againstPeriods value has been updated"
      },
      "ClaimDelayUpdated(uint256,uint256)": {
        "notice": "Triggered when the claimDelay value has been updated"
      },
      "DonationAdded(uint256,address,uint256,address,uint256,address)": {
        "notice": "Triggered when a donation has been added"
      },
      "RewardClaimed(address,uint256)": {
        "notice": "Triggered when a donor has claimed his reward"
      },
      "RewardClaimedPartial(address,uint256,uint256)": {
        "notice": "Triggered when a donor has claimed his reward"
      },
      "RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Triggered when reward period params have been updated"
      },
      "RewardStaked(address,uint256)": {
        "notice": "Triggered when a donor has staked his reward"
      },
      "RewardStakedPartial(address,uint256,uint256)": {
        "notice": "Triggered when a donor has staked his reward"
      },
      "StakingDonationRatioUpdated(uint256,uint256)": {
        "notice": "Triggered when the stakingDonationRatio value has been updated"
      },
      "StakingUpdated(address,address)": {
        "notice": "Triggered when the staking address has been updated"
      },
      "TransferERC20(address,address,uint256)": {
        "notice": "Triggered when an amount of an ERC20 has been transferred from this contract to an address"
      },
      "TreasuryUpdated(address,address)": {
        "notice": "Triggered when the treasury address has been updated"
      }
    },
    "kind": "user",
    "methods": {
      "calculateClaimableRewards(address)": {
        "notice": "Calculates the rewards from ended reward periods of a donor"
      },
      "calculateClaimableRewardsByPeriodNumber(address,uint256)": {
        "notice": "Calculates the rewards from ended reward periods of a donor"
      },
      "claimRewards()": {
        "notice": "Transfers to the sender the rewards"
      },
      "claimRewardsPartial(uint256)": {
        "notice": "Transfers to the sender the rewards"
      },
      "donate(address,uint256,address)": {
        "notice": "Transfers cUSD tokens to the treasury contract"
      },
      "donorRewardPeriod(address,uint256)": {
        "notice": "Returns a reward period number from a donor reward period list"
      },
      "estimateClaimableReward(address)": {
        "notice": "Calculates the estimate reward of a donor for current reward period"
      },
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Used to initialize a new DonationMiner contract"
      },
      "rewardPeriodDonorAmount(uint256,address)": {
        "notice": "Returns the amount of cUSD donated by a user in a reward period"
      },
      "rewardPeriodDonorStakeAmounts(uint256,address)": {
        "notice": "Returns the amount of PACT staked by a user at the and of the reward period"
      },
      "stakeRewards()": {
        "notice": "Stakes the reward"
      },
      "stakeRewardsPartial(uint256)": {
        "notice": "Stakes the reward"
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfers an amount of an ERC20 from this contract to an address"
      },
      "updateAgainstPeriods(uint256)": {
        "notice": "Updates againstPeriods value"
      },
      "updateClaimDelay(uint256)": {
        "notice": "Updates claimDelay value"
      },
      "updateRewardPeriodParams(uint256,uint256,uint256)": {
        "notice": "Updates reward period default params"
      },
      "updateStaking(address)": {
        "notice": "Updates Staking address"
      },
      "updateStakingDonationRatio(uint256)": {
        "notice": "Updates stakingDonationRatio value"
      },
      "updateTreasury(address)": {
        "notice": "Updates Treasury address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 542,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 545,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1068,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 630,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 721,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 736,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 779,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14408,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "cUSD",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)3447"
      },
      {
        "astId": 14412,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "PACT",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC20)3447"
      },
      {
        "astId": 14416,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "treasury",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(ITreasury)28522"
      },
      {
        "astId": 14419,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "rewardPeriodSize",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 14422,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "donationCount",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 14425,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "rewardPeriodCount",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 14428,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "decayNumerator",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 14431,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "decayDenominator",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 14437,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "donations",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_struct(Donation)14546_storage)"
      },
      {
        "astId": 14443,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "rewardPeriods",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_struct(RewardPeriod)14519_storage)"
      },
      {
        "astId": 14449,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "donors",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_struct(Donor)14530_storage)"
      },
      {
        "astId": 14459,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "claimDelay",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 14469,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "againstPeriods",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 14480,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "staking",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(IStaking)27632"
      },
      {
        "astId": 14483,
        "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "stakingDonationRatio",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3447": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)27632": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)28522": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Donor)14530_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDonationMiner.Donor)",
        "numberOfBytes": "32",
        "value": "t_struct(Donor)14530_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Donation)14546_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDonationMiner.Donation)",
        "numberOfBytes": "32",
        "value": "t_struct(Donation)14546_storage"
      },
      "t_mapping(t_uint256,t_struct(RewardPeriod)14519_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDonationMiner.RewardPeriod)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardPeriod)14519_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Donation)14546_storage": {
        "encoding": "inplace",
        "label": "struct IDonationMiner.Donation",
        "members": [
          {
            "astId": 14532,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "donor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14534,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "target",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 14536,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14538,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14540,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14543,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "token",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IERC20)3447"
          },
          {
            "astId": 14545,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "initialAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Donor)14530_storage": {
        "encoding": "inplace",
        "label": "struct IDonationMiner.Donor",
        "members": [
          {
            "astId": 14521,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "lastClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14523,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPeriodsCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14527,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPeriods",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 14529,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "lastClaimPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RewardPeriod)14519_storage": {
        "encoding": "inplace",
        "label": "struct IDonationMiner.RewardPeriod",
        "members": [
          {
            "astId": 14492,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14494,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14496,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14498,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14500,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "donationsAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14504,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "donorAmounts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 14506,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "againstPeriods",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 14508,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "stakesAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 14510,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "stakingDonationRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 14514,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "hasSetStakeAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 14518,
            "contract": "contracts/donationMiner/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "donorStakeAmounts",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}