{
  "address": "0x8C567e108727fd3947A2352fD86004d93187f0b9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "donationId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "DonationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStartingBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFirstRewardPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStartingBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFirstRewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "FirstRewardPeriodParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRewardPeriodSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDecayNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDecayDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardPeriodSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDecayNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDecayDenominator",
          "type": "uint256"
        }
      ],
      "name": "RewardPeriodParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PACT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donorAddress",
          "type": "address"
        }
      ],
      "name": "calculateClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "_community",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donateToCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "donations",
      "outputs": [
        {
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPeriodIndex",
          "type": "uint256"
        }
      ],
      "name": "donorRewardPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "donors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPeriodsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donorAddress",
          "type": "address"
        }
      ],
      "name": "estimateClaimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_cUSD",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_PACT",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_firstRewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPeriodSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startingBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decayNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decayDenominator",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPeriodCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_donor",
          "type": "address"
        }
      ],
      "name": "rewardPeriodDonorAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPeriodSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPeriods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationsAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstRewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateFirstRewardPeriodParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRewardPeriodSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newDecayNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newDecayDenominator",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPeriodParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x091e9cb1007ec1f5652db03893bb231441206c315e4c25b6a1de47d351e5696e",
  "receipt": {
    "to": null,
    "from": "0x2F3340435E283A3d479dF091F913B6EFf96becF5",
    "contractAddress": "0x8C567e108727fd3947A2352fD86004d93187f0b9",
    "transactionIndex": 1,
    "gasUsed": "1901955",
    "logsBloom": "0x
    "blockHash": "0x90d070332ed5dd266f1d3aa4753a08c8bfc3a205567e9d0c53d40af554e8be44",
    "transactionHash": "0x091e9cb1007ec1f5652db03893bb231441206c315e4c25b6a1de47d351e5696e",
    "logs": [],
    "blockNumber": 8995722,
    "cumulativeGasUsed": "1932153",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bc78398ad6ba86cebe8213030fed1011",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"donationId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"DonationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStartingBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFirstRewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartingBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFirstRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"FirstRewardPeriodParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardPeriodSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDecayNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDecayDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPeriodSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDecayNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDecayDenominator\",\"type\":\"uint256\"}],\"name\":\"RewardPeriodParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PACT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donorAddress\",\"type\":\"address\"}],\"name\":\"calculateClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"_community\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateToCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPeriodIndex\",\"type\":\"uint256\"}],\"name\":\"donorRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPeriodsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donorAddress\",\"type\":\"address\"}],\"name\":\"estimateClaimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cUSD\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_PACT\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_firstRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPeriodSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decayNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decayDenominator\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriodCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"rewardPeriodDonorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriodSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateFirstRewardPeriodParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRewardPeriodSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDecayNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDecayDenominator\",\"type\":\"uint256\"}],\"name\":\"updateRewardPeriodParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DonationAdded(uint256,address,uint256,address)\":{\"params\":{\"amount\":\"Value of the donation\",\"donationId\":\"Id of the donation\",\"donor\":\"Address of the donner\",\"target\":\"Address of the receiver (community or treasury)                    or address of the DonationMiner contract otherwise\"}},\"FirstRewardPeriodParamsUpdated(uint256,uint256,uint256,uint256)\":{\"params\":{\"newFirstRewardPerBlock\":\"New newFirstRewardPerBlock value For further information regarding each parameter, see *DonationMiner* smart contract initialize method.\",\"newStartingBlock\":\"New newStartingBlock value\",\"oldFirstRewardPerBlock\":\"Old oldFirstRewardPerBlock value\",\"oldStartingBlock\":\"Old oldStartingBlock value\"}},\"RewardClaimed(address,uint256)\":{\"params\":{\"amount\":\"Value of the reward\",\"donor\":\"Address of the donner\"}},\"RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"newDecayDenominator\":\"New decayDenominator value For further information regarding each parameter, see *DonationMiner* smart contract initialize method.\",\"newDecayNumerator\":\"New decayNumerator value\",\"newRewardPeriodSize\":\"New rewardPeriodSize value\",\"oldDecayDenominator\":\"Old decayDenominator value\",\"oldDecayNumerator\":\"Old decayNumerator value\",\"oldRewardPeriodSize\":\"Old rewardPeriodSize value\"}},\"TransferERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the transaction\",\"to\":\"Address of the receiver\",\"token\":\"ERC20 token address\"}},\"TreasuryUpdated(address,address)\":{\"params\":{\"newTreasury\":\"New treasury address\",\"oldTreasury\":\"Old treasury address\"}}},\"kind\":\"dev\",\"methods\":{\"calculateClaimableRewards(address)\":{\"params\":{\"_donorAddress\":\"address of the donor\"},\"returns\":{\"_0\":\"uint256 sum of all donor's rewards that has not been claimed yet\"}},\"donate(uint256)\":{\"params\":{\"_amount\":\"Amount of cUSD tokens to deposit.\"}},\"donateToCommunity(address,uint256)\":{\"details\":\"Transfers cUSD tokens to the community contract\",\"params\":{\"_amount\":\"amount of cUSD tokens to deposit\",\"_community\":\"address of the community\"}},\"donorRewardPeriod(address,uint256)\":{\"params\":{\"_donor\":\"address of the donor\",\"_rewardPeriodIndex\":\"index of the reward period\"},\"returns\":{\"_0\":\"uint256 number of the reward period\"}},\"estimateClaimableReward(address)\":{\"params\":{\"_donorAddress\":\"address of the donor\"},\"returns\":{\"_0\":\"uint256 reward that donor will receive in current reward period if there isn't another donation\"}},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_PACT\":\"Address of the PACT Token\",\"_cUSD\":\"Address of the cUSD token\",\"_decayDenominator\":\"Decay denominator used for calculating the new reward per block based on the previous reward per block\",\"_decayNumerator\":\"Decay numerator used for calculating the new reward per block based on the previous reward per block\",\"_firstRewardPerBlock\":\"Number of PACTs given for each block                              from the first reward period\",\"_rewardPeriodSize\":\"Number of blocks of the reward period\",\"_startingBlock\":\"First block of the first reward period\",\"_treasury\":\"Address of the Treasury\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardPeriodDonorAmount(uint256,address)\":{\"params\":{\"_donor\":\"address of the donor\",\"_period\":\"number of the reward period\"},\"returns\":{\"_0\":\"uint256 amount of cUSD donated by the user in this reward period\"}},\"transfer(address,address,uint256)\":{\"params\":{\"_amount\":\"amount of the transaction\",\"_to\":\"address of the receiver\",\"_token\":\"address of the ERC20 token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFirstRewardPeriodParams(uint256,uint256)\":{\"params\":{\"_firstRewardPerBlock\":\"value of new firstRewardPerBlock\",\"_startingBlock\":\"value of new startingBlock\"}},\"updateRewardPeriodParams(uint256,uint256,uint256)\":{\"params\":{\"_newDecayDenominator\":\"value of new decayDenominator\",\"_newDecayNumerator\":\"value of new decayNumerator\",\"_newRewardPeriodSize\":\"value of new rewardPeriodSize\"}},\"updateTreasury(address)\":{\"params\":{\"_newTreasury\":\"address of new treasury_ contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DonationAdded(uint256,address,uint256,address)\":{\"notice\":\"Triggered when a donation has been added\"},\"FirstRewardPeriodParamsUpdated(uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggered when the first reward period params have been updated\"},\"RewardClaimed(address,uint256)\":{\"notice\":\"Triggered when a donor has claimed his reward\"},\"RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggered when reward period params have been updated\"},\"TransferERC20(address,address,uint256)\":{\"notice\":\"Triggered when an amount of an ERC20 has been transferred from this contract to an address\"},\"TreasuryUpdated(address,address)\":{\"notice\":\"Triggered when the treasury address has been updated\"}},\"kind\":\"user\",\"methods\":{\"calculateClaimableRewards(address)\":{\"notice\":\"Calculates the rewards from ended reward periods of a donor\"},\"claimRewards()\":{\"notice\":\"Transfers to the sender the rewards from ended reward periods\"},\"donate(uint256)\":{\"notice\":\"Transfers cUSD tokens to the treasury contract\"},\"donorRewardPeriod(address,uint256)\":{\"notice\":\"Returns a reward period number from a donor reward period list\"},\"estimateClaimableReward(address)\":{\"notice\":\"Calculates the estimate reward of a donor for current reward period\"},\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Used to initialize a new DonationMiner contract\"},\"rewardPeriodDonorAmount(uint256,address)\":{\"notice\":\"Returns the amount of cUSD donated by a user in a reward period\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers an amount of an ERC20 from this contract to an address\"},\"updateFirstRewardPeriodParams(uint256,uint256)\":{\"notice\":\"Updates first reward period default params\"},\"updateRewardPeriodParams(uint256,uint256,uint256)\":{\"notice\":\"Updates reward period default params\"},\"updateTreasury(address)\":{\"notice\":\"Updates Treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/DonationMinerImplementation.sol\":\"DonationMinerImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8f1503ee5d495997d1bd9675f432e74a299d34c87bdc38647dcc554e76591b41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x2cc1535d318fe533ffa4ad30de28f5abed305ff748bc72d0344072ac10007e29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of cUSD received\\n        uint256 lastClaim;       //block number of the last claim\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address _beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 _index) external view returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function impactMarketAddress() external pure returns (address);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n    function lastFundRequest() external view returns(uint256);\\n\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function donate(address _sender, uint256 _amount) external;\\n    function addTreasuryFunds(uint256 _amount) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function addManager(address _managerAddress) external;\\n    function removeManager(address _managerAddress) external;\\n    function addBeneficiary(address _beneficiaryAddress) external;\\n    function lockBeneficiary(address _beneficiaryAddress) external;\\n    function unlockBeneficiary(address _beneficiaryAddress) external;\\n    function removeBeneficiary(address _beneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated() external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31199b9d03055dbb840ac48f751c5533f419c470e70216f970168cad1438cd47\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../token/interfaces/ITreasury.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function communities(address _community) external view returns(CommunityState);\\n    function communityImplementation() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 _index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\\n    function updateBeneficiaryParams(\\n        ICommunity _community,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity _community,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateProxyImplementation(address _CommunityMiddleProxy, address _newLogic) external;\\n    function addCommunity(\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory _managers,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function addManagerToCommunity(ICommunity _community_, address _account_) external;\\n    function removeCommunity(ICommunity _community) external;\\n    function fundCommunity() external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function transferFromCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe2e6dfeaaf11c40ccc8f173a35ae942dcb20871e4e1f3b27b068a60b35b0d1fa\",\"license\":\"Apache-2.0\"},\"contracts/token/DonationMinerImplementation.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/DonationMinerStorageV1.sol\\\";\\nimport \\\"../community/interfaces/ICommunity.sol\\\";\\nimport \\\"../community/interfaces/ICommunityAdmin.sol\\\";\\n\\ncontract DonationMinerImplementation is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DonationMinerStorageV1\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Triggered when a donation has been added\\n     *\\n     * @param donationId  Id of the donation\\n     * @param donor       Address of the donner\\n     * @param amount      Value of the donation\\n     * @param target      Address of the receiver (community or treasury)\\n     *                    or address of the DonationMiner contract otherwise\\n     */\\n    event DonationAdded(\\n        uint256 indexed donationId,\\n        address indexed donor,\\n        uint256 amount,\\n        address indexed target\\n    );\\n\\n    /**\\n     * @notice Triggered when a donor has claimed his reward\\n     *\\n     * @param donor       Address of the donner\\n     * @param amount      Value of the reward\\n     */\\n    event RewardClaimed(address indexed donor, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\\n     *\\n     * @param token               ERC20 token address\\n     * @param to                  Address of the receiver\\n     * @param amount              Amount of the transaction\\n     */\\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when reward period params have been updated\\n     *\\n     * @param oldRewardPeriodSize   Old rewardPeriodSize value\\n     * @param oldDecayNumerator     Old decayNumerator value\\n     * @param oldDecayDenominator   Old decayDenominator value\\n     * @param newRewardPeriodSize   New rewardPeriodSize value\\n     * @param newDecayNumerator     New decayNumerator value\\n     * @param newDecayDenominator   New decayDenominator value\\n     *\\n     * For further information regarding each parameter, see\\n     * *DonationMiner* smart contract initialize method.\\n     */\\n    event RewardPeriodParamsUpdated(\\n        uint256 oldRewardPeriodSize,\\n        uint256 oldDecayNumerator,\\n        uint256 oldDecayDenominator,\\n        uint256 newRewardPeriodSize,\\n        uint256 newDecayNumerator,\\n        uint256 newDecayDenominator\\n    );\\n\\n    /**\\n     * @notice Triggered when the first reward period params have been updated\\n     *\\n     * @param oldStartingBlock        Old oldStartingBlock value\\n     * @param oldFirstRewardPerBlock  Old oldFirstRewardPerBlock value\\n     * @param newStartingBlock        New newStartingBlock value\\n     * @param newFirstRewardPerBlock  New newFirstRewardPerBlock value\\n     *\\n     * For further information regarding each parameter, see\\n     * *DonationMiner* smart contract initialize method.\\n     */\\n    event FirstRewardPeriodParamsUpdated(\\n        uint256 oldStartingBlock,\\n        uint256 oldFirstRewardPerBlock,\\n        uint256 newStartingBlock,\\n        uint256 newFirstRewardPerBlock\\n    );\\n\\n    /**\\n     * @notice Triggered when the treasury address has been updated\\n     *\\n     * @param oldTreasury             Old treasury address\\n     * @param newTreasury             New treasury address\\n     */\\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\\n\\n    /**\\n     * @notice Enforces beginning rewardPeriod has started\\n     */\\n    modifier whenStarted() {\\n        require(block.number >= rewardPeriods[1].startBlock, \\\"DonationMiner: ERR_NOT_STARTED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize a new DonationMiner contract\\n     *\\n     * @param _cUSD                 Address of the cUSD token\\n     * @param _PACT                 Address of the PACT Token\\n     * @param _treasury             Address of the Treasury\\n     * @param _firstRewardPerBlock  Number of PACTs given for each block\\n     *                              from the first reward period\\n     * @param _rewardPeriodSize     Number of blocks of the reward period\\n     * @param _startingBlock        First block of the first reward period\\n     * @param _decayNumerator       Decay numerator used for calculating\\n                                    the new reward per block based on\\n                                    the previous reward per block\\n     * @param _decayDenominator     Decay denominator used for calculating\\n                                    the new reward per block based on\\n                                    the previous reward per block\\n     */\\n    function initialize(\\n        IERC20 _cUSD,\\n        IERC20 _PACT,\\n        ITreasury _treasury,\\n        uint256 _firstRewardPerBlock,\\n        uint256 _rewardPeriodSize,\\n        uint256 _startingBlock,\\n        uint256 _decayNumerator,\\n        uint256 _decayDenominator\\n    ) public initializer {\\n        require(address(_cUSD) != address(0), \\\"DonationMiner::initialize: cUSD address not set\\\");\\n        require(address(_PACT) != address(0), \\\"DonationMiner::initialize: PACT address not set\\\");\\n        require(address(_treasury) != address(0), \\\"DonationMiner::initialize: treasury_ not set\\\");\\n        require(\\n            _firstRewardPerBlock != 0,\\n            \\\"DonationMiner::initialize: firstRewardPerBlock not set!\\\"\\n        );\\n        require(_startingBlock != 0, \\\"DonationMiner::initialize: startingRewardPeriod not set!\\\");\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        cUSD = _cUSD;\\n        PACT = _PACT;\\n        treasury = _treasury;\\n        rewardPeriodSize = _rewardPeriodSize;\\n        decayNumerator = _decayNumerator;\\n        decayDenominator = _decayDenominator;\\n\\n        rewardPeriodCount = 1;\\n        initFirstPeriod(_startingBlock, _firstRewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of cUSD donated by a user in a reward period\\n     *\\n     * @param _period number of the reward period\\n     * @param _donor address of the donor\\n     * @return uint256 amount of cUSD donated by the user in this reward period\\n     */\\n    function rewardPeriodDonorAmount(uint256 _period, address _donor)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return rewardPeriods[_period].donorAmounts[_donor];\\n    }\\n\\n    /**\\n     * @notice Returns a reward period number from a donor reward period list\\n     *\\n     * @param _donor address of the donor\\n     * @param _rewardPeriodIndex index of the reward period\\n     * @return uint256 number of the reward period\\n     */\\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return donors[_donor].rewardPeriods[_rewardPeriodIndex];\\n    }\\n\\n    /**\\n     * @notice Updates reward period default params\\n     *\\n     * @param _newRewardPeriodSize value of new rewardPeriodSize\\n     * @param _newDecayNumerator value of new decayNumerator\\n     * @param _newDecayDenominator value of new decayDenominator\\n     */\\n    function updateRewardPeriodParams(\\n        uint256 _newRewardPeriodSize,\\n        uint256 _newDecayNumerator,\\n        uint256 _newDecayDenominator\\n    ) external override onlyOwner {\\n        uint256 _oldRewardPeriodSize = rewardPeriodSize;\\n        uint256 _oldDecayNumerator = decayNumerator;\\n        uint256 _oldDecayDenominator = decayDenominator;\\n\\n        rewardPeriodSize = _newRewardPeriodSize;\\n        decayNumerator = _newDecayNumerator;\\n        decayDenominator = _newDecayDenominator;\\n\\n        emit RewardPeriodParamsUpdated(\\n            _oldRewardPeriodSize,\\n            _oldDecayNumerator,\\n            _oldDecayDenominator,\\n            _newRewardPeriodSize,\\n            _newDecayNumerator,\\n            _newDecayDenominator\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates first reward period default params\\n     *\\n     * @param _startingBlock value of new startingBlock\\n     * @param _firstRewardPerBlock value of new firstRewardPerBlock\\n     */\\n    function updateFirstRewardPeriodParams(uint256 _startingBlock, uint256 _firstRewardPerBlock)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 _oldStartingBlock = rewardPeriods[1].startBlock;\\n        uint256 _oldFirstRewardPerBlock = rewardPeriods[1].rewardPerBlock;\\n\\n        require(\\n            _oldStartingBlock > block.number,\\n            \\\"DonationMiner::updateFirstRewardPeriodParams: DonationMiner has already started\\\"\\n        );\\n\\n        initFirstPeriod(_startingBlock, _firstRewardPerBlock);\\n\\n        emit FirstRewardPeriodParamsUpdated(\\n            _oldStartingBlock,\\n            _oldFirstRewardPerBlock,\\n            _startingBlock,\\n            _firstRewardPerBlock\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates Treasury address\\n     *\\n     * @param _newTreasury address of new treasury_ contract\\n     */\\n    function updateTreasury(ITreasury _newTreasury) external override onlyOwner {\\n        address _oldTreasuryAddress = address(treasury);\\n        treasury = _newTreasury;\\n\\n        emit TreasuryUpdated(_oldTreasuryAddress, address(_newTreasury));\\n    }\\n\\n    /**\\n     * @notice Transfers cUSD tokens to the treasury contract\\n     *\\n     * @param _amount Amount of cUSD tokens to deposit.\\n     */\\n    function donate(uint256 _amount) external override whenNotPaused whenStarted nonReentrant {\\n        // Transfer the cUSD from the donor to the treasury\\n        cUSD.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        addDonation(msg.sender, _amount, address(treasury));\\n    }\\n\\n    /**\\n     * @dev Transfers cUSD tokens to the community contract\\n     *\\n     * @param _community address of the community\\n     * @param _amount amount of cUSD tokens to deposit\\n     */\\n    function donateToCommunity(ICommunity _community, uint256 _amount)\\n        external\\n        override\\n        whenNotPaused\\n        whenStarted\\n        nonReentrant\\n    {\\n        ICommunityAdmin _communityAdmin = treasury.communityAdmin();\\n        require(\\n            _communityAdmin.communities(address(_community)) ==\\n                ICommunityAdmin.CommunityState.Valid,\\n            \\\"DonationMiner::donateToCommunity: This is not a valid community address\\\"\\n        );\\n        // Transfer the cUSD from the donor to the community\\n        _community.donate(msg.sender, _amount);\\n        addDonation(msg.sender, _amount, address(_community));\\n    }\\n\\n    /**\\n     * @notice Transfers to the sender the rewards from ended reward periods\\n     */\\n    function claimRewards() external override whenNotPaused whenStarted nonReentrant {\\n        Donor storage _donor = donors[msg.sender];\\n        uint256 _claimAmount = calculateClaimableRewards(msg.sender);\\n        _donor.lastClaim = getDonorLastEndedRewardPeriodIndex(_donor);\\n\\n        if (_claimAmount == 0) {\\n            return;\\n        }\\n\\n        if (_claimAmount > PACT.balanceOf(address(this))) {\\n            _claimAmount = PACT.balanceOf(address(this));\\n        }\\n\\n        PACT.safeTransfer(msg.sender, _claimAmount);\\n\\n        emit RewardClaimed(msg.sender, _claimAmount);\\n    }\\n\\n    /**\\n     * @notice Calculates the rewards from ended reward periods of a donor\\n     *\\n     * @param _donorAddress address of the donor\\n     * @return uint256 sum of all donor's rewards that has not been claimed yet\\n     */\\n    function calculateClaimableRewards(address _donorAddress)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Donor storage _donor = donors[_donorAddress];\\n        uint256 _claimAmount;\\n        uint256 _rewardPeriodNumber;\\n        uint256 _lastEndedRewardPeriodIndex = getDonorLastEndedRewardPeriodIndex(_donor);\\n        uint256 _index = _donor.lastClaim + 1;\\n\\n        while (_index <= _lastEndedRewardPeriodIndex) {\\n            _rewardPeriodNumber = _donor.rewardPeriods[_index];\\n            RewardPeriod storage _rewardPeriod = rewardPeriods[_rewardPeriodNumber];\\n\\n            _claimAmount +=\\n                (_rewardPeriod.rewardAmount * _rewardPeriod.donorAmounts[_donorAddress]) /\\n                _rewardPeriod.donationsAmount;\\n            _index++;\\n        }\\n\\n        return _claimAmount;\\n    }\\n\\n    /**\\n     * @notice Calculates the estimate reward of a donor for current reward period\\n     *\\n     * @param _donorAddress address of the donor\\n     * @return uint256 reward that donor will receive in current reward period if there isn't another donation\\n     */\\n    function estimateClaimableReward(address _donorAddress)\\n        external\\n        view\\n        override\\n        whenStarted\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        RewardPeriod storage _lastRewardPeriod = rewardPeriods[rewardPeriodCount];\\n\\n        uint256 _claimAmount;\\n\\n        if (isCurrentRewardPeriodInitialized()) {\\n            _claimAmount +=\\n                (_lastRewardPeriod.rewardAmount * _lastRewardPeriod.donorAmounts[_donorAddress]) /\\n                _lastRewardPeriod.donationsAmount;\\n        }\\n\\n        return _claimAmount;\\n    }\\n\\n    /**\\n     * @notice Calculates the number of PACTs given for each block in current reward period\\n     *\\n     * @return uint256 current reward per block\\n     */\\n    function calculateRewardPerBlock() internal view returns (uint256) {\\n        return\\n            (rewardPeriods[rewardPeriodCount - 1].rewardPerBlock * decayNumerator) /\\n            decayDenominator;\\n    }\\n\\n    /**\\n     * @notice Transfers an amount of an ERC20 from this contract to an address\\n     *\\n     * @param _token address of the ERC20 token\\n     * @param _to address of the receiver\\n     * @param _amount amount of the transaction\\n     */\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner nonReentrant {\\n        _token.safeTransfer(_to, _amount);\\n\\n        emit TransferERC20(address(_token), _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Initializes all reward periods that haven't been initialized yet until the current one.\\n     *         The first donor in a reward period will pay for that operation.\\n     */\\n    function initializeRewardPeriods() internal {\\n        RewardPeriod storage _lastPeriod = rewardPeriods[rewardPeriodCount];\\n\\n        while (_lastPeriod.endBlock < block.number) {\\n            rewardPeriodCount++;\\n            RewardPeriod storage _newPeriod = rewardPeriods[rewardPeriodCount];\\n            _newPeriod.startBlock = _lastPeriod.endBlock + 1;\\n            _newPeriod.endBlock = _newPeriod.startBlock + rewardPeriodSize - 1;\\n            _newPeriod.rewardPerBlock = calculateRewardPerBlock();\\n            uint256 _rewardAmount = rewardPeriodSize * _newPeriod.rewardPerBlock;\\n            if (_lastPeriod.donationsAmount == 0) {\\n                _rewardAmount += _lastPeriod.rewardAmount;\\n            }\\n            _newPeriod.rewardAmount = _rewardAmount;\\n            _lastPeriod = _newPeriod;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new donation in donations list\\n     *\\n     * @param _donorAddress address of the donner\\n     * @param _amount amount of the donation\\n     * @param _target address of the receiver (community or treasury)\\n     */\\n    function addDonation(\\n        address _donorAddress,\\n        uint256 _amount,\\n        address _target\\n    ) internal {\\n        initializeRewardPeriods();\\n\\n        donationCount++;\\n        Donation storage _donation = donations[donationCount];\\n        _donation.donor = _donorAddress;\\n        _donation.target = _target;\\n        _donation.amount = _amount;\\n        _donation.blockNumber = block.number;\\n        _donation.rewardPeriod = rewardPeriodCount;\\n        _donation.token = cUSD;\\n        _donation.tokenPrice = 1e18;\\n\\n        updateRewardPeriodAmounts(rewardPeriodCount, msg.sender, _amount);\\n        addCurrentRewardPeriodToDonor(msg.sender);\\n\\n        emit DonationAdded(donationCount, msg.sender, _amount, _target);\\n    }\\n\\n    /**\\n     * @notice Returns the index of the last ended reward period in which a donor has donated\\n     *\\n     * @param _donor object of the donor\\n     * @return uint256 the index of the last ended reward period of the donor\\n     */\\n    function getDonorLastEndedRewardPeriodIndex(Donor storage _donor)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _lastDonorRewardPeriod = _donor.rewardPeriods[_donor.rewardPeriodsCount];\\n        if (rewardPeriods[_lastDonorRewardPeriod].endBlock < block.number) {\\n            return _donor.rewardPeriodsCount;\\n        } else {\\n            return _donor.rewardPeriodsCount - 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds the current reward period number to a donor's list only if it hasn't been added yet\\n     *\\n     * @param _donorAddress address of the donor\\n     */\\n    function addCurrentRewardPeriodToDonor(address _donorAddress) internal {\\n        Donor storage _donor = donors[_donorAddress];\\n        uint256 _lastDonorRewardPeriod = _donor.rewardPeriods[_donor.rewardPeriodsCount];\\n\\n        //ensures that the current reward period number hasn't been added in the donor's list\\n        if (_lastDonorRewardPeriod != rewardPeriodCount) {\\n            _donor.rewardPeriodsCount++;\\n            _donor.rewardPeriods[_donor.rewardPeriodsCount] = rewardPeriodCount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the amounts of a reward period\\n     *\\n     * @param _rewardPeriodNumber number of the reward period\\n     * @param _donorAddress address of the donor\\n     * @param _amount amount to be added\\n     */\\n    function updateRewardPeriodAmounts(\\n        uint256 _rewardPeriodNumber,\\n        address _donorAddress,\\n        uint256 _amount\\n    ) internal {\\n        RewardPeriod storage _currentPeriod = rewardPeriods[_rewardPeriodNumber];\\n        _currentPeriod.donationsAmount += _amount;\\n        _currentPeriod.donorAmounts[_donorAddress] += _amount;\\n    }\\n\\n    /**\\n     * @notice Checks if current reward period has been initialized\\n     *\\n     * @return bool true if current reward period has been initialized\\n     */\\n    function isCurrentRewardPeriodInitialized() internal view returns (bool) {\\n        return rewardPeriods[rewardPeriodCount].endBlock >= block.number;\\n    }\\n\\n    /**\\n     * @notice Initializes the first reward period\\n     *\\n     * @param _startingBlock first block\\n     * @param _firstRewardPerBlock initial reward per block\\n     */\\n    function initFirstPeriod(uint256 _startingBlock, uint256 _firstRewardPerBlock) internal {\\n        RewardPeriod storage _firstPeriod = rewardPeriods[1];\\n        _firstPeriod.startBlock = _startingBlock;\\n        _firstPeriod.endBlock = _startingBlock + rewardPeriodSize - 1;\\n        _firstPeriod.rewardPerBlock = _firstRewardPerBlock;\\n        _firstPeriod.rewardAmount = _firstRewardPerBlock * rewardPeriodSize;\\n    }\\n}\\n\",\"keccak256\":\"0xa92ce989635fe3a1ea5816ff01a66250200b01d8ba2bcc89f20d2c65719c7466\",\"license\":\"Apache-2.0\"},\"contracts/token/interfaces/DonationMinerStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDonationMiner.sol\\\";\\n\\n/**\\n * @title Storage for DonationMiner\\n * @notice For future upgrades, do not change DonationMinerStorageV1. Create a new\\n * contract which implements DonationMinerStorageV1 and following the naming convention\\n * DonationMinerStorageVX.\\n */\\nabstract contract DonationMinerStorageV1 is IDonationMiner {\\n    IERC20 public override cUSD;\\n    IERC20 public override PACT;\\n    ITreasury public override treasury;\\n    uint256 public override rewardPeriodSize;\\n    uint256 public override donationCount;\\n    uint256 public override rewardPeriodCount;\\n    uint256 public override decayNumerator;\\n    uint256 public override decayDenominator;\\n\\n    mapping(uint256 => Donation) public override donations;\\n    mapping(uint256 => RewardPeriod) public override rewardPeriods;\\n    mapping(address => Donor) public override donors;\\n}\\n\",\"keccak256\":\"0xbb465fff32060d6983c67534b070186f30c3262aa00455369e04956e0b16b8aa\",\"license\":\"Apache-2.0\"},\"contracts/token/interfaces/IDonationMiner.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\n\\ninterface IDonationMiner {\\n    struct RewardPeriod {\\n        uint256 rewardPerBlock; //reward tokens created per block.\\n        uint256 rewardAmount; //reward tokens from previous periods + reward tokens from this reward period\\n        uint256 startBlock; //block number at which reward period starts.\\n        uint256 endBlock; //block number at which reward period ends.\\n        uint256 donationsAmount; //total of donations for this rewardPeriod.\\n        mapping(address => uint256) donorAmounts; //amounts donated by every donor in this rewardPeriod.\\n    }\\n\\n    struct Donor {\\n        uint256 lastClaim;  //last reward period index for which the donor has claimed the reward\\n        uint256 rewardPeriodsCount; //total number of reward periods in which the donor donated\\n        mapping(uint256 => uint256) rewardPeriods; //list of all reward period ids in which the donor donated\\n    }\\n\\n\\n    struct Donation {\\n        address donor;  //address of the donner\\n        address target;  //address of the receiver (community or treasury)\\n        uint256 rewardPeriod;  //number of the reward period in which the donation was made\\n        uint256 blockNumber;  //number of the block in which the donation was executed\\n        uint256 amount;  //number of tokens donated\\n        IERC20 token;  //address of the token\\n        uint256 tokenPrice;  //the price of the token in cUSD\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function cUSD() external view returns (IERC20);\\n    function PACT() external view returns (IERC20);\\n    function treasury() external view returns (ITreasury);\\n    function rewardPeriodSize() external view returns (uint256);\\n    function decayNumerator() external view returns (uint256);\\n    function decayDenominator() external view returns (uint256);\\n    function rewardPeriodCount() external view returns (uint256);\\n    function donationCount() external view returns (uint256);\\n    function rewardPeriods(uint256 _period) external view returns (\\n        uint256 rewardPerBlock,\\n        uint256 rewardAmount,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        uint256 donationsAmount\\n    );\\n    function rewardPeriodDonorAmount(uint256 _period, address _donor) external view returns (uint256);\\n    function donors(address _donor) external view returns (uint256 rewardPeriodsCount, uint256 lastClaim);\\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex) external view returns (uint256);\\n    function donations(uint256 _index) external view returns (\\n        address donor,\\n        address target,\\n        uint256 rewardPeriod,\\n        uint256 blockNumber,\\n        uint256 amount,\\n        IERC20 token,\\n        uint256 tokenPrice\\n    );\\n    function updateRewardPeriodParams(\\n        uint256 _newRewardPeriodSize,\\n        uint256 _newDecayNumerator,\\n        uint256 _newDecayDenominator\\n    ) external;\\n    function updateFirstRewardPeriodParams(\\n        uint256 _startingBlock,\\n        uint256 _firstRewardPerBlock\\n    ) external;\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function donate(uint256 _amount) external;\\n    function donateToCommunity(ICommunity _community, uint256 _amount) external;\\n    function claimRewards() external;\\n    function calculateClaimableRewards(address _donor) external returns (uint256);\\n    function estimateClaimableReward(address _donor) external view returns (uint256);\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xc09b26cdc68dc4f812bd212ce51e93e10221b77c835f0168c732968a6d8604ff\",\"license\":\"Apache-2.0\"},\"contracts/token/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\n\\ninterface ITreasury {\\n    function getVersion() external returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9ffbd92dcf12f156936c8634aa74a3931780c4c91cfbc3c7d97ec21ce1104f19\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612171806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638252097d116100f9578063cd75000c11610097578063ed409ff311610071578063ed409ff31461043e578063f14faf6f14610447578063f2fde38b1461045a578063f8626af81461046d57600080fd5b8063cd75000c14610405578063df8fa43014610418578063e48508df1461042b57600080fd5b8063beabacc8116100d3578063beabacc81461039a578063c38474c0146103ad578063c89d1a8e146103b6578063ca0cdea8146103c957600080fd5b80638252097d1461031b5780638da5cb5b1461038057806392ade2991461039157600080fd5b80633b9a01761161016657806361d027b31161014057806361d027b3146102da578063715018a6146102ed5780637c62b1af146102f55780637f51bb1f1461030857600080fd5b80633b9a0176146102775780633ddec5311461028a5780635c975abb146102c457600080fd5b80631fccf672116101a25780631fccf672146102015780632abfab4d1461022c5780632bef5eef14610235578063372500ab1461026f57600080fd5b806307ea4e57146101c95780630d8e6e2c146101e557806311ec639b146101ec575b600080fd5b6101d260cf5481565b6040519081526020015b60405180910390f35b60016101d2565b6101ff6101fa366004611e85565b61050b565b005b60c954610214906001600160a01b031681565b6040516001600160a01b0390911681526020016101dc565b6101d260cd5481565b6101d2610243366004611e56565b600082815260d2602090815260408083206001600160a01b038516845260050190915290205492915050565b6101ff61065f565b60ca54610214906001600160a01b031681565b6101d2610298366004611cd8565b6001600160a01b0391909116600090815260d36020908152604080832093835260029093019052205490565b60655460ff1660405190151581526020016101dc565b60cb54610214906001600160a01b031681565b6101ff61086b565b6101ff610303366004611d3f565b6108a1565b6101ff610316366004611cbc565b610b36565b610358610329366004611e26565b60d260205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101dc565b6033546001600160a01b0316610214565b6101d260d05481565b6101ff6103a8366004611d51565b610bb2565b6101d260ce5481565b6101d26103c4366004611cbc565b610c6f565b6103f06103d7366004611cbc565b60d3602052600090815260409020805460019091015482565b604080519283526020830191909152016101dc565b6101d2610413366004611cbc565b610d39565b6101ff610426366004611d91565b610dfd565b6101ff610439366004611ea6565b611111565b6101d260cc5481565b6101ff610455366004611e26565b6111b5565b6101ff610468366004611cbc565b611279565b6104c761047b366004611e26565b60d16020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696948616959394929391929091169087565b604080516001600160a01b03988916815296881660208801528601949094526060850192909252608084015290921660a082015260c081019190915260e0016101dc565b6033546001600160a01b0316331461053e5760405162461bcd60e51b815260040161053590611fcf565b60405180910390fd5b600160005260d260205260008051602061211c833981519152547fb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f35544382116106075760405162461bcd60e51b815260206004820152604f60248201527f446f6e6174696f6e4d696e65723a3a757064617465466972737452657761726460448201527f506572696f64506172616d733a20446f6e6174696f6e4d696e6572206861732060648201526e185b1c9958591e481cdd185c9d1959608a1b608482015260a401610535565b6106118484611314565b6040805183815260208101839052908101859052606081018490527f0dff8d4d90919e5c45ed6b61037a861e35ea326548d4e842036fef8883288c469060800160405180910390a150505050565b60655460ff16156106825760405162461bcd60e51b815260040161053590611f57565b600160005260d260205260008051602061211c833981519152544310156106bb5760405162461bcd60e51b815260040161053590611f20565b600260975414156106de5760405162461bcd60e51b815260040161053590612004565b600260975533600081815260d360205260408120916106fc90610d39565b90506107078261138b565b825580610715575050610864565b60ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561075857600080fd5b505afa15801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190611e3e565b8111156108155760ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156107da57600080fd5b505afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190611e3e565b90505b60ca5461082c906001600160a01b031633836113d3565b60405181815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419060200160405180910390a250505b6001609755565b6033546001600160a01b031633146108955760405162461bcd60e51b815260040161053590611fcf565b61089f600061143b565b565b60655460ff16156108c45760405162461bcd60e51b815260040161053590611f57565b600160005260d260205260008051602061211c833981519152544310156108fd5760405162461bcd60e51b815260040161053590611f20565b600260975414156109205760405162461bcd60e51b815260040161053590612004565b600260975560cb5460408051632fd648bd60e11b815290516000926001600160a01b031691635fac917a916004808301926020929190829003018186803b15801561096a57600080fd5b505afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190611d23565b90506001604051633f9409e960e11b81526001600160a01b038581166004830152831690637f2813d29060240160206040518083038186803b1580156109e757600080fd5b505afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190611e07565b6003811115610a3e57634e487b7160e01b600052602160045260246000fd5b14610ac15760405162461bcd60e51b815260206004820152604760248201527f446f6e6174696f6e4d696e65723a3a646f6e617465546f436f6d6d756e69747960448201527f3a2054686973206973206e6f7420612076616c696420636f6d6d756e697479206064820152666164647265737360c81b608482015260a401610535565b60405163e69d849d60e01b8152336004820152602481018390526001600160a01b0384169063e69d849d90604401600060405180830381600087803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b50505050610b2c33838561148d565b5050600160975550565b6033546001600160a01b03163314610b605760405162461bcd60e51b815260040161053590611fcf565b60cb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a90600090a35050565b6033546001600160a01b03163314610bdc5760405162461bcd60e51b815260040161053590611fcf565b60026097541415610bff5760405162461bcd60e51b815260040161053590612004565b6002609755610c186001600160a01b03841683836113d3565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a895683604051610c5d91815260200190565b60405180910390a35050600160975550565b6001600090815260d260205260008051602061211c83398151915254431015610caa5760405162461bcd60e51b815260040161053590611f20565b60655460ff1615610ccd5760405162461bcd60e51b815260040161053590611f57565b60ce54600090815260d26020526040812060038101549091904311610d325760048201546001600160a01b03851660009081526005840160205260409020546001840154610d1b9190612073565b610d259190612053565b610d2f908261203b565b90505b9392505050565b6001600160a01b038116600090815260d360205260408120818080610d5d8461138b565b8454909150600090610d7090600161203b565b90505b818111610df257600081815260028601602090815260408083205480845260d2835281842060048101546001600160a01b038d16865260058201909452919093205460018201549396509092610dc99190612073565b610dd39190612053565b610ddd908661203b565b945081610de9816120d5565b92505050610d73565b509195945050505050565b600054610100900460ff1680610e16575060005460ff16155b610e325760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015610e54576000805461ffff19166101011790555b6001600160a01b038916610ec25760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20635553442060448201526e1859191c995cdcc81b9bdd081cd95d608a1b6064820152608401610535565b6001600160a01b038816610f305760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20504143542060448201526e1859191c995cdcc81b9bdd081cd95d608a1b6064820152608401610535565b6001600160a01b038716610f9b5760405162461bcd60e51b815260206004820152602c60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20747265617360448201526b1d5c9e57c81b9bdd081cd95d60a21b6064820152608401610535565b8561100e5760405162461bcd60e51b815260206004820152603760248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20666972737460448201527f526577617264506572426c6f636b206e6f7420736574210000000000000000006064820152608401610535565b836110815760405162461bcd60e51b815260206004820152603860248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20737461727460448201527f696e67526577617264506572696f64206e6f74207365742100000000000000006064820152608401610535565b61108961157d565b6110916115f8565b61109961165f565b60c980546001600160a01b03808c166001600160a01b03199283161790925560ca80548b841690831617905560cb8054928a169290911691909117905560cc85905560cf83905560d0829055600160ce556110f48487611314565b8015611106576000805461ff00191690555b505050505050505050565b6033546001600160a01b0316331461113b5760405162461bcd60e51b815260040161053590611fcf565b60cc805460cf805460d080549488905591869055908490556040805183815260208101839052908101849052606081018790526080810186905260a08101859052919290917f8fb29c6ced5ce51696c08668df816fab7e60c674a6c36e167d5df9b8a5f499849060c00160405180910390a1505050505050565b60655460ff16156111d85760405162461bcd60e51b815260040161053590611f57565b600160005260d260205260008051602061211c833981519152544310156112115760405162461bcd60e51b815260040161053590611f20565b600260975414156112345760405162461bcd60e51b815260040161053590612004565b600260975560cb5460c954611258916001600160a01b0391821691339116846116be565b60cb5461127190339083906001600160a01b031661148d565b506001609755565b6033546001600160a01b031633146112a35760405162461bcd60e51b815260040161053590611fcf565b6001600160a01b0381166113085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610535565b6113118161143b565b50565b6001600081905260d260205260008051602061211c83398151915283905560cc547fb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f359190611362908561203b565b61136c9190612092565b600382015581815560cc546113819083612073565b6001909101555050565b6001810154600090815260028201602090815260408083205480845260d29092528220600301544311156113c25750506001015490565b60018360010154610d329190612092565b6040516001600160a01b03831660248201526044810182905261143690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116fc565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114956117ce565b60cd80549060006114a5836120d5565b909155505060cd54600090815260d16020526040902080546001600160a01b038086166001600160a01b03199283161783556001830180548583169084161790556004830185905543600384015560ce8054600285015560c954600585018054909416921691909117909155670de0b6b3a764000060068301555461152b90338561188f565b611534336118ec565b60cd546040518481526001600160a01b0384169133917fdc4e2aab08207c15ed02d2a68af2e6df3472e2d7a636be078843d1724917e3a89060200160405180910390a450505050565b600054610100900460ff1680611596575060005460ff16155b6115b25760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff161580156115d4576000805461ffff19166101011790555b6115dc611957565b6115e46119c1565b8015611311576000805461ff001916905550565b600054610100900460ff1680611611575060005460ff16155b61162d5760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff1615801561164f576000805461ffff19166101011790555b611657611957565b6115e4611a21565b600054610100900460ff1680611678575060005460ff16155b6116945760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff161580156116b6576000805461ffff19166101011790555b6115e4611a96565b6040516001600160a01b03808516602483015283166044820152606481018290526116f69085906323b872dd60e01b906084016113ff565b50505050565b6000611751826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b069092919063ffffffff16565b805190915015611436578080602001905181019061176f9190611d03565b6114365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610535565b60ce54600090815260d2602052604090205b43816003015410156113115760ce80549060006117fc836120d5565b909155505060ce54600090815260d260205260409020600382015461182290600161203b565b6002820181905560cc54600191611839919061203b565b6118439190612092565b6003820155611850611b15565b80825560cc5460009161186291612073565b9050826004015460001415611883576001830154611880908261203b565b90505b600182015590506117e0565b600083815260d260205260408120600481018054919284926118b290849061203b565b90915550506001600160a01b0383166000908152600582016020526040812080548492906118e190849061203b565b909155505050505050565b6001600160a01b038116600090815260d36020908152604080832060018101548452600281019092529091205460ce54811461143657600182018054906000611934836120d5565b909155505060ce5460018301546000908152600284016020526040902055505050565b600054610100900460ff1680611970575060005460ff16155b61198c5760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff161580156115e4576000805461ffff19166101011790558015611311576000805461ff001916905550565b600054610100900460ff16806119da575060005460ff16155b6119f65760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015611a18576000805461ffff19166101011790555b6115e43361143b565b600054610100900460ff1680611a3a575060005460ff16155b611a565760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015611a78576000805461ffff19166101011790555b6065805460ff191690558015611311576000805461ff001916905550565b600054610100900460ff1680611aaf575060005460ff16155b611acb5760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015611aed576000805461ffff19166101011790555b60016097558015611311576000805461ff001916905550565b6060610d2f8484600085611b5b565b600060d05460cf5460d26000600160ce54611b309190612092565b815260200190815260200160002060000154611b4c9190612073565b611b569190612053565b905090565b606082471015611bbc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610535565b843b611c0a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610535565b600080866001600160a01b03168587604051611c269190611ed1565b60006040518083038185875af1925050503d8060008114611c63576040519150601f19603f3d011682016040523d82523d6000602084013e611c68565b606091505b5091509150611c78828286611c83565b979650505050505050565b60608315611c92575081610d32565b825115611ca25782518084602001fd5b8160405162461bcd60e51b81526004016105359190611eed565b600060208284031215611ccd578081fd5b8135610d3281612106565b60008060408385031215611cea578081fd5b8235611cf581612106565b946020939093013593505050565b600060208284031215611d14578081fd5b81518015158114610d32578182fd5b600060208284031215611d34578081fd5b8151610d3281612106565b60008060408385031215611cea578182fd5b600080600060608486031215611d65578081fd5b8335611d7081612106565b92506020840135611d8081612106565b929592945050506040919091013590565b600080600080600080600080610100898b031215611dad578384fd5b8835611db881612106565b97506020890135611dc881612106565b96506040890135611dd881612106565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b600060208284031215611e18578081fd5b815160048110610d32578182fd5b600060208284031215611e37578081fd5b5035919050565b600060208284031215611e4f578081fd5b5051919050565b60008060408385031215611e68578182fd5b823591506020830135611e7a81612106565b809150509250929050565b60008060408385031215611e97578182fd5b50508035926020909101359150565b600080600060608486031215611eba578283fd5b505081359360208301359350604090920135919050565b60008251611ee38184602087016120a9565b9190910192915050565b6020815260008251806020840152611f0c8160408501602087016120a9565b601f01601f19169190910160400192915050565b6020808252601e908201527f446f6e6174696f6e4d696e65723a204552525f4e4f545f535441525445440000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561204e5761204e6120f0565b500190565b60008261206e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561208d5761208d6120f0565b500290565b6000828210156120a4576120a46120f0565b500390565b60005b838110156120c45781810151838201526020016120ac565b838111156116f65750506000910152565b60006000198214156120e9576120e96120f0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461131157600080fdfeb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f37a26469706673582212201d0af73d9efe742524b34382155e9592c62575d04fde0b58ae3d80c1033b286d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80638252097d116100f9578063cd75000c11610097578063ed409ff311610071578063ed409ff31461043e578063f14faf6f14610447578063f2fde38b1461045a578063f8626af81461046d57600080fd5b8063cd75000c14610405578063df8fa43014610418578063e48508df1461042b57600080fd5b8063beabacc8116100d3578063beabacc81461039a578063c38474c0146103ad578063c89d1a8e146103b6578063ca0cdea8146103c957600080fd5b80638252097d1461031b5780638da5cb5b1461038057806392ade2991461039157600080fd5b80633b9a01761161016657806361d027b31161014057806361d027b3146102da578063715018a6146102ed5780637c62b1af146102f55780637f51bb1f1461030857600080fd5b80633b9a0176146102775780633ddec5311461028a5780635c975abb146102c457600080fd5b80631fccf672116101a25780631fccf672146102015780632abfab4d1461022c5780632bef5eef14610235578063372500ab1461026f57600080fd5b806307ea4e57146101c95780630d8e6e2c146101e557806311ec639b146101ec575b600080fd5b6101d260cf5481565b6040519081526020015b60405180910390f35b60016101d2565b6101ff6101fa366004611e85565b61050b565b005b60c954610214906001600160a01b031681565b6040516001600160a01b0390911681526020016101dc565b6101d260cd5481565b6101d2610243366004611e56565b600082815260d2602090815260408083206001600160a01b038516845260050190915290205492915050565b6101ff61065f565b60ca54610214906001600160a01b031681565b6101d2610298366004611cd8565b6001600160a01b0391909116600090815260d36020908152604080832093835260029093019052205490565b60655460ff1660405190151581526020016101dc565b60cb54610214906001600160a01b031681565b6101ff61086b565b6101ff610303366004611d3f565b6108a1565b6101ff610316366004611cbc565b610b36565b610358610329366004611e26565b60d260205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016101dc565b6033546001600160a01b0316610214565b6101d260d05481565b6101ff6103a8366004611d51565b610bb2565b6101d260ce5481565b6101d26103c4366004611cbc565b610c6f565b6103f06103d7366004611cbc565b60d3602052600090815260409020805460019091015482565b604080519283526020830191909152016101dc565b6101d2610413366004611cbc565b610d39565b6101ff610426366004611d91565b610dfd565b6101ff610439366004611ea6565b611111565b6101d260cc5481565b6101ff610455366004611e26565b6111b5565b6101ff610468366004611cbc565b611279565b6104c761047b366004611e26565b60d16020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696948616959394929391929091169087565b604080516001600160a01b03988916815296881660208801528601949094526060850192909252608084015290921660a082015260c081019190915260e0016101dc565b6033546001600160a01b0316331461053e5760405162461bcd60e51b815260040161053590611fcf565b60405180910390fd5b600160005260d260205260008051602061211c833981519152547fb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f35544382116106075760405162461bcd60e51b815260206004820152604f60248201527f446f6e6174696f6e4d696e65723a3a757064617465466972737452657761726460448201527f506572696f64506172616d733a20446f6e6174696f6e4d696e6572206861732060648201526e185b1c9958591e481cdd185c9d1959608a1b608482015260a401610535565b6106118484611314565b6040805183815260208101839052908101859052606081018490527f0dff8d4d90919e5c45ed6b61037a861e35ea326548d4e842036fef8883288c469060800160405180910390a150505050565b60655460ff16156106825760405162461bcd60e51b815260040161053590611f57565b600160005260d260205260008051602061211c833981519152544310156106bb5760405162461bcd60e51b815260040161053590611f20565b600260975414156106de5760405162461bcd60e51b815260040161053590612004565b600260975533600081815260d360205260408120916106fc90610d39565b90506107078261138b565b825580610715575050610864565b60ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561075857600080fd5b505afa15801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190611e3e565b8111156108155760ca546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156107da57600080fd5b505afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190611e3e565b90505b60ca5461082c906001600160a01b031633836113d3565b60405181815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419060200160405180910390a250505b6001609755565b6033546001600160a01b031633146108955760405162461bcd60e51b815260040161053590611fcf565b61089f600061143b565b565b60655460ff16156108c45760405162461bcd60e51b815260040161053590611f57565b600160005260d260205260008051602061211c833981519152544310156108fd5760405162461bcd60e51b815260040161053590611f20565b600260975414156109205760405162461bcd60e51b815260040161053590612004565b600260975560cb5460408051632fd648bd60e11b815290516000926001600160a01b031691635fac917a916004808301926020929190829003018186803b15801561096a57600080fd5b505afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190611d23565b90506001604051633f9409e960e11b81526001600160a01b038581166004830152831690637f2813d29060240160206040518083038186803b1580156109e757600080fd5b505afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190611e07565b6003811115610a3e57634e487b7160e01b600052602160045260246000fd5b14610ac15760405162461bcd60e51b815260206004820152604760248201527f446f6e6174696f6e4d696e65723a3a646f6e617465546f436f6d6d756e69747960448201527f3a2054686973206973206e6f7420612076616c696420636f6d6d756e697479206064820152666164647265737360c81b608482015260a401610535565b60405163e69d849d60e01b8152336004820152602481018390526001600160a01b0384169063e69d849d90604401600060405180830381600087803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b50505050610b2c33838561148d565b5050600160975550565b6033546001600160a01b03163314610b605760405162461bcd60e51b815260040161053590611fcf565b60cb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a90600090a35050565b6033546001600160a01b03163314610bdc5760405162461bcd60e51b815260040161053590611fcf565b60026097541415610bff5760405162461bcd60e51b815260040161053590612004565b6002609755610c186001600160a01b03841683836113d3565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a895683604051610c5d91815260200190565b60405180910390a35050600160975550565b6001600090815260d260205260008051602061211c83398151915254431015610caa5760405162461bcd60e51b815260040161053590611f20565b60655460ff1615610ccd5760405162461bcd60e51b815260040161053590611f57565b60ce54600090815260d26020526040812060038101549091904311610d325760048201546001600160a01b03851660009081526005840160205260409020546001840154610d1b9190612073565b610d259190612053565b610d2f908261203b565b90505b9392505050565b6001600160a01b038116600090815260d360205260408120818080610d5d8461138b565b8454909150600090610d7090600161203b565b90505b818111610df257600081815260028601602090815260408083205480845260d2835281842060048101546001600160a01b038d16865260058201909452919093205460018201549396509092610dc99190612073565b610dd39190612053565b610ddd908661203b565b945081610de9816120d5565b92505050610d73565b509195945050505050565b600054610100900460ff1680610e16575060005460ff16155b610e325760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015610e54576000805461ffff19166101011790555b6001600160a01b038916610ec25760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20635553442060448201526e1859191c995cdcc81b9bdd081cd95d608a1b6064820152608401610535565b6001600160a01b038816610f305760405162461bcd60e51b815260206004820152602f60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20504143542060448201526e1859191c995cdcc81b9bdd081cd95d608a1b6064820152608401610535565b6001600160a01b038716610f9b5760405162461bcd60e51b815260206004820152602c60248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20747265617360448201526b1d5c9e57c81b9bdd081cd95d60a21b6064820152608401610535565b8561100e5760405162461bcd60e51b815260206004820152603760248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20666972737460448201527f526577617264506572426c6f636b206e6f7420736574210000000000000000006064820152608401610535565b836110815760405162461bcd60e51b815260206004820152603860248201527f446f6e6174696f6e4d696e65723a3a696e697469616c697a653a20737461727460448201527f696e67526577617264506572696f64206e6f74207365742100000000000000006064820152608401610535565b61108961157d565b6110916115f8565b61109961165f565b60c980546001600160a01b03808c166001600160a01b03199283161790925560ca80548b841690831617905560cb8054928a169290911691909117905560cc85905560cf83905560d0829055600160ce556110f48487611314565b8015611106576000805461ff00191690555b505050505050505050565b6033546001600160a01b0316331461113b5760405162461bcd60e51b815260040161053590611fcf565b60cc805460cf805460d080549488905591869055908490556040805183815260208101839052908101849052606081018790526080810186905260a08101859052919290917f8fb29c6ced5ce51696c08668df816fab7e60c674a6c36e167d5df9b8a5f499849060c00160405180910390a1505050505050565b60655460ff16156111d85760405162461bcd60e51b815260040161053590611f57565b600160005260d260205260008051602061211c833981519152544310156112115760405162461bcd60e51b815260040161053590611f20565b600260975414156112345760405162461bcd60e51b815260040161053590612004565b600260975560cb5460c954611258916001600160a01b0391821691339116846116be565b60cb5461127190339083906001600160a01b031661148d565b506001609755565b6033546001600160a01b031633146112a35760405162461bcd60e51b815260040161053590611fcf565b6001600160a01b0381166113085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610535565b6113118161143b565b50565b6001600081905260d260205260008051602061211c83398151915283905560cc547fb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f359190611362908561203b565b61136c9190612092565b600382015581815560cc546113819083612073565b6001909101555050565b6001810154600090815260028201602090815260408083205480845260d29092528220600301544311156113c25750506001015490565b60018360010154610d329190612092565b6040516001600160a01b03831660248201526044810182905261143690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116fc565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114956117ce565b60cd80549060006114a5836120d5565b909155505060cd54600090815260d16020526040902080546001600160a01b038086166001600160a01b03199283161783556001830180548583169084161790556004830185905543600384015560ce8054600285015560c954600585018054909416921691909117909155670de0b6b3a764000060068301555461152b90338561188f565b611534336118ec565b60cd546040518481526001600160a01b0384169133917fdc4e2aab08207c15ed02d2a68af2e6df3472e2d7a636be078843d1724917e3a89060200160405180910390a450505050565b600054610100900460ff1680611596575060005460ff16155b6115b25760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff161580156115d4576000805461ffff19166101011790555b6115dc611957565b6115e46119c1565b8015611311576000805461ff001916905550565b600054610100900460ff1680611611575060005460ff16155b61162d5760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff1615801561164f576000805461ffff19166101011790555b611657611957565b6115e4611a21565b600054610100900460ff1680611678575060005460ff16155b6116945760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff161580156116b6576000805461ffff19166101011790555b6115e4611a96565b6040516001600160a01b03808516602483015283166044820152606481018290526116f69085906323b872dd60e01b906084016113ff565b50505050565b6000611751826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b069092919063ffffffff16565b805190915015611436578080602001905181019061176f9190611d03565b6114365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610535565b60ce54600090815260d2602052604090205b43816003015410156113115760ce80549060006117fc836120d5565b909155505060ce54600090815260d260205260409020600382015461182290600161203b565b6002820181905560cc54600191611839919061203b565b6118439190612092565b6003820155611850611b15565b80825560cc5460009161186291612073565b9050826004015460001415611883576001830154611880908261203b565b90505b600182015590506117e0565b600083815260d260205260408120600481018054919284926118b290849061203b565b90915550506001600160a01b0383166000908152600582016020526040812080548492906118e190849061203b565b909155505050505050565b6001600160a01b038116600090815260d36020908152604080832060018101548452600281019092529091205460ce54811461143657600182018054906000611934836120d5565b909155505060ce5460018301546000908152600284016020526040902055505050565b600054610100900460ff1680611970575060005460ff16155b61198c5760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff161580156115e4576000805461ffff19166101011790558015611311576000805461ff001916905550565b600054610100900460ff16806119da575060005460ff16155b6119f65760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015611a18576000805461ffff19166101011790555b6115e43361143b565b600054610100900460ff1680611a3a575060005460ff16155b611a565760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015611a78576000805461ffff19166101011790555b6065805460ff191690558015611311576000805461ff001916905550565b600054610100900460ff1680611aaf575060005460ff16155b611acb5760405162461bcd60e51b815260040161053590611f81565b600054610100900460ff16158015611aed576000805461ffff19166101011790555b60016097558015611311576000805461ff001916905550565b6060610d2f8484600085611b5b565b600060d05460cf5460d26000600160ce54611b309190612092565b815260200190815260200160002060000154611b4c9190612073565b611b569190612053565b905090565b606082471015611bbc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610535565b843b611c0a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610535565b600080866001600160a01b03168587604051611c269190611ed1565b60006040518083038185875af1925050503d8060008114611c63576040519150601f19603f3d011682016040523d82523d6000602084013e611c68565b606091505b5091509150611c78828286611c83565b979650505050505050565b60608315611c92575081610d32565b825115611ca25782518084602001fd5b8160405162461bcd60e51b81526004016105359190611eed565b600060208284031215611ccd578081fd5b8135610d3281612106565b60008060408385031215611cea578081fd5b8235611cf581612106565b946020939093013593505050565b600060208284031215611d14578081fd5b81518015158114610d32578182fd5b600060208284031215611d34578081fd5b8151610d3281612106565b60008060408385031215611cea578182fd5b600080600060608486031215611d65578081fd5b8335611d7081612106565b92506020840135611d8081612106565b929592945050506040919091013590565b600080600080600080600080610100898b031215611dad578384fd5b8835611db881612106565b97506020890135611dc881612106565b96506040890135611dd881612106565b979a96995096976060810135975060808101359660a0820135965060c0820135955060e0909101359350915050565b600060208284031215611e18578081fd5b815160048110610d32578182fd5b600060208284031215611e37578081fd5b5035919050565b600060208284031215611e4f578081fd5b5051919050565b60008060408385031215611e68578182fd5b823591506020830135611e7a81612106565b809150509250929050565b60008060408385031215611e97578182fd5b50508035926020909101359150565b600080600060608486031215611eba578283fd5b505081359360208301359350604090920135919050565b60008251611ee38184602087016120a9565b9190910192915050565b6020815260008251806020840152611f0c8160408501602087016120a9565b601f01601f19169190910160400192915050565b6020808252601e908201527f446f6e6174696f6e4d696e65723a204552525f4e4f545f535441525445440000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561204e5761204e6120f0565b500190565b60008261206e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561208d5761208d6120f0565b500290565b6000828210156120a4576120a46120f0565b500390565b60005b838110156120c45781810151838201526020016120ac565b838111156116f65750506000910152565b60006000198214156120e9576120e96120f0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461131157600080fdfeb7404ce2b5a52e61a6b5c9b4585ed65d8cb4b8848d3ee262a356d0c2c46c5f37a26469706673582212201d0af73d9efe742524b34382155e9592c62575d04fde0b58ae3d80c1033b286d64736f6c63430008040033",
  "devdoc": {
    "events": {
      "DonationAdded(uint256,address,uint256,address)": {
        "params": {
          "amount": "Value of the donation",
          "donationId": "Id of the donation",
          "donor": "Address of the donner",
          "target": "Address of the receiver (community or treasury)                    or address of the DonationMiner contract otherwise"
        }
      },
      "FirstRewardPeriodParamsUpdated(uint256,uint256,uint256,uint256)": {
        "params": {
          "newFirstRewardPerBlock": "New newFirstRewardPerBlock value For further information regarding each parameter, see *DonationMiner* smart contract initialize method.",
          "newStartingBlock": "New newStartingBlock value",
          "oldFirstRewardPerBlock": "Old oldFirstRewardPerBlock value",
          "oldStartingBlock": "Old oldStartingBlock value"
        }
      },
      "RewardClaimed(address,uint256)": {
        "params": {
          "amount": "Value of the reward",
          "donor": "Address of the donner"
        }
      },
      "RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "newDecayDenominator": "New decayDenominator value For further information regarding each parameter, see *DonationMiner* smart contract initialize method.",
          "newDecayNumerator": "New decayNumerator value",
          "newRewardPeriodSize": "New rewardPeriodSize value",
          "oldDecayDenominator": "Old decayDenominator value",
          "oldDecayNumerator": "Old decayNumerator value",
          "oldRewardPeriodSize": "Old rewardPeriodSize value"
        }
      },
      "TransferERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount of the transaction",
          "to": "Address of the receiver",
          "token": "ERC20 token address"
        }
      },
      "TreasuryUpdated(address,address)": {
        "params": {
          "newTreasury": "New treasury address",
          "oldTreasury": "Old treasury address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateClaimableRewards(address)": {
        "params": {
          "_donorAddress": "address of the donor"
        },
        "returns": {
          "_0": "uint256 sum of all donor's rewards that has not been claimed yet"
        }
      },
      "donate(uint256)": {
        "params": {
          "_amount": "Amount of cUSD tokens to deposit."
        }
      },
      "donateToCommunity(address,uint256)": {
        "details": "Transfers cUSD tokens to the community contract",
        "params": {
          "_amount": "amount of cUSD tokens to deposit",
          "_community": "address of the community"
        }
      },
      "donorRewardPeriod(address,uint256)": {
        "params": {
          "_donor": "address of the donor",
          "_rewardPeriodIndex": "index of the reward period"
        },
        "returns": {
          "_0": "uint256 number of the reward period"
        }
      },
      "estimateClaimableReward(address)": {
        "params": {
          "_donorAddress": "address of the donor"
        },
        "returns": {
          "_0": "uint256 reward that donor will receive in current reward period if there isn't another donation"
        }
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_PACT": "Address of the PACT Token",
          "_cUSD": "Address of the cUSD token",
          "_decayDenominator": "Decay denominator used for calculating the new reward per block based on the previous reward per block",
          "_decayNumerator": "Decay numerator used for calculating the new reward per block based on the previous reward per block",
          "_firstRewardPerBlock": "Number of PACTs given for each block                              from the first reward period",
          "_rewardPeriodSize": "Number of blocks of the reward period",
          "_startingBlock": "First block of the first reward period",
          "_treasury": "Address of the Treasury"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardPeriodDonorAmount(uint256,address)": {
        "params": {
          "_donor": "address of the donor",
          "_period": "number of the reward period"
        },
        "returns": {
          "_0": "uint256 amount of cUSD donated by the user in this reward period"
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "_amount": "amount of the transaction",
          "_to": "address of the receiver",
          "_token": "address of the ERC20 token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFirstRewardPeriodParams(uint256,uint256)": {
        "params": {
          "_firstRewardPerBlock": "value of new firstRewardPerBlock",
          "_startingBlock": "value of new startingBlock"
        }
      },
      "updateRewardPeriodParams(uint256,uint256,uint256)": {
        "params": {
          "_newDecayDenominator": "value of new decayDenominator",
          "_newDecayNumerator": "value of new decayNumerator",
          "_newRewardPeriodSize": "value of new rewardPeriodSize"
        }
      },
      "updateTreasury(address)": {
        "params": {
          "_newTreasury": "address of new treasury_ contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DonationAdded(uint256,address,uint256,address)": {
        "notice": "Triggered when a donation has been added"
      },
      "FirstRewardPeriodParamsUpdated(uint256,uint256,uint256,uint256)": {
        "notice": "Triggered when the first reward period params have been updated"
      },
      "RewardClaimed(address,uint256)": {
        "notice": "Triggered when a donor has claimed his reward"
      },
      "RewardPeriodParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Triggered when reward period params have been updated"
      },
      "TransferERC20(address,address,uint256)": {
        "notice": "Triggered when an amount of an ERC20 has been transferred from this contract to an address"
      },
      "TreasuryUpdated(address,address)": {
        "notice": "Triggered when the treasury address has been updated"
      }
    },
    "kind": "user",
    "methods": {
      "calculateClaimableRewards(address)": {
        "notice": "Calculates the rewards from ended reward periods of a donor"
      },
      "claimRewards()": {
        "notice": "Transfers to the sender the rewards from ended reward periods"
      },
      "donate(uint256)": {
        "notice": "Transfers cUSD tokens to the treasury contract"
      },
      "donorRewardPeriod(address,uint256)": {
        "notice": "Returns a reward period number from a donor reward period list"
      },
      "estimateClaimableReward(address)": {
        "notice": "Calculates the estimate reward of a donor for current reward period"
      },
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Used to initialize a new DonationMiner contract"
      },
      "rewardPeriodDonorAmount(uint256,address)": {
        "notice": "Returns the amount of cUSD donated by a user in a reward period"
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfers an amount of an ERC20 from this contract to an address"
      },
      "updateFirstRewardPeriodParams(uint256,uint256)": {
        "notice": "Updates first reward period default params"
      },
      "updateRewardPeriodParams(uint256,uint256,uint256)": {
        "notice": "Updates reward period default params"
      },
      "updateTreasury(address)": {
        "notice": "Updates Treasury address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 792,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 418,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 531,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 599,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 690,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 705,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 748,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18295,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "cUSD",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IERC20)3196"
      },
      {
        "astId": 18299,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "PACT",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC20)3196"
      },
      {
        "astId": 18303,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "treasury",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(ITreasury)18639"
      },
      {
        "astId": 18306,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "rewardPeriodSize",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 18309,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "donationCount",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 18312,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "rewardPeriodCount",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 18315,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "decayNumerator",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 18318,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "decayDenominator",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 18324,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "donations",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_struct(Donation)18382_storage)"
      },
      {
        "astId": 18330,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "rewardPeriods",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_struct(RewardPeriod)18357_storage)"
      },
      {
        "astId": 18336,
        "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
        "label": "donors",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_struct(Donor)18366_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3196": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)18639": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Donor)18366_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDonationMiner.Donor)",
        "numberOfBytes": "32",
        "value": "t_struct(Donor)18366_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Donation)18382_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDonationMiner.Donation)",
        "numberOfBytes": "32",
        "value": "t_struct(Donation)18382_storage"
      },
      "t_mapping(t_uint256,t_struct(RewardPeriod)18357_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IDonationMiner.RewardPeriod)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardPeriod)18357_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Donation)18382_storage": {
        "encoding": "inplace",
        "label": "struct IDonationMiner.Donation",
        "members": [
          {
            "astId": 18368,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "donor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18370,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "target",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18372,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18374,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18376,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18379,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "token",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IERC20)3196"
          },
          {
            "astId": 18381,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "tokenPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Donor)18366_storage": {
        "encoding": "inplace",
        "label": "struct IDonationMiner.Donor",
        "members": [
          {
            "astId": 18359,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "lastClaim",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18361,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPeriodsCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18365,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPeriods",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardPeriod)18357_storage": {
        "encoding": "inplace",
        "label": "struct IDonationMiner.RewardPeriod",
        "members": [
          {
            "astId": 18344,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18346,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18348,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "startBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18350,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "endBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18352,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "donationsAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18356,
            "contract": "contracts/token/DonationMinerImplementation.sol:DonationMinerImplementation",
            "label": "donorAmounts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
