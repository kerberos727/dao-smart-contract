{
  "address": "0x3AD01e831E56EDB5fe2Ed5Ed9b70c7917c71E1BF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiaryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BeneficiaryClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiaryJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiaryLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldClaimAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxClaim",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDecreaseStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBaseInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIncrementInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClaimAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxClaim",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDecreaseStep",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBaseInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIncrementInterval",
          "type": "uint256"
        }
      ],
      "name": "BeneficiaryParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiaryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiaryUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCommunityAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCommunityAdmin",
          "type": "address"
        }
      ],
      "name": "CommunityAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CommunityLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinTranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinTranche",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTranche",
          "type": "uint256"
        }
      ],
      "name": "CommunityParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CommunityUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Donate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "FundsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldMaxBeneficiaries",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newMaxBeneficiaries",
          "type": "uint256"
        }
      ],
      "name": "MaxBeneficiariesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPreviousCommunity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPreviousCommunity",
          "type": "address"
        }
      ],
      "name": "PreviousCommunityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferERC20",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_firstBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_beneficiaryAddresses",
          "type": "address[]"
        }
      ],
      "name": "addBeneficiaries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addTreasuryFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beneficiaries",
      "outputs": [
        {
          "internalType": "enum ICommunity.BeneficiaryState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "claims",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaim",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiaryAddress",
          "type": "address"
        }
      ],
      "name": "beneficiaryJoinFromMigrated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "name": "beneficiaryListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiaryListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cUSD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiaryAddress",
          "type": "address"
        }
      ],
      "name": "claimCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityAdmin",
      "outputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialMaxClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "impactMarketAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_managers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decreaseStep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_incrementInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBeneficiaries",
          "type": "uint256"
        },
        {
          "internalType": "contract ICommunity",
          "name": "_previousCommunity",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFundRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiaryAddress",
          "type": "address"
        }
      ],
      "name": "lastInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiaryAddress",
          "type": "address"
        }
      ],
      "name": "lockBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBeneficiaries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTranche",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTranche",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousCommunity",
      "outputs": [
        {
          "internalType": "contract ICommunity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiaryAddress",
          "type": "address"
        }
      ],
      "name": "removeBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiaryAddress",
          "type": "address"
        }
      ],
      "name": "unlockBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decreaseStep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_incrementInterval",
          "type": "uint256"
        }
      ],
      "name": "updateBeneficiaryParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunityAdmin",
          "name": "_newCommunityAdmin",
          "type": "address"
        }
      ],
      "name": "updateCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minTranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTranche",
          "type": "uint256"
        }
      ],
      "name": "updateCommunityParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxBeneficiaries",
          "type": "uint256"
        }
      ],
      "name": "updateMaxBeneficiaries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICommunity",
          "name": "_newPreviousCommunity",
          "type": "address"
        }
      ],
      "name": "updatePreviousCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_newToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_exchangePath",
          "type": "address[]"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validBeneficiaryCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2587036db760af96849c619ac8545f70a44d35f5c988244dea9643c3bcde8119",
  "receipt": {
    "to": null,
    "from": "0xa34737409091eBD0726A3Ab5863Fc7Ee9243Edab",
    "contractAddress": "0x3AD01e831E56EDB5fe2Ed5Ed9b70c7917c71E1BF",
    "transactionIndex": 0,
    "gasUsed": "3662539",
    "logsBloom": "0x
    "blockHash": "0xae9630140b8744f368954f8ee5d13109e7314f3d383f202b5e29b3c6d560529d",
    "transactionHash": "0x2587036db760af96849c619ac8545f70a44d35f5c988244dea9643c3bcde8119",
    "logs": [],
    "blockNumber": 13669418,
    "cumulativeGasUsed": "3662539",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9f7bffa15693d61510860eff6ced8ff8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldClaimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDecreaseStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBaseInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIncrementInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClaimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDecreaseStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIncrementInterval\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCommunityAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCommunityAdmin\",\"type\":\"address\"}],\"name\":\"CommunityAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CommunityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinTranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinTranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTranche\",\"type\":\"uint256\"}],\"name\":\"CommunityParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CommunityUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"FundsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMaxBeneficiaries\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMaxBeneficiaries\",\"type\":\"uint256\"}],\"name\":\"MaxBeneficiariesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPreviousCommunity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPreviousCommunity\",\"type\":\"address\"}],\"name\":\"PreviousCommunityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_firstBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaryAddresses\",\"type\":\"address[]\"}],\"name\":\"addBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTreasuryFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"enum ICommunity.BeneficiaryState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"beneficiaryJoinFromMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"beneficiaryListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiaryListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"claimCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAdmin\",\"outputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialMaxClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impactMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incrementInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBeneficiaries\",\"type\":\"uint256\"},{\"internalType\":\"contract ICommunity\",\"name\":\"_previousCommunity\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFundRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"lastInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"lockBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBeneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousCommunity\",\"outputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"removeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"unlockBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incrementInterval\",\"type\":\"uint256\"}],\"name\":\"updateBeneficiaryParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunityAdmin\",\"name\":\"_newCommunityAdmin\",\"type\":\"address\"}],\"name\":\"updateCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTranche\",\"type\":\"uint256\"}],\"name\":\"updateCommunityParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxBeneficiaries\",\"type\":\"uint256\"}],\"name\":\"updateMaxBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICommunity\",\"name\":\"_newPreviousCommunity\",\"type\":\"address\"}],\"name\":\"updatePreviousCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_newToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_exchangePath\",\"type\":\"address[]\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validBeneficiaryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BeneficiaryAdded(address,address)\":{\"params\":{\"beneficiary\":\"Address of the beneficiary that has been added\",\"manager\":\"Address of the manager that triggered the event\"}},\"BeneficiaryClaim(address,uint256)\":{\"params\":{\"amount\":\"Amount of the claim\",\"beneficiary\":\"Address of the beneficiary that has claimed\"}},\"BeneficiaryJoined(address)\":{\"params\":{\"beneficiary\":\"Address of the beneficiary\"}},\"BeneficiaryLocked(address,address)\":{\"params\":{\"beneficiary\":\"Address of the beneficiary that has been locked\",\"manager\":\"Address of the manager that triggered the event\"}},\"BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"newBaseInterval\":\"New baseInterval value\",\"newClaimAmount\":\"New claimAmount value\",\"newDecreaseStep\":\"New decreaseStep value\",\"newIncrementInterval\":\"New incrementInterval value For further information regarding each parameter, see *Community* smart contract initialize method.\",\"newMaxClaim\":\"New maxClaim value\",\"oldBaseInterval\":\"Old baseInterval value\",\"oldClaimAmount\":\"Old claimAmount value\",\"oldDecreaseStep\":\"Old decreaseStep value\",\"oldIncrementInterval\":\"Old incrementInterval value\",\"oldMaxClaim\":\"Old maxClaim value\"}},\"BeneficiaryRemoved(address,address)\":{\"params\":{\"beneficiary\":\"Address of the beneficiary that has been removed\",\"manager\":\"Address of the manager that triggered the event\"}},\"BeneficiaryUnlocked(address,address)\":{\"params\":{\"beneficiary\":\"Address of the beneficiary that has been unlocked\",\"manager\":\"Address of the manager that triggered the event\"}},\"CommunityAdminUpdated(address,address)\":{\"params\":{\"newCommunityAdmin\":\"New communityAdmin address\",\"oldCommunityAdmin\":\"Old communityAdmin address\"}},\"CommunityLocked(address)\":{\"params\":{\"manager\":\"Address of the manager that triggered the event\"}},\"CommunityParamsUpdated(uint256,uint256,uint256,uint256)\":{\"params\":{\"newMaxTranche\":\"New maxTranche value For further information regarding each parameter, see *Community* smart contract initialize method.\",\"newMinTranche\":\"New minTranche value\",\"oldMaxTranche\":\"Old maxTranche value\",\"oldMinTranche\":\"Old minTranche value\"}},\"CommunityUnlocked(address)\":{\"params\":{\"manager\":\"Address of the manager that triggered the event\"}},\"Donate(address,uint256)\":{\"params\":{\"amount\":\"Amount of the donation\",\"donor\":\"Address of the donor\"}},\"FundsRequested(address)\":{\"params\":{\"manager\":\"Address of the manager that triggered the event\"}},\"ManagerAdded(address,address)\":{\"params\":{\"account\":\"Address of the manager that has been added\",\"manager\":\"Address of the manager that triggered the event                          or address of the CommunityAdmin if it's first manager\"}},\"ManagerRemoved(address,address)\":{\"params\":{\"account\":\"Address of the manager that has been removed\",\"manager\":\"Address of the manager that triggered the event\"}},\"MaxBeneficiariesUpdated(uint256,uint256)\":{\"params\":{\"newMaxBeneficiaries\":\"New maxBeneficiaries value\",\"oldMaxBeneficiaries\":\"Old maxBeneficiaries value\"}},\"PreviousCommunityUpdated(address,address)\":{\"params\":{\"newPreviousCommunity\":\"New previousCommunity address\",\"oldPreviousCommunity\":\"Old previousCommunity address\"}},\"TokenUpdated(address,address)\":{\"params\":{\"newTokenAddress\":\"New token address\",\"oldTokenAddress\":\"Old token address\"}},\"TransferERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the transaction\",\"to\":\"Address of the receiver\",\"token\":\"ERC20 token address\"}}},\"kind\":\"dev\",\"methods\":{\"addBeneficiaries(address[])\":{\"params\":{\"_beneficiaryAddresses\":\"addresses of the beneficiaries to be added\"}},\"addManager(address)\":{\"params\":{\"_account\":\"address of the manager to be added\"}},\"addTreasuryFunds(uint256)\":{\"params\":{\"_amount\":\"amount to be added to treasuryFunds\"}},\"beneficiaryListAt(uint256)\":{\"params\":{\"index_\":\"index value\"},\"returns\":{\"_0\":\"address of the beneficiary\"}},\"claim()\":{\"details\":\"Transfers tokens to a valid beneficiary\"},\"claimCooldown(address)\":{\"params\":{\"_beneficiaryAddress\":\"address of the beneficiary\"},\"returns\":{\"_0\":\"uint256 number of block when the beneficiary can claim\"}},\"donate(address,uint256)\":{\"params\":{\"_amount\":\"amount to be donated\",\"_sender\":\"address of the sender\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_baseInterval\":\"Base interval to start claiming\",\"_claimAmount\":\"Base amount to be claim by the beneficiary\",\"_decreaseStep\":\"Value decreased from maxClaim each time a beneficiary is added\",\"_incrementInterval\":\"Increment interval used in each claim\",\"_managers\":\"Community's initial managers.                             Will be able to add others\",\"_maxBeneficiaries\":\"Maximum valid beneficiaries number\",\"_maxClaim\":\"Limit that a beneficiary can claim in total\",\"_maxTranche\":\"Maximum amount that the community will receive when requesting funds\",\"_minTranche\":\"Minimum amount that the community will receive when requesting funds\",\"_previousCommunity\":\"Previous smart contract address of community\"}},\"lastInterval(address)\":{\"params\":{\"_beneficiaryAddress\":\"address of the beneficiary\"},\"returns\":{\"_0\":\"uint256 number of blocks for the lastInterval\"}},\"lockBeneficiary(address)\":{\"params\":{\"_beneficiaryAddress\":\"address of the beneficiary to be locked\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeBeneficiary(address)\":{\"params\":{\"_beneficiaryAddress\":\"address of the beneficiary to be removed\"}},\"removeManager(address)\":{\"params\":{\"_account\":\"address of the manager to be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transfer(address,address,uint256)\":{\"params\":{\"_amount\":\"amount of the transaction\",\"_to\":\"address of the receiver\",\"_token\":\"address of the ERC20 token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockBeneficiary(address)\":{\"params\":{\"_beneficiaryAddress\":\"address of the beneficiary to be unlocked\"}},\"updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_baseInterval\":\"base interval to start claiming\",\"_claimAmount\":\"base amount to be claim by the beneficiary\",\"_decreaseStep\":\"value decreased from maxClaim each time a is beneficiary added\",\"_incrementInterval\":\"increment interval used in each claim\",\"_maxClaim\":\"limit that a beneficiary can claim  in total\"}},\"updateCommunityAdmin(address)\":{\"params\":{\"_newCommunityAdmin\":\"address of the new communityAdmin\"}},\"updateCommunityParams(uint256,uint256)\":{\"params\":{\"_maxTranche\":\"maximum amount that the community will receive when requesting funds\",\"_minTranche\":\"minimum amount that the community will receive when requesting funds\"}},\"updateMaxBeneficiaries(uint256)\":{\"params\":{\"_newMaxBeneficiaries\":\"new _maxBeneficiaries value\"}},\"updatePreviousCommunity(address)\":{\"params\":{\"_newPreviousCommunity\":\"address of the new previousCommunity\"}},\"updateToken(address,address[])\":{\"params\":{\"_exchangePath\":\"path used by uniswap to exchange the current tokens to the new tokens\",\"_newToken\":\"new token address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BeneficiaryAdded(address,address)\":{\"notice\":\"Triggered when a beneficiary has been added\"},\"BeneficiaryClaim(address,uint256)\":{\"notice\":\"Triggered when a beneficiary has claimed\"},\"BeneficiaryJoined(address)\":{\"notice\":\"Triggered when a beneficiary from previous community has joined in the current community\"},\"BeneficiaryLocked(address,address)\":{\"notice\":\"Triggered when a beneficiary has been locked\"},\"BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggered when beneficiary params has been updated\"},\"BeneficiaryRemoved(address,address)\":{\"notice\":\"Triggered when a beneficiary has been removed\"},\"BeneficiaryUnlocked(address,address)\":{\"notice\":\"Triggered when a beneficiary has been unlocked\"},\"CommunityAdminUpdated(address,address)\":{\"notice\":\"Triggered when communityAdmin has been updated\"},\"CommunityLocked(address)\":{\"notice\":\"Triggered when a community has been locked\"},\"CommunityParamsUpdated(uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggered when community params has been updated\"},\"CommunityUnlocked(address)\":{\"notice\":\"Triggered when a community has been unlocked\"},\"Donate(address,uint256)\":{\"notice\":\"Triggered when someone has donated token\"},\"FundsRequested(address)\":{\"notice\":\"Triggered when a manager has requested funds for community\"},\"ManagerAdded(address,address)\":{\"notice\":\"Triggered when a manager has been added\"},\"ManagerRemoved(address,address)\":{\"notice\":\"Triggered when a manager has been removed\"},\"MaxBeneficiariesUpdated(uint256,uint256)\":{\"notice\":\"Triggered when maxBeneficiaries has been updated\"},\"PreviousCommunityUpdated(address,address)\":{\"notice\":\"Triggered when previousCommunity has been updated\"},\"TokenUpdated(address,address)\":{\"notice\":\"Triggered when token address has been updated\"},\"TransferERC20(address,address,uint256)\":{\"notice\":\"Triggered when an amount of an ERC20 has been transferred from this contract to an address\"}},\"kind\":\"user\",\"methods\":{\"addBeneficiaries(address[])\":{\"notice\":\"Adds new beneficiaries\"},\"addManager(address)\":{\"notice\":\"Adds a new manager\"},\"addTreasuryFunds(uint256)\":{\"notice\":\"Increases the treasuryFunds value Used by communityAdmin after an amount of tokens are sent from the treasury\"},\"beneficiaryJoinFromMigrated(address)\":{\"notice\":\"Allows a beneficiary from the previousCommunity to join in this community\"},\"beneficiaryListAt(uint256)\":{\"notice\":\"Returns an address from the beneficiaryList\"},\"beneficiaryListLength()\":{\"notice\":\"Returns the length of the beneficiaryList\"},\"cUSD()\":{\"notice\":\"Returns the cUSD contract address todo: to be removed, use token() instead\"},\"claimCooldown(address)\":{\"notice\":\"Returns the block number when a beneficiary can claim again\"},\"donate(address,uint256)\":{\"notice\":\"Transfers tokens from donor to this community Used by donationToCommunity method from DonationMiner contract\"},\"getInitialMaxClaim()\":{\"notice\":\"Returns the initial maxClaim\"},\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"grantRole(bytes32,address)\":{\"notice\":\"Enforces managers to use addManager method\"},\"impactMarketAddress()\":{\"notice\":\"Returns the 0 address only used for backwards compatibility\"},\"initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Used to initialize a new Community contract\"},\"lastInterval(address)\":{\"notice\":\"Returns the number of blocks that a beneficiary have to wait between claims\"},\"lock()\":{\"notice\":\"Locks the community\"},\"lockBeneficiary(address)\":{\"notice\":\"Locks a valid beneficiary\"},\"removeBeneficiary(address)\":{\"notice\":\"Remove an existing beneficiary\"},\"removeManager(address)\":{\"notice\":\"Remove an existing manager\"},\"requestFunds()\":{\"notice\":\"Requests treasury funds from the communityAdmin\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Enforces managers to use removeManager method\"},\"token()\":{\"notice\":\"Returns the address of the token used by this community\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers an amount of an ERC20 from this contract to an address\"},\"unlock()\":{\"notice\":\"Unlocks the community\"},\"unlockBeneficiary(address)\":{\"notice\":\"Unlocks a locked beneficiary\"},\"updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Updates beneficiary params\"},\"updateCommunityAdmin(address)\":{\"notice\":\"Updates the address of the communityAdmin\"},\"updateCommunityParams(uint256,uint256)\":{\"notice\":\"Updates params of a community\"},\"updateMaxBeneficiaries(uint256)\":{\"notice\":\"Updates maxBeneficiaries\"},\"updatePreviousCommunity(address)\":{\"notice\":\"Updates the address of the previousCommunity\"},\"updateToken(address,address[])\":{\"notice\":\"Updates token address\"}},\"notice\":\"Welcome to the Community contract. For each community there will be one proxy contract deployed by CommunityAdmin. The implementation of the proxy is this contract. This enable us to save tokens on the contract itself, and avoid the problems of having everything in one single contract. Each community has it's own members and and managers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/community/CommunityImplementation.sol\":\"CommunityImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x33b8603bfbef7f33d9308b79c79aa3db7eb19525fd1addd764285e834ca275d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ambassadors/interfaces/IAmbassadors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAmbassadors {\\n    function getVersion() external returns(uint256);\\n    function isAmbassador(address _ambassador) external view returns (bool);\\n    function isAmbassadorOf(address _ambassador, address _community) external view returns (bool);\\n    function isEntityOf(address _ambassador, address _entityAddress) external view returns (bool);\\n    function isAmbassadorAt(address _ambassador, address _entityAddress) external view returns (bool);\\n\\n    function addEntity(address _entity) external;\\n    function removeEntity(address _entity) external;\\n    function replaceEntityAccount(address _entity, address _newEntity) external;\\n    function addAmbassador(address _ambassador) external;\\n    function removeAmbassador(address _ambassador) external;\\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador) external;\\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external;\\n    function transferAmbassador(address _ambassador, address _toEntity, bool _keepCommunities) external;\\n    function transferCommunityToAmbassador(address _to, address _community) external;\\n    function setCommunityToAmbassador(address _ambassador, address _community) external;\\n    function removeCommunity(address _community) external;\\n}\\n\",\"keccak256\":\"0xc65f840a3ae4f30e3a579e6113080334b31300c40b56596aeb77eaed67702133\",\"license\":\"Apache-2.0\"},\"contracts/community/CommunityImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/ICommunityLegacy.sol\\\";\\nimport \\\"./interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./interfaces/CommunityStorageV2.sol\\\";\\n\\n/**\\n * @notice Welcome to the Community contract. For each community\\n * there will be one proxy contract deployed by CommunityAdmin.\\n * The implementation of the proxy is this contract. This enable\\n * us to save tokens on the contract itself, and avoid the problems\\n * of having everything in one single contract.\\n *Each community has it's own members and and managers.\\n */\\ncontract CommunityImplementation is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    CommunityStorageV2\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 private constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    uint256 private constant DEFAULT_AMOUNT = 5e16;\\n\\n    /**\\n     * @notice Triggered when a manager has been added\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     *                          or address of the CommunityAdmin if it's first manager\\n     * @param account           Address of the manager that has been added\\n     */\\n    event ManagerAdded(address indexed manager, address indexed account);\\n\\n    /**\\n     * @notice Triggered when a manager has been removed\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param account           Address of the manager that has been removed\\n     */\\n    event ManagerRemoved(address indexed manager, address indexed account);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been added\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been added\\n     */\\n    event BeneficiaryAdded(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been locked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been locked\\n     */\\n    event BeneficiaryLocked(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been unlocked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been unlocked\\n     */\\n    event BeneficiaryUnlocked(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has been removed\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     * @param beneficiary       Address of the beneficiary that has been removed\\n     */\\n    event BeneficiaryRemoved(address indexed manager, address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when a beneficiary has claimed\\n     *\\n     * @param beneficiary       Address of the beneficiary that has claimed\\n     * @param amount            Amount of the claim\\n     */\\n    event BeneficiaryClaim(address indexed beneficiary, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a community has been locked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     */\\n    event CommunityLocked(address indexed manager);\\n\\n    /**\\n     * @notice Triggered when a community has been unlocked\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     */\\n    event CommunityUnlocked(address indexed manager);\\n\\n    /**\\n     * @notice Triggered when a manager has requested funds for community\\n     *\\n     * @param manager           Address of the manager that triggered the event\\n     */\\n    event FundsRequested(address indexed manager);\\n\\n    /**\\n     * @notice Triggered when someone has donated token\\n     *\\n     * @param donor             Address of the donor\\n     * @param amount            Amount of the donation\\n     */\\n    event Donate(address indexed donor, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when a beneficiary from previous community has joined in the current community\\n     *\\n     * @param beneficiary       Address of the beneficiary\\n     */\\n    event BeneficiaryJoined(address indexed beneficiary);\\n\\n    /**\\n     * @notice Triggered when beneficiary params has been updated\\n     *\\n     * @param oldClaimAmount       Old claimAmount value\\n     * @param oldMaxClaim          Old maxClaim value\\n     * @param oldDecreaseStep      Old decreaseStep value\\n     * @param oldBaseInterval      Old baseInterval value\\n     * @param oldIncrementInterval Old incrementInterval value\\n     * @param newClaimAmount       New claimAmount value\\n     * @param newMaxClaim          New maxClaim value\\n     * @param newDecreaseStep      New decreaseStep value\\n     * @param newBaseInterval      New baseInterval value\\n     * @param newIncrementInterval New incrementInterval value\\n     *\\n     * For further information regarding each parameter, see\\n     * *Community* smart contract initialize method.\\n     */\\n    event BeneficiaryParamsUpdated(\\n        uint256 oldClaimAmount,\\n        uint256 oldMaxClaim,\\n        uint256 oldDecreaseStep,\\n        uint256 oldBaseInterval,\\n        uint256 oldIncrementInterval,\\n        uint256 newClaimAmount,\\n        uint256 newMaxClaim,\\n        uint256 newDecreaseStep,\\n        uint256 newBaseInterval,\\n        uint256 newIncrementInterval\\n    );\\n\\n    /**\\n     * @notice Triggered when community params has been updated\\n     *\\n     * @param oldMinTranche        Old minTranche value\\n     * @param oldMaxTranche        Old maxTranche value\\n     * @param newMinTranche        New minTranche value\\n     * @param newMaxTranche        New maxTranche value\\n     *\\n     * For further information regarding each parameter, see\\n     * *Community* smart contract initialize method.\\n     */\\n    event CommunityParamsUpdated(\\n        uint256 oldMinTranche,\\n        uint256 oldMaxTranche,\\n        uint256 newMinTranche,\\n        uint256 newMaxTranche\\n    );\\n\\n    /**\\n     * @notice Triggered when communityAdmin has been updated\\n     *\\n     * @param oldCommunityAdmin   Old communityAdmin address\\n     * @param newCommunityAdmin   New communityAdmin address\\n     */\\n    event CommunityAdminUpdated(\\n        address indexed oldCommunityAdmin,\\n        address indexed newCommunityAdmin\\n    );\\n\\n    /**\\n     * @notice Triggered when previousCommunity has been updated\\n     *\\n     * @param oldPreviousCommunity   Old previousCommunity address\\n     * @param newPreviousCommunity   New previousCommunity address\\n     */\\n    event PreviousCommunityUpdated(\\n        address indexed oldPreviousCommunity,\\n        address indexed newPreviousCommunity\\n    );\\n\\n    /**\\n     * @notice Triggered when maxBeneficiaries has been updated\\n     *\\n     * @param oldMaxBeneficiaries   Old maxBeneficiaries value\\n     * @param newMaxBeneficiaries   New maxBeneficiaries value\\n     */\\n    event MaxBeneficiariesUpdated(\\n        uint256 indexed oldMaxBeneficiaries,\\n        uint256 indexed newMaxBeneficiaries\\n    );\\n\\n    /**\\n     * @notice Triggered when token address has been updated\\n     *\\n     * @param oldTokenAddress   Old token address\\n     * @param newTokenAddress   New token address\\n     */\\n    event TokenUpdated(address indexed oldTokenAddress, address indexed newTokenAddress);\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been transferred from this contract to an address\\n     *\\n     * @param token               ERC20 token address\\n     * @param to                  Address of the receiver\\n     * @param amount              Amount of the transaction\\n     */\\n    event TransferERC20(address indexed token, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Enforces sender to be a valid beneficiary\\n     */\\n    modifier onlyValidBeneficiary() {\\n        require(\\n            beneficiaries[msg.sender].state == BeneficiaryState.Valid,\\n            \\\"Community: NOT_VALID_BENEFICIARY\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to have manager role\\n     */\\n    modifier onlyManagers() {\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"Community: NOT_MANAGER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be the community ambassador or entity ambassador responsible\\n     */\\n    modifier onlyAmbassadorOrEntity() {\\n        require(\\n            communityAdmin.isAmbassadorOrEntityOfCommunity(address(this), msg.sender),\\n            \\\"Community: NOT_AMBASSADOR_OR_ENTITY\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces sender to be the owner or community ambassador or entity ambassador responsible\\n     */\\n    modifier onlyOwnerOrAmbassadorOrEntity() {\\n        require(\\n            msg.sender == owner() ||\\n                communityAdmin.isAmbassadorOrEntityOfCommunity(address(this), msg.sender),\\n            \\\"Community: NOT_OWNER_OR_AMBASSADOR_OR_ENTITY\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to initialize a new Community contract\\n     *\\n     * @param _managers            Community's initial managers.\\n     *                             Will be able to add others\\n     * @param _claimAmount         Base amount to be claim by the beneficiary\\n     * @param _maxClaim            Limit that a beneficiary can claim in total\\n     * @param _decreaseStep        Value decreased from maxClaim each time a beneficiary is added\\n     * @param _baseInterval        Base interval to start claiming\\n     * @param _incrementInterval   Increment interval used in each claim\\n     * @param _minTranche          Minimum amount that the community will receive when requesting funds\\n     * @param _maxTranche          Maximum amount that the community will receive when requesting funds\\n     * @param _maxBeneficiaries    Maximum valid beneficiaries number\\n     * @param _previousCommunity   Previous smart contract address of community\\n     */\\n    function initialize(\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries,\\n        ICommunity _previousCommunity\\n    ) external override initializer {\\n        require(\\n            _baseInterval > _incrementInterval,\\n            \\\"Community::initialize: baseInterval must be greater than incrementInterval\\\"\\n        );\\n        require(\\n            _maxClaim > _claimAmount,\\n            \\\"Community::initialize: maxClaim must be greater than claimAmount\\\"\\n        );\\n\\n        require(\\n            _minTranche <= _maxTranche,\\n            \\\"Community::initialize: minTranche should not be greater than maxTranche\\\"\\n        );\\n\\n        __AccessControl_init();\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        claimAmount = _claimAmount;\\n        baseInterval = _baseInterval;\\n        incrementInterval = _incrementInterval;\\n        maxClaim = _maxClaim;\\n        minTranche = _minTranche;\\n        maxTranche = _maxTranche;\\n        previousCommunity = _previousCommunity;\\n        communityAdmin = ICommunityAdmin(msg.sender);\\n        decreaseStep = _decreaseStep;\\n        maxBeneficiaries = _maxBeneficiaries;\\n        locked = false;\\n\\n        transferOwnership(msg.sender);\\n\\n        // MANAGER_ROLE is the admin for the MANAGER_ROLE\\n        // so every manager is able to add or remove other managers\\n        _setRoleAdmin(MANAGER_ROLE, MANAGER_ROLE);\\n\\n        _setupRole(MANAGER_ROLE, msg.sender);\\n        emit ManagerAdded(msg.sender, msg.sender);\\n\\n        uint256 _i;\\n        uint256 _numberOfManagers = _managers.length;\\n        for (; _i < _numberOfManagers; _i++) {\\n            addManager(_managers[_i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 2;\\n    }\\n\\n    /**\\n     * @notice Returns the cUSD contract address\\n     * todo: to be removed, use token() instead\\n     */\\n    function cUSD() public view override returns (IERC20) {\\n        return address(_token) != address(0) ? _token : communityAdmin.cUSD();\\n    }\\n\\n    /**\\n     * @notice Returns the address of the token used by this community\\n     */\\n    function token() public view override returns (IERC20) {\\n        return address(_token) != address(0) ? _token : communityAdmin.cUSD();\\n    }\\n\\n    /**\\n     * @notice Returns the length of the beneficiaryList\\n     */\\n    function beneficiaryListLength() external view override returns (uint256) {\\n        return beneficiaryList.length();\\n    }\\n\\n    /**\\n     * @notice Returns an address from the beneficiaryList\\n     *\\n     * @param index_ index value\\n     * @return address of the beneficiary\\n     */\\n    function beneficiaryListAt(uint256 index_) external view override returns (address) {\\n        return beneficiaryList.at(index_);\\n    }\\n\\n    /**\\n     * @notice Returns the 0 address\\n     * only used for backwards compatibility\\n     */\\n    function impactMarketAddress() public pure override returns (address) {\\n        return address(0);\\n    }\\n\\n    /** Updates the address of the communityAdmin\\n     *\\n     * @param _newCommunityAdmin address of the new communityAdmin\\n     */\\n    function updateCommunityAdmin(ICommunityAdmin _newCommunityAdmin) external override onlyOwner {\\n        emit CommunityAdminUpdated(address(communityAdmin), address(_newCommunityAdmin));\\n        communityAdmin = _newCommunityAdmin;\\n\\n        addManager(address(communityAdmin));\\n    }\\n\\n    /** Updates the address of the previousCommunity\\n     *\\n     * @param _newPreviousCommunity address of the new previousCommunity\\n     */\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external override onlyOwner {\\n        emit PreviousCommunityUpdated(address(previousCommunity), address(_newPreviousCommunity));\\n        previousCommunity = _newPreviousCommunity;\\n    }\\n\\n    /** Updates beneficiary params\\n     *\\n     * @param _claimAmount  base amount to be claim by the beneficiary\\n     * @param _maxClaim limit that a beneficiary can claim  in total\\n     * @param _decreaseStep value decreased from maxClaim each time a is beneficiary added\\n     * @param _baseInterval base interval to start claiming\\n     * @param _incrementInterval increment interval used in each claim\\n     */\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external override onlyOwner {\\n        require(\\n            _baseInterval > _incrementInterval,\\n            \\\"Community::constructor: baseInterval must be greater than incrementInterval\\\"\\n        );\\n        require(\\n            _maxClaim > _claimAmount + validBeneficiaryCount * _decreaseStep,\\n            \\\"Community::constructor: maxClaim must be greater than claimAmount\\\"\\n        );\\n\\n        emit BeneficiaryParamsUpdated(\\n            claimAmount,\\n            maxClaim,\\n            decreaseStep,\\n            baseInterval,\\n            incrementInterval,\\n            _claimAmount,\\n            _maxClaim,\\n            _decreaseStep,\\n            _baseInterval,\\n            _incrementInterval\\n        );\\n\\n        claimAmount = _claimAmount;\\n        maxClaim = _maxClaim - validBeneficiaryCount * _decreaseStep;\\n        decreaseStep = _decreaseStep;\\n        baseInterval = _baseInterval;\\n        incrementInterval = _incrementInterval;\\n    }\\n\\n    /** @notice Updates params of a community\\n     *\\n     * @param _minTranche minimum amount that the community will receive when requesting funds\\n     * @param _maxTranche maximum amount that the community will receive when requesting funds\\n     */\\n    function updateCommunityParams(uint256 _minTranche, uint256 _maxTranche)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _minTranche <= _maxTranche,\\n            \\\"Community::updateCommunityParams: minTranche should not be greater than maxTranche\\\"\\n        );\\n\\n        emit CommunityParamsUpdated(minTranche, maxTranche, _minTranche, _maxTranche);\\n\\n        minTranche = _minTranche;\\n        maxTranche = _maxTranche;\\n    }\\n\\n    /** @notice Updates maxBeneficiaries\\n     *\\n     * @param _newMaxBeneficiaries new _maxBeneficiaries value\\n     */\\n    function updateMaxBeneficiaries(uint256 _newMaxBeneficiaries)\\n        external\\n        override\\n        onlyOwnerOrAmbassadorOrEntity\\n    {\\n        emit MaxBeneficiariesUpdated(maxBeneficiaries, _newMaxBeneficiaries);\\n        maxBeneficiaries = _newMaxBeneficiaries;\\n    }\\n\\n    /** @notice Updates token address\\n     *\\n     * @param _newToken       new token address\\n     * @param _exchangePath   path used by uniswap to exchange the current tokens to the new tokens\\n     */\\n    function updateToken(IERC20 _newToken, address[] memory _exchangePath)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _newToken == communityAdmin.cUSD() ||\\n                communityAdmin.treasury().isToken(address(_newToken)),\\n            \\\"Community::updateToken: Invalid token\\\"\\n        );\\n\\n        require(\\n            _exchangePath.length > 1 &&\\n                _exchangePath[0] == address(token()) &&\\n                _exchangePath[_exchangePath.length - 1] == address(_newToken),\\n            \\\"Community::updateToken: invalid exchangePath\\\"\\n        );\\n\\n        uint256 _balance = token().balanceOf(address(this));\\n        token().approve(address(communityAdmin.treasury().uniswapRouter()), _balance);\\n        communityAdmin\\n            .treasury()\\n            .uniswapRouter()\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                _balance,\\n                0,\\n                _exchangePath,\\n                address(this),\\n                block.timestamp + 3600\\n            );\\n\\n        emit TokenUpdated(address(_token), address(_newToken));\\n        _token = _newToken;\\n    }\\n\\n    /**\\n     * @notice Adds a new manager\\n     *\\n     * @param _account address of the manager to be added\\n     */\\n    function addManager(address _account) public override onlyAmbassadorOrEntity {\\n        if (!hasRole(MANAGER_ROLE, _account)) {\\n            super._grantRole(MANAGER_ROLE, _account);\\n            emit ManagerAdded(msg.sender, _account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove an existing manager\\n     *\\n     * @param _account address of the manager to be removed\\n     */\\n    function removeManager(address _account) external override onlyAmbassadorOrEntity {\\n        require(\\n            hasRole(MANAGER_ROLE, _account),\\n            \\\"Community::removeManager: This account doesn't have manager role\\\"\\n        );\\n        require(\\n            _account != address(communityAdmin),\\n            \\\"Community::removeManager: You are not allow to remove communityAdmin\\\"\\n        );\\n        super._revokeRole(MANAGER_ROLE, _account);\\n        emit ManagerRemoved(msg.sender, _account);\\n    }\\n\\n    /**\\n     * @notice Enforces managers to use addManager method\\n     */\\n    function grantRole(bytes32, address) public pure override {\\n        require(false, \\\"Community::grantRole: You are not allow to use this method\\\");\\n    }\\n\\n    /**\\n     * @notice Enforces managers to use removeManager method\\n     */\\n    function revokeRole(bytes32, address) public pure override {\\n        require(false, \\\"Community::revokeRole: You are not allow to use this method\\\");\\n    }\\n\\n    /**\\n     * @notice Adds new beneficiaries\\n     *\\n     * @param _beneficiaryAddresses addresses of the beneficiaries to be added\\n     */\\n    function addBeneficiaries(address[] memory _beneficiaryAddresses)\\n        external\\n        override\\n        onlyManagers\\n        nonReentrant\\n    {\\n        require(!locked, \\\"LOCKED\\\");\\n\\n        uint256 _index;\\n        uint256 _numberOfBeneficiaries = _beneficiaryAddresses.length;\\n        for (; _index < _numberOfBeneficiaries; _index++) {\\n            Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddresses[_index]];\\n\\n            if (_beneficiary.state != BeneficiaryState.NONE) {\\n                continue;\\n            }\\n\\n            _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\\n            // solhint-disable-next-line not-rely-on-time\\n            _beneficiary.lastClaim = block.number;\\n\\n            beneficiaryList.add(_beneficiaryAddresses[_index]);\\n\\n            // send default amount when adding a new beneficiary\\n            token().safeTransfer(_beneficiaryAddresses[_index], DEFAULT_AMOUNT);\\n\\n            emit BeneficiaryAdded(msg.sender, _beneficiaryAddresses[_index]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Locks a valid beneficiary\\n     *\\n     * @param _beneficiaryAddress address of the beneficiary to be locked\\n     */\\n    function lockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\\n        require(!locked, \\\"LOCKED\\\");\\n\\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\\n\\n        require(\\n            _beneficiary.state == BeneficiaryState.Valid,\\n            \\\"Community::lockBeneficiary: NOT_YET\\\"\\n        );\\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Locked);\\n        emit BeneficiaryLocked(msg.sender, _beneficiaryAddress);\\n    }\\n\\n    /**\\n     * @notice  Unlocks a locked beneficiary\\n     *\\n     * @param _beneficiaryAddress address of the beneficiary to be unlocked\\n     */\\n    function unlockBeneficiary(address _beneficiaryAddress) external override onlyManagers {\\n        require(!locked, \\\"LOCKED\\\");\\n\\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\\n\\n        require(\\n            _beneficiary.state == BeneficiaryState.Locked,\\n            \\\"Community::unlockBeneficiary: NOT_YET\\\"\\n        );\\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Valid);\\n        emit BeneficiaryUnlocked(msg.sender, _beneficiaryAddress);\\n    }\\n\\n    /**\\n     * @notice Remove an existing beneficiary\\n     *\\n     * @param _beneficiaryAddress address of the beneficiary to be removed\\n     */\\n    function removeBeneficiary(address _beneficiaryAddress) external override onlyManagers {\\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\\n\\n        require(\\n            _beneficiary.state == BeneficiaryState.Valid ||\\n                _beneficiary.state == BeneficiaryState.Locked,\\n            \\\"Community::removeBeneficiary: NOT_YET\\\"\\n        );\\n        _changeBeneficiaryState(_beneficiary, BeneficiaryState.Removed);\\n        emit BeneficiaryRemoved(msg.sender, _beneficiaryAddress);\\n    }\\n\\n    /**\\n     * @dev Transfers tokens to a valid beneficiary\\n     */\\n    function claim() external override onlyValidBeneficiary nonReentrant {\\n        Beneficiary storage _beneficiary = beneficiaries[msg.sender];\\n\\n        require(!locked, \\\"LOCKED\\\");\\n        require(claimCooldown(msg.sender) <= block.number, \\\"Community::claim: NOT_YET\\\");\\n        require(\\n            _beneficiary.claimedAmount < maxClaim,\\n            \\\"Community::claim: Already claimed everything\\\"\\n        );\\n\\n        uint256 _toClaim = claimAmount <= maxClaim - _beneficiary.claimedAmount\\n            ? claimAmount\\n            : maxClaim - _beneficiary.claimedAmount;\\n\\n        _beneficiary.claimedAmount += _toClaim;\\n        _beneficiary.claims++;\\n        _beneficiary.lastClaim = block.number;\\n\\n        token().safeTransfer(msg.sender, _toClaim);\\n        emit BeneficiaryClaim(msg.sender, _toClaim);\\n    }\\n\\n    /**\\n     * @notice Returns the number of blocks that a beneficiary have to wait between claims\\n     *\\n     * @param _beneficiaryAddress address of the beneficiary\\n     * @return uint256 number of blocks for the lastInterval\\n     */\\n    function lastInterval(address _beneficiaryAddress) public view override returns (uint256) {\\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\\n        if (_beneficiary.claims == 0) {\\n            return 0;\\n        }\\n        return baseInterval + (_beneficiary.claims - 1) * incrementInterval;\\n    }\\n\\n    /**\\n     * @notice Returns the block number when a beneficiary can claim again\\n     *\\n     * @param _beneficiaryAddress address of the beneficiary\\n     * @return uint256 number of block when the beneficiary can claim\\n     */\\n    function claimCooldown(address _beneficiaryAddress) public view override returns (uint256) {\\n        return beneficiaries[_beneficiaryAddress].lastClaim + lastInterval(_beneficiaryAddress);\\n    }\\n\\n    /**\\n     * @notice Locks the community\\n     */\\n    function lock() external override onlyAmbassadorOrEntity {\\n        locked = true;\\n        emit CommunityLocked(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Unlocks the community\\n     */\\n    function unlock() external override onlyAmbassadorOrEntity {\\n        locked = false;\\n        emit CommunityUnlocked(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Requests treasury funds from the communityAdmin\\n     */\\n    function requestFunds() external override onlyManagers {\\n        require(!locked, \\\"LOCKED\\\");\\n\\n        communityAdmin.fundCommunity();\\n\\n        lastFundRequest = block.number;\\n\\n        emit FundsRequested(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from donor to this community\\n     * Used by donationToCommunity method from DonationMiner contract\\n     *\\n     * @param _sender address of the sender\\n     * @param _amount amount to be donated\\n     */\\n    function donate(address _sender, uint256 _amount) external override nonReentrant {\\n        token().safeTransferFrom(_sender, address(this), _amount);\\n        privateFunds += _amount;\\n\\n        emit Donate(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Increases the treasuryFunds value\\n     * Used by communityAdmin after an amount of tokens are sent from the treasury\\n     *\\n     * @param _amount amount to be added to treasuryFunds\\n     */\\n    function addTreasuryFunds(uint256 _amount) external override onlyOwner {\\n        treasuryFunds += _amount;\\n    }\\n\\n    /**\\n     * @notice Transfers an amount of an ERC20 from this contract to an address\\n     *\\n     * @param _token address of the ERC20 token\\n     * @param _to address of the receiver\\n     * @param _amount amount of the transaction\\n     */\\n    function transfer(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner nonReentrant {\\n        _token.safeTransfer(_to, _amount);\\n\\n        emit TransferERC20(address(_token), _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Allows a beneficiary from the previousCommunity to join in this community\\n     */\\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external override {\\n        // no need to check if it's a beneficiary, as the state is copied\\n        Beneficiary storage _beneficiary = beneficiaries[_beneficiaryAddress];\\n\\n        require(\\n            _beneficiary.state == BeneficiaryState.NONE,\\n            \\\"Community::beneficiaryJoinFromMigrated: Beneficiary exists\\\"\\n        );\\n\\n        //if the previousCommunity is deployed with the new type of smart contract\\n        if (previousCommunity.impactMarketAddress() == address(0)) {\\n            (\\n                BeneficiaryState _oldBeneficiaryState,\\n                uint256 _oldBeneficiaryClaims,\\n                uint256 _oldBeneficiaryClaimedAmount,\\n                uint256 _oldBeneficiaryLastClaim\\n            ) = previousCommunity.beneficiaries(_beneficiaryAddress);\\n\\n            _changeBeneficiaryState(_beneficiary, _oldBeneficiaryState);\\n            _beneficiary.claims = _oldBeneficiaryClaims;\\n            _beneficiary.lastClaim = _oldBeneficiaryLastClaim;\\n            _beneficiary.claimedAmount = _oldBeneficiaryClaimedAmount;\\n        } else {\\n            ICommunityLegacy _legacyCommunity = ICommunityLegacy(address(previousCommunity));\\n            uint256 _legacyBeneficiaryLastInterval = _legacyCommunity.lastInterval(\\n                _beneficiaryAddress\\n            );\\n            _changeBeneficiaryState(\\n                _beneficiary,\\n                BeneficiaryState(_legacyCommunity.beneficiaries(_beneficiaryAddress))\\n            );\\n\\n            uint256 _legacyBeneficiaryCooldown = _legacyCommunity.cooldown(_beneficiaryAddress);\\n\\n            if (\\n                _legacyBeneficiaryCooldown >=\\n                _legacyBeneficiaryLastInterval + _firstBlockTimestamp()\\n            ) {\\n                // seconds to blocks conversion\\n                _beneficiary.lastClaim =\\n                    (_legacyBeneficiaryCooldown -\\n                        _legacyBeneficiaryLastInterval -\\n                        _firstBlockTimestamp()) /\\n                    5;\\n            } else {\\n                _beneficiary.lastClaim = 0;\\n            }\\n\\n            _beneficiary.claimedAmount = _legacyCommunity.claimed(_beneficiaryAddress);\\n\\n            uint256 _previousBaseInterval = _legacyCommunity.baseInterval();\\n            if (_legacyBeneficiaryLastInterval >= _previousBaseInterval) {\\n                _beneficiary.claims =\\n                    (_legacyBeneficiaryLastInterval - _previousBaseInterval) /\\n                    _legacyCommunity.incrementInterval() +\\n                    1;\\n            } else {\\n                _beneficiary.claims = 0;\\n            }\\n        }\\n\\n        beneficiaryList.add(_beneficiaryAddress);\\n\\n        emit BeneficiaryJoined(_beneficiaryAddress);\\n    }\\n\\n    /**\\n     * @notice Returns the initial maxClaim\\n     */\\n    function getInitialMaxClaim() external view override returns (uint256) {\\n        return maxClaim + validBeneficiaryCount * decreaseStep;\\n    }\\n\\n    /**\\n     * @notice Changes the state of a beneficiary\\n     *\\n     * @param _beneficiary address of the beneficiary\\n     * @param _newState new state\\n     */\\n    function _changeBeneficiaryState(Beneficiary storage _beneficiary, BeneficiaryState _newState)\\n        internal\\n    {\\n        if (_beneficiary.state == _newState) {\\n            return;\\n        }\\n\\n        if (_newState == BeneficiaryState.Valid) {\\n            require(\\n                maxClaim - decreaseStep >= claimAmount,\\n                \\\"Community::_changeBeneficiaryState: Max claim too low\\\"\\n            );\\n            require(\\n                maxBeneficiaries == 0 || validBeneficiaryCount < maxBeneficiaries,\\n                \\\"Community::_changeBeneficiaryState: This community has reached the maximum number of valid beneficiaries\\\"\\n            );\\n            validBeneficiaryCount++;\\n            maxClaim -= decreaseStep;\\n        } else if (_beneficiary.state == BeneficiaryState.Valid) {\\n            validBeneficiaryCount--;\\n            maxClaim += decreaseStep;\\n        }\\n\\n        _beneficiary.state = _newState;\\n    }\\n\\n    function _firstBlockTimestamp() public view returns (uint256) {\\n        if (block.chainid == 42220) {\\n            //celo mainnet\\n            return 1587571205;\\n        } else if (block.chainid == 44787) {\\n            //alfajores testnet\\n            return 1594921556;\\n        } else if (block.chainid == 44787) {\\n            //baklava testnet\\n            return 1593012289;\\n        } else {\\n            return block.timestamp - block.number; //local\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad08ec661c5b5c41d4956af8996a0cccc46e40fcba64e286cda1f830d22607d7\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/CommunityStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\n/**\\n * @title Storage for Community\\n * @notice For future upgrades, do not change CommunityStorageV1. Create a new\\n * contract which implements CommunityStorageV1 and following the naming convention\\n * CommunityStorageVX.\\n */\\nabstract contract CommunityStorageV1 is ICommunity {\\n    bool public override locked;\\n    uint256 public override claimAmount;\\n    uint256 public override baseInterval;\\n    uint256 public override incrementInterval;\\n    uint256 public override maxClaim;\\n    uint256 public override validBeneficiaryCount;\\n    uint256 public override treasuryFunds;\\n    uint256 public override privateFunds;\\n    uint256 public override decreaseStep;\\n    uint256 public override minTranche;\\n    uint256 public override maxTranche;\\n    uint256 public override lastFundRequest;\\n\\n    ICommunity public override previousCommunity;\\n    ICommunityAdmin public override communityAdmin;\\n\\n    mapping(address => Beneficiary) public override beneficiaries;\\n    EnumerableSet.AddressSet internal beneficiaryList;\\n}\\n\",\"keccak256\":\"0xf401d7b7f1691a0fb45023c3eace003ddfc0c4e16306042a73bc7e0973196f8f\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/CommunityStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./CommunityStorageV1.sol\\\";\\n\\n/**\\n * @title Storage for Community\\n * @notice For future upgrades, do not change CommunityStorageV2. Create a new\\n * contract which implements CommunityStorageV2 and following the naming convention\\n * CommunityStorageVX.\\n */\\nabstract contract CommunityStorageV2 is CommunityStorageV1 {\\n    IERC20 public _token;\\n    uint256 public override maxBeneficiaries;\\n}\\n\",\"keccak256\":\"0x89c4df7964d11d5742b7ed4cbf8e7bda930b851fa31a4ec636f820e515f33be8\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of cUSD received\\n        uint256 lastClaim;       //block number of the last claim\\n    }\\n\\n    function initialize(\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function getVersion() external returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function maxBeneficiaries() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function token() external view  returns(IERC20);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address _beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 _index) external view returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function impactMarketAddress() external pure returns (address);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n    function lastFundRequest() external view returns(uint256);\\n\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateMaxBeneficiaries(uint256 _newMaxBeneficiaries) external;\\n    function updateToken(IERC20 _newToken, address[] memory _exchangePath) external;\\n    function donate(address _sender, uint256 _amount) external;\\n    function addTreasuryFunds(uint256 _amount) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function addManager(address _managerAddress) external;\\n    function removeManager(address _managerAddress) external;\\n    function addBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function lockBeneficiary(address _beneficiaryAddress) external;\\n    function unlockBeneficiary(address _beneficiaryAddress) external;\\n    function removeBeneficiary(address _beneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f5d13f6ec75cbff9f20a2d74f409bcf3f63ffdf5e70ffbf2d6baf5de0bcd76d\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\\\";\\nimport \\\"../../ambassadors/interfaces/IAmbassadors.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function impactMarketCouncil() external view returns(IImpactMarketCouncil);\\n    function ambassadors() external view returns(IAmbassadors);\\n    function communityMiddleProxy() external view returns(address);\\n    function communities(address _community) external view returns(CommunityState);\\n    function communityImplementation() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 _index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity) external view returns (bool);\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateImpactMarketCouncil(IImpactMarketCouncil _newImpactMarketCouncil) external;\\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external;\\n    function updateCommunityMiddleProxy(address _communityMiddleProxy) external;\\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\\n    function updateBeneficiaryParams(\\n        ICommunity _community,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity _community,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateProxyImplementation(address _CommunityMiddleProxy, address _newLogic) external;\\n    function updateCommunityToken(\\n        ICommunity _community,\\n        IERC20 _newToken,\\n        address[] memory _exchangePath\\n    ) external;\\n    function addCommunity(\\n        address[] memory _managers,\\n        address _ambassador,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory _managers,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function removeCommunity(ICommunity _community) external;\\n    function fundCommunity() external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function transferFromCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8bca70e4203f758e0be9612a305902c2d66c6e028b0a91d4e0f7afb085a46359\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface ICommunityLegacy {\\n    function cooldown(address _account) external returns(uint256);\\n    function lastInterval(address _account) external returns(uint256);\\n    function claimed(address _account) external returns(uint256);\\n    function beneficiaries(address _account) external returns(uint256);\\n    function claimAmount() external returns(uint256);\\n    function baseInterval() external returns(uint256);\\n    function incrementInterval() external returns(uint256);\\n    function maxClaim() external returns(uint256);\\n    function previousCommunityContract() external returns(address);\\n    function impactMarketAddress() external returns(address);\\n    function cUSDAddress() external returns(address);\\n    function locked() external returns(bool);\\n    function addManager(address _account) external;\\n    function removeManager(address _account) external;\\n    function addBeneficiary(address _account) external;\\n    function lockBeneficiary(address _account) external;\\n    function unlockBeneficiary(address _account) external;\\n    function removeBeneficiary(address _account) external;\\n    function claim() external;\\n    function edit(uint256 _claimAmount, uint256 _maxClaim, uint256 _baseInterval, uint256 _incrementInterval) external;\\n    function lock() external;\\n    function unlock() external;\\n    function migrateFunds(address _newCommunity, address _newCommunityManager) external;\\n    function hasRole(bytes32 role, address account) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x8592f034e96042fbce92767f6f5cd676f1f0ffa0f34f285f617dc3c864593aa8\",\"license\":\"Apache-2.0\"},\"contracts/governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IImpactMarketCouncil {\\n    //\\n}\\n\",\"keccak256\":\"0xdce6f7ebf903805f32619ed2389cd5a23f67316fe0999d71c17251d53530aa77\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\ninterface ITreasury {\\n    struct Token {\\n        uint256 rate;\\n        address[] exchangePath;\\n    }\\n\\n    function getVersion() external returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function uniswapRouter() external view returns(IUniswapV2Router);\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updateUniswapRouter(IUniswapV2Router _uniswapRouter) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function isToken(address _tokenAddress) external view returns (bool);\\n    function tokenListLength() external view returns (uint256);\\n    function tokenListAt(uint256 _index) external view returns (address);\\n    function tokens(address _tokenAddress) external view returns (uint256 rate, address[] memory exchangePath);\\n    function setToken(address _tokenAddress, uint256 _rate, address[] calldata _exchangePath) external;\\n    function removeToken(address _tokenAddress) external;\\n    function getConvertedAmount(address _tokenAddress, uint256 _amount) external view returns (uint256);\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] memory _exchangePath,\\n        uint256 _deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x28f21d39880e3ef9bcd2422b109ac6fdc2eab02a65d3d28f154afbf2ed8b7599\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address tokenA, address tokenB) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a12eebf4cf3741e1b1a30a4315096ae6d545af2e07a92e544d05739ceb811e9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614148806100206000396000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c80638f4a6269116101de578063c0e27b6b1161010f578063d6dbd972116100ad578063ecd0c0c31161007c578063ecd0c0c31461072c578063f2fde38b14610740578063f83d08ba14610753578063fc0c546a1461044657600080fd5b8063d6dbd972146106fd578063dd4414bb14610707578063e69d849d14610711578063eb0376b11461072457600080fd5b8063d10f5107116100e9578063d10f5107146106bb578063d33d4ec6146106ce578063d4938db3146106e1578063d547741f146106ea57600080fd5b8063c0e27b6b14610691578063c51fab3c146106a4578063cf309012146106ae57600080fd5b8063a69df4b51161017c578063b026ba5711610156578063b026ba571461065c578063b809ee8214610664578063beabacc814610677578063c041fdc51461068a57600080fd5b8063a69df4b51461062e578063a8f3e06314610636578063ac18de431461064957600080fd5b80639cecf572116101b85780639cecf572146105f6578063a0f93a1714610609578063a217fddf14610613578063a57e08ca1461061b57600080fd5b80638f4a6269146105c657806391d14854146105d95780639c01a401146105ec57600080fd5b806336568abe116102c3578063597be18b1161026157806378ba280f1161023057806378ba280f146105915780637e2959dc14610599578063830953ab146105ac5780638da5cb5b146105b557600080fd5b8063597be18b146105595780635fac917a14610562578063715018a614610576578063785393db1461057e57600080fd5b8063431a801a1161029d578063431a801a146105215780634e71d92d1461052b578063590411da1461053357806359633a1c1461054657600080fd5b806336568abe146104e75780633a578a0c146104fa5780633c19c2d31461050e57600080fd5b8063248a9ca3116103305780632d06177a1161030a5780632d06177a1461049b5780632f2ff15d146104ae5780632fd79103146104c1578063305ff654146104d457600080fd5b8063248a9ca3146104665780632a7eabf6146104895780632b2711171461049157600080fd5b80630d8e6e2c1161036c5780630d8e6e2c146104215780630e5b7c53146104285780631912cdb4146104315780631fccf6721461044657600080fd5b8063015677391461039357806301ffc9a7146103e657806309c338c314610409575b600080fd5b6103cd6103a1366004613a98565b61010960205260009081526040902080546001820154600283015460039093015460ff90921692909184565b6040516103dd9493929190613dba565b60405180910390f35b6103f96103f4366004613c34565b61075b565b60405190151581526020016103dd565b6104136101065481565b6040519081526020016103dd565b6002610413565b61041360fd5481565b61044461043f366004613d43565b610792565b005b61044e6108b3565b6040516001600160a01b0390911681526020016103dd565b610413610474366004613bed565b60009081526065602052604090206001015490565b610413610964565b6104136101055481565b6104446104a9366004613a98565b6109a9565b6104446104bc366004613c05565b610ab5565b6104446104cf366004613d64565b610b27565b6104446104e2366004613bed565b610d24565b6104446104f5366004613c05565b610e51565b6101075461044e906001600160a01b031681565b61044461051c366004613b2e565b610ecb565b6104136101005481565b610444611244565b610444610541366004613afb565b6114af565b610444610554366004613a98565b6116ee565b61041360fe5481565b6101085461044e906001600160a01b031681565b61044461182f565b61044e61058c366004613bed565b611865565b610413611873565b6104446105a7366004613a98565b611894565b61041360fc5481565b6097546001600160a01b031661044e565b6104446105d4366004613c9c565b61191c565b6103f96105e7366004613c05565b612023565b6104136101015481565b610413610604366004613a98565b61204e565b61041361010d5481565b610413600081565b610444610629366004613a98565b612080565b610444612660565b610413610644366004613a98565b612735565b610444610657366004613a98565b612792565b6104446129a0565b610444610672366004613bed565b612a92565b610444610685366004613c5c565b612ad7565b600061044e565b61044461069f366004613a98565b612b94565b6104136101035481565b60fb546103f99060ff1681565b6104446106c9366004613a98565b612cc8565b6104446106dc366004613a98565b612dfe565b61041360ff5481565b6104446106f8366004613c05565b612e8b565b6104136101025481565b6104136101045481565b61044461071f366004613ad0565b612ef9565b610413612f8a565b61010c5461044e906001600160a01b031681565b61044461074e366004613a98565b612f97565b61044461302f565b60006001600160e01b03198216637965db0b60e01b148061078c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6097546001600160a01b031633146107c55760405162461bcd60e51b81526004016107bc90613e6e565b60405180910390fd5b808211156108565760405162461bcd60e51b815260206004820152605260248201527f436f6d6d756e6974793a3a757064617465436f6d6d756e697479506172616d7360448201527f3a206d696e5472616e6368652073686f756c64206e6f742062652067726561746064820152716572207468616e206d61785472616e63686560701b608482015260a4016107bc565b61010454610105546040805192835260208301919091528101839052606081018290527fcd922a6f0ad842d84e08eb5df24c029b63c60167fb37cff24adf95c4832e32589060800160405180910390a16101049190915561010555565b61010c546000906001600160a01b03166109535761010860009054906101000a90046001600160a01b03166001600160a01b0316631fccf6726040518163ffffffff1660e01b815260040160206040518083038186803b15801561091657600080fd5b505afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190613ab4565b905090565b5061010c546001600160a01b031690565b60004661a4ec14156109795750635ea06a0590565b4661aef3141561098c5750635f10925490565b4661aef3141561099f5750635ef3704190565b61094e434261403c565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b1580156109f357600080fd5b505afa158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b9190613bcd565b610a475760405162461bcd60e51b81526004016107bc90613e2b565b610a5f6000805160206140f383398151915282612023565b610ab257610a7b6000805160206140f383398151915282613107565b6040516001600160a01b0382169033907f05a4006f300442cf8b7fdb885f5ee958812020bffb5c5a8e655fde64e5f987ed90600090a35b50565b60405162461bcd60e51b815260206004820152603a60248201527f436f6d6d756e6974793a3a6772616e74526f6c653a20596f7520617265206e6f60448201527f7420616c6c6f7720746f207573652074686973206d6574686f6400000000000060648201526084016107bc565b5050565b6097546001600160a01b03163314610b515760405162461bcd60e51b81526004016107bc90613e6e565b808211610bda5760405162461bcd60e51b815260206004820152604b60248201527f436f6d6d756e6974793a3a636f6e7374727563746f723a2062617365496e746560448201527f7276616c206d7573742062652067726561746572207468616e20696e6372656d60648201526a195b9d125b9d195c9d985b60aa1b608482015260a4016107bc565b8261010054610be9919061401d565b610bf39086613fe5565b8411610c715760405162461bcd60e51b815260206004820152604160248201527f436f6d6d756e6974793a3a636f6e7374727563746f723a206d6178436c61696d60448201527f206d7573742062652067726561746572207468616e20636c61696d416d6f756e6064820152601d60fa1b608482015260a4016107bc565b60fc5460ff546101035460fd5460fe54604080519586526020860194909452848401929092526060840152608083015260a0820187905260c0820186905260e0820185905261010082018490526101208201839052517fa19f450cd68c70f728b0c4b75befd202ea5ebb1ae78b6aca47365934b5008750918190036101400190a160fc85905561010054610d0690849061401d565b610d10908561403c565b60ff556101039290925560fd5560fe555050565b6097546001600160a01b0316331480610dba575061010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190613bcd565b610e1b5760405162461bcd60e51b815260206004820152602c60248201527f436f6d6d756e6974793a204e4f545f4f574e45525f4f525f414d42415353414460448201526b4f525f4f525f454e5449545960a01b60648201526084016107bc565b61010d546040518291907f6672b7064fe522fa09a8078f6d967272e0a379beb2270817417c9f023251b65790600090a361010d55565b6001600160a01b0381163314610ec15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107bc565b610b23828261318d565b600054610100900460ff16610ee65760005460ff1615610eea565b303b155b610f4d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bc565b600054610100900460ff16158015610f6f576000805461ffff19166101011790555b858711610ff75760405162461bcd60e51b815260206004820152604a60248201527f436f6d6d756e6974793a3a696e697469616c697a653a2062617365496e74657260448201527f76616c206d7573742062652067726561746572207468616e20696e6372656d656064820152691b9d125b9d195c9d985b60b21b608482015260a4016107bc565b89891161106e576040805162461bcd60e51b81526020600482015260248101919091527f436f6d6d756e6974793a3a696e697469616c697a653a206d6178436c61696d2060448201527f6d7573742062652067726561746572207468616e20636c61696d416d6f756e7460648201526084016107bc565b838511156110f45760405162461bcd60e51b815260206004820152604760248201527f436f6d6d756e6974793a3a696e697469616c697a653a206d696e5472616e636860448201527f652073686f756c64206e6f742062652067726561746572207468616e206d61786064820152665472616e63686560c81b608482015260a4016107bc565b6110fc6131f4565b611104613233565b61110c61326a565b60fc8a905560fd87905560fe86905560ff89905561010485905561010584905561010780546001600160a01b03199081166001600160a01b0385161790915561010880543392168217905561010389905561010d84905560fb805460ff1916905561117690612f97565b61118e6000805160206140f383398151915280613299565b6111a66000805160206140f3833981519152336132e4565b604051339081907f05a4006f300442cf8b7fdb885f5ee958812020bffb5c5a8e655fde64e5f987ed90600090a38a516000905b80821015611223576112118d838151811061120457634e487b7160e01b600052603260045260246000fd5b60200260200101516109a9565b8161121b81614096565b9250506111d9565b50508015611237576000805461ff00191690555b5050505050505050505050565b6001336000908152610109602052604090205460ff16600381111561127957634e487b7160e01b600052602160045260246000fd5b146112c65760405162461bcd60e51b815260206004820181905260248201527f436f6d6d756e6974793a204e4f545f56414c49445f42454e454649434941525960448201526064016107bc565b600260c95414156112e95760405162461bcd60e51b81526004016107bc90613f3e565b600260c9553360009081526101096020526040902060fb5460ff16156113215760405162461bcd60e51b81526004016107bc90613f1e565b4361132b3361204e565b11156113795760405162461bcd60e51b815260206004820152601960248201527f436f6d6d756e6974793a3a636c61696d3a204e4f545f5945540000000000000060448201526064016107bc565b60ff548160020154106113e35760405162461bcd60e51b815260206004820152602c60248201527f436f6d6d756e6974793a3a636c61696d3a20416c726561647920636c61696d6560448201526b642065766572797468696e6760a01b60648201526084016107bc565b6000816002015460ff546113f7919061403c565b60fc54111561141757816002015460ff54611412919061403c565b61141b565b60fc545b9050808260020160008282546114319190613fe5565b909155505060018201805490600061144883614096565b909155505043600383015561147033826114606108b3565b6001600160a01b031691906132ee565b60405181815233907fd54e03b214b3e8c17e98044f98554b6f1b18dd2a3163a2619afea7e9b2a6eb97906020015b60405180910390a25050600160c955565b6114c76000805160206140f383398151915233612023565b6114e35760405162461bcd60e51b81526004016107bc90613ea3565b600260c95414156115065760405162461bcd60e51b81526004016107bc90613f3e565b600260c95560fb5460ff161561152e5760405162461bcd60e51b81526004016107bc90613f1e565b80516000905b808210156116e4576000610109600085858151811061156357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209050600060038111156115ae57634e487b7160e01b600052602160045260246000fd5b815460ff1660038111156115d257634e487b7160e01b600052602160045260246000fd5b146115dd57506116d2565b6115e8816001613356565b43816003018190555061162d84848151811061161457634e487b7160e01b600052603260045260246000fd5b602002602001015161010a6135d290919063ffffffff16565b5061166984848151811061165157634e487b7160e01b600052603260045260246000fd5b602002602001015166b1a2bc2ec500006114606108b3565b83838151811061168957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316336001600160a01b03167fbb39c36a7502b7256e1a687254146a9a2ea7b146c77cb9e40eb0e2b8793781e160405160405180910390a3505b816116dc81614096565b925050611534565b5050600160c95550565b6117066000805160206140f383398151915233612023565b6117225760405162461bcd60e51b81526004016107bc90613ea3565b6001600160a01b0381166000908152610109602052604090206001815460ff16600381111561176157634e487b7160e01b600052602160045260246000fd5b148061179057506002815460ff16600381111561178e57634e487b7160e01b600052602160045260246000fd5b145b6117ea5760405162461bcd60e51b815260206004820152602560248201527f436f6d6d756e6974793a3a72656d6f766542656e65666963696172793a204e4f6044820152641517d6515560da1b60648201526084016107bc565b6117f5816003613356565b6040516001600160a01b0383169033907f1a6590bd0cabbfcc7c86bef99e1034054e179905cfcc294598fcd426c092244290600090a35050565b6097546001600160a01b031633146118595760405162461bcd60e51b81526004016107bc90613e6e565b61186360006135e7565b565b600061078c61010a83613639565b60006101035461010054611887919061401d565b60ff5461094e9190613fe5565b6097546001600160a01b031633146118be5760405162461bcd60e51b81526004016107bc90613e6e565b610107546040516001600160a01b038084169216907f0d6a84e94da4b619dd0d993b5689ec82db4b1095da99ee0f3e7bb046c647e6ad90600090a361010780546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146119465760405162461bcd60e51b81526004016107bc90613e6e565b61010860009054906101000a90046001600160a01b03166001600160a01b0316631fccf6726040518163ffffffff1660e01b815260040160206040518083038186803b15801561199557600080fd5b505afa1580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd9190613ab4565b6001600160a01b0316826001600160a01b03161480611ae9575061010860009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3657600080fd5b505afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190613ab4565b6040516319f3736160e01b81526001600160a01b03848116600483015291909116906319f373619060240160206040518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae99190613bcd565b611b435760405162461bcd60e51b815260206004820152602560248201527f436f6d6d756e6974793a3a757064617465546f6b656e3a20496e76616c6964206044820152643a37b5b2b760d91b60648201526084016107bc565b60018151118015611b945750611b576108b3565b6001600160a01b031681600081518110611b8157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b8015611be55750816001600160a01b03168160018351611bb4919061403c565b81518110611bd257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b611c465760405162461bcd60e51b815260206004820152602c60248201527f436f6d6d756e6974793a3a757064617465546f6b656e3a20696e76616c69642060448201526b0caf0c6d0c2dccecaa0c2e8d60a31b60648201526084016107bc565b6000611c506108b3565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015611c9157600080fd5b505afa158015611ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc99190613d2b565b9050611cd36108b3565b6001600160a01b031663095ea7b361010860009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3057600080fd5b505afa158015611d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d689190613ab4565b6001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190613ab4565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b158015611e2057600080fd5b505af1158015611e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e589190613bcd565b5061010860009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea857600080fd5b505afa158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee09190613ab4565b6001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f509190613ab4565b6001600160a01b0316635c11d7958260008530611f6f42610e10613fe5565b6040518663ffffffff1660e01b8152600401611f8f959493929190613f75565b600060405180830381600087803b158015611fa957600080fd5b505af1158015611fbd573d6000803e3d6000fd5b505061010c546040516001600160a01b03878116945090911691507f0b1186973f810894b87ab0bfbee422fddcaad21b46dc705a561451bbb6bac11790600090a3505061010c80546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061205982612735565b6001600160a01b0383166000908152610109602052604090206003015461078c9190613fe5565b6001600160a01b03811660009081526101096020526040812090815460ff1660038111156120be57634e487b7160e01b600052602160045260246000fd5b146121315760405162461bcd60e51b815260206004820152603a60248201527f436f6d6d756e6974793a3a62656e65666963696172794a6f696e46726f6d4d6960448201527f6772617465643a2042656e65666963696172792065786973747300000000000060648201526084016107bc565b610107546040805163c041fdc560e01b815290516000926001600160a01b03169163c041fdc5916004808301926020929190829003018186803b15801561217757600080fd5b505afa15801561218b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121af9190613ab4565b6001600160a01b031614156122705761010754604051630156773960e01b81526001600160a01b038481166004830152600092839283928392169063015677399060240160806040518083038186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122439190613cea565b93509350935093506122558585613356565b6001850192909255600384019190915560028301555061261b565b6101075460405163a8f3e06360e01b81526001600160a01b03848116600483015290911690600090829063a8f3e06390602401602060405180830381600087803b1580156122bd57600080fd5b505af11580156122d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f59190613d2b565b604051630156773960e01b81526001600160a01b03868116600483015291925061239e91859190851690630156773990602401602060405180830381600087803b15801561234257600080fd5b505af1158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a9190613d2b565b600381111561239957634e487b7160e01b600052602160045260246000fd5b613356565b604051635911706160e11b81526001600160a01b0385811660048301526000919084169063b222e0c290602401602060405180830381600087803b1580156123e557600080fd5b505af11580156123f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241d9190613d2b565b9050612427610964565b6124319083613fe5565b8110612469576005612441610964565b61244b848461403c565b612455919061403c565b61245f9190613ffd565b6003850155612471565b600060038501555b60405163c884ef8360e01b81526001600160a01b03868116600483015284169063c884ef8390602401602060405180830381600087803b1580156124b457600080fd5b505af11580156124c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ec9190613d2b565b84600201819055506000836001600160a01b0316630e5b7c536040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561253157600080fd5b505af1158015612545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125699190613d2b565b905080831061260e57836001600160a01b031663597be18b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156125ad57600080fd5b505af11580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e59190613d2b565b6125ef828561403c565b6125f99190613ffd565b612604906001613fe5565b6001860155612616565b600060018601555b505050505b61262761010a836135d2565b506040516001600160a01b038316907f505fe088fef0d1fb451ccfed842b55a86af1ee6208502f4bc3327dcb9032082990600090a25050565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b1580156126aa57600080fd5b505afa1580156126be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e29190613bcd565b6126fe5760405162461bcd60e51b81526004016107bc90613e2b565b60fb805460ff1916905560405133907f4e50048c25972c85ad169c2302967f1e633e8dc6108d6aca51a90d2a59d4934d90600090a2565b6001600160a01b03811660009081526101096020526040812060018101546127605750600092915050565b60fe5460018260010154612774919061403c565b61277e919061401d565b60fd5461278b9190613fe5565b9392505050565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b1580156127dc57600080fd5b505afa1580156127f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128149190613bcd565b6128305760405162461bcd60e51b81526004016107bc90613e2b565b6128486000805160206140f383398151915282612023565b6128bc576040805162461bcd60e51b81526020600482015260248101919091527f436f6d6d756e6974793a3a72656d6f76654d616e616765723a2054686973206160448201527f63636f756e7420646f65736e27742068617665206d616e6167657220726f6c6560648201526084016107bc565b610108546001600160a01b038281169116141561294f5760405162461bcd60e51b8152602060048201526044602482018190527f436f6d6d756e6974793a3a72656d6f76654d616e616765723a20596f75206172908201527f65206e6f7420616c6c6f7720746f2072656d6f766520636f6d6d756e697479416064820152633236b4b760e11b608482015260a4016107bc565b6129676000805160206140f38339815191528261318d565b6040516001600160a01b0382169033907f3e902a6ee93dd5b2d48bd1009c7701a481be512b1ef73dbed2f95ea44c59ea8890600090a350565b6129b86000805160206140f383398151915233612023565b6129d45760405162461bcd60e51b81526004016107bc90613ea3565b60fb5460ff16156129f75760405162461bcd60e51b81526004016107bc90613f1e565b61010860009054906101000a90046001600160a01b03166001600160a01b031663174a71d76040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a4857600080fd5b505af1158015612a5c573d6000803e3d6000fd5b50504361010655505060405133907f16a8b794d4e2ed6ffef50d78af3d4372ce4bfe8a399bfc23f59b7832ee47539090600090a2565b6097546001600160a01b03163314612abc5760405162461bcd60e51b81526004016107bc90613e6e565b806101016000828254612acf9190613fe5565b909155505050565b6097546001600160a01b03163314612b015760405162461bcd60e51b81526004016107bc90613e6e565b600260c9541415612b245760405162461bcd60e51b81526004016107bc90613f3e565b600260c955612b3d6001600160a01b03841683836132ee565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a895683604051612b8291815260200190565b60405180910390a35050600160c95550565b612bac6000805160206140f383398151915233612023565b612bc85760405162461bcd60e51b81526004016107bc90613ea3565b60fb5460ff1615612beb5760405162461bcd60e51b81526004016107bc90613f1e565b6001600160a01b0381166000908152610109602052604090206001815460ff166003811115612c2a57634e487b7160e01b600052602160045260246000fd5b14612c835760405162461bcd60e51b815260206004820152602360248201527f436f6d6d756e6974793a3a6c6f636b42656e65666963696172793a204e4f545f60448201526216515560ea1b60648201526084016107bc565b612c8e816002613356565b6040516001600160a01b0383169033907f2b9ef93c7856b47a1b624fa3fcc4b651d388dd6d16327f3ad22b05f3da8b0f1590600090a35050565b612ce06000805160206140f383398151915233612023565b612cfc5760405162461bcd60e51b81526004016107bc90613ea3565b60fb5460ff1615612d1f5760405162461bcd60e51b81526004016107bc90613f1e565b6001600160a01b0381166000908152610109602052604090206002815460ff166003811115612d5e57634e487b7160e01b600052602160045260246000fd5b14612db95760405162461bcd60e51b815260206004820152602560248201527f436f6d6d756e6974793a3a756e6c6f636b42656e65666963696172793a204e4f6044820152641517d6515560da1b60648201526084016107bc565b612dc4816001613356565b6040516001600160a01b0383169033907fa589fb4f2925123e7a030dd6bbe76be46a03f8ce0ea53a78dbb3383c7797db2c90600090a35050565b6097546001600160a01b03163314612e285760405162461bcd60e51b81526004016107bc90613e6e565b610108546040516001600160a01b038084169216907fdd8d3b7b0badfc5d636d48e71e28015b4b8554b64d2cffba6f0a90bf7693ec0090600090a361010880546001600160a01b0319166001600160a01b038316908117909155610ab2906109a9565b60405162461bcd60e51b815260206004820152603b60248201527f436f6d6d756e6974793a3a7265766f6b65526f6c653a20596f7520617265206e60448201527f6f7420616c6c6f7720746f207573652074686973206d6574686f64000000000060648201526084016107bc565b600260c9541415612f1c5760405162461bcd60e51b81526004016107bc90613f3e565b600260c955612f40823083612f2f6108b3565b6001600160a01b0316929190613645565b806101026000828254612f539190613fe5565b909155505060405181815233907f0553260a2e46b0577270d8992db02d30856ca880144c72d6e9503760946aef139060200161149e565b600061094e61010a613683565b6097546001600160a01b03163314612fc15760405162461bcd60e51b81526004016107bc90613e6e565b6001600160a01b0381166130265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107bc565b610ab2816135e7565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b15801561307957600080fd5b505afa15801561308d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b19190613bcd565b6130cd5760405162461bcd60e51b81526004016107bc90613e2b565b60fb805460ff1916600117905560405133907fe1e6bc10311f2f958d6cd2d0ab7308c32089aa1acb8ab11a2ccb60028e332bd090600090a2565b6131118282612023565b610b235760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556131493390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6131978282612023565b15610b235760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1661321b5760405162461bcd60e51b81526004016107bc90613ed3565b61322361368d565b61322b61368d565b61186361368d565b600054610100900460ff1661325a5760405162461bcd60e51b81526004016107bc90613ed3565b61326261368d565b6118636136b4565b600054610100900460ff166132915760405162461bcd60e51b81526004016107bc90613ed3565b6118636136e4565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610b238282613107565b6040516001600160a01b03831660248201526044810182905261335190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613712565b505050565b80600381111561337657634e487b7160e01b600052602160045260246000fd5b825460ff16600381111561339a57634e487b7160e01b600052602160045260246000fd5b14156133a4575050565b60018160038111156133c657634e487b7160e01b600052602160045260246000fd5b14156135405760fc546101035460ff546133e0919061403c565b101561344c5760405162461bcd60e51b815260206004820152603560248201527f436f6d6d756e6974793a3a5f6368616e676542656e656669636961727953746160448201527474653a204d617820636c61696d20746f6f206c6f7760581b60648201526084016107bc565b61010d541580613461575061010d5461010054105b61350a5760405162461bcd60e51b815260206004820152606860248201527f436f6d6d756e6974793a3a5f6368616e676542656e656669636961727953746160448201527f74653a205468697320636f6d6d756e697479206861732072656163686564207460648201527f6865206d6178696d756d206e756d626572206f662076616c69642062656e6566608482015267696369617269657360c01b60a482015260c4016107bc565b610100805490600061351b83614096565b91905055506101035460ff6000828254613535919061403c565b9091555061359d9050565b6001825460ff16600381111561356657634e487b7160e01b600052602160045260246000fd5b141561359d57610100805490600061357d8361407f565b91905055506101035460ff60008282546135979190613fe5565b90915550505b81548190839060ff191660018360038111156135c957634e487b7160e01b600052602160045260246000fd5b02179055505050565b600061278b836001600160a01b0384166137e4565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061278b8383613833565b6040516001600160a01b038085166024830152831660448201526064810182905261367d9085906323b872dd60e01b9060840161331a565b50505050565b600061078c825490565b600054610100900460ff166118635760405162461bcd60e51b81526004016107bc90613ed3565b600054610100900460ff166136db5760405162461bcd60e51b81526004016107bc90613ed3565b611863336135e7565b600054610100900460ff1661370b5760405162461bcd60e51b81526004016107bc90613ed3565b600160c955565b6000613767826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661386b9092919063ffffffff16565b80519091501561335157808060200190518101906137859190613bcd565b6133515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107bc565b600081815260018301602052604081205461382b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561078c565b50600061078c565b600082600001828154811061385857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606061387a8484600085613882565b949350505050565b6060824710156138e35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107bc565b843b6139315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107bc565b600080866001600160a01b0316858760405161394d9190613d9e565b60006040518083038185875af1925050503d806000811461398a576040519150601f19603f3d011682016040523d82523d6000602084013e61398f565b606091505b509150915061399f8282866139aa565b979650505050505050565b606083156139b957508161278b565b8251156139c95782518084602001fd5b8160405162461bcd60e51b81526004016107bc9190613df8565b80356139ee816140dd565b919050565b600082601f830112613a03578081fd5b8135602067ffffffffffffffff80831115613a2057613a206140c7565b8260051b604051601f19603f83011681018181108482111715613a4557613a456140c7565b60405284815283810192508684018288018501891015613a63578687fd5b8692505b85831015613a8c57613a78816139e3565b845292840192600192909201918401613a67565b50979650505050505050565b600060208284031215613aa9578081fd5b813561278b816140dd565b600060208284031215613ac5578081fd5b815161278b816140dd565b60008060408385031215613ae2578081fd5b8235613aed816140dd565b946020939093013593505050565b600060208284031215613b0c578081fd5b813567ffffffffffffffff811115613b22578182fd5b61387a848285016139f3565b6000806000806000806000806000806101408b8d031215613b4d578586fd5b8a3567ffffffffffffffff811115613b63578687fd5b613b6f8d828e016139f3565b9a505060208b0135985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013591506101208b0135613bba816140dd565b809150509295989b9194979a5092959850565b600060208284031215613bde578081fd5b8151801515811461278b578182fd5b600060208284031215613bfe578081fd5b5035919050565b60008060408385031215613c17578182fd5b823591506020830135613c29816140dd565b809150509250929050565b600060208284031215613c45578081fd5b81356001600160e01b03198116811461278b578182fd5b600080600060608486031215613c70578081fd5b8335613c7b816140dd565b92506020840135613c8b816140dd565b929592945050506040919091013590565b60008060408385031215613cae578182fd5b8235613cb9816140dd565b9150602083013567ffffffffffffffff811115613cd4578182fd5b613ce0858286016139f3565b9150509250929050565b60008060008060808587031215613cff578182fd5b845160048110613d0d578283fd5b60208601516040870151606090970151919890975090945092505050565b600060208284031215613d3c578081fd5b5051919050565b60008060408385031215613d55578182fd5b50508035926020909101359150565b600080600080600060a08688031215613d7b578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008251613db0818460208701614053565b9190910192915050565b6080810160048610613ddc57634e487b7160e01b600052602160045260246000fd5b9481526020810193909352604083019190915260609091015290565b6020815260008251806020840152613e17816040850160208701614053565b601f01601f19169190910160400192915050565b60208082526023908201527f436f6d6d756e6974793a204e4f545f414d4241535341444f525f4f525f454e5460408201526249545960e81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526016908201527521b7b6b6bab734ba3c9d102727aa2fa6a0a720a3a2a960511b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600690820152651313d0d2d15160d21b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613fc45784516001600160a01b031683529383019391830191600101613f9f565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115613ff857613ff86140b1565b500190565b60008261401857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614037576140376140b1565b500290565b60008282101561404e5761404e6140b1565b500390565b60005b8381101561406e578181015183820152602001614056565b8381111561367d5750506000910152565b60008161408e5761408e6140b1565b506000190190565b60006000198214156140aa576140aa6140b1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab257600080fdfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220bcc65317a57f6d3196691254ee4a18d9feaea3c2bfc914440f5fca740a32c57864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c80638f4a6269116101de578063c0e27b6b1161010f578063d6dbd972116100ad578063ecd0c0c31161007c578063ecd0c0c31461072c578063f2fde38b14610740578063f83d08ba14610753578063fc0c546a1461044657600080fd5b8063d6dbd972146106fd578063dd4414bb14610707578063e69d849d14610711578063eb0376b11461072457600080fd5b8063d10f5107116100e9578063d10f5107146106bb578063d33d4ec6146106ce578063d4938db3146106e1578063d547741f146106ea57600080fd5b8063c0e27b6b14610691578063c51fab3c146106a4578063cf309012146106ae57600080fd5b8063a69df4b51161017c578063b026ba5711610156578063b026ba571461065c578063b809ee8214610664578063beabacc814610677578063c041fdc51461068a57600080fd5b8063a69df4b51461062e578063a8f3e06314610636578063ac18de431461064957600080fd5b80639cecf572116101b85780639cecf572146105f6578063a0f93a1714610609578063a217fddf14610613578063a57e08ca1461061b57600080fd5b80638f4a6269146105c657806391d14854146105d95780639c01a401146105ec57600080fd5b806336568abe116102c3578063597be18b1161026157806378ba280f1161023057806378ba280f146105915780637e2959dc14610599578063830953ab146105ac5780638da5cb5b146105b557600080fd5b8063597be18b146105595780635fac917a14610562578063715018a614610576578063785393db1461057e57600080fd5b8063431a801a1161029d578063431a801a146105215780634e71d92d1461052b578063590411da1461053357806359633a1c1461054657600080fd5b806336568abe146104e75780633a578a0c146104fa5780633c19c2d31461050e57600080fd5b8063248a9ca3116103305780632d06177a1161030a5780632d06177a1461049b5780632f2ff15d146104ae5780632fd79103146104c1578063305ff654146104d457600080fd5b8063248a9ca3146104665780632a7eabf6146104895780632b2711171461049157600080fd5b80630d8e6e2c1161036c5780630d8e6e2c146104215780630e5b7c53146104285780631912cdb4146104315780631fccf6721461044657600080fd5b8063015677391461039357806301ffc9a7146103e657806309c338c314610409575b600080fd5b6103cd6103a1366004613a98565b61010960205260009081526040902080546001820154600283015460039093015460ff90921692909184565b6040516103dd9493929190613dba565b60405180910390f35b6103f96103f4366004613c34565b61075b565b60405190151581526020016103dd565b6104136101065481565b6040519081526020016103dd565b6002610413565b61041360fd5481565b61044461043f366004613d43565b610792565b005b61044e6108b3565b6040516001600160a01b0390911681526020016103dd565b610413610474366004613bed565b60009081526065602052604090206001015490565b610413610964565b6104136101055481565b6104446104a9366004613a98565b6109a9565b6104446104bc366004613c05565b610ab5565b6104446104cf366004613d64565b610b27565b6104446104e2366004613bed565b610d24565b6104446104f5366004613c05565b610e51565b6101075461044e906001600160a01b031681565b61044461051c366004613b2e565b610ecb565b6104136101005481565b610444611244565b610444610541366004613afb565b6114af565b610444610554366004613a98565b6116ee565b61041360fe5481565b6101085461044e906001600160a01b031681565b61044461182f565b61044e61058c366004613bed565b611865565b610413611873565b6104446105a7366004613a98565b611894565b61041360fc5481565b6097546001600160a01b031661044e565b6104446105d4366004613c9c565b61191c565b6103f96105e7366004613c05565b612023565b6104136101015481565b610413610604366004613a98565b61204e565b61041361010d5481565b610413600081565b610444610629366004613a98565b612080565b610444612660565b610413610644366004613a98565b612735565b610444610657366004613a98565b612792565b6104446129a0565b610444610672366004613bed565b612a92565b610444610685366004613c5c565b612ad7565b600061044e565b61044461069f366004613a98565b612b94565b6104136101035481565b60fb546103f99060ff1681565b6104446106c9366004613a98565b612cc8565b6104446106dc366004613a98565b612dfe565b61041360ff5481565b6104446106f8366004613c05565b612e8b565b6104136101025481565b6104136101045481565b61044461071f366004613ad0565b612ef9565b610413612f8a565b61010c5461044e906001600160a01b031681565b61044461074e366004613a98565b612f97565b61044461302f565b60006001600160e01b03198216637965db0b60e01b148061078c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6097546001600160a01b031633146107c55760405162461bcd60e51b81526004016107bc90613e6e565b60405180910390fd5b808211156108565760405162461bcd60e51b815260206004820152605260248201527f436f6d6d756e6974793a3a757064617465436f6d6d756e697479506172616d7360448201527f3a206d696e5472616e6368652073686f756c64206e6f742062652067726561746064820152716572207468616e206d61785472616e63686560701b608482015260a4016107bc565b61010454610105546040805192835260208301919091528101839052606081018290527fcd922a6f0ad842d84e08eb5df24c029b63c60167fb37cff24adf95c4832e32589060800160405180910390a16101049190915561010555565b61010c546000906001600160a01b03166109535761010860009054906101000a90046001600160a01b03166001600160a01b0316631fccf6726040518163ffffffff1660e01b815260040160206040518083038186803b15801561091657600080fd5b505afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190613ab4565b905090565b5061010c546001600160a01b031690565b60004661a4ec14156109795750635ea06a0590565b4661aef3141561098c5750635f10925490565b4661aef3141561099f5750635ef3704190565b61094e434261403c565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b1580156109f357600080fd5b505afa158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b9190613bcd565b610a475760405162461bcd60e51b81526004016107bc90613e2b565b610a5f6000805160206140f383398151915282612023565b610ab257610a7b6000805160206140f383398151915282613107565b6040516001600160a01b0382169033907f05a4006f300442cf8b7fdb885f5ee958812020bffb5c5a8e655fde64e5f987ed90600090a35b50565b60405162461bcd60e51b815260206004820152603a60248201527f436f6d6d756e6974793a3a6772616e74526f6c653a20596f7520617265206e6f60448201527f7420616c6c6f7720746f207573652074686973206d6574686f6400000000000060648201526084016107bc565b5050565b6097546001600160a01b03163314610b515760405162461bcd60e51b81526004016107bc90613e6e565b808211610bda5760405162461bcd60e51b815260206004820152604b60248201527f436f6d6d756e6974793a3a636f6e7374727563746f723a2062617365496e746560448201527f7276616c206d7573742062652067726561746572207468616e20696e6372656d60648201526a195b9d125b9d195c9d985b60aa1b608482015260a4016107bc565b8261010054610be9919061401d565b610bf39086613fe5565b8411610c715760405162461bcd60e51b815260206004820152604160248201527f436f6d6d756e6974793a3a636f6e7374727563746f723a206d6178436c61696d60448201527f206d7573742062652067726561746572207468616e20636c61696d416d6f756e6064820152601d60fa1b608482015260a4016107bc565b60fc5460ff546101035460fd5460fe54604080519586526020860194909452848401929092526060840152608083015260a0820187905260c0820186905260e0820185905261010082018490526101208201839052517fa19f450cd68c70f728b0c4b75befd202ea5ebb1ae78b6aca47365934b5008750918190036101400190a160fc85905561010054610d0690849061401d565b610d10908561403c565b60ff556101039290925560fd5560fe555050565b6097546001600160a01b0316331480610dba575061010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190613bcd565b610e1b5760405162461bcd60e51b815260206004820152602c60248201527f436f6d6d756e6974793a204e4f545f4f574e45525f4f525f414d42415353414460448201526b4f525f4f525f454e5449545960a01b60648201526084016107bc565b61010d546040518291907f6672b7064fe522fa09a8078f6d967272e0a379beb2270817417c9f023251b65790600090a361010d55565b6001600160a01b0381163314610ec15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107bc565b610b23828261318d565b600054610100900460ff16610ee65760005460ff1615610eea565b303b155b610f4d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bc565b600054610100900460ff16158015610f6f576000805461ffff19166101011790555b858711610ff75760405162461bcd60e51b815260206004820152604a60248201527f436f6d6d756e6974793a3a696e697469616c697a653a2062617365496e74657260448201527f76616c206d7573742062652067726561746572207468616e20696e6372656d656064820152691b9d125b9d195c9d985b60b21b608482015260a4016107bc565b89891161106e576040805162461bcd60e51b81526020600482015260248101919091527f436f6d6d756e6974793a3a696e697469616c697a653a206d6178436c61696d2060448201527f6d7573742062652067726561746572207468616e20636c61696d416d6f756e7460648201526084016107bc565b838511156110f45760405162461bcd60e51b815260206004820152604760248201527f436f6d6d756e6974793a3a696e697469616c697a653a206d696e5472616e636860448201527f652073686f756c64206e6f742062652067726561746572207468616e206d61786064820152665472616e63686560c81b608482015260a4016107bc565b6110fc6131f4565b611104613233565b61110c61326a565b60fc8a905560fd87905560fe86905560ff89905561010485905561010584905561010780546001600160a01b03199081166001600160a01b0385161790915561010880543392168217905561010389905561010d84905560fb805460ff1916905561117690612f97565b61118e6000805160206140f383398151915280613299565b6111a66000805160206140f3833981519152336132e4565b604051339081907f05a4006f300442cf8b7fdb885f5ee958812020bffb5c5a8e655fde64e5f987ed90600090a38a516000905b80821015611223576112118d838151811061120457634e487b7160e01b600052603260045260246000fd5b60200260200101516109a9565b8161121b81614096565b9250506111d9565b50508015611237576000805461ff00191690555b5050505050505050505050565b6001336000908152610109602052604090205460ff16600381111561127957634e487b7160e01b600052602160045260246000fd5b146112c65760405162461bcd60e51b815260206004820181905260248201527f436f6d6d756e6974793a204e4f545f56414c49445f42454e454649434941525960448201526064016107bc565b600260c95414156112e95760405162461bcd60e51b81526004016107bc90613f3e565b600260c9553360009081526101096020526040902060fb5460ff16156113215760405162461bcd60e51b81526004016107bc90613f1e565b4361132b3361204e565b11156113795760405162461bcd60e51b815260206004820152601960248201527f436f6d6d756e6974793a3a636c61696d3a204e4f545f5945540000000000000060448201526064016107bc565b60ff548160020154106113e35760405162461bcd60e51b815260206004820152602c60248201527f436f6d6d756e6974793a3a636c61696d3a20416c726561647920636c61696d6560448201526b642065766572797468696e6760a01b60648201526084016107bc565b6000816002015460ff546113f7919061403c565b60fc54111561141757816002015460ff54611412919061403c565b61141b565b60fc545b9050808260020160008282546114319190613fe5565b909155505060018201805490600061144883614096565b909155505043600383015561147033826114606108b3565b6001600160a01b031691906132ee565b60405181815233907fd54e03b214b3e8c17e98044f98554b6f1b18dd2a3163a2619afea7e9b2a6eb97906020015b60405180910390a25050600160c955565b6114c76000805160206140f383398151915233612023565b6114e35760405162461bcd60e51b81526004016107bc90613ea3565b600260c95414156115065760405162461bcd60e51b81526004016107bc90613f3e565b600260c95560fb5460ff161561152e5760405162461bcd60e51b81526004016107bc90613f1e565b80516000905b808210156116e4576000610109600085858151811061156357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209050600060038111156115ae57634e487b7160e01b600052602160045260246000fd5b815460ff1660038111156115d257634e487b7160e01b600052602160045260246000fd5b146115dd57506116d2565b6115e8816001613356565b43816003018190555061162d84848151811061161457634e487b7160e01b600052603260045260246000fd5b602002602001015161010a6135d290919063ffffffff16565b5061166984848151811061165157634e487b7160e01b600052603260045260246000fd5b602002602001015166b1a2bc2ec500006114606108b3565b83838151811061168957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316336001600160a01b03167fbb39c36a7502b7256e1a687254146a9a2ea7b146c77cb9e40eb0e2b8793781e160405160405180910390a3505b816116dc81614096565b925050611534565b5050600160c95550565b6117066000805160206140f383398151915233612023565b6117225760405162461bcd60e51b81526004016107bc90613ea3565b6001600160a01b0381166000908152610109602052604090206001815460ff16600381111561176157634e487b7160e01b600052602160045260246000fd5b148061179057506002815460ff16600381111561178e57634e487b7160e01b600052602160045260246000fd5b145b6117ea5760405162461bcd60e51b815260206004820152602560248201527f436f6d6d756e6974793a3a72656d6f766542656e65666963696172793a204e4f6044820152641517d6515560da1b60648201526084016107bc565b6117f5816003613356565b6040516001600160a01b0383169033907f1a6590bd0cabbfcc7c86bef99e1034054e179905cfcc294598fcd426c092244290600090a35050565b6097546001600160a01b031633146118595760405162461bcd60e51b81526004016107bc90613e6e565b61186360006135e7565b565b600061078c61010a83613639565b60006101035461010054611887919061401d565b60ff5461094e9190613fe5565b6097546001600160a01b031633146118be5760405162461bcd60e51b81526004016107bc90613e6e565b610107546040516001600160a01b038084169216907f0d6a84e94da4b619dd0d993b5689ec82db4b1095da99ee0f3e7bb046c647e6ad90600090a361010780546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b031633146119465760405162461bcd60e51b81526004016107bc90613e6e565b61010860009054906101000a90046001600160a01b03166001600160a01b0316631fccf6726040518163ffffffff1660e01b815260040160206040518083038186803b15801561199557600080fd5b505afa1580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd9190613ab4565b6001600160a01b0316826001600160a01b03161480611ae9575061010860009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3657600080fd5b505afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190613ab4565b6040516319f3736160e01b81526001600160a01b03848116600483015291909116906319f373619060240160206040518083038186803b158015611ab157600080fd5b505afa158015611ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae99190613bcd565b611b435760405162461bcd60e51b815260206004820152602560248201527f436f6d6d756e6974793a3a757064617465546f6b656e3a20496e76616c6964206044820152643a37b5b2b760d91b60648201526084016107bc565b60018151118015611b945750611b576108b3565b6001600160a01b031681600081518110611b8157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b8015611be55750816001600160a01b03168160018351611bb4919061403c565b81518110611bd257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b611c465760405162461bcd60e51b815260206004820152602c60248201527f436f6d6d756e6974793a3a757064617465546f6b656e3a20696e76616c69642060448201526b0caf0c6d0c2dccecaa0c2e8d60a31b60648201526084016107bc565b6000611c506108b3565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015611c9157600080fd5b505afa158015611ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc99190613d2b565b9050611cd36108b3565b6001600160a01b031663095ea7b361010860009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3057600080fd5b505afa158015611d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d689190613ab4565b6001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190613ab4565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b158015611e2057600080fd5b505af1158015611e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e589190613bcd565b5061010860009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea857600080fd5b505afa158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee09190613ab4565b6001600160a01b031663735de9f76040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1857600080fd5b505afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f509190613ab4565b6001600160a01b0316635c11d7958260008530611f6f42610e10613fe5565b6040518663ffffffff1660e01b8152600401611f8f959493929190613f75565b600060405180830381600087803b158015611fa957600080fd5b505af1158015611fbd573d6000803e3d6000fd5b505061010c546040516001600160a01b03878116945090911691507f0b1186973f810894b87ab0bfbee422fddcaad21b46dc705a561451bbb6bac11790600090a3505061010c80546001600160a01b0319166001600160a01b0392909216919091179055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061205982612735565b6001600160a01b0383166000908152610109602052604090206003015461078c9190613fe5565b6001600160a01b03811660009081526101096020526040812090815460ff1660038111156120be57634e487b7160e01b600052602160045260246000fd5b146121315760405162461bcd60e51b815260206004820152603a60248201527f436f6d6d756e6974793a3a62656e65666963696172794a6f696e46726f6d4d6960448201527f6772617465643a2042656e65666963696172792065786973747300000000000060648201526084016107bc565b610107546040805163c041fdc560e01b815290516000926001600160a01b03169163c041fdc5916004808301926020929190829003018186803b15801561217757600080fd5b505afa15801561218b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121af9190613ab4565b6001600160a01b031614156122705761010754604051630156773960e01b81526001600160a01b038481166004830152600092839283928392169063015677399060240160806040518083038186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122439190613cea565b93509350935093506122558585613356565b6001850192909255600384019190915560028301555061261b565b6101075460405163a8f3e06360e01b81526001600160a01b03848116600483015290911690600090829063a8f3e06390602401602060405180830381600087803b1580156122bd57600080fd5b505af11580156122d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f59190613d2b565b604051630156773960e01b81526001600160a01b03868116600483015291925061239e91859190851690630156773990602401602060405180830381600087803b15801561234257600080fd5b505af1158015612356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237a9190613d2b565b600381111561239957634e487b7160e01b600052602160045260246000fd5b613356565b604051635911706160e11b81526001600160a01b0385811660048301526000919084169063b222e0c290602401602060405180830381600087803b1580156123e557600080fd5b505af11580156123f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241d9190613d2b565b9050612427610964565b6124319083613fe5565b8110612469576005612441610964565b61244b848461403c565b612455919061403c565b61245f9190613ffd565b6003850155612471565b600060038501555b60405163c884ef8360e01b81526001600160a01b03868116600483015284169063c884ef8390602401602060405180830381600087803b1580156124b457600080fd5b505af11580156124c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ec9190613d2b565b84600201819055506000836001600160a01b0316630e5b7c536040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561253157600080fd5b505af1158015612545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125699190613d2b565b905080831061260e57836001600160a01b031663597be18b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156125ad57600080fd5b505af11580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e59190613d2b565b6125ef828561403c565b6125f99190613ffd565b612604906001613fe5565b6001860155612616565b600060018601555b505050505b61262761010a836135d2565b506040516001600160a01b038316907f505fe088fef0d1fb451ccfed842b55a86af1ee6208502f4bc3327dcb9032082990600090a25050565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b1580156126aa57600080fd5b505afa1580156126be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e29190613bcd565b6126fe5760405162461bcd60e51b81526004016107bc90613e2b565b60fb805460ff1916905560405133907f4e50048c25972c85ad169c2302967f1e633e8dc6108d6aca51a90d2a59d4934d90600090a2565b6001600160a01b03811660009081526101096020526040812060018101546127605750600092915050565b60fe5460018260010154612774919061403c565b61277e919061401d565b60fd5461278b9190613fe5565b9392505050565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b1580156127dc57600080fd5b505afa1580156127f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128149190613bcd565b6128305760405162461bcd60e51b81526004016107bc90613e2b565b6128486000805160206140f383398151915282612023565b6128bc576040805162461bcd60e51b81526020600482015260248101919091527f436f6d6d756e6974793a3a72656d6f76654d616e616765723a2054686973206160448201527f63636f756e7420646f65736e27742068617665206d616e6167657220726f6c6560648201526084016107bc565b610108546001600160a01b038281169116141561294f5760405162461bcd60e51b8152602060048201526044602482018190527f436f6d6d756e6974793a3a72656d6f76654d616e616765723a20596f75206172908201527f65206e6f7420616c6c6f7720746f2072656d6f766520636f6d6d756e697479416064820152633236b4b760e11b608482015260a4016107bc565b6129676000805160206140f38339815191528261318d565b6040516001600160a01b0382169033907f3e902a6ee93dd5b2d48bd1009c7701a481be512b1ef73dbed2f95ea44c59ea8890600090a350565b6129b86000805160206140f383398151915233612023565b6129d45760405162461bcd60e51b81526004016107bc90613ea3565b60fb5460ff16156129f75760405162461bcd60e51b81526004016107bc90613f1e565b61010860009054906101000a90046001600160a01b03166001600160a01b031663174a71d76040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a4857600080fd5b505af1158015612a5c573d6000803e3d6000fd5b50504361010655505060405133907f16a8b794d4e2ed6ffef50d78af3d4372ce4bfe8a399bfc23f59b7832ee47539090600090a2565b6097546001600160a01b03163314612abc5760405162461bcd60e51b81526004016107bc90613e6e565b806101016000828254612acf9190613fe5565b909155505050565b6097546001600160a01b03163314612b015760405162461bcd60e51b81526004016107bc90613e6e565b600260c9541415612b245760405162461bcd60e51b81526004016107bc90613f3e565b600260c955612b3d6001600160a01b03841683836132ee565b816001600160a01b0316836001600160a01b03167f9b035625e569d1d2bf54830a290aefba7ab11610ba8490871dc62b86b63a895683604051612b8291815260200190565b60405180910390a35050600160c95550565b612bac6000805160206140f383398151915233612023565b612bc85760405162461bcd60e51b81526004016107bc90613ea3565b60fb5460ff1615612beb5760405162461bcd60e51b81526004016107bc90613f1e565b6001600160a01b0381166000908152610109602052604090206001815460ff166003811115612c2a57634e487b7160e01b600052602160045260246000fd5b14612c835760405162461bcd60e51b815260206004820152602360248201527f436f6d6d756e6974793a3a6c6f636b42656e65666963696172793a204e4f545f60448201526216515560ea1b60648201526084016107bc565b612c8e816002613356565b6040516001600160a01b0383169033907f2b9ef93c7856b47a1b624fa3fcc4b651d388dd6d16327f3ad22b05f3da8b0f1590600090a35050565b612ce06000805160206140f383398151915233612023565b612cfc5760405162461bcd60e51b81526004016107bc90613ea3565b60fb5460ff1615612d1f5760405162461bcd60e51b81526004016107bc90613f1e565b6001600160a01b0381166000908152610109602052604090206002815460ff166003811115612d5e57634e487b7160e01b600052602160045260246000fd5b14612db95760405162461bcd60e51b815260206004820152602560248201527f436f6d6d756e6974793a3a756e6c6f636b42656e65666963696172793a204e4f6044820152641517d6515560da1b60648201526084016107bc565b612dc4816001613356565b6040516001600160a01b0383169033907fa589fb4f2925123e7a030dd6bbe76be46a03f8ce0ea53a78dbb3383c7797db2c90600090a35050565b6097546001600160a01b03163314612e285760405162461bcd60e51b81526004016107bc90613e6e565b610108546040516001600160a01b038084169216907fdd8d3b7b0badfc5d636d48e71e28015b4b8554b64d2cffba6f0a90bf7693ec0090600090a361010880546001600160a01b0319166001600160a01b038316908117909155610ab2906109a9565b60405162461bcd60e51b815260206004820152603b60248201527f436f6d6d756e6974793a3a7265766f6b65526f6c653a20596f7520617265206e60448201527f6f7420616c6c6f7720746f207573652074686973206d6574686f64000000000060648201526084016107bc565b600260c9541415612f1c5760405162461bcd60e51b81526004016107bc90613f3e565b600260c955612f40823083612f2f6108b3565b6001600160a01b0316929190613645565b806101026000828254612f539190613fe5565b909155505060405181815233907f0553260a2e46b0577270d8992db02d30856ca880144c72d6e9503760946aef139060200161149e565b600061094e61010a613683565b6097546001600160a01b03163314612fc15760405162461bcd60e51b81526004016107bc90613e6e565b6001600160a01b0381166130265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107bc565b610ab2816135e7565b61010854604051636b0de23f60e01b81523060048201523360248201526001600160a01b0390911690636b0de23f9060440160206040518083038186803b15801561307957600080fd5b505afa15801561308d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b19190613bcd565b6130cd5760405162461bcd60e51b81526004016107bc90613e2b565b60fb805460ff1916600117905560405133907fe1e6bc10311f2f958d6cd2d0ab7308c32089aa1acb8ab11a2ccb60028e332bd090600090a2565b6131118282612023565b610b235760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556131493390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6131978282612023565b15610b235760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1661321b5760405162461bcd60e51b81526004016107bc90613ed3565b61322361368d565b61322b61368d565b61186361368d565b600054610100900460ff1661325a5760405162461bcd60e51b81526004016107bc90613ed3565b61326261368d565b6118636136b4565b600054610100900460ff166132915760405162461bcd60e51b81526004016107bc90613ed3565b6118636136e4565b600082815260656020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610b238282613107565b6040516001600160a01b03831660248201526044810182905261335190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613712565b505050565b80600381111561337657634e487b7160e01b600052602160045260246000fd5b825460ff16600381111561339a57634e487b7160e01b600052602160045260246000fd5b14156133a4575050565b60018160038111156133c657634e487b7160e01b600052602160045260246000fd5b14156135405760fc546101035460ff546133e0919061403c565b101561344c5760405162461bcd60e51b815260206004820152603560248201527f436f6d6d756e6974793a3a5f6368616e676542656e656669636961727953746160448201527474653a204d617820636c61696d20746f6f206c6f7760581b60648201526084016107bc565b61010d541580613461575061010d5461010054105b61350a5760405162461bcd60e51b815260206004820152606860248201527f436f6d6d756e6974793a3a5f6368616e676542656e656669636961727953746160448201527f74653a205468697320636f6d6d756e697479206861732072656163686564207460648201527f6865206d6178696d756d206e756d626572206f662076616c69642062656e6566608482015267696369617269657360c01b60a482015260c4016107bc565b610100805490600061351b83614096565b91905055506101035460ff6000828254613535919061403c565b9091555061359d9050565b6001825460ff16600381111561356657634e487b7160e01b600052602160045260246000fd5b141561359d57610100805490600061357d8361407f565b91905055506101035460ff60008282546135979190613fe5565b90915550505b81548190839060ff191660018360038111156135c957634e487b7160e01b600052602160045260246000fd5b02179055505050565b600061278b836001600160a01b0384166137e4565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061278b8383613833565b6040516001600160a01b038085166024830152831660448201526064810182905261367d9085906323b872dd60e01b9060840161331a565b50505050565b600061078c825490565b600054610100900460ff166118635760405162461bcd60e51b81526004016107bc90613ed3565b600054610100900460ff166136db5760405162461bcd60e51b81526004016107bc90613ed3565b611863336135e7565b600054610100900460ff1661370b5760405162461bcd60e51b81526004016107bc90613ed3565b600160c955565b6000613767826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661386b9092919063ffffffff16565b80519091501561335157808060200190518101906137859190613bcd565b6133515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107bc565b600081815260018301602052604081205461382b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561078c565b50600061078c565b600082600001828154811061385857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b606061387a8484600085613882565b949350505050565b6060824710156138e35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107bc565b843b6139315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107bc565b600080866001600160a01b0316858760405161394d9190613d9e565b60006040518083038185875af1925050503d806000811461398a576040519150601f19603f3d011682016040523d82523d6000602084013e61398f565b606091505b509150915061399f8282866139aa565b979650505050505050565b606083156139b957508161278b565b8251156139c95782518084602001fd5b8160405162461bcd60e51b81526004016107bc9190613df8565b80356139ee816140dd565b919050565b600082601f830112613a03578081fd5b8135602067ffffffffffffffff80831115613a2057613a206140c7565b8260051b604051601f19603f83011681018181108482111715613a4557613a456140c7565b60405284815283810192508684018288018501891015613a63578687fd5b8692505b85831015613a8c57613a78816139e3565b845292840192600192909201918401613a67565b50979650505050505050565b600060208284031215613aa9578081fd5b813561278b816140dd565b600060208284031215613ac5578081fd5b815161278b816140dd565b60008060408385031215613ae2578081fd5b8235613aed816140dd565b946020939093013593505050565b600060208284031215613b0c578081fd5b813567ffffffffffffffff811115613b22578182fd5b61387a848285016139f3565b6000806000806000806000806000806101408b8d031215613b4d578586fd5b8a3567ffffffffffffffff811115613b63578687fd5b613b6f8d828e016139f3565b9a505060208b0135985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013591506101208b0135613bba816140dd565b809150509295989b9194979a5092959850565b600060208284031215613bde578081fd5b8151801515811461278b578182fd5b600060208284031215613bfe578081fd5b5035919050565b60008060408385031215613c17578182fd5b823591506020830135613c29816140dd565b809150509250929050565b600060208284031215613c45578081fd5b81356001600160e01b03198116811461278b578182fd5b600080600060608486031215613c70578081fd5b8335613c7b816140dd565b92506020840135613c8b816140dd565b929592945050506040919091013590565b60008060408385031215613cae578182fd5b8235613cb9816140dd565b9150602083013567ffffffffffffffff811115613cd4578182fd5b613ce0858286016139f3565b9150509250929050565b60008060008060808587031215613cff578182fd5b845160048110613d0d578283fd5b60208601516040870151606090970151919890975090945092505050565b600060208284031215613d3c578081fd5b5051919050565b60008060408385031215613d55578182fd5b50508035926020909101359150565b600080600080600060a08688031215613d7b578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008251613db0818460208701614053565b9190910192915050565b6080810160048610613ddc57634e487b7160e01b600052602160045260246000fd5b9481526020810193909352604083019190915260609091015290565b6020815260008251806020840152613e17816040850160208701614053565b601f01601f19169190910160400192915050565b60208082526023908201527f436f6d6d756e6974793a204e4f545f414d4241535341444f525f4f525f454e5460408201526249545960e81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526016908201527521b7b6b6bab734ba3c9d102727aa2fa6a0a720a3a2a960511b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600690820152651313d0d2d15160d21b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613fc45784516001600160a01b031683529383019391830191600101613f9f565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115613ff857613ff86140b1565b500190565b60008261401857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614037576140376140b1565b500290565b60008282101561404e5761404e6140b1565b500390565b60005b8381101561406e578181015183820152602001614056565b8381111561367d5750506000910152565b60008161408e5761408e6140b1565b506000190190565b60006000198214156140aa576140aa6140b1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ab257600080fdfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220bcc65317a57f6d3196691254ee4a18d9feaea3c2bfc914440f5fca740a32c57864736f6c63430008040033",
  "devdoc": {
    "events": {
      "BeneficiaryAdded(address,address)": {
        "params": {
          "beneficiary": "Address of the beneficiary that has been added",
          "manager": "Address of the manager that triggered the event"
        }
      },
      "BeneficiaryClaim(address,uint256)": {
        "params": {
          "amount": "Amount of the claim",
          "beneficiary": "Address of the beneficiary that has claimed"
        }
      },
      "BeneficiaryJoined(address)": {
        "params": {
          "beneficiary": "Address of the beneficiary"
        }
      },
      "BeneficiaryLocked(address,address)": {
        "params": {
          "beneficiary": "Address of the beneficiary that has been locked",
          "manager": "Address of the manager that triggered the event"
        }
      },
      "BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "newBaseInterval": "New baseInterval value",
          "newClaimAmount": "New claimAmount value",
          "newDecreaseStep": "New decreaseStep value",
          "newIncrementInterval": "New incrementInterval value For further information regarding each parameter, see *Community* smart contract initialize method.",
          "newMaxClaim": "New maxClaim value",
          "oldBaseInterval": "Old baseInterval value",
          "oldClaimAmount": "Old claimAmount value",
          "oldDecreaseStep": "Old decreaseStep value",
          "oldIncrementInterval": "Old incrementInterval value",
          "oldMaxClaim": "Old maxClaim value"
        }
      },
      "BeneficiaryRemoved(address,address)": {
        "params": {
          "beneficiary": "Address of the beneficiary that has been removed",
          "manager": "Address of the manager that triggered the event"
        }
      },
      "BeneficiaryUnlocked(address,address)": {
        "params": {
          "beneficiary": "Address of the beneficiary that has been unlocked",
          "manager": "Address of the manager that triggered the event"
        }
      },
      "CommunityAdminUpdated(address,address)": {
        "params": {
          "newCommunityAdmin": "New communityAdmin address",
          "oldCommunityAdmin": "Old communityAdmin address"
        }
      },
      "CommunityLocked(address)": {
        "params": {
          "manager": "Address of the manager that triggered the event"
        }
      },
      "CommunityParamsUpdated(uint256,uint256,uint256,uint256)": {
        "params": {
          "newMaxTranche": "New maxTranche value For further information regarding each parameter, see *Community* smart contract initialize method.",
          "newMinTranche": "New minTranche value",
          "oldMaxTranche": "Old maxTranche value",
          "oldMinTranche": "Old minTranche value"
        }
      },
      "CommunityUnlocked(address)": {
        "params": {
          "manager": "Address of the manager that triggered the event"
        }
      },
      "Donate(address,uint256)": {
        "params": {
          "amount": "Amount of the donation",
          "donor": "Address of the donor"
        }
      },
      "FundsRequested(address)": {
        "params": {
          "manager": "Address of the manager that triggered the event"
        }
      },
      "ManagerAdded(address,address)": {
        "params": {
          "account": "Address of the manager that has been added",
          "manager": "Address of the manager that triggered the event                          or address of the CommunityAdmin if it's first manager"
        }
      },
      "ManagerRemoved(address,address)": {
        "params": {
          "account": "Address of the manager that has been removed",
          "manager": "Address of the manager that triggered the event"
        }
      },
      "MaxBeneficiariesUpdated(uint256,uint256)": {
        "params": {
          "newMaxBeneficiaries": "New maxBeneficiaries value",
          "oldMaxBeneficiaries": "Old maxBeneficiaries value"
        }
      },
      "PreviousCommunityUpdated(address,address)": {
        "params": {
          "newPreviousCommunity": "New previousCommunity address",
          "oldPreviousCommunity": "Old previousCommunity address"
        }
      },
      "TokenUpdated(address,address)": {
        "params": {
          "newTokenAddress": "New token address",
          "oldTokenAddress": "Old token address"
        }
      },
      "TransferERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount of the transaction",
          "to": "Address of the receiver",
          "token": "ERC20 token address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addBeneficiaries(address[])": {
        "params": {
          "_beneficiaryAddresses": "addresses of the beneficiaries to be added"
        }
      },
      "addManager(address)": {
        "params": {
          "_account": "address of the manager to be added"
        }
      },
      "addTreasuryFunds(uint256)": {
        "params": {
          "_amount": "amount to be added to treasuryFunds"
        }
      },
      "beneficiaryListAt(uint256)": {
        "params": {
          "index_": "index value"
        },
        "returns": {
          "_0": "address of the beneficiary"
        }
      },
      "claim()": {
        "details": "Transfers tokens to a valid beneficiary"
      },
      "claimCooldown(address)": {
        "params": {
          "_beneficiaryAddress": "address of the beneficiary"
        },
        "returns": {
          "_0": "uint256 number of block when the beneficiary can claim"
        }
      },
      "donate(address,uint256)": {
        "params": {
          "_amount": "amount to be donated",
          "_sender": "address of the sender"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_baseInterval": "Base interval to start claiming",
          "_claimAmount": "Base amount to be claim by the beneficiary",
          "_decreaseStep": "Value decreased from maxClaim each time a beneficiary is added",
          "_incrementInterval": "Increment interval used in each claim",
          "_managers": "Community's initial managers.                             Will be able to add others",
          "_maxBeneficiaries": "Maximum valid beneficiaries number",
          "_maxClaim": "Limit that a beneficiary can claim in total",
          "_maxTranche": "Maximum amount that the community will receive when requesting funds",
          "_minTranche": "Minimum amount that the community will receive when requesting funds",
          "_previousCommunity": "Previous smart contract address of community"
        }
      },
      "lastInterval(address)": {
        "params": {
          "_beneficiaryAddress": "address of the beneficiary"
        },
        "returns": {
          "_0": "uint256 number of blocks for the lastInterval"
        }
      },
      "lockBeneficiary(address)": {
        "params": {
          "_beneficiaryAddress": "address of the beneficiary to be locked"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeBeneficiary(address)": {
        "params": {
          "_beneficiaryAddress": "address of the beneficiary to be removed"
        }
      },
      "removeManager(address)": {
        "params": {
          "_account": "address of the manager to be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transfer(address,address,uint256)": {
        "params": {
          "_amount": "amount of the transaction",
          "_to": "address of the receiver",
          "_token": "address of the ERC20 token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockBeneficiary(address)": {
        "params": {
          "_beneficiaryAddress": "address of the beneficiary to be unlocked"
        }
      },
      "updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_baseInterval": "base interval to start claiming",
          "_claimAmount": "base amount to be claim by the beneficiary",
          "_decreaseStep": "value decreased from maxClaim each time a is beneficiary added",
          "_incrementInterval": "increment interval used in each claim",
          "_maxClaim": "limit that a beneficiary can claim  in total"
        }
      },
      "updateCommunityAdmin(address)": {
        "params": {
          "_newCommunityAdmin": "address of the new communityAdmin"
        }
      },
      "updateCommunityParams(uint256,uint256)": {
        "params": {
          "_maxTranche": "maximum amount that the community will receive when requesting funds",
          "_minTranche": "minimum amount that the community will receive when requesting funds"
        }
      },
      "updateMaxBeneficiaries(uint256)": {
        "params": {
          "_newMaxBeneficiaries": "new _maxBeneficiaries value"
        }
      },
      "updatePreviousCommunity(address)": {
        "params": {
          "_newPreviousCommunity": "address of the new previousCommunity"
        }
      },
      "updateToken(address,address[])": {
        "params": {
          "_exchangePath": "path used by uniswap to exchange the current tokens to the new tokens",
          "_newToken": "new token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BeneficiaryAdded(address,address)": {
        "notice": "Triggered when a beneficiary has been added"
      },
      "BeneficiaryClaim(address,uint256)": {
        "notice": "Triggered when a beneficiary has claimed"
      },
      "BeneficiaryJoined(address)": {
        "notice": "Triggered when a beneficiary from previous community has joined in the current community"
      },
      "BeneficiaryLocked(address,address)": {
        "notice": "Triggered when a beneficiary has been locked"
      },
      "BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Triggered when beneficiary params has been updated"
      },
      "BeneficiaryRemoved(address,address)": {
        "notice": "Triggered when a beneficiary has been removed"
      },
      "BeneficiaryUnlocked(address,address)": {
        "notice": "Triggered when a beneficiary has been unlocked"
      },
      "CommunityAdminUpdated(address,address)": {
        "notice": "Triggered when communityAdmin has been updated"
      },
      "CommunityLocked(address)": {
        "notice": "Triggered when a community has been locked"
      },
      "CommunityParamsUpdated(uint256,uint256,uint256,uint256)": {
        "notice": "Triggered when community params has been updated"
      },
      "CommunityUnlocked(address)": {
        "notice": "Triggered when a community has been unlocked"
      },
      "Donate(address,uint256)": {
        "notice": "Triggered when someone has donated token"
      },
      "FundsRequested(address)": {
        "notice": "Triggered when a manager has requested funds for community"
      },
      "ManagerAdded(address,address)": {
        "notice": "Triggered when a manager has been added"
      },
      "ManagerRemoved(address,address)": {
        "notice": "Triggered when a manager has been removed"
      },
      "MaxBeneficiariesUpdated(uint256,uint256)": {
        "notice": "Triggered when maxBeneficiaries has been updated"
      },
      "PreviousCommunityUpdated(address,address)": {
        "notice": "Triggered when previousCommunity has been updated"
      },
      "TokenUpdated(address,address)": {
        "notice": "Triggered when token address has been updated"
      },
      "TransferERC20(address,address,uint256)": {
        "notice": "Triggered when an amount of an ERC20 has been transferred from this contract to an address"
      }
    },
    "kind": "user",
    "methods": {
      "addBeneficiaries(address[])": {
        "notice": "Adds new beneficiaries"
      },
      "addManager(address)": {
        "notice": "Adds a new manager"
      },
      "addTreasuryFunds(uint256)": {
        "notice": "Increases the treasuryFunds value Used by communityAdmin after an amount of tokens are sent from the treasury"
      },
      "beneficiaryJoinFromMigrated(address)": {
        "notice": "Allows a beneficiary from the previousCommunity to join in this community"
      },
      "beneficiaryListAt(uint256)": {
        "notice": "Returns an address from the beneficiaryList"
      },
      "beneficiaryListLength()": {
        "notice": "Returns the length of the beneficiaryList"
      },
      "cUSD()": {
        "notice": "Returns the cUSD contract address todo: to be removed, use token() instead"
      },
      "claimCooldown(address)": {
        "notice": "Returns the block number when a beneficiary can claim again"
      },
      "donate(address,uint256)": {
        "notice": "Transfers tokens from donor to this community Used by donationToCommunity method from DonationMiner contract"
      },
      "getInitialMaxClaim()": {
        "notice": "Returns the initial maxClaim"
      },
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "grantRole(bytes32,address)": {
        "notice": "Enforces managers to use addManager method"
      },
      "impactMarketAddress()": {
        "notice": "Returns the 0 address only used for backwards compatibility"
      },
      "initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "Used to initialize a new Community contract"
      },
      "lastInterval(address)": {
        "notice": "Returns the number of blocks that a beneficiary have to wait between claims"
      },
      "lock()": {
        "notice": "Locks the community"
      },
      "lockBeneficiary(address)": {
        "notice": "Locks a valid beneficiary"
      },
      "removeBeneficiary(address)": {
        "notice": "Remove an existing beneficiary"
      },
      "removeManager(address)": {
        "notice": "Remove an existing manager"
      },
      "requestFunds()": {
        "notice": "Requests treasury funds from the communityAdmin"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Enforces managers to use removeManager method"
      },
      "token()": {
        "notice": "Returns the address of the token used by this community"
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfers an amount of an ERC20 from this contract to an address"
      },
      "unlock()": {
        "notice": "Unlocks the community"
      },
      "unlockBeneficiary(address)": {
        "notice": "Unlocks a locked beneficiary"
      },
      "updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Updates beneficiary params"
      },
      "updateCommunityAdmin(address)": {
        "notice": "Updates the address of the communityAdmin"
      },
      "updateCommunityParams(uint256,uint256)": {
        "notice": "Updates params of a community"
      },
      "updateMaxBeneficiaries(uint256)": {
        "notice": "Updates maxBeneficiaries"
      },
      "updatePreviousCommunity(address)": {
        "notice": "Updates the address of the previousCommunity"
      },
      "updateToken(address,address[])": {
        "notice": "Updates token address"
      }
    },
    "notice": "Welcome to the Community contract. For each community there will be one proxy contract deployed by CommunityAdmin. The implementation of the proxy is this contract. This enable us to save tokens on the contract itself, and avoid the problems of having everything in one single contract. Each community has it's own members and and managers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 542,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 545,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1068,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1317,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 736,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 779,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11477,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "locked",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 11480,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "claimAmount",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 11483,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "baseInterval",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 11486,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "incrementInterval",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 11489,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "maxClaim",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 11492,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "validBeneficiaryCount",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 11495,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "treasuryFunds",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 11498,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "privateFunds",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 11501,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "decreaseStep",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 11504,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "minTranche",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 11507,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "maxTranche",
        "offset": 0,
        "slot": "261",
        "type": "t_uint256"
      },
      {
        "astId": 11510,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "lastFundRequest",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 11514,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "previousCommunity",
        "offset": 0,
        "slot": "263",
        "type": "t_contract(ICommunity)11847"
      },
      {
        "astId": 11518,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "communityAdmin",
        "offset": 0,
        "slot": "264",
        "type": "t_contract(ICommunityAdmin)12077"
      },
      {
        "astId": 11524,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "beneficiaries",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_address,t_struct(Beneficiary)11561_storage)"
      },
      {
        "astId": 11527,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "beneficiaryList",
        "offset": 0,
        "slot": "266",
        "type": "t_struct(AddressSet)5037_storage"
      },
      {
        "astId": 11537,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "_token",
        "offset": 0,
        "slot": "268",
        "type": "t_contract(IERC20)3447"
      },
      {
        "astId": 11540,
        "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
        "label": "maxBeneficiaries",
        "offset": 0,
        "slot": "269",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICommunity)11847": {
        "encoding": "inplace",
        "label": "contract ICommunity",
        "numberOfBytes": "20"
      },
      "t_contract(ICommunityAdmin)12077": {
        "encoding": "inplace",
        "label": "contract ICommunityAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3447": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(BeneficiaryState)11551": {
        "encoding": "inplace",
        "label": "enum ICommunity.BeneficiaryState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Beneficiary)11561_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICommunity.Beneficiary)",
        "numberOfBytes": "32",
        "value": "t_struct(Beneficiary)11561_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5037_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5036,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4736_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Beneficiary)11561_storage": {
        "encoding": "inplace",
        "label": "struct ICommunity.Beneficiary",
        "members": [
          {
            "astId": 11554,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BeneficiaryState)11551"
          },
          {
            "astId": 11556,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "claims",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11558,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11560,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "lastClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4736_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4731,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4735,
            "contract": "contracts/community/CommunityImplementation.sol:CommunityImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}