{
  "address": "0xF9163f95DF91ad103659cb7C8936Aceb63c7E410",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "name": "DonateInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldDonationMiner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDonationMiner",
          "type": "address"
        }
      ],
      "name": "DonationMinerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldLendingPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newLendingPool",
          "type": "address"
        }
      ],
      "name": "LendingPoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donateInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationMiner",
      "outputs": [
        {
          "internalType": "contract IDonationMiner",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "contract IDonationMiner",
          "name": "_donationMiner",
          "type": "address"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokenListAddresses",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "interest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "isToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositorListLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositorAddress",
          "type": "address"
        }
      ],
      "name": "tokenDepositor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaledBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenDepositorListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenListAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDonationMiner",
          "name": "_newDonationMiner",
          "type": "address"
        }
      ],
      "name": "updateDonationMiner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "_newLendingPool",
          "type": "address"
        }
      ],
      "name": "updateLendingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e12f1673c695eaa6320f3e5c6e493d9016144db6c8ae5477cce6f2c21df8b2d",
  "receipt": {
    "to": null,
    "from": "0xa34737409091eBD0726A3Ab5863Fc7Ee9243Edab",
    "contractAddress": "0xF9163f95DF91ad103659cb7C8936Aceb63c7E410",
    "transactionIndex": 2,
    "gasUsed": "2441472",
    "logsBloom": "0x
    "blockHash": "0x97489b9e4cef07d15e45226bbe6ae5fadfbfaff0a94e335213fa93417c299280",
    "transactionHash": "0x0e12f1673c695eaa6320f3e5c6e493d9016144db6c8ae5477cce6f2c21df8b2d",
    "logs": [],
    "blockNumber": 17620126,
    "cumulativeGasUsed": "3028356",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "97b94cf3a3290cd67b53d36394d9f1bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"DonateInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDonationMiner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDonationMiner\",\"type\":\"address\"}],\"name\":\"DonationMinerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLendingPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLendingPool\",\"type\":\"address\"}],\"name\":\"LendingPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationMiner\",\"outputs\":[{\"internalType\":\"contract IDonationMiner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract IDonationMiner\",\"name\":\"_donationMiner\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokenListAddresses\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositorListLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositorAddress\",\"type\":\"address\"}],\"name\":\"tokenDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenDepositorListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenListAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDonationMiner\",\"name\":\"_newDonationMiner\",\"type\":\"address\"}],\"name\":\"updateDonationMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"_newLendingPool\",\"type\":\"address\"}],\"name\":\"updateLendingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DepositAdded(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the deposit\",\"depositorAddress\":\"The address of the depositor that makes the deposit\",\"token\":\"ERC20 token address\"}},\"DonateInterest(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of the withdrawal\",\"depositorAddress\":\"The address of the depositor\",\"interest\":\"Interest earned (and donated to DonationMiner)\",\"token\":\"ERC20 token address\"}},\"DonationMinerUpdated(address,address)\":{\"params\":{\"newDonationMiner\":\"New donationMiner address\",\"oldDonationMiner\":\"Old donationMiner address\"}},\"LendingPoolUpdated(address,address)\":{\"params\":{\"newLendingPool\":\"New lendingPool address\",\"oldLendingPool\":\"Old lendingPool address\"}},\"TokenAdded(address)\":{\"params\":{\"tokenAddress\":\"Address of the token\"}},\"TokenRemoved(address)\":{\"params\":{\"tokenAddress\":\"Address of the token\"}},\"TreasuryUpdated(address,address)\":{\"params\":{\"newTreasury\":\"New treasury address\",\"oldTreasury\":\"Old treasury address\"}},\"Withdraw(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of the withdrawal\",\"depositorAddress\":\"The address of the depositor that makes the withdrawal\",\"interest\":\"Interest earned (and donated to DonationMiner)\",\"token\":\"ERC20 token address\"}}},\"kind\":\"dev\",\"methods\":{\"initialize(address,address,address,address[])\":{\"params\":{\"_lendingPool\":\"Address of the LendingPool\",\"_treasury\":\"Address of the Treasury\"}},\"isToken(address)\":{\"params\":{\"_tokenAddress\":\"token address to be checked\"},\"returns\":{\"_0\":\"bool true if the tokenAddress is an accepted token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenListAt(uint256)\":{\"params\":{\"_index\":\"index of the token\"},\"returns\":{\"_0\":\"address of the token\"}},\"tokenListLength()\":{\"returns\":{\"_0\":\"uint256 number of tokens\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDonationMiner(address)\":{\"params\":{\"_newDonationMiner\":\"address of new donationMiner contract\"}},\"updateLendingPool(address)\":{\"params\":{\"_newLendingPool\":\"address of the new LendingPool contract\"}},\"updateTreasury(address)\":{\"params\":{\"_newTreasury\":\"address of new treasury contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DepositAdded(address,address,uint256)\":{\"notice\":\"Triggered when an amount of an ERC20 has been deposited\"},\"DonateInterest(address,address,uint256,uint256)\":{\"notice\":\"Triggered when the interest of an amount of an ERC20 has been donated\"},\"DonationMinerUpdated(address,address)\":{\"notice\":\"Triggered when the donationMiner address has been updated\"},\"LendingPoolUpdated(address,address)\":{\"notice\":\"Triggered when LendingPool has been updated\"},\"TokenAdded(address)\":{\"notice\":\"Triggered when a token has been added\"},\"TokenRemoved(address)\":{\"notice\":\"Triggered when a token has been removed\"},\"TreasuryUpdated(address,address)\":{\"notice\":\"Triggered when the treasury address has been updated\"},\"Withdraw(address,address,uint256,uint256)\":{\"notice\":\"Triggered when an amount of an ERC20 has been withdrawn\"}},\"kind\":\"user\",\"methods\":{\"getVersion()\":{\"notice\":\"Returns the current implementation version\"},\"initialize(address,address,address,address[])\":{\"notice\":\"Used to initialize a new DonationMiner contract\"},\"isToken(address)\":{\"notice\":\"Returns if an address is an accepted token\"},\"tokenListAt(uint256)\":{\"notice\":\"Returns the address of a token from tokenList\"},\"tokenListLength()\":{\"notice\":\"Returns the number of tokens\"},\"updateDonationMiner(address)\":{\"notice\":\"Updates DonationMiner address\"},\"updateLendingPool(address)\":{\"notice\":\"Updates the LendingPool contract address\"},\"updateTreasury(address)\":{\"notice\":\"Updates Treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deposit/DepositImplementation.sol\":\"DepositImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x33b8603bfbef7f33d9308b79c79aa3db7eb19525fd1addd764285e834ca275d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ambassadors/interfaces/IAmbassadors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IAmbassadors {\\n    function getVersion() external pure returns(uint256);\\n    function isAmbassador(address _ambassador) external view returns (bool);\\n    function isAmbassadorOf(address _ambassador, address _community) external view returns (bool);\\n    function isEntityOf(address _ambassador, address _entityAddress) external view returns (bool);\\n    function isAmbassadorAt(address _ambassador, address _entityAddress) external view returns (bool);\\n\\n    function addEntity(address _entity) external;\\n    function removeEntity(address _entity) external;\\n    function replaceEntityAccount(address _entity, address _newEntity) external;\\n    function addAmbassador(address _ambassador) external;\\n    function removeAmbassador(address _ambassador) external;\\n    function replaceAmbassadorAccount(address _ambassador, address _newAmbassador) external;\\n    function replaceAmbassador(address _oldAmbassador, address _newAmbassador) external;\\n    function transferAmbassador(address _ambassador, address _toEntity, bool _keepCommunities) external;\\n    function transferCommunityToAmbassador(address _to, address _community) external;\\n    function setCommunityToAmbassador(address _ambassador, address _community) external;\\n    function removeCommunity(address _community) external;\\n}\\n\",\"keccak256\":\"0x18994047358b59b9925a303741d094f0543574874ff716b740a8165172c6ebf5\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ICommunityAdmin.sol\\\";\\n\\ninterface ICommunity {\\n    enum BeneficiaryState {\\n        NONE, //the beneficiary hasn't been added yet\\n        Valid,\\n        Locked,\\n        Removed,\\n        AddressChanged,\\n        Copied  //the beneficiary has been moved in a copy community\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryState state;  //beneficiary state\\n        uint256 claims;          //total number of claims\\n        uint256 claimedAmount;   //total amount of tokens received\\n                                 //(based on token ratios when there are more than one token)\\n        uint256 lastClaim;       //block number of the last claim\\n        mapping(address => uint256) claimedAmounts;\\n    }\\n\\n    struct TokenUpdates {\\n        address tokenAddress;    //address of the token\\n        uint256 ratio;           //ratio between maxClaim and previous token maxClaim\\n        uint256 startBlock;      //the number of the block from which the this token was \\\"active\\\"\\n    }\\n\\n    function initialize(\\n        address _tokenAddress,\\n        address[] memory _managers,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function getVersion() external pure returns(uint256);\\n    function previousCommunity() external view returns(ICommunity);\\n    function copyOf() external view returns(ICommunity);\\n    function copies() external view returns(address[] memory);\\n    function originalClaimAmount() external view returns(uint256);\\n    function claimAmount() external view returns(uint256);\\n    function baseInterval() external view returns(uint256);\\n    function incrementInterval() external view returns(uint256);\\n    function maxClaim() external view returns(uint256);\\n    function maxTotalClaim() external view returns(uint256);\\n    function validBeneficiaryCount() external view returns(uint);\\n    function maxBeneficiaries() external view returns(uint);\\n    function treasuryFunds() external view returns(uint);\\n    function privateFunds() external view returns(uint);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function cUSD() external view  returns(IERC20);\\n    function token() external view  returns(IERC20);\\n    function tokenList() external view returns(address[] memory);\\n    function locked() external view returns(bool);\\n    function beneficiaries(address _beneficiaryAddress) external view returns(\\n        BeneficiaryState state,\\n        uint256 claims,\\n        uint256 claimedAmount,\\n        uint256 lastClaim\\n    );\\n    function beneficiaryClaimedAmounts(address _beneficiaryAddress) external view\\n        returns (uint256[] memory claimedAmounts);\\n    function decreaseStep() external view returns(uint);\\n    function beneficiaryListAt(uint256 _index) external view returns (address);\\n    function impactMarketAddress() external pure returns (address);\\n    function beneficiaryListLength() external view returns (uint256);\\n    function minTranche() external view returns(uint256);\\n    function maxTranche() external view returns(uint256);\\n    function lastFundRequest() external view returns(uint256);\\n    function tokenUpdates(uint256 _index) external view returns (\\n        address tokenAddress,\\n        uint256 ratio,\\n        uint256 startBlock\\n    );\\n    function tokenUpdatesLength() external view returns (uint256);\\n    function isSelfFunding() external view returns (bool);\\n    function setBeneficiaryState(address _beneficiaryAddress, BeneficiaryState _state) external;\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updatePreviousCommunity(ICommunity _newPreviousCommunity) external;\\n    function updateBeneficiaryParams(\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function updateCommunityParams(\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateMaxBeneficiaries(uint256 _newMaxBeneficiaries) external;\\n    function updateToken(\\n        IERC20 _newToken,\\n        address[] calldata _exchangePath,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function donate(address _sender, uint256 _amount) external;\\n    function addTreasuryFunds(uint256 _amount) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function addManager(address _managerAddress) external;\\n    function removeManager(address _managerAddress) external;\\n    function addBeneficiary(address _beneficiaryAddress) external;\\n    function addBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function addBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function copyBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function lockBeneficiary(address _beneficiaryAddress) external;\\n    function lockBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function lockBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function unlockBeneficiary(address _beneficiaryAddress) external;\\n    function unlockBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function unlockBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function removeBeneficiary(address _beneficiaryAddress) external;\\n    function removeBeneficiaries(address[] memory _beneficiaryAddresses) external;\\n    function removeBeneficiariesUsingSignature(\\n        address[] memory _beneficiaryAddresses,\\n        uint256 _expirationTimestamp,\\n        bytes calldata _signature\\n    ) external;\\n    function changeBeneficiaryAddressByManager(address _oldBeneficiaryAddress, address _newBeneficiaryAddress) external;\\n    function changeBeneficiaryAddress(address _newBeneficiaryAddress) external;\\n    function claim() external;\\n    function lastInterval(address _beneficiaryAddress) external view returns (uint256);\\n    function claimCooldown(address _beneficiaryAddress) external view returns (uint256);\\n    function lock() external;\\n    function unlock() external;\\n    function requestFunds() external;\\n    function beneficiaryJoinFromMigrated(address _beneficiaryAddress) external;\\n    function getInitialMaxClaim() external view returns (uint256);\\n    function addCopy(ICommunity _copy) external;\\n    function copyCommunityDetails(ICommunity _originalCommunity) external;\\n}\\n\",\"keccak256\":\"0x4fc6761473d092fefa3b5ea636141421fa43f9f91cde5ad037fe4900af09bdbf\",\"license\":\"Apache-2.0\"},\"contracts/community/interfaces/ICommunityAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./ICommunity.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\\\";\\nimport \\\"../../ambassadors/interfaces/IAmbassadors.sol\\\";\\n\\ninterface ICommunityAdmin {\\n    enum CommunityState {\\n        NONE,\\n        Valid,\\n        Removed,\\n        Migrated\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function cUSD() external view returns(IERC20);\\n    function treasury() external view returns(ITreasury);\\n    function impactMarketCouncil() external view returns(IImpactMarketCouncil);\\n    function ambassadors() external view returns(IAmbassadors);\\n    function communityMiddleProxy() external view returns(address);\\n    function authorizedWalletAddress() external view returns(address);\\n    function minClaimAmountRatio() external view returns(uint256);\\n    function minClaimAmountRatioPrecision() external view returns(uint256);\\n    function communities(address _community) external view returns(CommunityState);\\n    function communityImplementation() external view returns(ICommunity);\\n    function communityProxyAdmin() external view returns(ProxyAdmin);\\n    function communityListAt(uint256 _index) external view returns (address);\\n    function communityListLength() external view returns (uint256);\\n    function treasurySafetyPercentage() external view returns (uint256);\\n    function treasuryMinBalance() external view returns (uint256);\\n    function isAmbassadorOrEntityOfCommunity(address _community, address _ambassadorOrEntity) external view returns (bool);\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateImpactMarketCouncil(IImpactMarketCouncil _newImpactMarketCouncil) external;\\n    function updateAmbassadors(IAmbassadors _newAmbassadors) external;\\n    function updateCommunityMiddleProxy(address _communityMiddleProxy) external;\\n    function updateCommunityImplementation(ICommunity _communityImplementation_) external;\\n    function updateAuthorizedWalletAddress(address _newSignerAddress) external;\\n    function updateMinClaimAmountRatio(uint256 _newMinClaimAmountRatio) external;\\n    function updateTreasurySafetyPercentage(uint256 _newTreasurySafetyPercentage) external;\\n    function updateTreasuryMinBalance(uint256 _newTreasuryMinBalance) external;\\n    function setCommunityToAmbassador(address _ambassador, ICommunity _communityAddress) external;\\n    function updateBeneficiaryParams(\\n        ICommunity _community,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function updateCommunityParams(\\n        ICommunity _community,\\n        uint256 _minTranche,\\n        uint256 _maxTranche\\n    ) external;\\n    function updateProxyImplementation(address _communityMiddleProxy, address _newLogic) external;\\n    function updateCommunityToken(\\n        ICommunity _community,\\n        IERC20 _newToken,\\n        address[] memory _exchangePath,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval\\n    ) external;\\n    function addCommunity(\\n        address _tokenAddress,\\n        address[] memory _managers,\\n        address _ambassador,\\n        uint256 _claimAmount,\\n        uint256 _maxClaim,\\n        uint256 _decreaseStep,\\n        uint256 _baseInterval,\\n        uint256 _incrementInterval,\\n        uint256 _minTranche,\\n        uint256 _maxTranche,\\n        uint256 _maxBeneficiaries\\n    ) external;\\n    function migrateCommunity(\\n        address[] memory _managers,\\n        ICommunity _previousCommunity\\n    ) external;\\n    function splitCommunity(\\n        ICommunity _community,\\n        uint256 _numberOfCopies,\\n        address _ambassador,\\n        address[] memory _managers\\n    ) external;\\n    function removeCommunity(ICommunity _community) external;\\n    function fundCommunity() external returns(uint256);\\n    function calculateCommunityTrancheAmount(ICommunity _community) external view returns (uint256);\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function transferFromCommunity(\\n        ICommunity _community,\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n    function getCommunityProxyImplementation(address _communityProxyAddress) external view returns(address);\\n}\\n\",\"keccak256\":\"0x528e15a75c6063ebe77e954d015d254569665fad2cdf97c6b01c14faa14ee486\",\"license\":\"Apache-2.0\"},\"contracts/deposit/DepositImplementation.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/DepositStorageV1.sol\\\";\\nimport \\\"../externalInterfaces/aave/IAToken.sol\\\";\\n\\ncontract DepositImplementation is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DepositStorageV1\\n{\\n    using SafeERC20Upgradeable for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Triggered when a token has been added\\n     *\\n     * @param tokenAddress        Address of the token\\n     */\\n    event TokenAdded(address indexed tokenAddress);\\n\\n    /**\\n     * @notice Triggered when a token has been removed\\n     *\\n     * @param tokenAddress        Address of the token\\n     */\\n    event TokenRemoved(address indexed tokenAddress);\\n\\n    /**\\n     * @notice Triggered when the treasury address has been updated\\n     *\\n     * @param oldTreasury             Old treasury address\\n     * @param newTreasury             New treasury address\\n     */\\n    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);\\n\\n    /**\\n     * @notice Triggered when the donationMiner address has been updated\\n     *\\n     * @param oldDonationMiner             Old donationMiner address\\n     * @param newDonationMiner             New donationMiner address\\n     */\\n    event DonationMinerUpdated(address indexed oldDonationMiner, address indexed newDonationMiner);\\n\\n    /**\\n     * @notice Triggered when LendingPool has been updated\\n     *\\n     * @param oldLendingPool   Old lendingPool address\\n     * @param newLendingPool   New lendingPool address\\n     */\\n    event LendingPoolUpdated(address indexed oldLendingPool, address indexed newLendingPool);\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been deposited\\n     *\\n     * @param depositorAddress    The address of the depositor that makes the deposit\\n     * @param token               ERC20 token address\\n     * @param amount              Amount of the deposit\\n     */\\n    event DepositAdded(address indexed depositorAddress, address indexed token, uint256 amount);\\n\\n    /**\\n     * @notice Triggered when an amount of an ERC20 has been withdrawn\\n     *\\n     * @param depositorAddress    The address of the depositor that makes the withdrawal\\n     * @param token               ERC20 token address\\n     * @param amount              Amount of the withdrawal\\n     * @param interest            Interest earned (and donated to DonationMiner)\\n     */\\n    event Withdraw(\\n        address indexed depositorAddress,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 interest\\n    );\\n\\n    /**\\n     * @notice Triggered when the interest of an amount of an ERC20 has been donated\\n     *\\n     * @param depositorAddress    The address of the depositor\\n     * @param token               ERC20 token address\\n     * @param amount              Amount of the withdrawal\\n     * @param interest            Interest earned (and donated to DonationMiner)\\n     */\\n    event DonateInterest(\\n        address indexed depositorAddress,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 interest\\n    );\\n\\n    /**\\n     * @notice Used to initialize a new DonationMiner contract\\n     *\\n     * @param _treasury             Address of the Treasury\\n     * @param _lendingPool          Address of the LendingPool\\n     */\\n    function initialize(\\n        ITreasury _treasury,\\n        IDonationMiner _donationMiner,\\n        ILendingPool _lendingPool,\\n        address[] memory _tokenListAddresses\\n    ) public initializer {\\n        require(address(_treasury) != address(0), \\\"Deposit::initialize: invalid _treasury address\\\");\\n        require(\\n            address(_lendingPool) != address(0),\\n            \\\"Deposit::initialize: invalid _lendingPool address\\\"\\n        );\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        treasury = _treasury;\\n        donationMiner = _donationMiner;\\n        lendingPool = _lendingPool;\\n\\n        uint256 _index;\\n        uint256 _numberOfTokens = _tokenListAddresses.length;\\n        for (; _index < _numberOfTokens; _index++) {\\n            _tokenList.add(_tokenListAddresses[_index]);\\n\\n            IERC20(_tokenListAddresses[_index]).approve(address(lendingPool), type(uint256).max);\\n            IERC20(_tokenListAddresses[_index]).approve(address(donationMiner), type(uint256).max);\\n\\n            emit TokenAdded(_tokenListAddresses[_index]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the current implementation version\\n     */\\n    function getVersion() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function token(address _tokenAddress)\\n        external\\n        view\\n        override\\n        returns (uint256 totalAmount, uint256 depositorListLength)\\n    {\\n        Token storage _token = _tokens[_tokenAddress];\\n\\n        return (_token.totalAmount, _token.depositorList.length());\\n    }\\n\\n    function tokenDepositorListAt(address _tokenAddress, uint256 _index)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _tokens[_tokenAddress].depositorList.at(_index);\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens\\n     *\\n     * @return uint256 number of tokens\\n     */\\n    function tokenListLength() external view override returns (uint256) {\\n        return _tokenList.length();\\n    }\\n\\n    /**\\n     * @notice Returns the address of a token from tokenList\\n     *\\n     * @param _index index of the token\\n     * @return address of the token\\n     */\\n    function tokenListAt(uint256 _index) external view override returns (address) {\\n        return _tokenList.at(_index);\\n    }\\n\\n    /**\\n     * @notice Returns if an address is an accepted token\\n     *\\n     * @param _tokenAddress token address to be checked\\n     * @return bool true if the tokenAddress is an accepted token\\n     */\\n    function isToken(address _tokenAddress) public view override returns (bool) {\\n        return _tokenList.contains(_tokenAddress);\\n    }\\n\\n    function tokenDepositor(address _tokenAddress, address _depositorAddress)\\n        external\\n        view\\n        override\\n        returns (uint256 amount, uint256 scaledBalance)\\n    {\\n        Depositor memory _depositor = _tokens[_tokenAddress].depositors[_depositorAddress];\\n\\n        return (_depositor.amount, _depositor.scaledBalance);\\n    }\\n\\n    /**\\n     * @notice Updates Treasury address\\n     *\\n     * @param _newTreasury address of new treasury contract\\n     */\\n    function updateTreasury(ITreasury _newTreasury) external override onlyOwner {\\n        emit TreasuryUpdated(address(treasury), address(_newTreasury));\\n        treasury = _newTreasury;\\n    }\\n\\n    /**\\n     * @notice Updates DonationMiner address\\n     *\\n     * @param _newDonationMiner address of new donationMiner contract\\n     */\\n    function updateDonationMiner(IDonationMiner _newDonationMiner) external override onlyOwner {\\n        emit DonationMinerUpdated(address(donationMiner), address(_newDonationMiner));\\n        donationMiner = _newDonationMiner;\\n    }\\n\\n    /**\\n     * @notice Updates the LendingPool contract address\\n     *\\n     * @param _newLendingPool address of the new LendingPool contract\\n     */\\n    function updateLendingPool(ILendingPool _newLendingPool) external override onlyOwner {\\n        emit LendingPoolUpdated(address(lendingPool), address(_newLendingPool));\\n        lendingPool = _newLendingPool;\\n    }\\n\\n    function addToken(address _tokenAddress) public override onlyOwner {\\n        require(!isToken(_tokenAddress), \\\"Deposit::addToken: token already added\\\");\\n        require(\\n            treasury.isToken(_tokenAddress),\\n            \\\"Deposit::addToken: it must be a valid treasury token\\\"\\n        );\\n\\n        require(\\n            lendingPool.getReserveData(_tokenAddress).aTokenAddress != address(0),\\n            \\\"Deposit::addToken: it must be a valid lendingPool token\\\"\\n        );\\n\\n        _tokenList.add(_tokenAddress);\\n\\n        IERC20(_tokenAddress).approve(address(lendingPool), type(uint256).max);\\n        IERC20(_tokenAddress).approve(address(donationMiner), type(uint256).max);\\n\\n        emit TokenAdded(_tokenAddress);\\n    }\\n\\n    function removeToken(address _tokenAddress) external override onlyOwner {\\n        require(isToken(_tokenAddress), \\\"Deposit::removeToken: this is not a token\\\");\\n\\n        _tokenList.remove(_tokenAddress);\\n        emit TokenRemoved(_tokenAddress);\\n    }\\n\\n    function deposit(address _tokenAddress, uint256 _amount)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        require(isToken(_tokenAddress), \\\"Deposit::deposit: this is not a token\\\");\\n        require(_amount > 0, \\\"Deposit::deposit: invalid amount\\\");\\n\\n        IERC20Upgradeable(_tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        IAToken aToken = IAToken(lendingPool.getReserveData(_tokenAddress).aTokenAddress);\\n\\n        uint256 _beforeScaledBalance = aToken.scaledBalanceOf(address(this));\\n        lendingPool.deposit(_tokenAddress, _amount, address(this), 0);\\n\\n        uint256 _afterScaledBalance = aToken.scaledBalanceOf(address(this));\\n\\n        Token storage _token = _tokens[_tokenAddress];\\n        _token.depositorList.add(msg.sender);\\n        _token.totalAmount += _amount;\\n\\n        Depositor storage _depositor = _token.depositors[msg.sender];\\n        _depositor.amount += _amount;\\n        _depositor.scaledBalance += _afterScaledBalance - _beforeScaledBalance;\\n\\n        emit DepositAdded(msg.sender, _tokenAddress, _amount);\\n    }\\n\\n    function withdraw(address _tokenAddress, uint256 _amount)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        Token storage _token = _tokens[_tokenAddress];\\n        Depositor storage _depositor = _token.depositors[msg.sender];\\n\\n        require(_amount <= _depositor.amount, \\\"Deposit::withdraw: invalid amount\\\");\\n\\n        if (_amount == _depositor.amount) {\\n            _token.depositorList.remove(msg.sender);\\n        }\\n\\n        IAToken aToken = IAToken(lendingPool.getReserveData(_tokenAddress).aTokenAddress);\\n\\n        uint256 _beforeScaledBalance = aToken.scaledBalanceOf(address(this));\\n        uint256 _withdrawScaledBalanceShare = (_amount * _depositor.scaledBalance) /\\n            _depositor.amount;\\n        uint256 _withdrawBalanceShare = (_withdrawScaledBalanceShare *\\n            aToken.balanceOf(address(this))) / _beforeScaledBalance;\\n\\n        uint256 _interest = _withdrawBalanceShare - _amount;\\n\\n        lendingPool.withdraw(_tokenAddress, _amount, msg.sender);\\n        lendingPool.withdraw(_tokenAddress, _interest, address(this));\\n        donationMiner.donate(IERC20(_tokenAddress), _interest, msg.sender);\\n\\n        _token.totalAmount -= _amount;\\n        _depositor.amount -= _amount;\\n        _depositor.scaledBalance -= _withdrawScaledBalanceShare;\\n\\n        //        uint256 _afterScaledBalance = aToken.scaledBalanceOf(address(this));\\n        //        uint256 _diffScaledBalance = _beforeScaledBalance - _afterScaledBalance;\\n        //        uint256 _interest = _diffScaledBalance * aToken.balanceOf(address(this)) / _afterScaledBalance;\\n        //\\n        //        console.log('_beforeScaledBalance: ', _beforeScaledBalance);\\n        //        console.log('_afterScaledBalance: ', _afterScaledBalance);\\n        //        console.log('_diffScaledBalance1: ', _diffScaledBalance);\\n        //        console.log('_diffScaledBalance2: ', _withdrawScaledBalanceShare);\\n        //        console.log('balance: ', aToken.balanceOf(address(this)));\\n        //        console.log('_interest1: ', _interest);\\n        //        console.log('_interest2: ', (_diffScaledBalance *  lendingPool.getReserveNormalizedIncome(_tokenAddress) + 1e27/2) / 1e27);\\n        //        console.log('lendingPool.getReserveNormalizedIncome(address(aToken): ', lendingPool.getReserveNormalizedIncome(_tokenAddress));\\n        //        console.log('_withdrawBalanceShare: ', _withdrawBalanceShare);\\n\\n        emit Withdraw(msg.sender, _tokenAddress, _amount, _interest);\\n    }\\n\\n    function donateInterest(\\n        address _depositorAddress,\\n        address _tokenAddress,\\n        uint256 _amount\\n    ) external override whenNotPaused nonReentrant {\\n        Token storage _token = _tokens[_tokenAddress];\\n        Depositor storage _depositor = _token.depositors[_depositorAddress];\\n\\n        require(_amount <= _depositor.amount, \\\"Deposit::donateInterest: invalid amount\\\");\\n\\n        IAToken aToken = IAToken(lendingPool.getReserveData(_tokenAddress).aTokenAddress);\\n\\n        uint256 _beforeScaledBalance = aToken.scaledBalanceOf(address(this));\\n        uint256 _withdrawScaledBalanceShare = (_amount * _depositor.scaledBalance) /\\n            _depositor.amount;\\n        uint256 _withdrawBalanceShare = (_withdrawScaledBalanceShare *\\n            aToken.balanceOf(address(this))) / _beforeScaledBalance;\\n\\n        uint256 _interest = _withdrawBalanceShare - _amount;\\n\\n        lendingPool.withdraw(_tokenAddress, _interest, address(this));\\n\\n        uint256 _afterScaledBalance = aToken.scaledBalanceOf(address(this));\\n\\n        donationMiner.donate(IERC20(_tokenAddress), _interest, _depositorAddress);\\n\\n        _depositor.scaledBalance -= _beforeScaledBalance - _afterScaledBalance;\\n\\n        emit DonateInterest(_depositorAddress, _tokenAddress, _amount, _interest);\\n    }\\n\\n    function interest(\\n        address _depositorAddress,\\n        address _tokenAddress,\\n        uint256 _amount\\n    ) external view override returns (uint256) {\\n        Token storage _token = _tokens[_tokenAddress];\\n        Depositor storage _depositor = _token.depositors[_depositorAddress];\\n\\n        require(_amount <= _depositor.amount, \\\"Deposit::donateInterest: invalid amount\\\");\\n\\n        IAToken aToken = IAToken(lendingPool.getReserveData(_tokenAddress).aTokenAddress);\\n\\n        uint256 _beforeScaledBalance = aToken.scaledBalanceOf(address(this));\\n        uint256 _withdrawScaledBalanceShare = (_amount * _depositor.scaledBalance) /\\n            _depositor.amount;\\n        uint256 _withdrawBalanceShare = (_withdrawScaledBalanceShare *\\n            aToken.balanceOf(address(this))) / _beforeScaledBalance;\\n\\n        return _withdrawBalanceShare - _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x4a95086fc7754665b0547fcb81dfc254e68c8b91fa00423d5ff56d012d525246\",\"license\":\"Apache-2.0\"},\"contracts/deposit/interfaces/DepositStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"./IDeposit.sol\\\";\\n\\n/**\\n * @title Storage for Deposit\\n * @notice For future upgrades, do not change DepositStorageV1. Create a new\\n * contract which implements DepositStorageV1 and following the naming convention\\n * DepositStorageVx.\\n */\\nabstract contract DepositStorageV1 is IDeposit {\\n    ITreasury public override treasury;\\n    IDonationMiner public override donationMiner;\\n    ILendingPool public override lendingPool;\\n    EnumerableSet.AddressSet internal _tokenList;\\n    mapping(address => Token) internal _tokens;\\n}\\n\",\"keccak256\":\"0x8bb845a01f7149b2be77f855280a0827c98f5e57e1a463052ee0d2e7dcc9ffa6\",\"license\":\"Apache-2.0\"},\"contracts/deposit/interfaces/IDeposit.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../../externalInterfaces/aave/ILendingPool.sol\\\";\\nimport \\\"../../donationMiner/interfaces/IDonationMiner.sol\\\";\\n\\ninterface IDeposit {\\n    struct Depositor {\\n        uint256 amount;\\n        uint256 scaledBalance;\\n    }\\n\\n    struct Token {\\n        uint256 totalAmount;\\n        EnumerableSet.AddressSet depositorList;\\n        mapping(address => Depositor) depositors;\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function lendingPool() external view returns(ILendingPool);\\n    function treasury() external view returns (ITreasury);\\n    function donationMiner() external view returns (IDonationMiner);\\n    function token(address _tokenAddress) external view returns(uint256 totalAmount, uint256 depositorListLength);\\n    function tokenDepositorListAt(address _tokenAddress, uint256 _index) external view returns(address);\\n    function tokenListLength() external view returns (uint256);\\n    function tokenListAt(uint256 _index) external view returns (address);\\n    function isToken(address _tokenAddress) external view returns (bool);\\n    function tokenDepositor(address _tokenAddress, address _depositorAddress)\\n        external view returns (uint256 amount, uint256 scaledBalance);\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateDonationMiner(IDonationMiner _newDonationMiner) external;\\n    function updateLendingPool(ILendingPool _lendingPool) external;\\n    function addToken(address _tokenAddress) external;\\n    function removeToken(address _tokenAddress) external;\\n    function deposit(address _tokenAddress, uint256 _amount) external;\\n    function withdraw(address _tokenAddress, uint256 _amount) external;\\n    function donateInterest(address _depositorAddress, address _tokenAddress, uint256 _amount) external;\\n    function interest(address _depositorAddress, address _tokenAddress, uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1dd0b5f2781a0b36600616b05cb2b408221423659ede529f8cdb809183a89bd8\",\"license\":\"Apache-2.0\"},\"contracts/donationMiner/interfaces/IDonationMiner.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"../../treasury/interfaces/ITreasury.sol\\\";\\nimport \\\"../../staking/interfaces/IStaking.sol\\\";\\n\\ninterface IDonationMiner {\\n    struct RewardPeriod {\\n        //reward tokens created per block\\n        uint256 rewardPerBlock;\\n        //reward tokens from previous periods + reward tokens from this reward period\\n        uint256 rewardAmount;\\n        //block number at which reward period starts\\n        uint256 startBlock;\\n        //block number at which reward period ends\\n        uint256 endBlock;\\n        //total of donations for this rewardPeriod\\n        uint256 donationsAmount;\\n        //amounts donated by every donor in this rewardPeriod\\n        mapping(address => uint256) donorAmounts;\\n        uint256 againstPeriods;\\n        //total stake amount at the end of this rewardPeriod\\n        uint256 stakesAmount;\\n        //ratio between 1 cUSD donated and 1 PACT staked\\n        uint256 stakingDonationRatio;\\n        //true if user has staked/unstaked in this reward period\\n        mapping(address => bool) hasSetStakeAmount;\\n        //stake amount of a user at the end of this reward period;\\n        //if a user doesn't stake/unstake in a reward period,\\n        //              this value will remain 0 (and hasSetStakeAmount will be false)\\n        //if hasNewStakeAmount is false it means the donorStakeAmount\\n        //              is the same as the last reward period where hasSetStakeAmount is true\\n        mapping(address => uint256) donorStakeAmounts;\\n    }\\n\\n    struct Donor {\\n        uint256 lastClaim;  //last reward period index for which the donor has claimed the reward; used until v2\\n        uint256 rewardPeriodsCount; //total number of reward periods in which the donor donated\\n        mapping(uint256 => uint256) rewardPeriods; //list of all reward period ids in which the donor donated\\n        uint256 lastClaimPeriod; //last reward period id for which the donor has claimed the reward\\n    }\\n\\n    struct Donation {\\n        address donor;  //address of the donner\\n        address target;  //address of the receiver (community or treasury)\\n        uint256 rewardPeriod;  //number of the reward period in which the donation was made\\n        uint256 blockNumber;  //number of the block in which the donation was executed\\n        uint256 amount;  //the convertedAmount value\\n        IERC20 token;  //address of the token\\n        uint256 initialAmount;  //number of tokens donated\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function cUSD() external view returns (IERC20);\\n    function PACT() external view returns (IERC20);\\n    function treasury() external view returns (ITreasury);\\n    function staking() external view returns (IStaking);\\n    function rewardPeriodSize() external view returns (uint256);\\n    function decayNumerator() external view returns (uint256);\\n    function decayDenominator() external view returns (uint256);\\n    function stakingDonationRatio() external view returns (uint256);\\n    function communityDonationRatio() external view returns (uint256);\\n    function rewardPeriodCount() external view returns (uint256);\\n    function donationCount() external view returns (uint256);\\n    function rewardPeriods(uint256 _period) external view returns (\\n        uint256 rewardPerBlock,\\n        uint256 rewardAmount,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        uint256 donationsAmount,\\n        uint256 againstPeriods,\\n        uint256 stakesAmount,\\n        uint256 stakingDonationRatio\\n\\n);\\n    function rewardPeriodDonorAmount(uint256 _period, address _donor) external view returns (uint256);\\n    function rewardPeriodDonorStakeAmounts(uint256 _period, address _donor) external view returns (uint256);\\n    function donors(address _donor) external view returns (\\n        uint256 rewardPeriodsCount,\\n        uint256 lastClaim,\\n        uint256 lastClaimPeriod\\n    );\\n    function donorRewardPeriod(address _donor, uint256 _rewardPeriodIndex) external view returns (uint256);\\n    function donations(uint256 _index) external view returns (\\n        address donor,\\n        address target,\\n        uint256 rewardPeriod,\\n        uint256 blockNumber,\\n        uint256 amount,\\n        IERC20 token,\\n        uint256 initialAmount\\n    );\\n    function claimDelay() external view returns (uint256);\\n    function againstPeriods() external view returns (uint256);\\n    function updateRewardPeriodParams(\\n        uint256 _newRewardPeriodSize,\\n        uint256 _newDecayNumerator,\\n        uint256 _newDecayDenominator\\n    ) external;\\n    function updateClaimDelay(uint256 _newClaimDelay) external;\\n    function updateStakingDonationRatio(uint256 _newStakingDonationRatio) external;\\n    function updateCommunityDonationRatio(uint256 _newCommunityDonationRatio) external;\\n    function updateAgainstPeriods(uint256 _newAgainstPeriods) external;\\n    function updateTreasury(ITreasury _newTreasury) external;\\n    function updateStaking(IStaking _newStaking) external;\\n    function donate(IERC20 _token, uint256 _amount, address _delegateAddress) external;\\n    function donateToCommunity(ICommunity _community, IERC20 _token, uint256 _amount, address _delegateAddress) external;\\n    function claimRewards() external;\\n    function claimRewardsPartial(uint256 _lastPeriodNumber) external;\\n    function stakeRewards() external;\\n    function stakeRewardsPartial(uint256 _lastPeriodNumber) external;\\n    function calculateClaimableRewards(address _donor) external returns (uint256);\\n    function calculateClaimableRewardsByPeriodNumber(address _donor, uint256 _lastPeriodNumber) external returns (uint256);\\n    function estimateClaimableReward(address _donor) external view returns (uint256);\\n    function estimateClaimableRewardAdvance(address _donor) external view returns (uint256);\\n    function estimateClaimableRewardByStaking(address _donor) external view returns (uint256);\\n    function apr(address _stakeholderAddress) external view returns (uint256);\\n    function generalApr() external view returns (uint256);\\n    function lastPeriodsDonations(address _donor) external view returns (uint256 donorAmount, uint256 totalAmount);\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function setStakingAmounts(address _holderAddress, uint256 _holderStakeAmount, uint256 _totalStakesAmount) external;\\n    function currentRewardPeriodNumber() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xe41b912042df37b2bbb1e023b0bb765b449b233cc77f60952d167649dea58e07\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/aave/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x479f56ad11050081b33fd67fa09ae319caf2f385026012369d7fdc327d2ce2ed\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/aave/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20 as IERC20Aave} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\ninterface IAToken is IERC20Aave, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8a5f916e2424b71fe7312a351b9bca3c69fe767d7cb0f6766fd3e521f75c6a89\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/aave/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /*\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset)\\n    external\\n    view\\n    returns (\\n      uint128,\\n      uint128,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x61294ebaecddb805e1852c1ea343ab11a278d56767fb391deb333c507d8019ae\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/aave/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals the decimals of the underlying\\n   * @param aTokenName the name of the aToken\\n   * @param aTokenSymbol the symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the aToken\\n   * @param pool The address of the lending pool where this aToken will be used\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf3e9ce0a251c16c970a90f44faf22e85e1e32fe08002c47416041e8b4729ab00\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from './DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6adb95cac3895665a8ddf616a3090a3f5f00ae9c824a9b3ece69d366ead961fb\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0x959e8aa7c0c65a304e456f10ca82b3bb4adda678295e9c801efc61fe66419b8b\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/aave/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x62572612ea8decc739d2563e32ca06bdabcb420e0dcacd10f5800138509f11c0\",\"license\":\"Apache-2.0\"},\"contracts/externalInterfaces/openzeppelin/IMintableERC20.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IMintableERC20 {\\n    function mint(address _account, uint96 _amount) external;\\n\\n    function burn(address _account, uint96 _amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6a8ca44d8f3ed1a3a8efbb05d249dba811cbab5365c6677f63fe2c50f693391b\",\"license\":\"Apache-2.0\"},\"contracts/governor/impactMarketCouncil/interfaces/IImpactMarketCouncil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\n\\ninterface IImpactMarketCouncil {\\n    struct Proposal {\\n        // Unique id for looking up a proposal\\n        uint256 id;\\n        // Creator of the proposal\\n        address proposer;\\n        // The block at which voting ends: votes must be cast prior to this block\\n        uint256 endBlock;\\n        // Current number of votes in favor of this proposal\\n        uint256 forVotes;\\n        // Current number of votes in opposition to this proposal\\n        uint256 againstVotes;\\n        // Current number of votes for abstaining for this proposal\\n        uint256 abstainVotes;\\n        // Flag marking whether the proposal has been canceled\\n        bool canceled;\\n        // Flag marking whether the proposal has been executed\\n        bool executed;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n        // Whether or not the voter supports the proposal or abstains\\n        uint8 support;\\n        // The number of votes the voter had, which were cast\\n        uint96 votes;\\n    }\\n\\n    /// @notice Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Expired,\\n        Succeeded,\\n        Executed\\n    }\\n}\\n\",\"keccak256\":\"0x9a183c6fc7ec7760170d887fcf026824090dc2f6c4e682b32a4c12ec91fc1667\",\"license\":\"Apache-2.0\"},\"contracts/staking/interfaces/IStaking.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../donationMiner/interfaces/IDonationMiner.sol\\\";\\nimport \\\"../../externalInterfaces/openzeppelin/IMintableERC20.sol\\\";\\n\\ninterface IStaking {\\n    struct Unstake {\\n        uint256 amount;         //amount unstaked\\n        uint256 cooldownBlock;  //first block number that will allow holder to claim this unstake\\n    }\\n\\n    struct Holder {\\n        uint256 amount;          // amount of PACT that are staked by holder\\n        uint256 nextUnstakeId;   //\\n        Unstake[] unstakes;      //list of all unstakes amount\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function updateCooldown(uint256 _newCooldown) external;\\n    function PACT() external view returns (IERC20);\\n    function SPACT() external view returns (IMintableERC20);\\n    function donationMiner() external view returns (IDonationMiner);\\n    function cooldown() external view returns(uint256);\\n    function currentTotalAmount() external view returns(uint256);\\n    function stakeholderAmount(address _holderAddress) external view returns(uint256);\\n    function stakeholder(address _holderAddress) external view returns (uint256 amount, uint256 nextUnstakeId, uint256 unstakeListLength, uint256 unstakedAmount);\\n    function stakeholderUnstakeAt(address _holderAddress, uint256 _unstakeIndex) external view returns (Unstake memory);\\n    function stakeholdersListAt(uint256 _index) external view returns (address);\\n    function stakeholdersListLength() external view returns (uint256);\\n\\n    function stake(address _holder, uint256 _amount) external;\\n    function unstake(uint256 _amount) external;\\n    function claim() external;\\n    function claimPartial(uint256 _lastUnstakeId) external;\\n    function claimAmount(address _holderAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe9fd0aafb94e7a6214a2f6c98d674b2a730efe3a3b3c35722c4f40c62d1aee43\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/ITreasury.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\nimport {IERC20Upgradeable as IERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../community/interfaces/ICommunityAdmin.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\ninterface ITreasury {\\n    struct Token {\\n        uint256 rate;\\n        address[] exchangePath;\\n    }\\n\\n    function getVersion() external pure returns(uint256);\\n    function communityAdmin() external view returns(ICommunityAdmin);\\n    function uniswapRouter() external view returns(IUniswapV2Router);\\n    function updateCommunityAdmin(ICommunityAdmin _communityAdmin) external;\\n    function updateUniswapRouter(IUniswapV2Router _uniswapRouter) external;\\n    function transfer(IERC20 _token, address _to, uint256 _amount) external;\\n    function isToken(address _tokenAddress) external view returns (bool);\\n    function tokenListLength() external view returns (uint256);\\n    function tokenListAt(uint256 _index) external view returns (address);\\n    function tokens(address _tokenAddress) external view returns (uint256 rate, address[] memory exchangePath);\\n    function setToken(address _tokenAddress, uint256 _rate, address[] calldata _exchangePath) external;\\n    function removeToken(address _tokenAddress) external;\\n    function getConvertedAmount(address _tokenAddress, uint256 _amount) external view returns (uint256);\\n    function convertAmount(\\n        address _tokenAddress,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] memory _exchangePath,\\n        uint256 _deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf6337bae44d111efee8edc831b1dd11379e5c5b11dff89404a4d4eecf83bc156\",\"license\":\"Apache-2.0\"},\"contracts/treasury/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function pairFor(address tokenA, address tokenB) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a12eebf4cf3741e1b1a30a4315096ae6d545af2e07a92e544d05739ceb811e9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612b34806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637f51bb1f116100c3578063d48bfca71161007c578063d48bfca714610319578063e36d4f3e1461032c578063e6bfbfd81461033f578063f0367db514610352578063f2fde38b14610365578063f3fef3a31461037857600080fd5b80637f51bb1f146102b457806383912426146102c75780638da5cb5b146102da5780639a552a29146102eb578063a59a9973146102f3578063c89fc9a71461030657600080fd5b806347e7ef241161011557806347e7ef24146102555780635c975abb146102685780635fa7b5841461027357806361d027b3146102865780636d46a1db14610299578063715018a6146102ac57600080fd5b80630b9b1f9a1461015d5780630d8e6e2c1461017257806312cf28841461018857806319f373611461019b57806332b194b5146101be5780633ede2d67146101e9575b600080fd5b61017061016b36600461252c565b61038b565b005b60015b6040519081526020015b60405180910390f35b610175610196366004612580565b61041a565b6101ae6101a936600461252c565b610638565b604051901515815260200161017f565b6101d16101cc3660046127e3565b61064b565b6040516001600160a01b03909116815260200161017f565b6102406101f7366004612548565b6001600160a01b03918216600090815260ce6020908152604080832093909416825260039092018252829020825180840190935280548084526001909101549290910182905291565b6040805192835260208301919091520161017f565b6101706102633660046125c0565b610658565b60655460ff166101ae565b61017061028136600461252c565b610a37565b60c9546101d1906001600160a01b031681565b6102406102a736600461252c565b610b0b565b610170610b3e565b6101706102c236600461252c565b610b74565b6101d16102d53660046125c0565b610bfa565b6033546001600160a01b03166101d1565b610175610c1f565b60cb546101d1906001600160a01b031681565b61017061031436600461252c565b610c30565b61017061032736600461252c565b610cb6565b60ca546101d1906001600160a01b031681565b61017061034d36600461260b565b61107e565b610170610360366004612580565b61148c565b61017061037336600461252c565b6118de565b6101706103863660046125c0565b611979565b6033546001600160a01b031633146103be5760405162461bcd60e51b81526004016103b5906128af565b60405180910390fd5b60cb546040516001600160a01b038084169216907fb8852e851bdabda04c25661cfbfa7b09b3019206382f067a349af593e883214a90600090a360cb80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260ce60209081526040808320938716835260038401909152812080549192918411156104685760405162461bcd60e51b81526004016103b5906128e4565b60cb546040516335ea6a7560e01b81526001600160a01b03878116600483015260009216906335ea6a75906024016101806040518083038186803b1580156104af57600080fd5b505afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e791906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b15801561053057600080fd5b505afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056891906127fb565b8354600185015491925060009161057f9089612a40565b6105899190612a20565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038616906370a082319060240160206040518083038186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060891906127fb565b6106129084612a40565b61061c9190612a20565b90506106288882612a5f565b96505050505050505b9392505050565b600061064560cc83611e39565b92915050565b600061064560cc83611e5b565b60655460ff161561067b5760405162461bcd60e51b81526004016103b590612885565b6002609754141561069e5760405162461bcd60e51b81526004016103b590612976565b60026097556106ac82610638565b6107065760405162461bcd60e51b815260206004820152602560248201527f4465706f7369743a3a6465706f7369743a2074686973206973206e6f742061206044820152643a37b5b2b760d91b60648201526084016103b5565b600081116107565760405162461bcd60e51b815260206004820181905260248201527f4465706f7369743a3a6465706f7369743a20696e76616c696420616d6f756e7460448201526064016103b5565b61076b6001600160a01b038316333084611e67565b60cb546040516335ea6a7560e01b81526001600160a01b03848116600483015260009216906335ea6a75906024016101806040518083038186803b1580156107b257600080fd5b505afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea91906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b91906127fb565b60cb5460405163e8eda9df60e01b81526001600160a01b038781166004830152602482018790523060448301526000606483015292935091169063e8eda9df90608401600060405180830381600087803b1580156108c857600080fd5b505af11580156108dc573d6000803e3d6000fd5b5050604051630ed1279f60e11b8152306004820152600092506001600160a01b0385169150631da24f3e9060240160206040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a91906127fb565b6001600160a01b038616600090815260ce602052604090209091506109826001820133611ec7565b50848160000160008282546109979190612a08565b909155505033600090815260038201602052604081208054909187918391906109c1908490612a08565b909155506109d190508484612a5f565b8160010160008282546109e49190612a08565b90915550506040518681526001600160a01b0388169033907f63d8d7d5e63e9840ec91a12a160d27b7cfab294f6ba070b7359692acfe6b03bf9060200160405180910390a3505060016097555050505050565b6033546001600160a01b03163314610a615760405162461bcd60e51b81526004016103b5906128af565b610a6a81610638565b610ac85760405162461bcd60e51b815260206004820152602960248201527f4465706f7369743a3a72656d6f7665546f6b656e3a2074686973206973206e6f6044820152683a1030903a37b5b2b760b91b60648201526084016103b5565b610ad360cc82611edc565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b6001600160a01b038116600090815260ce602052604081208054829190610b3460018301611ef1565b9250925050915091565b6033546001600160a01b03163314610b685760405162461bcd60e51b81526004016103b5906128af565b610b726000611efb565b565b6033546001600160a01b03163314610b9e5760405162461bcd60e51b81526004016103b5906128af565b60c9546040516001600160a01b038084169216907f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a90600090a360c980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260ce602052604081206106319060010183611e5b565b6000610c2b60cc611ef1565b905090565b6033546001600160a01b03163314610c5a5760405162461bcd60e51b81526004016103b5906128af565b60ca546040516001600160a01b038084169216907f9ee32924c063f6e43d6d525cb33e456e4c81879e8b46e925685714c3273f554990600090a360ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610ce05760405162461bcd60e51b81526004016103b5906128af565b610ce981610638565b15610d455760405162461bcd60e51b815260206004820152602660248201527f4465706f7369743a3a616464546f6b656e3a20746f6b656e20616c726561647960448201526508185919195960d21b60648201526084016103b5565b60c9546040516319f3736160e01b81526001600160a01b038381166004830152909116906319f373619060240160206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc291906125eb565b610e2b5760405162461bcd60e51b815260206004820152603460248201527f4465706f7369743a3a616464546f6b656e3a206974206d7573742062652061206044820152733b30b634b2103a3932b0b9bab93c903a37b5b2b760611b60648201526084016103b5565b60cb546040516335ea6a7560e01b81526001600160a01b03838116600483015260009216906335ea6a75906024016101806040518083038186803b158015610e7257600080fd5b505afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa91906126f7565b60e001516001600160a01b03161415610f2b5760405162461bcd60e51b815260206004820152603760248201527f4465706f7369743a3a616464546f6b656e3a206974206d75737420626520612060448201527f76616c6964206c656e64696e67506f6f6c20746f6b656e00000000000000000060648201526084016103b5565b610f3660cc82611ec7565b5060cb5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b390604401602060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe91906125eb565b5060ca5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b390604401602060405180830381600087803b15801561100e57600080fd5b505af1158015611022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104691906125eb565b506040516001600160a01b038216907f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a490600090a250565b600054610100900460ff166110995760005460ff161561109d565b303b155b6111005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103b5565b600054610100900460ff16158015611122576000805461ffff19166101011790555b6001600160a01b03851661118f5760405162461bcd60e51b815260206004820152602e60248201527f4465706f7369743a3a696e697469616c697a653a20696e76616c6964205f747260448201526d656173757279206164647265737360901b60648201526084016103b5565b6001600160a01b0383166111ff5760405162461bcd60e51b815260206004820152603160248201527f4465706f7369743a3a696e697469616c697a653a20696e76616c6964205f6c656044820152706e64696e67506f6f6c206164647265737360781b60648201526084016103b5565b611207611f4d565b61120f611f84565b611217611fbb565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560cb80549286169290911691909117905581516000905b808210156114715761129d84838151811061128557634e487b7160e01b600052603260045260246000fd5b602002602001015160cc611ec790919063ffffffff16565b508382815181106112be57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160cb5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134f91906125eb565b5083828151811061137057634e487b7160e01b600052603260045260246000fd5b602090810291909101015160ca5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140191906125eb565b5083828151811061142257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a28161146981612aa2565b92505061125a565b50508015611485576000805461ff00191690555b5050505050565b60655460ff16156114af5760405162461bcd60e51b81526004016103b590612885565b600260975414156114d25760405162461bcd60e51b81526004016103b590612976565b60026097556001600160a01b03808316600090815260ce60209081526040808320938716835260038401909152902080548311156115225760405162461bcd60e51b81526004016103b5906128e4565b60cb546040516335ea6a7560e01b81526001600160a01b03868116600483015260009216906335ea6a75906024016101806040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a191906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b1580156115ea57600080fd5b505afa1580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162291906127fb565b835460018501549192506000916116399088612a40565b6116439190612a20565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038616906370a082319060240160206040518083038186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c291906127fb565b6116cc9084612a40565b6116d69190612a20565b905060006116e48883612a5f565b60cb54604051631a4ca37b60e21b81529192506001600160a01b0316906369328dec90611719908c908590309060040161282f565b602060405180830381600087803b15801561173357600080fd5b505af1158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b91906127fb565b50604051630ed1279f60e11b81523060048201526000906001600160a01b03871690631da24f3e9060240160206040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e691906127fb565b905060ca60009054906101000a90046001600160a01b03166001600160a01b0316630d1e9b4a8b848e6040518463ffffffff1660e01b815260040161182d9392919061282f565b600060405180830381600087803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b50505050808561186b9190612a5f565b87600101600082825461187e9190612a5f565b9091555050604080518a8152602081018490526001600160a01b03808d1692908e16917f29bac1f9afd8b3833ccc04f651c41fc95c0dde3b19f65d1f2a334afa69e8166a910160405180910390a350506001609755505050505050505050565b6033546001600160a01b031633146119085760405162461bcd60e51b81526004016103b5906128af565b6001600160a01b03811661196d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b5565b61197681611efb565b50565b60655460ff161561199c5760405162461bcd60e51b81526004016103b590612885565b600260975414156119bf5760405162461bcd60e51b81526004016103b590612976565b60026097556001600160a01b038216600090815260ce60209081526040808320338452600381019092529091208054831115611a475760405162461bcd60e51b815260206004820152602160248201527f4465706f7369743a3a77697468647261773a20696e76616c696420616d6f756e6044820152601d60fa1b60648201526084016103b5565b8054831415611a5f57611a5d6001830133611edc565b505b60cb546040516335ea6a7560e01b81526001600160a01b03868116600483015260009216906335ea6a75906024016101806040518083038186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b158015611b2757600080fd5b505afa158015611b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5f91906127fb565b83546001850154919250600091611b769088612a40565b611b809190612a20565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038616906370a082319060240160206040518083038186803b158015611bc757600080fd5b505afa158015611bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff91906127fb565b611c099084612a40565b611c139190612a20565b90506000611c218883612a5f565b60cb54604051631a4ca37b60e21b81529192506001600160a01b0316906369328dec90611c56908c908c90339060040161282f565b602060405180830381600087803b158015611c7057600080fd5b505af1158015611c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca891906127fb565b5060cb54604051631a4ca37b60e21b81526001600160a01b03909116906369328dec90611cdd908c908590309060040161282f565b602060405180830381600087803b158015611cf757600080fd5b505af1158015611d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2f91906127fb565b5060ca5460405163068f4da560e11b81526001600160a01b0390911690630d1e9b4a90611d64908c908590339060040161282f565b600060405180830381600087803b158015611d7e57600080fd5b505af1158015611d92573d6000803e3d6000fd5b5050505087876000016000828254611daa9190612a5f565b9091555050855488908790600090611dc3908490612a5f565b9250508190555082866001016000828254611dde9190612a5f565b909155505060408051898152602081018390526001600160a01b038b169133917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567910160405180910390a35050600160975550505050505050565b6001600160a01b03811660009081526001830160205260408120541515610631565b60006106318383611fea565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611ec1908590612022565b50505050565b6000610631836001600160a01b0384166120f9565b6000610631836001600160a01b038416612148565b6000610645825490565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611f745760405162461bcd60e51b81526004016103b59061292b565b611f7c612265565b610b7261228c565b600054610100900460ff16611fab5760405162461bcd60e51b81526004016103b59061292b565b611fb3612265565b610b726122bc565b600054610100900460ff16611fe25760405162461bcd60e51b81526004016103b59061292b565b610b726122ef565b600082600001828154811061200f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000612077826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661231d9092919063ffffffff16565b8051909150156120f4578080602001905181019061209591906125eb565b6120f45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103b5565b505050565b600081815260018301602052604081205461214057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610645565b506000610645565b6000818152600183016020526040812054801561225b57600061216c600183612a5f565b855490915060009061218090600190612a5f565b90508181146122015760008660000182815481106121ae57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106121df57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061222057634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610645565b6000915050610645565b600054610100900460ff16610b725760405162461bcd60e51b81526004016103b59061292b565b600054610100900460ff166122b35760405162461bcd60e51b81526004016103b59061292b565b610b7233611efb565b600054610100900460ff166122e35760405162461bcd60e51b81526004016103b59061292b565b6065805460ff19169055565b600054610100900460ff166123165760405162461bcd60e51b81526004016103b59061292b565b6001609755565b606061232c8484600085612334565b949350505050565b6060824710156123955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103b5565b843b6123e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b5565b600080866001600160a01b031685876040516123ff9190612813565b60006040518083038185875af1925050503d806000811461243c576040519150601f19603f3d011682016040523d82523d6000602084013e612441565b606091505b509150915061245182828661245c565b979650505050505050565b6060831561246b575081610631565b82511561247b5782518084602001fd5b8160405162461bcd60e51b81526004016103b59190612852565b80516124a081612ae9565b919050565b6000602082840312156124b6578081fd5b6040516020810181811067ffffffffffffffff821117156124d9576124d9612ad3565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff811681146124a057600080fd5b805164ffffffffff811681146124a057600080fd5b805160ff811681146124a057600080fd5b60006020828403121561253d578081fd5b813561063181612ae9565b6000806040838503121561255a578081fd5b823561256581612ae9565b9150602083013561257581612ae9565b809150509250929050565b600080600060608486031215612594578081fd5b833561259f81612ae9565b925060208401356125af81612ae9565b929592945050506040919091013590565b600080604083850312156125d2578182fd5b82356125dd81612ae9565b946020939093013593505050565b6000602082840312156125fc578081fd5b81518015158114610631578182fd5b60008060008060808587031215612620578081fd5b843561262b81612ae9565b935060208581013561263c81612ae9565b9350604086013561264c81612ae9565b9250606086013567ffffffffffffffff80821115612668578384fd5b818801915088601f83011261267b578384fd5b81358181111561268d5761268d612ad3565b8060051b915061269e8483016129d7565b8181528481019084860184860187018d10156126b8578788fd5b8795505b838610156126e657803594506126d185612ae9565b848352600195909501949186019186016126bc565b50989b979a50959850505050505050565b60006101808284031215612709578081fd5b6127116129ad565b61271b84846124a5565b8152612729602084016124e6565b602082015261273a604084016124e6565b604082015261274b606084016124e6565b606082015261275c608084016124e6565b608082015261276d60a084016124e6565b60a082015261277e60c08401612506565b60c082015261278f60e08401612495565b60e08201526101006127a2818501612495565b908201526101206127b4848201612495565b908201526101406127c6848201612495565b908201526101606127d884820161251b565b908201529392505050565b6000602082840312156127f4578081fd5b5035919050565b60006020828403121561280c578081fd5b5051919050565b60008251612825818460208701612a76565b9190910192915050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020815260008251806020840152612871816040850160208701612a76565b601f01601f19169190910160400192915050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f4465706f7369743a3a646f6e617465496e7465726573743a20696e76616c696460408201526608185b5bdd5b9d60ca1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051610180810167ffffffffffffffff811182821017156129d1576129d1612ad3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a0057612a00612ad3565b604052919050565b60008219821115612a1b57612a1b612abd565b500190565b600082612a3b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612a5a57612a5a612abd565b500290565b600082821015612a7157612a71612abd565b500390565b60005b83811015612a91578181015183820152602001612a79565b83811115611ec15750506000910152565b6000600019821415612ab657612ab6612abd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461197657600080fdfea264697066735822122013af2458f075989876465212728a9c1ab3e60b12298a194e960053965899493a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80637f51bb1f116100c3578063d48bfca71161007c578063d48bfca714610319578063e36d4f3e1461032c578063e6bfbfd81461033f578063f0367db514610352578063f2fde38b14610365578063f3fef3a31461037857600080fd5b80637f51bb1f146102b457806383912426146102c75780638da5cb5b146102da5780639a552a29146102eb578063a59a9973146102f3578063c89fc9a71461030657600080fd5b806347e7ef241161011557806347e7ef24146102555780635c975abb146102685780635fa7b5841461027357806361d027b3146102865780636d46a1db14610299578063715018a6146102ac57600080fd5b80630b9b1f9a1461015d5780630d8e6e2c1461017257806312cf28841461018857806319f373611461019b57806332b194b5146101be5780633ede2d67146101e9575b600080fd5b61017061016b36600461252c565b61038b565b005b60015b6040519081526020015b60405180910390f35b610175610196366004612580565b61041a565b6101ae6101a936600461252c565b610638565b604051901515815260200161017f565b6101d16101cc3660046127e3565b61064b565b6040516001600160a01b03909116815260200161017f565b6102406101f7366004612548565b6001600160a01b03918216600090815260ce6020908152604080832093909416825260039092018252829020825180840190935280548084526001909101549290910182905291565b6040805192835260208301919091520161017f565b6101706102633660046125c0565b610658565b60655460ff166101ae565b61017061028136600461252c565b610a37565b60c9546101d1906001600160a01b031681565b6102406102a736600461252c565b610b0b565b610170610b3e565b6101706102c236600461252c565b610b74565b6101d16102d53660046125c0565b610bfa565b6033546001600160a01b03166101d1565b610175610c1f565b60cb546101d1906001600160a01b031681565b61017061031436600461252c565b610c30565b61017061032736600461252c565b610cb6565b60ca546101d1906001600160a01b031681565b61017061034d36600461260b565b61107e565b610170610360366004612580565b61148c565b61017061037336600461252c565b6118de565b6101706103863660046125c0565b611979565b6033546001600160a01b031633146103be5760405162461bcd60e51b81526004016103b5906128af565b60405180910390fd5b60cb546040516001600160a01b038084169216907fb8852e851bdabda04c25661cfbfa7b09b3019206382f067a349af593e883214a90600090a360cb80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03808316600090815260ce60209081526040808320938716835260038401909152812080549192918411156104685760405162461bcd60e51b81526004016103b5906128e4565b60cb546040516335ea6a7560e01b81526001600160a01b03878116600483015260009216906335ea6a75906024016101806040518083038186803b1580156104af57600080fd5b505afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e791906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b15801561053057600080fd5b505afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056891906127fb565b8354600185015491925060009161057f9089612a40565b6105899190612a20565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038616906370a082319060240160206040518083038186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060891906127fb565b6106129084612a40565b61061c9190612a20565b90506106288882612a5f565b96505050505050505b9392505050565b600061064560cc83611e39565b92915050565b600061064560cc83611e5b565b60655460ff161561067b5760405162461bcd60e51b81526004016103b590612885565b6002609754141561069e5760405162461bcd60e51b81526004016103b590612976565b60026097556106ac82610638565b6107065760405162461bcd60e51b815260206004820152602560248201527f4465706f7369743a3a6465706f7369743a2074686973206973206e6f742061206044820152643a37b5b2b760d91b60648201526084016103b5565b600081116107565760405162461bcd60e51b815260206004820181905260248201527f4465706f7369743a3a6465706f7369743a20696e76616c696420616d6f756e7460448201526064016103b5565b61076b6001600160a01b038316333084611e67565b60cb546040516335ea6a7560e01b81526001600160a01b03848116600483015260009216906335ea6a75906024016101806040518083038186803b1580156107b257600080fd5b505afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea91906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b91906127fb565b60cb5460405163e8eda9df60e01b81526001600160a01b038781166004830152602482018790523060448301526000606483015292935091169063e8eda9df90608401600060405180830381600087803b1580156108c857600080fd5b505af11580156108dc573d6000803e3d6000fd5b5050604051630ed1279f60e11b8152306004820152600092506001600160a01b0385169150631da24f3e9060240160206040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a91906127fb565b6001600160a01b038616600090815260ce602052604090209091506109826001820133611ec7565b50848160000160008282546109979190612a08565b909155505033600090815260038201602052604081208054909187918391906109c1908490612a08565b909155506109d190508484612a5f565b8160010160008282546109e49190612a08565b90915550506040518681526001600160a01b0388169033907f63d8d7d5e63e9840ec91a12a160d27b7cfab294f6ba070b7359692acfe6b03bf9060200160405180910390a3505060016097555050505050565b6033546001600160a01b03163314610a615760405162461bcd60e51b81526004016103b5906128af565b610a6a81610638565b610ac85760405162461bcd60e51b815260206004820152602960248201527f4465706f7369743a3a72656d6f7665546f6b656e3a2074686973206973206e6f6044820152683a1030903a37b5b2b760b91b60648201526084016103b5565b610ad360cc82611edc565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b6001600160a01b038116600090815260ce602052604081208054829190610b3460018301611ef1565b9250925050915091565b6033546001600160a01b03163314610b685760405162461bcd60e51b81526004016103b5906128af565b610b726000611efb565b565b6033546001600160a01b03163314610b9e5760405162461bcd60e51b81526004016103b5906128af565b60c9546040516001600160a01b038084169216907f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a90600090a360c980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038216600090815260ce602052604081206106319060010183611e5b565b6000610c2b60cc611ef1565b905090565b6033546001600160a01b03163314610c5a5760405162461bcd60e51b81526004016103b5906128af565b60ca546040516001600160a01b038084169216907f9ee32924c063f6e43d6d525cb33e456e4c81879e8b46e925685714c3273f554990600090a360ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610ce05760405162461bcd60e51b81526004016103b5906128af565b610ce981610638565b15610d455760405162461bcd60e51b815260206004820152602660248201527f4465706f7369743a3a616464546f6b656e3a20746f6b656e20616c726561647960448201526508185919195960d21b60648201526084016103b5565b60c9546040516319f3736160e01b81526001600160a01b038381166004830152909116906319f373619060240160206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc291906125eb565b610e2b5760405162461bcd60e51b815260206004820152603460248201527f4465706f7369743a3a616464546f6b656e3a206974206d7573742062652061206044820152733b30b634b2103a3932b0b9bab93c903a37b5b2b760611b60648201526084016103b5565b60cb546040516335ea6a7560e01b81526001600160a01b03838116600483015260009216906335ea6a75906024016101806040518083038186803b158015610e7257600080fd5b505afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa91906126f7565b60e001516001600160a01b03161415610f2b5760405162461bcd60e51b815260206004820152603760248201527f4465706f7369743a3a616464546f6b656e3a206974206d75737420626520612060448201527f76616c6964206c656e64696e67506f6f6c20746f6b656e00000000000000000060648201526084016103b5565b610f3660cc82611ec7565b5060cb5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b390604401602060405180830381600087803b158015610f8657600080fd5b505af1158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe91906125eb565b5060ca5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b390604401602060405180830381600087803b15801561100e57600080fd5b505af1158015611022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104691906125eb565b506040516001600160a01b038216907f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a490600090a250565b600054610100900460ff166110995760005460ff161561109d565b303b155b6111005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103b5565b600054610100900460ff16158015611122576000805461ffff19166101011790555b6001600160a01b03851661118f5760405162461bcd60e51b815260206004820152602e60248201527f4465706f7369743a3a696e697469616c697a653a20696e76616c6964205f747260448201526d656173757279206164647265737360901b60648201526084016103b5565b6001600160a01b0383166111ff5760405162461bcd60e51b815260206004820152603160248201527f4465706f7369743a3a696e697469616c697a653a20696e76616c6964205f6c656044820152706e64696e67506f6f6c206164647265737360781b60648201526084016103b5565b611207611f4d565b61120f611f84565b611217611fbb565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560cb80549286169290911691909117905581516000905b808210156114715761129d84838151811061128557634e487b7160e01b600052603260045260246000fd5b602002602001015160cc611ec790919063ffffffff16565b508382815181106112be57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160cb5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134f91906125eb565b5083828151811061137057634e487b7160e01b600052603260045260246000fd5b602090810291909101015160ca5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140191906125eb565b5083828151811061142257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a28161146981612aa2565b92505061125a565b50508015611485576000805461ff00191690555b5050505050565b60655460ff16156114af5760405162461bcd60e51b81526004016103b590612885565b600260975414156114d25760405162461bcd60e51b81526004016103b590612976565b60026097556001600160a01b03808316600090815260ce60209081526040808320938716835260038401909152902080548311156115225760405162461bcd60e51b81526004016103b5906128e4565b60cb546040516335ea6a7560e01b81526001600160a01b03868116600483015260009216906335ea6a75906024016101806040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a191906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b1580156115ea57600080fd5b505afa1580156115fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162291906127fb565b835460018501549192506000916116399088612a40565b6116439190612a20565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038616906370a082319060240160206040518083038186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c291906127fb565b6116cc9084612a40565b6116d69190612a20565b905060006116e48883612a5f565b60cb54604051631a4ca37b60e21b81529192506001600160a01b0316906369328dec90611719908c908590309060040161282f565b602060405180830381600087803b15801561173357600080fd5b505af1158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b91906127fb565b50604051630ed1279f60e11b81523060048201526000906001600160a01b03871690631da24f3e9060240160206040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e691906127fb565b905060ca60009054906101000a90046001600160a01b03166001600160a01b0316630d1e9b4a8b848e6040518463ffffffff1660e01b815260040161182d9392919061282f565b600060405180830381600087803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b50505050808561186b9190612a5f565b87600101600082825461187e9190612a5f565b9091555050604080518a8152602081018490526001600160a01b03808d1692908e16917f29bac1f9afd8b3833ccc04f651c41fc95c0dde3b19f65d1f2a334afa69e8166a910160405180910390a350506001609755505050505050505050565b6033546001600160a01b031633146119085760405162461bcd60e51b81526004016103b5906128af565b6001600160a01b03811661196d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b5565b61197681611efb565b50565b60655460ff161561199c5760405162461bcd60e51b81526004016103b590612885565b600260975414156119bf5760405162461bcd60e51b81526004016103b590612976565b60026097556001600160a01b038216600090815260ce60209081526040808320338452600381019092529091208054831115611a475760405162461bcd60e51b815260206004820152602160248201527f4465706f7369743a3a77697468647261773a20696e76616c696420616d6f756e6044820152601d60fa1b60648201526084016103b5565b8054831415611a5f57611a5d6001830133611edc565b505b60cb546040516335ea6a7560e01b81526001600160a01b03868116600483015260009216906335ea6a75906024016101806040518083038186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade91906126f7565b60e00151604051630ed1279f60e11b81523060048201529091506000906001600160a01b03831690631da24f3e9060240160206040518083038186803b158015611b2757600080fd5b505afa158015611b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5f91906127fb565b83546001850154919250600091611b769088612a40565b611b809190612a20565b6040516370a0823160e01b815230600482015290915060009083906001600160a01b038616906370a082319060240160206040518083038186803b158015611bc757600080fd5b505afa158015611bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff91906127fb565b611c099084612a40565b611c139190612a20565b90506000611c218883612a5f565b60cb54604051631a4ca37b60e21b81529192506001600160a01b0316906369328dec90611c56908c908c90339060040161282f565b602060405180830381600087803b158015611c7057600080fd5b505af1158015611c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca891906127fb565b5060cb54604051631a4ca37b60e21b81526001600160a01b03909116906369328dec90611cdd908c908590309060040161282f565b602060405180830381600087803b158015611cf757600080fd5b505af1158015611d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2f91906127fb565b5060ca5460405163068f4da560e11b81526001600160a01b0390911690630d1e9b4a90611d64908c908590339060040161282f565b600060405180830381600087803b158015611d7e57600080fd5b505af1158015611d92573d6000803e3d6000fd5b5050505087876000016000828254611daa9190612a5f565b9091555050855488908790600090611dc3908490612a5f565b9250508190555082866001016000828254611dde9190612a5f565b909155505060408051898152602081018390526001600160a01b038b169133917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567910160405180910390a35050600160975550505050505050565b6001600160a01b03811660009081526001830160205260408120541515610631565b60006106318383611fea565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611ec1908590612022565b50505050565b6000610631836001600160a01b0384166120f9565b6000610631836001600160a01b038416612148565b6000610645825490565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611f745760405162461bcd60e51b81526004016103b59061292b565b611f7c612265565b610b7261228c565b600054610100900460ff16611fab5760405162461bcd60e51b81526004016103b59061292b565b611fb3612265565b610b726122bc565b600054610100900460ff16611fe25760405162461bcd60e51b81526004016103b59061292b565b610b726122ef565b600082600001828154811061200f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000612077826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661231d9092919063ffffffff16565b8051909150156120f4578080602001905181019061209591906125eb565b6120f45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103b5565b505050565b600081815260018301602052604081205461214057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610645565b506000610645565b6000818152600183016020526040812054801561225b57600061216c600183612a5f565b855490915060009061218090600190612a5f565b90508181146122015760008660000182815481106121ae57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106121df57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061222057634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610645565b6000915050610645565b600054610100900460ff16610b725760405162461bcd60e51b81526004016103b59061292b565b600054610100900460ff166122b35760405162461bcd60e51b81526004016103b59061292b565b610b7233611efb565b600054610100900460ff166122e35760405162461bcd60e51b81526004016103b59061292b565b6065805460ff19169055565b600054610100900460ff166123165760405162461bcd60e51b81526004016103b59061292b565b6001609755565b606061232c8484600085612334565b949350505050565b6060824710156123955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103b5565b843b6123e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b5565b600080866001600160a01b031685876040516123ff9190612813565b60006040518083038185875af1925050503d806000811461243c576040519150601f19603f3d011682016040523d82523d6000602084013e612441565b606091505b509150915061245182828661245c565b979650505050505050565b6060831561246b575081610631565b82511561247b5782518084602001fd5b8160405162461bcd60e51b81526004016103b59190612852565b80516124a081612ae9565b919050565b6000602082840312156124b6578081fd5b6040516020810181811067ffffffffffffffff821117156124d9576124d9612ad3565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff811681146124a057600080fd5b805164ffffffffff811681146124a057600080fd5b805160ff811681146124a057600080fd5b60006020828403121561253d578081fd5b813561063181612ae9565b6000806040838503121561255a578081fd5b823561256581612ae9565b9150602083013561257581612ae9565b809150509250929050565b600080600060608486031215612594578081fd5b833561259f81612ae9565b925060208401356125af81612ae9565b929592945050506040919091013590565b600080604083850312156125d2578182fd5b82356125dd81612ae9565b946020939093013593505050565b6000602082840312156125fc578081fd5b81518015158114610631578182fd5b60008060008060808587031215612620578081fd5b843561262b81612ae9565b935060208581013561263c81612ae9565b9350604086013561264c81612ae9565b9250606086013567ffffffffffffffff80821115612668578384fd5b818801915088601f83011261267b578384fd5b81358181111561268d5761268d612ad3565b8060051b915061269e8483016129d7565b8181528481019084860184860187018d10156126b8578788fd5b8795505b838610156126e657803594506126d185612ae9565b848352600195909501949186019186016126bc565b50989b979a50959850505050505050565b60006101808284031215612709578081fd5b6127116129ad565b61271b84846124a5565b8152612729602084016124e6565b602082015261273a604084016124e6565b604082015261274b606084016124e6565b606082015261275c608084016124e6565b608082015261276d60a084016124e6565b60a082015261277e60c08401612506565b60c082015261278f60e08401612495565b60e08201526101006127a2818501612495565b908201526101206127b4848201612495565b908201526101406127c6848201612495565b908201526101606127d884820161251b565b908201529392505050565b6000602082840312156127f4578081fd5b5035919050565b60006020828403121561280c578081fd5b5051919050565b60008251612825818460208701612a76565b9190910192915050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6020815260008251806020840152612871816040850160208701612a76565b601f01601f19169190910160400192915050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f4465706f7369743a3a646f6e617465496e7465726573743a20696e76616c696460408201526608185b5bdd5b9d60ca1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051610180810167ffffffffffffffff811182821017156129d1576129d1612ad3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a0057612a00612ad3565b604052919050565b60008219821115612a1b57612a1b612abd565b500190565b600082612a3b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612a5a57612a5a612abd565b500290565b600082821015612a7157612a71612abd565b500390565b60005b83811015612a91578181015183820152602001612a79565b83811115611ec15750506000910152565b6000600019821415612ab657612ab6612abd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461197657600080fdfea264697066735822122013af2458f075989876465212728a9c1ab3e60b12298a194e960053965899493a64736f6c63430008040033",
  "devdoc": {
    "events": {
      "DepositAdded(address,address,uint256)": {
        "params": {
          "amount": "Amount of the deposit",
          "depositorAddress": "The address of the depositor that makes the deposit",
          "token": "ERC20 token address"
        }
      },
      "DonateInterest(address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of the withdrawal",
          "depositorAddress": "The address of the depositor",
          "interest": "Interest earned (and donated to DonationMiner)",
          "token": "ERC20 token address"
        }
      },
      "DonationMinerUpdated(address,address)": {
        "params": {
          "newDonationMiner": "New donationMiner address",
          "oldDonationMiner": "Old donationMiner address"
        }
      },
      "LendingPoolUpdated(address,address)": {
        "params": {
          "newLendingPool": "New lendingPool address",
          "oldLendingPool": "Old lendingPool address"
        }
      },
      "TokenAdded(address)": {
        "params": {
          "tokenAddress": "Address of the token"
        }
      },
      "TokenRemoved(address)": {
        "params": {
          "tokenAddress": "Address of the token"
        }
      },
      "TreasuryUpdated(address,address)": {
        "params": {
          "newTreasury": "New treasury address",
          "oldTreasury": "Old treasury address"
        }
      },
      "Withdraw(address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of the withdrawal",
          "depositorAddress": "The address of the depositor that makes the withdrawal",
          "interest": "Interest earned (and donated to DonationMiner)",
          "token": "ERC20 token address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address,address,address,address[])": {
        "params": {
          "_lendingPool": "Address of the LendingPool",
          "_treasury": "Address of the Treasury"
        }
      },
      "isToken(address)": {
        "params": {
          "_tokenAddress": "token address to be checked"
        },
        "returns": {
          "_0": "bool true if the tokenAddress is an accepted token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenListAt(uint256)": {
        "params": {
          "_index": "index of the token"
        },
        "returns": {
          "_0": "address of the token"
        }
      },
      "tokenListLength()": {
        "returns": {
          "_0": "uint256 number of tokens"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDonationMiner(address)": {
        "params": {
          "_newDonationMiner": "address of new donationMiner contract"
        }
      },
      "updateLendingPool(address)": {
        "params": {
          "_newLendingPool": "address of the new LendingPool contract"
        }
      },
      "updateTreasury(address)": {
        "params": {
          "_newTreasury": "address of new treasury contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DepositAdded(address,address,uint256)": {
        "notice": "Triggered when an amount of an ERC20 has been deposited"
      },
      "DonateInterest(address,address,uint256,uint256)": {
        "notice": "Triggered when the interest of an amount of an ERC20 has been donated"
      },
      "DonationMinerUpdated(address,address)": {
        "notice": "Triggered when the donationMiner address has been updated"
      },
      "LendingPoolUpdated(address,address)": {
        "notice": "Triggered when LendingPool has been updated"
      },
      "TokenAdded(address)": {
        "notice": "Triggered when a token has been added"
      },
      "TokenRemoved(address)": {
        "notice": "Triggered when a token has been removed"
      },
      "TreasuryUpdated(address,address)": {
        "notice": "Triggered when the treasury address has been updated"
      },
      "Withdraw(address,address,uint256,uint256)": {
        "notice": "Triggered when an amount of an ERC20 has been withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "getVersion()": {
        "notice": "Returns the current implementation version"
      },
      "initialize(address,address,address,address[])": {
        "notice": "Used to initialize a new DonationMiner contract"
      },
      "isToken(address)": {
        "notice": "Returns if an address is an accepted token"
      },
      "tokenListAt(uint256)": {
        "notice": "Returns the address of a token from tokenList"
      },
      "tokenListLength()": {
        "notice": "Returns the number of tokens"
      },
      "updateDonationMiner(address)": {
        "notice": "Updates DonationMiner address"
      },
      "updateLendingPool(address)": {
        "notice": "Updates the LendingPool contract address"
      },
      "updateTreasury(address)": {
        "notice": "Updates Treasury address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 542,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 545,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1370,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 630,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 721,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 736,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 779,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16315,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "treasury",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(ITreasury)32687"
      },
      {
        "astId": 16319,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "donationMiner",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IDonationMiner)19430"
      },
      {
        "astId": 16323,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "lendingPool",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(ILendingPool)20184"
      },
      {
        "astId": 16326,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "_tokenList",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(AddressSet)5505_storage"
      },
      {
        "astId": 16331,
        "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
        "label": "_tokens",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_struct(Token)16355_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDonationMiner)19430": {
        "encoding": "inplace",
        "label": "contract IDonationMiner",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)20184": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)32687": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Depositor)16344_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDeposit.Depositor)",
        "numberOfBytes": "32",
        "value": "t_struct(Depositor)16344_storage"
      },
      "t_mapping(t_address,t_struct(Token)16355_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDeposit.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)16355_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5505_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5504,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5204_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Depositor)16344_storage": {
        "encoding": "inplace",
        "label": "struct IDeposit.Depositor",
        "members": [
          {
            "astId": 16341,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16343,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "scaledBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5199,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5203,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)16355_storage": {
        "encoding": "inplace",
        "label": "struct IDeposit.Token",
        "members": [
          {
            "astId": 16346,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16349,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "depositorList",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(AddressSet)5505_storage"
          },
          {
            "astId": 16354,
            "contract": "contracts/deposit/DepositImplementation.sol:DepositImplementation",
            "label": "depositors",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Depositor)16344_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}