{
  "language": "Solidity",
  "sources": {
    "contracts/governor/PACTTimelock.sol": {
      "content": "//SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.4;\n\ncontract PACTTimelock {\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint256 indexed newDelay);\n    event CancelTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event ExecuteTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n    event QueueTransaction(\n        bytes32 indexed txHash,\n        address indexed target,\n        uint256 value,\n        string signature,\n        bytes data,\n        uint256 eta\n    );\n\n    uint256 public constant GRACE_PERIOD = 14 days;\n    uint256 public constant MINIMUM_DELAY = 8 hours;\n    uint256 public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint256 public delay;\n\n    mapping(bytes32 => bool) public queuedTransactions;\n\n    constructor(address _admin, uint256 _delay) {\n        require(_delay >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(\n            _delay <= MAXIMUM_DELAY,\n            \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n        );\n\n        admin = _admin;\n        delay = _delay;\n    }\n\n    receive() external payable {}\n\n    function setDelay(uint256 _delay) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(_delay >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(\n            _delay <= MAXIMUM_DELAY,\n            \"Timelock::setDelay: Delay must not exceed maximum delay.\"\n        );\n        delay = _delay;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(\n            msg.sender == pendingAdmin,\n            \"Timelock::acceptAdmin: Call must come from pendingAdmin.\"\n        );\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address _pendingAdmin) public {\n        require(\n            msg.sender == address(this),\n            \"Timelock::setPendingAdmin: Call must come from Timelock.\"\n        );\n        pendingAdmin = _pendingAdmin;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(\n            _eta >= getBlockTimestamp() + delay,\n            \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\n        );\n\n        bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        queuedTransactions[_txHash] = true;\n\n        emit QueueTransaction(_txHash, _target, _value, _signature, _data, _eta);\n        return _txHash;\n    }\n\n    function cancelTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        queuedTransactions[_txHash] = false;\n\n        emit CancelTransaction(_txHash, _target, _value, _signature, _data, _eta);\n    }\n\n    function executeTransaction(\n        address _target,\n        uint256 _value,\n        string memory _signature,\n        bytes memory _data,\n        uint256 _eta\n    ) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\n        require(\n            queuedTransactions[_txHash],\n            \"Timelock::executeTransaction: Transaction hasn't been queued.\"\n        );\n        require(\n            getBlockTimestamp() >= _eta,\n            \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\n        );\n        require(\n            getBlockTimestamp() <= _eta + GRACE_PERIOD,\n            \"Timelock::executeTransaction: Transaction is stale.\"\n        );\n\n        queuedTransactions[_txHash] = false;\n\n        bytes memory _callData;\n\n        if (bytes(_signature).length == 0) {\n            _callData = _data;\n        } else {\n            _callData = abi.encodePacked(bytes4(keccak256(bytes(_signature))), _data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool _success, bytes memory _returnData) = _target.call{value: _value}(_callData);\n        require(_success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(_txHash, _target, _value, _signature, _data, _eta);\n\n        return _returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint256) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}